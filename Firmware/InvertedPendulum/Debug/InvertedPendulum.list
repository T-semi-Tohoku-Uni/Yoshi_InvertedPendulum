
InvertedPendulum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080042c8  080042c8  000142c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004308  08004308  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004308  08004308  00014308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004310  08004310  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004310  08004310  00014310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004314  08004314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000000c  08004324  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08004324  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010fb1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ef  00000000  00000000  00031030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  00033120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c45  00000000  00000000  000340c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d54b  00000000  00000000  00034d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f4d  00000000  00000000  00052250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c208f  00000000  00000000  0006419d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042bc  00000000  00000000  0012622c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0012a4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080042b0 	.word	0x080042b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080042b0 	.word	0x080042b0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fd63 	bl	8000fe2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f80f 	bl	800053e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fafe 	bl	8000b20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000524:	f000 fab0 	bl	8000a88 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000528:	f000 f906 	bl	8000738 <MX_TIM2_Init>
  MX_TIM3_Init();
 800052c:	f000 f986 	bl	800083c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000530:	f000 f852 	bl	80005d8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000534:	f000 f9d8 	bl	80008e8 <MX_TIM4_Init>
  MX_TIM17_Init();
 8000538:	f000 fa2c 	bl	8000994 <MX_TIM17_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	e7fe      	b.n	800053c <main+0x28>

0800053e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b094      	sub	sp, #80	; 0x50
 8000542:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000544:	f107 0318 	add.w	r3, r7, #24
 8000548:	2238      	movs	r2, #56	; 0x38
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f003 fe83 	bl	8004258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000564:	f001 f82c 	bl	80015c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000572:	2340      	movs	r3, #64	; 0x40
 8000574:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057a:	2302      	movs	r3, #2
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800057e:	2301      	movs	r3, #1
 8000580:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000582:	230a      	movs	r3, #10
 8000584:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0318 	add.w	r3, r7, #24
 8000596:	4618      	mov	r0, r3
 8000598:	f001 f8b6 	bl	8001708 <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80005a2:	f000 fafd 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2303      	movs	r3, #3
 80005ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2102      	movs	r1, #2
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fbba 	bl	8001d38 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005ca:	f000 fae9 	bl	8000ba0 <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3750      	adds	r7, #80	; 0x50
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b09c      	sub	sp, #112	; 0x70
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
 8000608:	615a      	str	r2, [r3, #20]
 800060a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2234      	movs	r2, #52	; 0x34
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fe20 	bl	8004258 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000618:	4b45      	ldr	r3, [pc, #276]	; (8000730 <MX_TIM1_Init+0x158>)
 800061a:	4a46      	ldr	r2, [pc, #280]	; (8000734 <MX_TIM1_Init+0x15c>)
 800061c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800061e:	4b44      	ldr	r3, [pc, #272]	; (8000730 <MX_TIM1_Init+0x158>)
 8000620:	2200      	movs	r2, #0
 8000622:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000624:	4b42      	ldr	r3, [pc, #264]	; (8000730 <MX_TIM1_Init+0x158>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800062a:	4b41      	ldr	r3, [pc, #260]	; (8000730 <MX_TIM1_Init+0x158>)
 800062c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000630:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000632:	4b3f      	ldr	r3, [pc, #252]	; (8000730 <MX_TIM1_Init+0x158>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000638:	4b3d      	ldr	r3, [pc, #244]	; (8000730 <MX_TIM1_Init+0x158>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063e:	4b3c      	ldr	r3, [pc, #240]	; (8000730 <MX_TIM1_Init+0x158>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000644:	483a      	ldr	r0, [pc, #232]	; (8000730 <MX_TIM1_Init+0x158>)
 8000646:	f001 ff83 	bl	8002550 <HAL_TIM_Base_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000650:	f000 faa6 	bl	8000ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000658:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800065a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800065e:	4619      	mov	r1, r3
 8000660:	4833      	ldr	r0, [pc, #204]	; (8000730 <MX_TIM1_Init+0x158>)
 8000662:	f002 f9e7 	bl	8002a34 <HAL_TIM_ConfigClockSource>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800066c:	f000 fa98 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000670:	482f      	ldr	r0, [pc, #188]	; (8000730 <MX_TIM1_Init+0x158>)
 8000672:	f001 ffc4 	bl	80025fe <HAL_TIM_PWM_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800067c:	f000 fa90 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000680:	2300      	movs	r3, #0
 8000682:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000684:	2300      	movs	r3, #0
 8000686:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000688:	2300      	movs	r3, #0
 800068a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800068c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000690:	4619      	mov	r1, r3
 8000692:	4827      	ldr	r0, [pc, #156]	; (8000730 <MX_TIM1_Init+0x158>)
 8000694:	f002 feea 	bl	800346c <HAL_TIMEx_MasterConfigSynchronization>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800069e:	f000 fa7f 	bl	8000ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a2:	2360      	movs	r3, #96	; 0x60
 80006a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006aa:	2300      	movs	r3, #0
 80006ac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006ae:	2300      	movs	r3, #0
 80006b0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006b6:	2300      	movs	r3, #0
 80006b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006ba:	2300      	movs	r3, #0
 80006bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006c2:	2200      	movs	r2, #0
 80006c4:	4619      	mov	r1, r3
 80006c6:	481a      	ldr	r0, [pc, #104]	; (8000730 <MX_TIM1_Init+0x158>)
 80006c8:	f002 f8a0 	bl	800280c <HAL_TIM_PWM_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80006d2:	f000 fa65 	bl	8000ba0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000706:	2300      	movs	r3, #0
 8000708:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <MX_TIM1_Init+0x158>)
 8000714:	f002 ff2c 	bl	8003570 <HAL_TIMEx_ConfigBreakDeadTime>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800071e:	f000 fa3f 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000722:	4803      	ldr	r0, [pc, #12]	; (8000730 <MX_TIM1_Init+0x158>)
 8000724:	f000 fb20 	bl	8000d68 <HAL_TIM_MspPostInit>

}
 8000728:	bf00      	nop
 800072a:	3770      	adds	r7, #112	; 0x70
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000028 	.word	0x20000028
 8000734:	40012c00 	.word	0x40012c00

08000738 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08e      	sub	sp, #56	; 0x38
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000758:	463b      	mov	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
 8000766:	615a      	str	r2, [r3, #20]
 8000768:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800076a:	4b33      	ldr	r3, [pc, #204]	; (8000838 <MX_TIM2_Init+0x100>)
 800076c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000770:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000772:	4b31      	ldr	r3, [pc, #196]	; (8000838 <MX_TIM2_Init+0x100>)
 8000774:	224f      	movs	r2, #79	; 0x4f
 8000776:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <MX_TIM2_Init+0x100>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800077e:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <MX_TIM2_Init+0x100>)
 8000780:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000784:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <MX_TIM2_Init+0x100>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078c:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <MX_TIM2_Init+0x100>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000792:	4829      	ldr	r0, [pc, #164]	; (8000838 <MX_TIM2_Init+0x100>)
 8000794:	f001 fedc 	bl	8002550 <HAL_TIM_Base_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800079e:	f000 f9ff 	bl	8000ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ac:	4619      	mov	r1, r3
 80007ae:	4822      	ldr	r0, [pc, #136]	; (8000838 <MX_TIM2_Init+0x100>)
 80007b0:	f002 f940 	bl	8002a34 <HAL_TIM_ConfigClockSource>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80007ba:	f000 f9f1 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007be:	481e      	ldr	r0, [pc, #120]	; (8000838 <MX_TIM2_Init+0x100>)
 80007c0:	f001 ff1d 	bl	80025fe <HAL_TIM_PWM_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80007ca:	f000 f9e9 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4816      	ldr	r0, [pc, #88]	; (8000838 <MX_TIM2_Init+0x100>)
 80007de:	f002 fe45 	bl	800346c <HAL_TIMEx_MasterConfigSynchronization>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80007e8:	f000 f9da 	bl	8000ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ec:	2360      	movs	r3, #96	; 0x60
 80007ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	4619      	mov	r1, r3
 8000802:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_TIM2_Init+0x100>)
 8000804:	f002 f802 	bl	800280c <HAL_TIM_PWM_ConfigChannel>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800080e:	f000 f9c7 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000812:	463b      	mov	r3, r7
 8000814:	2204      	movs	r2, #4
 8000816:	4619      	mov	r1, r3
 8000818:	4807      	ldr	r0, [pc, #28]	; (8000838 <MX_TIM2_Init+0x100>)
 800081a:	f001 fff7 	bl	800280c <HAL_TIM_PWM_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000824:	f000 f9bc 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <MX_TIM2_Init+0x100>)
 800082a:	f000 fa9d 	bl	8000d68 <HAL_TIM_MspPostInit>

}
 800082e:	bf00      	nop
 8000830:	3738      	adds	r7, #56	; 0x38
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000074 	.word	0x20000074

0800083c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	; 0x30
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2224      	movs	r2, #36	; 0x24
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f003 fd04 	bl	8004258 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_TIM3_Init+0xa4>)
 800085c:	4a21      	ldr	r2, [pc, #132]	; (80008e4 <MX_TIM3_Init+0xa8>)
 800085e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000860:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_TIM3_Init+0xa4>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <MX_TIM3_Init+0xa4>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_TIM3_Init+0xa4>)
 800086e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000872:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_TIM3_Init+0xa4>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_TIM3_Init+0xa4>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000880:	2301      	movs	r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000888:	2301      	movs	r3, #1
 800088a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000898:	2301      	movs	r3, #1
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4619      	mov	r1, r3
 80008aa:	480d      	ldr	r0, [pc, #52]	; (80008e0 <MX_TIM3_Init+0xa4>)
 80008ac:	f001 ff08 	bl	80026c0 <HAL_TIM_Encoder_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80008b6:	f000 f973 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008c2:	463b      	mov	r3, r7
 80008c4:	4619      	mov	r1, r3
 80008c6:	4806      	ldr	r0, [pc, #24]	; (80008e0 <MX_TIM3_Init+0xa4>)
 80008c8:	f002 fdd0 	bl	800346c <HAL_TIMEx_MasterConfigSynchronization>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80008d2:	f000 f965 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	3730      	adds	r7, #48	; 0x30
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000c0 	.word	0x200000c0
 80008e4:	40000400 	.word	0x40000400

080008e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	; 0x30
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	2224      	movs	r2, #36	; 0x24
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f003 fcae 	bl	8004258 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	463b      	mov	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000906:	4b21      	ldr	r3, [pc, #132]	; (800098c <MX_TIM4_Init+0xa4>)
 8000908:	4a21      	ldr	r2, [pc, #132]	; (8000990 <MX_TIM4_Init+0xa8>)
 800090a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800090c:	4b1f      	ldr	r3, [pc, #124]	; (800098c <MX_TIM4_Init+0xa4>)
 800090e:	2200      	movs	r2, #0
 8000910:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b1e      	ldr	r3, [pc, #120]	; (800098c <MX_TIM4_Init+0xa4>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000918:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_TIM4_Init+0xa4>)
 800091a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800091e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_TIM4_Init+0xa4>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_TIM4_Init+0xa4>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800092c:	2301      	movs	r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000934:	2301      	movs	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000944:	2301      	movs	r3, #1
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	4619      	mov	r1, r3
 8000956:	480d      	ldr	r0, [pc, #52]	; (800098c <MX_TIM4_Init+0xa4>)
 8000958:	f001 feb2 	bl	80026c0 <HAL_TIM_Encoder_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000962:	f000 f91d 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800096e:	463b      	mov	r3, r7
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <MX_TIM4_Init+0xa4>)
 8000974:	f002 fd7a 	bl	800346c <HAL_TIMEx_MasterConfigSynchronization>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800097e:	f000 f90f 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	3730      	adds	r7, #48	; 0x30
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000010c 	.word	0x2000010c
 8000990:	40000800 	.word	0x40000800

08000994 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b094      	sub	sp, #80	; 0x50
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800099a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
 80009aa:	615a      	str	r2, [r3, #20]
 80009ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ae:	463b      	mov	r3, r7
 80009b0:	2234      	movs	r2, #52	; 0x34
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f003 fc4f 	bl	8004258 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80009ba:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <MX_TIM17_Init+0xec>)
 80009bc:	4a31      	ldr	r2, [pc, #196]	; (8000a84 <MX_TIM17_Init+0xf0>)
 80009be:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 79;
 80009c0:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <MX_TIM17_Init+0xec>)
 80009c2:	224f      	movs	r2, #79	; 0x4f
 80009c4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c6:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <MX_TIM17_Init+0xec>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 80009cc:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <MX_TIM17_Init+0xec>)
 80009ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009d2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d4:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <MX_TIM17_Init+0xec>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80009da:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <MX_TIM17_Init+0xec>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <MX_TIM17_Init+0xec>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80009e6:	4826      	ldr	r0, [pc, #152]	; (8000a80 <MX_TIM17_Init+0xec>)
 80009e8:	f001 fdb2 	bl	8002550 <HAL_TIM_Base_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80009f2:	f000 f8d5 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80009f6:	4822      	ldr	r0, [pc, #136]	; (8000a80 <MX_TIM17_Init+0xec>)
 80009f8:	f001 fe01 	bl	80025fe <HAL_TIM_PWM_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000a02:	f000 f8cd 	bl	8000ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a06:	2360      	movs	r3, #96	; 0x60
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a12:	2300      	movs	r3, #0
 8000a14:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a26:	2200      	movs	r2, #0
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4815      	ldr	r0, [pc, #84]	; (8000a80 <MX_TIM17_Init+0xec>)
 8000a2c:	f001 feee 	bl	800280c <HAL_TIM_PWM_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000a36:	f000 f8b3 	bl	8000ba0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4807      	ldr	r0, [pc, #28]	; (8000a80 <MX_TIM17_Init+0xec>)
 8000a62:	f002 fd85 	bl	8003570 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000a6c:	f000 f898 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <MX_TIM17_Init+0xec>)
 8000a72:	f000 f979 	bl	8000d68 <HAL_TIM_MspPostInit>

}
 8000a76:	bf00      	nop
 8000a78:	3750      	adds	r7, #80	; 0x50
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000158 	.word	0x20000158
 8000a84:	40014800 	.word	0x40014800

08000a88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000a8e:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <MX_USART2_UART_Init+0x94>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad0:	4811      	ldr	r0, [pc, #68]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000ad2:	f002 fded 	bl	80036b0 <HAL_UART_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000adc:	f000 f860 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000ae4:	f003 faee 	bl	80040c4 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000aee:	f000 f857 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	4808      	ldr	r0, [pc, #32]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000af6:	f003 fb23 	bl	8004140 <HAL_UARTEx_SetRxFifoThreshold>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b00:	f000 f84e 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000b06:	f003 faa4 	bl	8004052 <HAL_UARTEx_DisableFifoMode>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b10:	f000 f846 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200001a4 	.word	0x200001a4
 8000b1c:	40004400 	.word	0x40004400

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <MX_GPIO_Init+0x78>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <MX_GPIO_Init+0x78>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <MX_GPIO_Init+0x78>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_GPIO_Init+0x78>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <MX_GPIO_Init+0x78>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_GPIO_Init+0x78>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6c:	480b      	ldr	r0, [pc, #44]	; (8000b9c <MX_GPIO_Init+0x7c>)
 8000b6e:	f000 fd0f 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_GPIO_Init+0x7c>)
 8000b8c:	f000 fb7e 	bl	800128c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b90:	bf00      	nop
 8000b92:	3720      	adds	r7, #32
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	48000400 	.word	0x48000400

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <Error_Handler+0x8>
	...

08000bac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b087      	sub	sp, #28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <HAL_TIM_Base_MspInit+0x80>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d10c      	bne.n	8000c20 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <HAL_TIM_Base_MspInit+0x84>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0a:	4a1b      	ldr	r2, [pc, #108]	; (8000c78 <HAL_TIM_Base_MspInit+0x84>)
 8000c0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c10:	6613      	str	r3, [r2, #96]	; 0x60
 8000c12:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_TIM_Base_MspInit+0x84>)
 8000c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000c1e:	e022      	b.n	8000c66 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c28:	d10c      	bne.n	8000c44 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <HAL_TIM_Base_MspInit+0x84>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <HAL_TIM_Base_MspInit+0x84>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6593      	str	r3, [r2, #88]	; 0x58
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <HAL_TIM_Base_MspInit+0x84>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
}
 8000c42:	e010      	b.n	8000c66 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM17)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0c      	ldr	r2, [pc, #48]	; (8000c7c <HAL_TIM_Base_MspInit+0x88>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d10b      	bne.n	8000c66 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_TIM_Base_MspInit+0x84>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c52:	4a09      	ldr	r2, [pc, #36]	; (8000c78 <HAL_TIM_Base_MspInit+0x84>)
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c58:	6613      	str	r3, [r2, #96]	; 0x60
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <HAL_TIM_Base_MspInit+0x84>)
 8000c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
}
 8000c66:	bf00      	nop
 8000c68:	371c      	adds	r7, #28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40012c00 	.word	0x40012c00
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40014800 	.word	0x40014800

08000c80 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08c      	sub	sp, #48	; 0x30
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a2f      	ldr	r2, [pc, #188]	; (8000d5c <HAL_TIM_Encoder_MspInit+0xdc>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d129      	bne.n	8000cf6 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ca2:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca6:	4a2e      	ldr	r2, [pc, #184]	; (8000d60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6593      	str	r3, [r2, #88]	; 0x58
 8000cae:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	61bb      	str	r3, [r7, #24]
 8000cb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	4a28      	ldr	r2, [pc, #160]	; (8000d60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000cd2:	2350      	movs	r3, #80	; 0x50
 8000cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f000 facc 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000cf4:	e02e      	b.n	8000d54 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a1a      	ldr	r2, [pc, #104]	; (8000d64 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d129      	bne.n	8000d54 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d04:	4a16      	ldr	r2, [pc, #88]	; (8000d60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1c:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d24:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d30:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8000d42:	230a      	movs	r3, #10
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d50:	f000 fa9c 	bl	800128c <HAL_GPIO_Init>
}
 8000d54:	bf00      	nop
 8000d56:	3730      	adds	r7, #48	; 0x30
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40000400 	.word	0x40000400
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40000800 	.word	0x40000800

08000d68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a35      	ldr	r2, [pc, #212]	; (8000e5c <HAL_TIM_MspPostInit+0xf4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d11e      	bne.n	8000dc8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b35      	ldr	r3, [pc, #212]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	4a34      	ldr	r2, [pc, #208]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d96:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000da2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000db4:	2306      	movs	r3, #6
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc2:	f000 fa63 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000dc6:	e044      	b.n	8000e52 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM2)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd0:	d11d      	bne.n	8000e0e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000dea:	2322      	movs	r3, #34	; 0x22
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f000 fa40 	bl	800128c <HAL_GPIO_Init>
}
 8000e0c:	e021      	b.n	8000e52 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM17)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <HAL_TIM_MspPostInit+0xfc>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d11c      	bne.n	8000e52 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1c:	4a10      	ldr	r2, [pc, #64]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000e40:	2301      	movs	r3, #1
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4e:	f000 fa1d 	bl	800128c <HAL_GPIO_Init>
}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40012c00 	.word	0x40012c00
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40014800 	.word	0x40014800

08000e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b09a      	sub	sp, #104	; 0x68
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	2244      	movs	r2, #68	; 0x44
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 f9e5 	bl	8004258 <memset>
  if(huart->Instance==USART2)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a1f      	ldr	r2, [pc, #124]	; (8000f10 <HAL_UART_MspInit+0xa8>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d136      	bne.n	8000f06 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f001 f963 	bl	8002170 <HAL_RCCEx_PeriphCLKConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000eb0:	f7ff fe76 	bl	8000ba0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <HAL_UART_MspInit+0xac>)
 8000eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb8:	4a16      	ldr	r2, [pc, #88]	; (8000f14 <HAL_UART_MspInit+0xac>)
 8000eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <HAL_UART_MspInit+0xac>)
 8000ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_UART_MspInit+0xac>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed0:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <HAL_UART_MspInit+0xac>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_UART_MspInit+0xac>)
 8000eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000ee4:	230c      	movs	r3, #12
 8000ee6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000efc:	4619      	mov	r1, r3
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f000 f9c3 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3768      	adds	r7, #104	; 0x68
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40004400 	.word	0x40004400
 8000f14:	40021000 	.word	0x40021000

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <NMI_Handler+0x4>

08000f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f64:	f000 f890 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f92:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000f96:	490e      	ldr	r1, [pc, #56]	; (8000fd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f98:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <LoopForever+0xe>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fac:	4c0b      	ldr	r4, [pc, #44]	; (8000fdc <LoopForever+0x16>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fba:	f7ff ffd7 	bl	8000f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f003 f953 	bl	8004268 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc2:	f7ff faa7 	bl	8000514 <main>

08000fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc6:	e7fe      	b.n	8000fc6 <LoopForever>
  ldr   r0, =_estack
 8000fc8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fd4:	08004318 	.word	0x08004318
  ldr r2, =_sbss
 8000fd8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fdc:	20000238 	.word	0x20000238

08000fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC1_2_IRQHandler>

08000fe2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f91b 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f000 f80e 	bl	8001014 <HAL_InitTick>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	e001      	b.n	8001008 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001004:	f7ff fdd2 	bl	8000bac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001008:	79fb      	ldrb	r3, [r7, #7]

}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_InitTick+0x68>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d022      	beq.n	800106e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_InitTick+0x6c>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_InitTick+0x68>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001034:	fbb1 f3f3 	udiv	r3, r1, r3
 8001038:	fbb2 f3f3 	udiv	r3, r2, r3
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f918 	bl	8001272 <HAL_SYSTICK_Config>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10f      	bne.n	8001068 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b0f      	cmp	r3, #15
 800104c:	d809      	bhi.n	8001062 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104e:	2200      	movs	r2, #0
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	f04f 30ff 	mov.w	r0, #4294967295
 8001056:	f000 f8f2 	bl	800123e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <HAL_InitTick+0x70>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	e007      	b.n	8001072 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	e004      	b.n	8001072 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	e001      	b.n	8001072 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000008 	.word	0x20000008
 8001080:	20000000 	.word	0x20000000
 8001084:	20000004 	.word	0x20000004

08001088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x1c>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x20>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4413      	add	r3, r2
 8001096:	4a03      	ldr	r2, [pc, #12]	; (80010a4 <HAL_IncTick+0x1c>)
 8001098:	6013      	str	r3, [r2, #0]
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	20000234 	.word	0x20000234
 80010a8:	20000008 	.word	0x20000008

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000234 	.word	0x20000234

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	; (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	; (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f4:	d301      	bcc.n	80011fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00f      	b.n	800121a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <SysTick_Config+0x40>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001202:	210f      	movs	r1, #15
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f7ff ff8e 	bl	8001128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <SysTick_Config+0x40>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SysTick_Config+0x40>)
 8001214:	2207      	movs	r2, #7
 8001216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	e000e010 	.word	0xe000e010

08001228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff47 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800124c:	f7ff ff5e 	bl	800110c <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff90 	bl	800117c <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5f 	bl	8001128 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffb2 	bl	80011e4 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800129a:	e15a      	b.n	8001552 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	2101      	movs	r1, #1
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 814c 	beq.w	800154c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d005      	beq.n	80012cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d130      	bne.n	800132e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001302:	2201      	movs	r2, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	f003 0201 	and.w	r2, r3, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b03      	cmp	r3, #3
 8001338:	d017      	beq.n	800136a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d123      	bne.n	80013be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	691a      	ldr	r2, [r3, #16]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	08da      	lsrs	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3208      	adds	r2, #8
 80013b8:	6939      	ldr	r1, [r7, #16]
 80013ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0203 	and.w	r2, r3, #3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80a6 	beq.w	800154c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001400:	4b5b      	ldr	r3, [pc, #364]	; (8001570 <HAL_GPIO_Init+0x2e4>)
 8001402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001404:	4a5a      	ldr	r2, [pc, #360]	; (8001570 <HAL_GPIO_Init+0x2e4>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6613      	str	r3, [r2, #96]	; 0x60
 800140c:	4b58      	ldr	r3, [pc, #352]	; (8001570 <HAL_GPIO_Init+0x2e4>)
 800140e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001418:	4a56      	ldr	r2, [pc, #344]	; (8001574 <HAL_GPIO_Init+0x2e8>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	220f      	movs	r2, #15
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001442:	d01f      	beq.n	8001484 <HAL_GPIO_Init+0x1f8>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a4c      	ldr	r2, [pc, #304]	; (8001578 <HAL_GPIO_Init+0x2ec>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d019      	beq.n	8001480 <HAL_GPIO_Init+0x1f4>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a4b      	ldr	r2, [pc, #300]	; (800157c <HAL_GPIO_Init+0x2f0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d013      	beq.n	800147c <HAL_GPIO_Init+0x1f0>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a4a      	ldr	r2, [pc, #296]	; (8001580 <HAL_GPIO_Init+0x2f4>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d00d      	beq.n	8001478 <HAL_GPIO_Init+0x1ec>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a49      	ldr	r2, [pc, #292]	; (8001584 <HAL_GPIO_Init+0x2f8>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d007      	beq.n	8001474 <HAL_GPIO_Init+0x1e8>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a48      	ldr	r2, [pc, #288]	; (8001588 <HAL_GPIO_Init+0x2fc>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d101      	bne.n	8001470 <HAL_GPIO_Init+0x1e4>
 800146c:	2305      	movs	r3, #5
 800146e:	e00a      	b.n	8001486 <HAL_GPIO_Init+0x1fa>
 8001470:	2306      	movs	r3, #6
 8001472:	e008      	b.n	8001486 <HAL_GPIO_Init+0x1fa>
 8001474:	2304      	movs	r3, #4
 8001476:	e006      	b.n	8001486 <HAL_GPIO_Init+0x1fa>
 8001478:	2303      	movs	r3, #3
 800147a:	e004      	b.n	8001486 <HAL_GPIO_Init+0x1fa>
 800147c:	2302      	movs	r3, #2
 800147e:	e002      	b.n	8001486 <HAL_GPIO_Init+0x1fa>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <HAL_GPIO_Init+0x1fa>
 8001484:	2300      	movs	r3, #0
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	f002 0203 	and.w	r2, r2, #3
 800148c:	0092      	lsls	r2, r2, #2
 800148e:	4093      	lsls	r3, r2
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001496:	4937      	ldr	r1, [pc, #220]	; (8001574 <HAL_GPIO_Init+0x2e8>)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	3302      	adds	r3, #2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014a4:	4b39      	ldr	r3, [pc, #228]	; (800158c <HAL_GPIO_Init+0x300>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014c8:	4a30      	ldr	r2, [pc, #192]	; (800158c <HAL_GPIO_Init+0x300>)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014ce:	4b2f      	ldr	r3, [pc, #188]	; (800158c <HAL_GPIO_Init+0x300>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014f2:	4a26      	ldr	r2, [pc, #152]	; (800158c <HAL_GPIO_Init+0x300>)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_GPIO_Init+0x300>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800151c:	4a1b      	ldr	r2, [pc, #108]	; (800158c <HAL_GPIO_Init+0x300>)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HAL_GPIO_Init+0x300>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001546:	4a11      	ldr	r2, [pc, #68]	; (800158c <HAL_GPIO_Init+0x300>)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	3301      	adds	r3, #1
 8001550:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	f47f ae9d 	bne.w	800129c <HAL_GPIO_Init+0x10>
  }
}
 8001562:	bf00      	nop
 8001564:	bf00      	nop
 8001566:	371c      	adds	r7, #28
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	40021000 	.word	0x40021000
 8001574:	40010000 	.word	0x40010000
 8001578:	48000400 	.word	0x48000400
 800157c:	48000800 	.word	0x48000800
 8001580:	48000c00 	.word	0x48000c00
 8001584:	48001000 	.word	0x48001000
 8001588:	48001400 	.word	0x48001400
 800158c:	40010400 	.word	0x40010400

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d141      	bne.n	8001652 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ce:	4b4b      	ldr	r3, [pc, #300]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015da:	d131      	bne.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015dc:	4b47      	ldr	r3, [pc, #284]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015e2:	4a46      	ldr	r2, [pc, #280]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ec:	4b43      	ldr	r3, [pc, #268]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015f4:	4a41      	ldr	r2, [pc, #260]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015fc:	4b40      	ldr	r3, [pc, #256]	; (8001700 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2232      	movs	r2, #50	; 0x32
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	4a3f      	ldr	r2, [pc, #252]	; (8001704 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	0c9b      	lsrs	r3, r3, #18
 800160e:	3301      	adds	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001612:	e002      	b.n	800161a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3b01      	subs	r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800161a:	4b38      	ldr	r3, [pc, #224]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001626:	d102      	bne.n	800162e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f2      	bne.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800162e:	4b33      	ldr	r3, [pc, #204]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163a:	d158      	bne.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e057      	b.n	80016f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001640:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001646:	4a2d      	ldr	r2, [pc, #180]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800164c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001650:	e04d      	b.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001658:	d141      	bne.n	80016de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800165a:	4b28      	ldr	r3, [pc, #160]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001666:	d131      	bne.n	80016cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800166e:	4a23      	ldr	r2, [pc, #140]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001674:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001678:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001680:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001686:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2232      	movs	r2, #50	; 0x32
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	0c9b      	lsrs	r3, r3, #18
 800169a:	3301      	adds	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800169e:	e002      	b.n	80016a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b2:	d102      	bne.n	80016ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f2      	bne.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c6:	d112      	bne.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e011      	b.n	80016f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016dc:	e007      	b.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	40007000 	.word	0x40007000
 8001700:	20000000 	.word	0x20000000
 8001704:	431bde83 	.word	0x431bde83

08001708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e306      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d075      	beq.n	8001812 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001726:	4b97      	ldr	r3, [pc, #604]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001730:	4b94      	ldr	r3, [pc, #592]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b0c      	cmp	r3, #12
 800173e:	d102      	bne.n	8001746 <HAL_RCC_OscConfig+0x3e>
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d002      	beq.n	800174c <HAL_RCC_OscConfig+0x44>
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b08      	cmp	r3, #8
 800174a:	d10b      	bne.n	8001764 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	4b8d      	ldr	r3, [pc, #564]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d05b      	beq.n	8001810 <HAL_RCC_OscConfig+0x108>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d157      	bne.n	8001810 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e2e1      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x74>
 800176e:	4b85      	ldr	r3, [pc, #532]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a84      	ldr	r2, [pc, #528]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e01d      	b.n	80017b8 <HAL_RCC_OscConfig+0xb0>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x98>
 8001786:	4b7f      	ldr	r3, [pc, #508]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a7e      	ldr	r2, [pc, #504]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 800178c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b7c      	ldr	r3, [pc, #496]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a7b      	ldr	r2, [pc, #492]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0xb0>
 80017a0:	4b78      	ldr	r3, [pc, #480]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a77      	ldr	r2, [pc, #476]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 80017a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b75      	ldr	r3, [pc, #468]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a74      	ldr	r2, [pc, #464]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 80017b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d013      	beq.n	80017e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff fc74 	bl	80010ac <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fc70 	bl	80010ac <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e2a6      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017da:	4b6a      	ldr	r3, [pc, #424]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0xc0>
 80017e6:	e014      	b.n	8001812 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff fc60 	bl	80010ac <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff fc5c 	bl	80010ac <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e292      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001802:	4b60      	ldr	r3, [pc, #384]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0xe8>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d075      	beq.n	800190a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800181e:	4b59      	ldr	r3, [pc, #356]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001828:	4b56      	ldr	r3, [pc, #344]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	2b0c      	cmp	r3, #12
 8001836:	d102      	bne.n	800183e <HAL_RCC_OscConfig+0x136>
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d002      	beq.n	8001844 <HAL_RCC_OscConfig+0x13c>
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	2b04      	cmp	r3, #4
 8001842:	d11f      	bne.n	8001884 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001844:	4b4f      	ldr	r3, [pc, #316]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_RCC_OscConfig+0x154>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e265      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185c:	4b49      	ldr	r3, [pc, #292]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	061b      	lsls	r3, r3, #24
 800186a:	4946      	ldr	r1, [pc, #280]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001870:	4b45      	ldr	r3, [pc, #276]	; (8001988 <HAL_RCC_OscConfig+0x280>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fbcd 	bl	8001014 <HAL_InitTick>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d043      	beq.n	8001908 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e251      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d023      	beq.n	80018d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800188c:	4b3d      	ldr	r3, [pc, #244]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a3c      	ldr	r2, [pc, #240]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fc08 	bl	80010ac <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a0:	f7ff fc04 	bl	80010ac <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e23a      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b2:	4b34      	ldr	r3, [pc, #208]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018be:	4b31      	ldr	r3, [pc, #196]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	061b      	lsls	r3, r3, #24
 80018cc:	492d      	ldr	r1, [pc, #180]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
 80018d2:	e01a      	b.n	800190a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d4:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a2a      	ldr	r2, [pc, #168]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 80018da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff fbe4 	bl	80010ac <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e8:	f7ff fbe0 	bl	80010ac <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e216      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018fa:	4b22      	ldr	r3, [pc, #136]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x1e0>
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001908:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d041      	beq.n	800199a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d01c      	beq.n	8001958 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001924:	4a17      	ldr	r2, [pc, #92]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192e:	f7ff fbbd 	bl	80010ac <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001936:	f7ff fbb9 	bl	80010ac <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e1ef      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001948:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 800194a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0ef      	beq.n	8001936 <HAL_RCC_OscConfig+0x22e>
 8001956:	e020      	b.n	800199a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 800195a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195e:	4a09      	ldr	r2, [pc, #36]	; (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001960:	f023 0301 	bic.w	r3, r3, #1
 8001964:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001968:	f7ff fba0 	bl	80010ac <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800196e:	e00d      	b.n	800198c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001970:	f7ff fb9c 	bl	80010ac <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d906      	bls.n	800198c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e1d2      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800198c:	4b8c      	ldr	r3, [pc, #560]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 800198e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1ea      	bne.n	8001970 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80a6 	beq.w	8001af4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019ac:	4b84      	ldr	r3, [pc, #528]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 80019ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_OscConfig+0x2b4>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x2b6>
 80019bc:	2300      	movs	r3, #0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00d      	beq.n	80019de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	4b7f      	ldr	r3, [pc, #508]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	4a7e      	ldr	r2, [pc, #504]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019cc:	6593      	str	r3, [r2, #88]	; 0x58
 80019ce:	4b7c      	ldr	r3, [pc, #496]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019da:	2301      	movs	r3, #1
 80019dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019de:	4b79      	ldr	r3, [pc, #484]	; (8001bc4 <HAL_RCC_OscConfig+0x4bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d118      	bne.n	8001a1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019ea:	4b76      	ldr	r3, [pc, #472]	; (8001bc4 <HAL_RCC_OscConfig+0x4bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a75      	ldr	r2, [pc, #468]	; (8001bc4 <HAL_RCC_OscConfig+0x4bc>)
 80019f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f6:	f7ff fb59 	bl	80010ac <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fe:	f7ff fb55 	bl	80010ac <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e18b      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a10:	4b6c      	ldr	r3, [pc, #432]	; (8001bc4 <HAL_RCC_OscConfig+0x4bc>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d108      	bne.n	8001a36 <HAL_RCC_OscConfig+0x32e>
 8001a24:	4b66      	ldr	r3, [pc, #408]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2a:	4a65      	ldr	r2, [pc, #404]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a34:	e024      	b.n	8001a80 <HAL_RCC_OscConfig+0x378>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b05      	cmp	r3, #5
 8001a3c:	d110      	bne.n	8001a60 <HAL_RCC_OscConfig+0x358>
 8001a3e:	4b60      	ldr	r3, [pc, #384]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a44:	4a5e      	ldr	r2, [pc, #376]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a4e:	4b5c      	ldr	r3, [pc, #368]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a54:	4a5a      	ldr	r2, [pc, #360]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a5e:	e00f      	b.n	8001a80 <HAL_RCC_OscConfig+0x378>
 8001a60:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a66:	4a56      	ldr	r2, [pc, #344]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a70:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a76:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a78:	f023 0304 	bic.w	r3, r3, #4
 8001a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d016      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7ff fb10 	bl	80010ac <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a8e:	e00a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a90:	f7ff fb0c 	bl	80010ac <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e140      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa6:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0ed      	beq.n	8001a90 <HAL_RCC_OscConfig+0x388>
 8001ab4:	e015      	b.n	8001ae2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab6:	f7ff faf9 	bl	80010ac <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001abe:	f7ff faf5 	bl	80010ac <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e129      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad4:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1ed      	bne.n	8001abe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ae2:	7ffb      	ldrb	r3, [r7, #31]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d105      	bne.n	8001af4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae8:	4b35      	ldr	r3, [pc, #212]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	4a34      	ldr	r2, [pc, #208]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0320 	and.w	r3, r3, #32
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d03c      	beq.n	8001b7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d01c      	beq.n	8001b42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b0e:	4a2c      	ldr	r2, [pc, #176]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b18:	f7ff fac8 	bl	80010ac <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b20:	f7ff fac4 	bl	80010ac <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e0fa      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0ef      	beq.n	8001b20 <HAL_RCC_OscConfig+0x418>
 8001b40:	e01b      	b.n	8001b7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b42:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b48:	4a1d      	ldr	r2, [pc, #116]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b52:	f7ff faab 	bl	80010ac <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b5a:	f7ff faa7 	bl	80010ac <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e0dd      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1ef      	bne.n	8001b5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 80d1 	beq.w	8001d26 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b0c      	cmp	r3, #12
 8001b8e:	f000 808b 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d15e      	bne.n	8001c58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001ba0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fa81 	bl	80010ac <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bac:	e00c      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bae:	f7ff fa7d 	bl	80010ac <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d905      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e0b3      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc8:	4b59      	ldr	r3, [pc, #356]	; (8001d30 <HAL_RCC_OscConfig+0x628>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ec      	bne.n	8001bae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd4:	4b56      	ldr	r3, [pc, #344]	; (8001d30 <HAL_RCC_OscConfig+0x628>)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	4b56      	ldr	r3, [pc, #344]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6a11      	ldr	r1, [r2, #32]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001be4:	3a01      	subs	r2, #1
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	4311      	orrs	r1, r2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001bee:	0212      	lsls	r2, r2, #8
 8001bf0:	4311      	orrs	r1, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bf6:	0852      	lsrs	r2, r2, #1
 8001bf8:	3a01      	subs	r2, #1
 8001bfa:	0552      	lsls	r2, r2, #21
 8001bfc:	4311      	orrs	r1, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c02:	0852      	lsrs	r2, r2, #1
 8001c04:	3a01      	subs	r2, #1
 8001c06:	0652      	lsls	r2, r2, #25
 8001c08:	4311      	orrs	r1, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c0e:	06d2      	lsls	r2, r2, #27
 8001c10:	430a      	orrs	r2, r1
 8001c12:	4947      	ldr	r1, [pc, #284]	; (8001d30 <HAL_RCC_OscConfig+0x628>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c18:	4b45      	ldr	r3, [pc, #276]	; (8001d30 <HAL_RCC_OscConfig+0x628>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a44      	ldr	r2, [pc, #272]	; (8001d30 <HAL_RCC_OscConfig+0x628>)
 8001c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c24:	4b42      	ldr	r3, [pc, #264]	; (8001d30 <HAL_RCC_OscConfig+0x628>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4a41      	ldr	r2, [pc, #260]	; (8001d30 <HAL_RCC_OscConfig+0x628>)
 8001c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff fa3c 	bl	80010ac <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff fa38 	bl	80010ac <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e06e      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4a:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <HAL_RCC_OscConfig+0x628>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x530>
 8001c56:	e066      	b.n	8001d26 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c58:	4b35      	ldr	r3, [pc, #212]	; (8001d30 <HAL_RCC_OscConfig+0x628>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a34      	ldr	r2, [pc, #208]	; (8001d30 <HAL_RCC_OscConfig+0x628>)
 8001c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c62:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c64:	4b32      	ldr	r3, [pc, #200]	; (8001d30 <HAL_RCC_OscConfig+0x628>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	4a31      	ldr	r2, [pc, #196]	; (8001d30 <HAL_RCC_OscConfig+0x628>)
 8001c6a:	f023 0303 	bic.w	r3, r3, #3
 8001c6e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c70:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <HAL_RCC_OscConfig+0x628>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4a2e      	ldr	r2, [pc, #184]	; (8001d30 <HAL_RCC_OscConfig+0x628>)
 8001c76:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff fa14 	bl	80010ac <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c88:	f7ff fa10 	bl	80010ac <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e046      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c9a:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <HAL_RCC_OscConfig+0x628>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x580>
 8001ca6:	e03e      	b.n	8001d26 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e039      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_RCC_OscConfig+0x628>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f003 0203 	and.w	r2, r3, #3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d12c      	bne.n	8001d22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d123      	bne.n	8001d22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d11b      	bne.n	8001d22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d113      	bne.n	8001d22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	085b      	lsrs	r3, r3, #1
 8001d06:	3b01      	subs	r3, #1
 8001d08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d109      	bne.n	8001d22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d18:	085b      	lsrs	r3, r3, #1
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000
 8001d34:	019f800c 	.word	0x019f800c

08001d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e11e      	b.n	8001f8e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d50:	4b91      	ldr	r3, [pc, #580]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d910      	bls.n	8001d80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	4b8e      	ldr	r3, [pc, #568]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 020f 	bic.w	r2, r3, #15
 8001d66:	498c      	ldr	r1, [pc, #560]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b8a      	ldr	r3, [pc, #552]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e106      	b.n	8001f8e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d073      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d129      	bne.n	8001de8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d94:	4b81      	ldr	r3, [pc, #516]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0f4      	b.n	8001f8e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001da4:	f000 f99e 	bl	80020e4 <RCC_GetSysClockFreqFromPLLSource>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4a7c      	ldr	r2, [pc, #496]	; (8001fa0 <HAL_RCC_ClockConfig+0x268>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d93f      	bls.n	8001e32 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001db2:	4b7a      	ldr	r3, [pc, #488]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d009      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d033      	beq.n	8001e32 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d12f      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dd2:	4b72      	ldr	r3, [pc, #456]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dda:	4a70      	ldr	r2, [pc, #448]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e024      	b.n	8001e32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d107      	bne.n	8001e00 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df0:	4b6a      	ldr	r3, [pc, #424]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d109      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0c6      	b.n	8001f8e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e00:	4b66      	ldr	r3, [pc, #408]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0be      	b.n	8001f8e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e10:	f000 f8ce 	bl	8001fb0 <HAL_RCC_GetSysClockFreq>
 8001e14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4a61      	ldr	r2, [pc, #388]	; (8001fa0 <HAL_RCC_ClockConfig+0x268>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d909      	bls.n	8001e32 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e1e:	4b5f      	ldr	r3, [pc, #380]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e26:	4a5d      	ldr	r2, [pc, #372]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e32:	4b5a      	ldr	r3, [pc, #360]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f023 0203 	bic.w	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4957      	ldr	r1, [pc, #348]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e44:	f7ff f932 	bl	80010ac <HAL_GetTick>
 8001e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4c:	f7ff f92e 	bl	80010ac <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e095      	b.n	8001f8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	4b4e      	ldr	r3, [pc, #312]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 020c 	and.w	r2, r3, #12
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d1eb      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d023      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e8c:	4b43      	ldr	r3, [pc, #268]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	4a42      	ldr	r2, [pc, #264]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001e92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e96:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ea4:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001eac:	4a3b      	ldr	r2, [pc, #236]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001eae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb4:	4b39      	ldr	r3, [pc, #228]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4936      	ldr	r1, [pc, #216]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2b80      	cmp	r3, #128	; 0x80
 8001ecc:	d105      	bne.n	8001eda <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ece:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	4a32      	ldr	r2, [pc, #200]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001ed4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ed8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eda:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d21d      	bcs.n	8001f24 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 020f 	bic.w	r2, r3, #15
 8001ef0:	4929      	ldr	r1, [pc, #164]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ef8:	f7ff f8d8 	bl	80010ac <HAL_GetTick>
 8001efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f7ff f8d4 	bl	80010ac <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e03b      	b.n	8001f8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1ed      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4917      	ldr	r1, [pc, #92]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f4e:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	490f      	ldr	r1, [pc, #60]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f62:	f000 f825 	bl	8001fb0 <HAL_RCC_GetSysClockFreq>
 8001f66:	4602      	mov	r2, r0
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <HAL_RCC_ClockConfig+0x264>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	490c      	ldr	r1, [pc, #48]	; (8001fa4 <HAL_RCC_ClockConfig+0x26c>)
 8001f74:	5ccb      	ldrb	r3, [r1, r3]
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <HAL_RCC_ClockConfig+0x270>)
 8001f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_RCC_ClockConfig+0x274>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff f844 	bl	8001014 <HAL_InitTick>
 8001f8c:	4603      	mov	r3, r0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40022000 	.word	0x40022000
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	04c4b400 	.word	0x04c4b400
 8001fa4:	080042c8 	.word	0x080042c8
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	20000004 	.word	0x20000004

08001fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fb6:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d102      	bne.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	e047      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001fc8:	4b27      	ldr	r3, [pc, #156]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d102      	bne.n	8001fda <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fd4:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	e03e      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001fda:	4b23      	ldr	r3, [pc, #140]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d136      	bne.n	8002054 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fe6:	4b20      	ldr	r3, [pc, #128]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d10c      	bne.n	800201e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002004:	4a1a      	ldr	r2, [pc, #104]	; (8002070 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	fbb2 f3f3 	udiv	r3, r2, r3
 800200c:	4a16      	ldr	r2, [pc, #88]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb8>)
 800200e:	68d2      	ldr	r2, [r2, #12]
 8002010:	0a12      	lsrs	r2, r2, #8
 8002012:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	617b      	str	r3, [r7, #20]
      break;
 800201c:	e00c      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800201e:	4a13      	ldr	r2, [pc, #76]	; (800206c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	fbb2 f3f3 	udiv	r3, r2, r3
 8002026:	4a10      	ldr	r2, [pc, #64]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002028:	68d2      	ldr	r2, [r2, #12]
 800202a:	0a12      	lsrs	r2, r2, #8
 800202c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002030:	fb02 f303 	mul.w	r3, r2, r3
 8002034:	617b      	str	r3, [r7, #20]
      break;
 8002036:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb8>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	0e5b      	lsrs	r3, r3, #25
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	3301      	adds	r3, #1
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	e001      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002058:	693b      	ldr	r3, [r7, #16]
}
 800205a:	4618      	mov	r0, r3
 800205c:	371c      	adds	r7, #28
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	00f42400 	.word	0x00f42400
 8002070:	007a1200 	.word	0x007a1200

08002074 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <HAL_RCC_GetHCLKFreq+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000000 	.word	0x20000000

0800208c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002090:	f7ff fff0 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 8002094:	4602      	mov	r2, r0
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	4904      	ldr	r1, [pc, #16]	; (80020b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021000 	.word	0x40021000
 80020b4:	080042d8 	.word	0x080042d8

080020b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020bc:	f7ff ffda 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	0adb      	lsrs	r3, r3, #11
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	4904      	ldr	r1, [pc, #16]	; (80020e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ce:	5ccb      	ldrb	r3, [r1, r3]
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	080042d8 	.word	0x080042d8

080020e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3301      	adds	r3, #1
 8002100:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d10c      	bne.n	8002122 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002108:	4a17      	ldr	r2, [pc, #92]	; (8002168 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002110:	4a14      	ldr	r2, [pc, #80]	; (8002164 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002112:	68d2      	ldr	r2, [r2, #12]
 8002114:	0a12      	lsrs	r2, r2, #8
 8002116:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	617b      	str	r3, [r7, #20]
    break;
 8002120:	e00c      	b.n	800213c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002122:	4a12      	ldr	r2, [pc, #72]	; (800216c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800212c:	68d2      	ldr	r2, [r2, #12]
 800212e:	0a12      	lsrs	r2, r2, #8
 8002130:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002134:	fb02 f303 	mul.w	r3, r2, r3
 8002138:	617b      	str	r3, [r7, #20]
    break;
 800213a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	0e5b      	lsrs	r3, r3, #25
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	3301      	adds	r3, #1
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	fbb2 f3f3 	udiv	r3, r2, r3
 8002154:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002156:	687b      	ldr	r3, [r7, #4]
}
 8002158:	4618      	mov	r0, r3
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40021000 	.word	0x40021000
 8002168:	007a1200 	.word	0x007a1200
 800216c:	00f42400 	.word	0x00f42400

08002170 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002178:	2300      	movs	r3, #0
 800217a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800217c:	2300      	movs	r3, #0
 800217e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 8098 	beq.w	80022be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002192:	4b43      	ldr	r3, [pc, #268]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10d      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219e:	4b40      	ldr	r3, [pc, #256]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	4a3f      	ldr	r2, [pc, #252]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6593      	str	r3, [r2, #88]	; 0x58
 80021aa:	4b3d      	ldr	r3, [pc, #244]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b6:	2301      	movs	r3, #1
 80021b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021ba:	4b3a      	ldr	r3, [pc, #232]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a39      	ldr	r2, [pc, #228]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021c6:	f7fe ff71 	bl	80010ac <HAL_GetTick>
 80021ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021cc:	e009      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ce:	f7fe ff6d 	bl	80010ac <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d902      	bls.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	74fb      	strb	r3, [r7, #19]
        break;
 80021e0:	e005      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021e2:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0ef      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80021ee:	7cfb      	ldrb	r3, [r7, #19]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d159      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021f4:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d01e      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	429a      	cmp	r2, r3
 800220e:	d019      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002210:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800221a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800221c:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800222c:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800222e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002232:	4a1b      	ldr	r2, [pc, #108]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800223c:	4a18      	ldr	r2, [pc, #96]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d016      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224e:	f7fe ff2d 	bl	80010ac <HAL_GetTick>
 8002252:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002254:	e00b      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002256:	f7fe ff29 	bl	80010ac <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	f241 3288 	movw	r2, #5000	; 0x1388
 8002264:	4293      	cmp	r3, r2
 8002266:	d902      	bls.n	800226e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	74fb      	strb	r3, [r7, #19]
            break;
 800226c:	e006      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800226e:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0ec      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800227c:	7cfb      	ldrb	r3, [r7, #19]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10b      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002288:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	4903      	ldr	r1, [pc, #12]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002298:	e008      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800229a:	7cfb      	ldrb	r3, [r7, #19]
 800229c:	74bb      	strb	r3, [r7, #18]
 800229e:	e005      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022ac:	7c7b      	ldrb	r3, [r7, #17]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d105      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b2:	4ba6      	ldr	r3, [pc, #664]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	4aa5      	ldr	r2, [pc, #660]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022ca:	4ba0      	ldr	r3, [pc, #640]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d0:	f023 0203 	bic.w	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	499c      	ldr	r1, [pc, #624]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022ec:	4b97      	ldr	r3, [pc, #604]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f2:	f023 020c 	bic.w	r2, r3, #12
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	4994      	ldr	r1, [pc, #592]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800230e:	4b8f      	ldr	r3, [pc, #572]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002314:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	498b      	ldr	r1, [pc, #556]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002330:	4b86      	ldr	r3, [pc, #536]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002336:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	4983      	ldr	r1, [pc, #524]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0320 	and.w	r3, r3, #32
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002352:	4b7e      	ldr	r3, [pc, #504]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002358:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	497a      	ldr	r1, [pc, #488]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002374:	4b75      	ldr	r3, [pc, #468]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	4972      	ldr	r1, [pc, #456]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002396:	4b6d      	ldr	r3, [pc, #436]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	4969      	ldr	r1, [pc, #420]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023b8:	4b64      	ldr	r3, [pc, #400]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4961      	ldr	r1, [pc, #388]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00a      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023da:	4b5c      	ldr	r3, [pc, #368]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	4958      	ldr	r1, [pc, #352]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d015      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023fc:	4b53      	ldr	r3, [pc, #332]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	4950      	ldr	r1, [pc, #320]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800241a:	d105      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800241c:	4b4b      	ldr	r3, [pc, #300]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a4a      	ldr	r2, [pc, #296]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002426:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002430:	2b00      	cmp	r3, #0
 8002432:	d015      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002434:	4b45      	ldr	r3, [pc, #276]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	4942      	ldr	r1, [pc, #264]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002452:	d105      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002454:	4b3d      	ldr	r3, [pc, #244]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4a3c      	ldr	r2, [pc, #240]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800245e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d015      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800246c:	4b37      	ldr	r3, [pc, #220]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002472:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4934      	ldr	r1, [pc, #208]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800248a:	d105      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800248c:	4b2f      	ldr	r3, [pc, #188]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a2e      	ldr	r2, [pc, #184]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002496:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d015      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024a4:	4b29      	ldr	r3, [pc, #164]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b2:	4926      	ldr	r1, [pc, #152]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024c2:	d105      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c4:	4b21      	ldr	r3, [pc, #132]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4a20      	ldr	r2, [pc, #128]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d015      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024dc:	4b1b      	ldr	r3, [pc, #108]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	4918      	ldr	r1, [pc, #96]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024fa:	d105      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4a12      	ldr	r2, [pc, #72]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002506:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d015      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002514:	4b0d      	ldr	r3, [pc, #52]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002522:	490a      	ldr	r1, [pc, #40]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002532:	d105      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4a04      	ldr	r2, [pc, #16]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002540:	7cbb      	ldrb	r3, [r7, #18]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000

08002550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e049      	b.n	80025f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d106      	bne.n	800257c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7fe fb3c 	bl	8000bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3304      	adds	r3, #4
 800258c:	4619      	mov	r1, r3
 800258e:	4610      	mov	r0, r2
 8002590:	f000 fb4a 	bl	8002c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e049      	b.n	80026a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d106      	bne.n	800262a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f841 	bl	80026ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2202      	movs	r2, #2
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3304      	adds	r3, #4
 800263a:	4619      	mov	r1, r3
 800263c:	4610      	mov	r0, r2
 800263e:	f000 faf3 	bl	8002c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e097      	b.n	8002804 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d106      	bne.n	80026ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7fe fac9 	bl	8000c80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2202      	movs	r2, #2
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002704:	f023 0307 	bic.w	r3, r3, #7
 8002708:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3304      	adds	r3, #4
 8002712:	4619      	mov	r1, r3
 8002714:	4610      	mov	r0, r2
 8002716:	f000 fa87 	bl	8002c28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002742:	f023 0303 	bic.w	r3, r3, #3
 8002746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	4313      	orrs	r3, r2
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002760:	f023 030c 	bic.w	r3, r3, #12
 8002764:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800276c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002770:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	4313      	orrs	r3, r2
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	011a      	lsls	r2, r3, #4
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	031b      	lsls	r3, r3, #12
 8002790:	4313      	orrs	r3, r2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800279e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80027a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	4313      	orrs	r3, r2
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002826:	2302      	movs	r3, #2
 8002828:	e0ff      	b.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b14      	cmp	r3, #20
 8002836:	f200 80f0 	bhi.w	8002a1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800283a:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800283c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002840:	08002895 	.word	0x08002895
 8002844:	08002a1b 	.word	0x08002a1b
 8002848:	08002a1b 	.word	0x08002a1b
 800284c:	08002a1b 	.word	0x08002a1b
 8002850:	080028d5 	.word	0x080028d5
 8002854:	08002a1b 	.word	0x08002a1b
 8002858:	08002a1b 	.word	0x08002a1b
 800285c:	08002a1b 	.word	0x08002a1b
 8002860:	08002917 	.word	0x08002917
 8002864:	08002a1b 	.word	0x08002a1b
 8002868:	08002a1b 	.word	0x08002a1b
 800286c:	08002a1b 	.word	0x08002a1b
 8002870:	08002957 	.word	0x08002957
 8002874:	08002a1b 	.word	0x08002a1b
 8002878:	08002a1b 	.word	0x08002a1b
 800287c:	08002a1b 	.word	0x08002a1b
 8002880:	08002999 	.word	0x08002999
 8002884:	08002a1b 	.word	0x08002a1b
 8002888:	08002a1b 	.word	0x08002a1b
 800288c:	08002a1b 	.word	0x08002a1b
 8002890:	080029d9 	.word	0x080029d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fa54 	bl	8002d48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0208 	orr.w	r2, r2, #8
 80028ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0204 	bic.w	r2, r2, #4
 80028be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6999      	ldr	r1, [r3, #24]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	619a      	str	r2, [r3, #24]
      break;
 80028d2:	e0a5      	b.n	8002a20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fac4 	bl	8002e68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6999      	ldr	r1, [r3, #24]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	021a      	lsls	r2, r3, #8
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	619a      	str	r2, [r3, #24]
      break;
 8002914:	e084      	b.n	8002a20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68b9      	ldr	r1, [r7, #8]
 800291c:	4618      	mov	r0, r3
 800291e:	f000 fb2d 	bl	8002f7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69da      	ldr	r2, [r3, #28]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0208 	orr.w	r2, r2, #8
 8002930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0204 	bic.w	r2, r2, #4
 8002940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69d9      	ldr	r1, [r3, #28]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	61da      	str	r2, [r3, #28]
      break;
 8002954:	e064      	b.n	8002a20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fb95 	bl	800308c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	69da      	ldr	r2, [r3, #28]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69d9      	ldr	r1, [r3, #28]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	021a      	lsls	r2, r3, #8
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	61da      	str	r2, [r3, #28]
      break;
 8002996:	e043      	b.n	8002a20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fbfe 	bl	80031a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0208 	orr.w	r2, r2, #8
 80029b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0204 	bic.w	r2, r2, #4
 80029c2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80029d6:	e023      	b.n	8002a20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fc42 	bl	8003268 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a02:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	021a      	lsls	r2, r3, #8
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002a18:	e002      	b.n	8002a20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop

08002a34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_TIM_ConfigClockSource+0x1c>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e0de      	b.n	8002c0e <HAL_TIM_ConfigClockSource+0x1da>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002a6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a63      	ldr	r2, [pc, #396]	; (8002c18 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	f000 80a9 	beq.w	8002be2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002a90:	4a61      	ldr	r2, [pc, #388]	; (8002c18 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	f200 80ae 	bhi.w	8002bf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002a98:	4a60      	ldr	r2, [pc, #384]	; (8002c1c <HAL_TIM_ConfigClockSource+0x1e8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	f000 80a1 	beq.w	8002be2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002aa0:	4a5e      	ldr	r2, [pc, #376]	; (8002c1c <HAL_TIM_ConfigClockSource+0x1e8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	f200 80a6 	bhi.w	8002bf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002aa8:	4a5d      	ldr	r2, [pc, #372]	; (8002c20 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	f000 8099 	beq.w	8002be2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002ab0:	4a5b      	ldr	r2, [pc, #364]	; (8002c20 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	f200 809e 	bhi.w	8002bf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002ab8:	4a5a      	ldr	r2, [pc, #360]	; (8002c24 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	f000 8091 	beq.w	8002be2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002ac0:	4a58      	ldr	r2, [pc, #352]	; (8002c24 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	f200 8096 	bhi.w	8002bf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002ac8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002acc:	f000 8089 	beq.w	8002be2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002ad0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002ad4:	f200 808e 	bhi.w	8002bf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002adc:	d03e      	beq.n	8002b5c <HAL_TIM_ConfigClockSource+0x128>
 8002ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae2:	f200 8087 	bhi.w	8002bf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aea:	f000 8086 	beq.w	8002bfa <HAL_TIM_ConfigClockSource+0x1c6>
 8002aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af2:	d87f      	bhi.n	8002bf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002af4:	2b70      	cmp	r3, #112	; 0x70
 8002af6:	d01a      	beq.n	8002b2e <HAL_TIM_ConfigClockSource+0xfa>
 8002af8:	2b70      	cmp	r3, #112	; 0x70
 8002afa:	d87b      	bhi.n	8002bf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002afc:	2b60      	cmp	r3, #96	; 0x60
 8002afe:	d050      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0x16e>
 8002b00:	2b60      	cmp	r3, #96	; 0x60
 8002b02:	d877      	bhi.n	8002bf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b04:	2b50      	cmp	r3, #80	; 0x50
 8002b06:	d03c      	beq.n	8002b82 <HAL_TIM_ConfigClockSource+0x14e>
 8002b08:	2b50      	cmp	r3, #80	; 0x50
 8002b0a:	d873      	bhi.n	8002bf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b0c:	2b40      	cmp	r3, #64	; 0x40
 8002b0e:	d058      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x18e>
 8002b10:	2b40      	cmp	r3, #64	; 0x40
 8002b12:	d86f      	bhi.n	8002bf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b14:	2b30      	cmp	r3, #48	; 0x30
 8002b16:	d064      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002b18:	2b30      	cmp	r3, #48	; 0x30
 8002b1a:	d86b      	bhi.n	8002bf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d060      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d867      	bhi.n	8002bf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d05c      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002b28:	2b10      	cmp	r3, #16
 8002b2a:	d05a      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002b2c:	e062      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6899      	ldr	r1, [r3, #8]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f000 fc75 	bl	800342c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	609a      	str	r2, [r3, #8]
      break;
 8002b5a:	e04f      	b.n	8002bfc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	6899      	ldr	r1, [r3, #8]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f000 fc5e 	bl	800342c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b7e:	609a      	str	r2, [r3, #8]
      break;
 8002b80:	e03c      	b.n	8002bfc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	6859      	ldr	r1, [r3, #4]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f000 fbd0 	bl	8003334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2150      	movs	r1, #80	; 0x50
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fc29 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 8002ba0:	e02c      	b.n	8002bfc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f000 fbef 	bl	8003392 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2160      	movs	r1, #96	; 0x60
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fc19 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 8002bc0:	e01c      	b.n	8002bfc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6859      	ldr	r1, [r3, #4]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f000 fbb0 	bl	8003334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2140      	movs	r1, #64	; 0x40
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fc09 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 8002be0:	e00c      	b.n	8002bfc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4619      	mov	r1, r3
 8002bec:	4610      	mov	r0, r2
 8002bee:	f000 fc00 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 8002bf2:	e003      	b.n	8002bfc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf8:	e000      	b.n	8002bfc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002bfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	00100070 	.word	0x00100070
 8002c1c:	00100040 	.word	0x00100040
 8002c20:	00100030 	.word	0x00100030
 8002c24:	00100020 	.word	0x00100020

08002c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a3c      	ldr	r2, [pc, #240]	; (8002d2c <TIM_Base_SetConfig+0x104>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00f      	beq.n	8002c60 <TIM_Base_SetConfig+0x38>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c46:	d00b      	beq.n	8002c60 <TIM_Base_SetConfig+0x38>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a39      	ldr	r2, [pc, #228]	; (8002d30 <TIM_Base_SetConfig+0x108>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d007      	beq.n	8002c60 <TIM_Base_SetConfig+0x38>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a38      	ldr	r2, [pc, #224]	; (8002d34 <TIM_Base_SetConfig+0x10c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d003      	beq.n	8002c60 <TIM_Base_SetConfig+0x38>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a37      	ldr	r2, [pc, #220]	; (8002d38 <TIM_Base_SetConfig+0x110>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d108      	bne.n	8002c72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a2d      	ldr	r2, [pc, #180]	; (8002d2c <TIM_Base_SetConfig+0x104>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01b      	beq.n	8002cb2 <TIM_Base_SetConfig+0x8a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c80:	d017      	beq.n	8002cb2 <TIM_Base_SetConfig+0x8a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a2a      	ldr	r2, [pc, #168]	; (8002d30 <TIM_Base_SetConfig+0x108>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <TIM_Base_SetConfig+0x8a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a29      	ldr	r2, [pc, #164]	; (8002d34 <TIM_Base_SetConfig+0x10c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00f      	beq.n	8002cb2 <TIM_Base_SetConfig+0x8a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a28      	ldr	r2, [pc, #160]	; (8002d38 <TIM_Base_SetConfig+0x110>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00b      	beq.n	8002cb2 <TIM_Base_SetConfig+0x8a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a27      	ldr	r2, [pc, #156]	; (8002d3c <TIM_Base_SetConfig+0x114>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d007      	beq.n	8002cb2 <TIM_Base_SetConfig+0x8a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a26      	ldr	r2, [pc, #152]	; (8002d40 <TIM_Base_SetConfig+0x118>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d003      	beq.n	8002cb2 <TIM_Base_SetConfig+0x8a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a25      	ldr	r2, [pc, #148]	; (8002d44 <TIM_Base_SetConfig+0x11c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d108      	bne.n	8002cc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a10      	ldr	r2, [pc, #64]	; (8002d2c <TIM_Base_SetConfig+0x104>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00f      	beq.n	8002d10 <TIM_Base_SetConfig+0xe8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a11      	ldr	r2, [pc, #68]	; (8002d38 <TIM_Base_SetConfig+0x110>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00b      	beq.n	8002d10 <TIM_Base_SetConfig+0xe8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a10      	ldr	r2, [pc, #64]	; (8002d3c <TIM_Base_SetConfig+0x114>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d007      	beq.n	8002d10 <TIM_Base_SetConfig+0xe8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a0f      	ldr	r2, [pc, #60]	; (8002d40 <TIM_Base_SetConfig+0x118>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d003      	beq.n	8002d10 <TIM_Base_SetConfig+0xe8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a0e      	ldr	r2, [pc, #56]	; (8002d44 <TIM_Base_SetConfig+0x11c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d103      	bne.n	8002d18 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	615a      	str	r2, [r3, #20]
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40012c00 	.word	0x40012c00
 8002d30:	40000400 	.word	0x40000400
 8002d34:	40000800 	.word	0x40000800
 8002d38:	40013400 	.word	0x40013400
 8002d3c:	40014000 	.word	0x40014000
 8002d40:	40014400 	.word	0x40014400
 8002d44:	40014800 	.word	0x40014800

08002d48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	f023 0201 	bic.w	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f023 0303 	bic.w	r3, r3, #3
 8002d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f023 0302 	bic.w	r3, r3, #2
 8002d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a2c      	ldr	r2, [pc, #176]	; (8002e54 <TIM_OC1_SetConfig+0x10c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00f      	beq.n	8002dc8 <TIM_OC1_SetConfig+0x80>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a2b      	ldr	r2, [pc, #172]	; (8002e58 <TIM_OC1_SetConfig+0x110>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00b      	beq.n	8002dc8 <TIM_OC1_SetConfig+0x80>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a2a      	ldr	r2, [pc, #168]	; (8002e5c <TIM_OC1_SetConfig+0x114>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d007      	beq.n	8002dc8 <TIM_OC1_SetConfig+0x80>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a29      	ldr	r2, [pc, #164]	; (8002e60 <TIM_OC1_SetConfig+0x118>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d003      	beq.n	8002dc8 <TIM_OC1_SetConfig+0x80>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a28      	ldr	r2, [pc, #160]	; (8002e64 <TIM_OC1_SetConfig+0x11c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d10c      	bne.n	8002de2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f023 0308 	bic.w	r3, r3, #8
 8002dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f023 0304 	bic.w	r3, r3, #4
 8002de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a1b      	ldr	r2, [pc, #108]	; (8002e54 <TIM_OC1_SetConfig+0x10c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00f      	beq.n	8002e0a <TIM_OC1_SetConfig+0xc2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a1a      	ldr	r2, [pc, #104]	; (8002e58 <TIM_OC1_SetConfig+0x110>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d00b      	beq.n	8002e0a <TIM_OC1_SetConfig+0xc2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a19      	ldr	r2, [pc, #100]	; (8002e5c <TIM_OC1_SetConfig+0x114>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d007      	beq.n	8002e0a <TIM_OC1_SetConfig+0xc2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <TIM_OC1_SetConfig+0x118>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d003      	beq.n	8002e0a <TIM_OC1_SetConfig+0xc2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a17      	ldr	r2, [pc, #92]	; (8002e64 <TIM_OC1_SetConfig+0x11c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d111      	bne.n	8002e2e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	621a      	str	r2, [r3, #32]
}
 8002e48:	bf00      	nop
 8002e4a:	371c      	adds	r7, #28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	40012c00 	.word	0x40012c00
 8002e58:	40013400 	.word	0x40013400
 8002e5c:	40014000 	.word	0x40014000
 8002e60:	40014400 	.word	0x40014400
 8002e64:	40014800 	.word	0x40014800

08002e68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f023 0210 	bic.w	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f023 0320 	bic.w	r3, r3, #32
 8002eb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a28      	ldr	r2, [pc, #160]	; (8002f68 <TIM_OC2_SetConfig+0x100>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d003      	beq.n	8002ed4 <TIM_OC2_SetConfig+0x6c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a27      	ldr	r2, [pc, #156]	; (8002f6c <TIM_OC2_SetConfig+0x104>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d10d      	bne.n	8002ef0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a1d      	ldr	r2, [pc, #116]	; (8002f68 <TIM_OC2_SetConfig+0x100>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00f      	beq.n	8002f18 <TIM_OC2_SetConfig+0xb0>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <TIM_OC2_SetConfig+0x104>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00b      	beq.n	8002f18 <TIM_OC2_SetConfig+0xb0>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a1b      	ldr	r2, [pc, #108]	; (8002f70 <TIM_OC2_SetConfig+0x108>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d007      	beq.n	8002f18 <TIM_OC2_SetConfig+0xb0>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a1a      	ldr	r2, [pc, #104]	; (8002f74 <TIM_OC2_SetConfig+0x10c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d003      	beq.n	8002f18 <TIM_OC2_SetConfig+0xb0>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a19      	ldr	r2, [pc, #100]	; (8002f78 <TIM_OC2_SetConfig+0x110>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d113      	bne.n	8002f40 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	621a      	str	r2, [r3, #32]
}
 8002f5a:	bf00      	nop
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40012c00 	.word	0x40012c00
 8002f6c:	40013400 	.word	0x40013400
 8002f70:	40014000 	.word	0x40014000
 8002f74:	40014400 	.word	0x40014400
 8002f78:	40014800 	.word	0x40014800

08002f7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0303 	bic.w	r3, r3, #3
 8002fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a27      	ldr	r2, [pc, #156]	; (8003078 <TIM_OC3_SetConfig+0xfc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d003      	beq.n	8002fe6 <TIM_OC3_SetConfig+0x6a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a26      	ldr	r2, [pc, #152]	; (800307c <TIM_OC3_SetConfig+0x100>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d10d      	bne.n	8003002 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a1c      	ldr	r2, [pc, #112]	; (8003078 <TIM_OC3_SetConfig+0xfc>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00f      	beq.n	800302a <TIM_OC3_SetConfig+0xae>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a1b      	ldr	r2, [pc, #108]	; (800307c <TIM_OC3_SetConfig+0x100>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00b      	beq.n	800302a <TIM_OC3_SetConfig+0xae>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a1a      	ldr	r2, [pc, #104]	; (8003080 <TIM_OC3_SetConfig+0x104>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d007      	beq.n	800302a <TIM_OC3_SetConfig+0xae>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a19      	ldr	r2, [pc, #100]	; (8003084 <TIM_OC3_SetConfig+0x108>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d003      	beq.n	800302a <TIM_OC3_SetConfig+0xae>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a18      	ldr	r2, [pc, #96]	; (8003088 <TIM_OC3_SetConfig+0x10c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d113      	bne.n	8003052 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	621a      	str	r2, [r3, #32]
}
 800306c:	bf00      	nop
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	40012c00 	.word	0x40012c00
 800307c:	40013400 	.word	0x40013400
 8003080:	40014000 	.word	0x40014000
 8003084:	40014400 	.word	0x40014400
 8003088:	40014800 	.word	0x40014800

0800308c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	031b      	lsls	r3, r3, #12
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a28      	ldr	r2, [pc, #160]	; (800318c <TIM_OC4_SetConfig+0x100>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d003      	beq.n	80030f8 <TIM_OC4_SetConfig+0x6c>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a27      	ldr	r2, [pc, #156]	; (8003190 <TIM_OC4_SetConfig+0x104>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d10d      	bne.n	8003114 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80030fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	031b      	lsls	r3, r3, #12
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003112:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a1d      	ldr	r2, [pc, #116]	; (800318c <TIM_OC4_SetConfig+0x100>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d00f      	beq.n	800313c <TIM_OC4_SetConfig+0xb0>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <TIM_OC4_SetConfig+0x104>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00b      	beq.n	800313c <TIM_OC4_SetConfig+0xb0>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a1b      	ldr	r2, [pc, #108]	; (8003194 <TIM_OC4_SetConfig+0x108>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d007      	beq.n	800313c <TIM_OC4_SetConfig+0xb0>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a1a      	ldr	r2, [pc, #104]	; (8003198 <TIM_OC4_SetConfig+0x10c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d003      	beq.n	800313c <TIM_OC4_SetConfig+0xb0>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a19      	ldr	r2, [pc, #100]	; (800319c <TIM_OC4_SetConfig+0x110>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d113      	bne.n	8003164 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003142:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800314a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	019b      	lsls	r3, r3, #6
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	019b      	lsls	r3, r3, #6
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	621a      	str	r2, [r3, #32]
}
 800317e:	bf00      	nop
 8003180:	371c      	adds	r7, #28
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40013400 	.word	0x40013400
 8003194:	40014000 	.word	0x40014000
 8003198:	40014400 	.word	0x40014400
 800319c:	40014800 	.word	0x40014800

080031a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80031e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	041b      	lsls	r3, r3, #16
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a17      	ldr	r2, [pc, #92]	; (8003254 <TIM_OC5_SetConfig+0xb4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00f      	beq.n	800321a <TIM_OC5_SetConfig+0x7a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a16      	ldr	r2, [pc, #88]	; (8003258 <TIM_OC5_SetConfig+0xb8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00b      	beq.n	800321a <TIM_OC5_SetConfig+0x7a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a15      	ldr	r2, [pc, #84]	; (800325c <TIM_OC5_SetConfig+0xbc>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d007      	beq.n	800321a <TIM_OC5_SetConfig+0x7a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a14      	ldr	r2, [pc, #80]	; (8003260 <TIM_OC5_SetConfig+0xc0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d003      	beq.n	800321a <TIM_OC5_SetConfig+0x7a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a13      	ldr	r2, [pc, #76]	; (8003264 <TIM_OC5_SetConfig+0xc4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d109      	bne.n	800322e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003220:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	621a      	str	r2, [r3, #32]
}
 8003248:	bf00      	nop
 800324a:	371c      	adds	r7, #28
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	40012c00 	.word	0x40012c00
 8003258:	40013400 	.word	0x40013400
 800325c:	40014000 	.word	0x40014000
 8003260:	40014400 	.word	0x40014400
 8003264:	40014800 	.word	0x40014800

08003268 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800328e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800329a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	021b      	lsls	r3, r3, #8
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	051b      	lsls	r3, r3, #20
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a18      	ldr	r2, [pc, #96]	; (8003320 <TIM_OC6_SetConfig+0xb8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00f      	beq.n	80032e4 <TIM_OC6_SetConfig+0x7c>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a17      	ldr	r2, [pc, #92]	; (8003324 <TIM_OC6_SetConfig+0xbc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00b      	beq.n	80032e4 <TIM_OC6_SetConfig+0x7c>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a16      	ldr	r2, [pc, #88]	; (8003328 <TIM_OC6_SetConfig+0xc0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d007      	beq.n	80032e4 <TIM_OC6_SetConfig+0x7c>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a15      	ldr	r2, [pc, #84]	; (800332c <TIM_OC6_SetConfig+0xc4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d003      	beq.n	80032e4 <TIM_OC6_SetConfig+0x7c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a14      	ldr	r2, [pc, #80]	; (8003330 <TIM_OC6_SetConfig+0xc8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d109      	bne.n	80032f8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	029b      	lsls	r3, r3, #10
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	621a      	str	r2, [r3, #32]
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40013400 	.word	0x40013400
 8003328:	40014000 	.word	0x40014000
 800332c:	40014400 	.word	0x40014400
 8003330:	40014800 	.word	0x40014800

08003334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f023 0201 	bic.w	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800335e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f023 030a 	bic.w	r3, r3, #10
 8003370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	621a      	str	r2, [r3, #32]
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003392:	b480      	push	{r7}
 8003394:	b087      	sub	sp, #28
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	f023 0210 	bic.w	r2, r3, #16
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	031b      	lsls	r3, r3, #12
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	621a      	str	r2, [r3, #32]
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b085      	sub	sp, #20
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	f043 0307 	orr.w	r3, r3, #7
 8003418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	609a      	str	r2, [r3, #8]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	021a      	lsls	r2, r3, #8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	431a      	orrs	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4313      	orrs	r3, r2
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	609a      	str	r2, [r3, #8]
}
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003480:	2302      	movs	r3, #2
 8003482:	e065      	b.n	8003550 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a2c      	ldr	r2, [pc, #176]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d004      	beq.n	80034b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a2b      	ldr	r2, [pc, #172]	; (8003560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d108      	bne.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80034be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80034d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a1b      	ldr	r2, [pc, #108]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d018      	beq.n	8003524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fa:	d013      	beq.n	8003524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a18      	ldr	r2, [pc, #96]	; (8003564 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00e      	beq.n	8003524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a17      	ldr	r2, [pc, #92]	; (8003568 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d009      	beq.n	8003524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a12      	ldr	r2, [pc, #72]	; (8003560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d004      	beq.n	8003524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a13      	ldr	r2, [pc, #76]	; (800356c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d10c      	bne.n	800353e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800352a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	4313      	orrs	r3, r2
 8003534:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	40012c00 	.word	0x40012c00
 8003560:	40013400 	.word	0x40013400
 8003564:	40000400 	.word	0x40000400
 8003568:	40000800 	.word	0x40000800
 800356c:	40014000 	.word	0x40014000

08003570 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003588:	2302      	movs	r3, #2
 800358a:	e087      	b.n	800369c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a27      	ldr	r2, [pc, #156]	; (80036a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d004      	beq.n	800361a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a25      	ldr	r2, [pc, #148]	; (80036ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d106      	bne.n	8003628 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1e      	ldr	r2, [pc, #120]	; (80036a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1d      	ldr	r2, [pc, #116]	; (80036ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d126      	bne.n	800368a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	051b      	lsls	r3, r3, #20
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a0e      	ldr	r2, [pc, #56]	; (80036a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d004      	beq.n	800367c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a0d      	ldr	r2, [pc, #52]	; (80036ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d106      	bne.n	800368a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	40012c00 	.word	0x40012c00
 80036ac:	40013400 	.word	0x40013400

080036b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e042      	b.n	8003748 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d106      	bne.n	80036da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7fd fbc7 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2224      	movs	r2, #36	; 0x24
 80036de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f82c 	bl	8003750 <UART_SetConfig>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e022      	b.n	8003748 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 faec 	bl	8003ce8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800371e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800372e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fb73 	bl	8003e2c <UART_CheckIdleState>
 8003746:	4603      	mov	r3, r0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003754:	b08c      	sub	sp, #48	; 0x30
 8003756:	af00      	add	r7, sp, #0
 8003758:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	431a      	orrs	r2, r3
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	431a      	orrs	r2, r3
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	4313      	orrs	r3, r2
 8003776:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	4bab      	ldr	r3, [pc, #684]	; (8003a2c <UART_SetConfig+0x2dc>)
 8003780:	4013      	ands	r3, r2
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003788:	430b      	orrs	r3, r1
 800378a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4aa0      	ldr	r2, [pc, #640]	; (8003a30 <UART_SetConfig+0x2e0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d004      	beq.n	80037bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037b8:	4313      	orrs	r3, r2
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80037c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037d0:	430b      	orrs	r3, r1
 80037d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	f023 010f 	bic.w	r1, r3, #15
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a91      	ldr	r2, [pc, #580]	; (8003a34 <UART_SetConfig+0x2e4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d125      	bne.n	8003840 <UART_SetConfig+0xf0>
 80037f4:	4b90      	ldr	r3, [pc, #576]	; (8003a38 <UART_SetConfig+0x2e8>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d81a      	bhi.n	8003838 <UART_SetConfig+0xe8>
 8003802:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <UART_SetConfig+0xb8>)
 8003804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003808:	08003819 	.word	0x08003819
 800380c:	08003829 	.word	0x08003829
 8003810:	08003821 	.word	0x08003821
 8003814:	08003831 	.word	0x08003831
 8003818:	2301      	movs	r3, #1
 800381a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800381e:	e0d6      	b.n	80039ce <UART_SetConfig+0x27e>
 8003820:	2302      	movs	r3, #2
 8003822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003826:	e0d2      	b.n	80039ce <UART_SetConfig+0x27e>
 8003828:	2304      	movs	r3, #4
 800382a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800382e:	e0ce      	b.n	80039ce <UART_SetConfig+0x27e>
 8003830:	2308      	movs	r3, #8
 8003832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003836:	e0ca      	b.n	80039ce <UART_SetConfig+0x27e>
 8003838:	2310      	movs	r3, #16
 800383a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800383e:	e0c6      	b.n	80039ce <UART_SetConfig+0x27e>
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a7d      	ldr	r2, [pc, #500]	; (8003a3c <UART_SetConfig+0x2ec>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d138      	bne.n	80038bc <UART_SetConfig+0x16c>
 800384a:	4b7b      	ldr	r3, [pc, #492]	; (8003a38 <UART_SetConfig+0x2e8>)
 800384c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b0c      	cmp	r3, #12
 8003856:	d82d      	bhi.n	80038b4 <UART_SetConfig+0x164>
 8003858:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <UART_SetConfig+0x110>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	08003895 	.word	0x08003895
 8003864:	080038b5 	.word	0x080038b5
 8003868:	080038b5 	.word	0x080038b5
 800386c:	080038b5 	.word	0x080038b5
 8003870:	080038a5 	.word	0x080038a5
 8003874:	080038b5 	.word	0x080038b5
 8003878:	080038b5 	.word	0x080038b5
 800387c:	080038b5 	.word	0x080038b5
 8003880:	0800389d 	.word	0x0800389d
 8003884:	080038b5 	.word	0x080038b5
 8003888:	080038b5 	.word	0x080038b5
 800388c:	080038b5 	.word	0x080038b5
 8003890:	080038ad 	.word	0x080038ad
 8003894:	2300      	movs	r3, #0
 8003896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800389a:	e098      	b.n	80039ce <UART_SetConfig+0x27e>
 800389c:	2302      	movs	r3, #2
 800389e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038a2:	e094      	b.n	80039ce <UART_SetConfig+0x27e>
 80038a4:	2304      	movs	r3, #4
 80038a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038aa:	e090      	b.n	80039ce <UART_SetConfig+0x27e>
 80038ac:	2308      	movs	r3, #8
 80038ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038b2:	e08c      	b.n	80039ce <UART_SetConfig+0x27e>
 80038b4:	2310      	movs	r3, #16
 80038b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ba:	e088      	b.n	80039ce <UART_SetConfig+0x27e>
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a5f      	ldr	r2, [pc, #380]	; (8003a40 <UART_SetConfig+0x2f0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d125      	bne.n	8003912 <UART_SetConfig+0x1c2>
 80038c6:	4b5c      	ldr	r3, [pc, #368]	; (8003a38 <UART_SetConfig+0x2e8>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038d0:	2b30      	cmp	r3, #48	; 0x30
 80038d2:	d016      	beq.n	8003902 <UART_SetConfig+0x1b2>
 80038d4:	2b30      	cmp	r3, #48	; 0x30
 80038d6:	d818      	bhi.n	800390a <UART_SetConfig+0x1ba>
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d00a      	beq.n	80038f2 <UART_SetConfig+0x1a2>
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d814      	bhi.n	800390a <UART_SetConfig+0x1ba>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <UART_SetConfig+0x19a>
 80038e4:	2b10      	cmp	r3, #16
 80038e6:	d008      	beq.n	80038fa <UART_SetConfig+0x1aa>
 80038e8:	e00f      	b.n	800390a <UART_SetConfig+0x1ba>
 80038ea:	2300      	movs	r3, #0
 80038ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f0:	e06d      	b.n	80039ce <UART_SetConfig+0x27e>
 80038f2:	2302      	movs	r3, #2
 80038f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f8:	e069      	b.n	80039ce <UART_SetConfig+0x27e>
 80038fa:	2304      	movs	r3, #4
 80038fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003900:	e065      	b.n	80039ce <UART_SetConfig+0x27e>
 8003902:	2308      	movs	r3, #8
 8003904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003908:	e061      	b.n	80039ce <UART_SetConfig+0x27e>
 800390a:	2310      	movs	r3, #16
 800390c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003910:	e05d      	b.n	80039ce <UART_SetConfig+0x27e>
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a4b      	ldr	r2, [pc, #300]	; (8003a44 <UART_SetConfig+0x2f4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d125      	bne.n	8003968 <UART_SetConfig+0x218>
 800391c:	4b46      	ldr	r3, [pc, #280]	; (8003a38 <UART_SetConfig+0x2e8>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003922:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003926:	2bc0      	cmp	r3, #192	; 0xc0
 8003928:	d016      	beq.n	8003958 <UART_SetConfig+0x208>
 800392a:	2bc0      	cmp	r3, #192	; 0xc0
 800392c:	d818      	bhi.n	8003960 <UART_SetConfig+0x210>
 800392e:	2b80      	cmp	r3, #128	; 0x80
 8003930:	d00a      	beq.n	8003948 <UART_SetConfig+0x1f8>
 8003932:	2b80      	cmp	r3, #128	; 0x80
 8003934:	d814      	bhi.n	8003960 <UART_SetConfig+0x210>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <UART_SetConfig+0x1f0>
 800393a:	2b40      	cmp	r3, #64	; 0x40
 800393c:	d008      	beq.n	8003950 <UART_SetConfig+0x200>
 800393e:	e00f      	b.n	8003960 <UART_SetConfig+0x210>
 8003940:	2300      	movs	r3, #0
 8003942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003946:	e042      	b.n	80039ce <UART_SetConfig+0x27e>
 8003948:	2302      	movs	r3, #2
 800394a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800394e:	e03e      	b.n	80039ce <UART_SetConfig+0x27e>
 8003950:	2304      	movs	r3, #4
 8003952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003956:	e03a      	b.n	80039ce <UART_SetConfig+0x27e>
 8003958:	2308      	movs	r3, #8
 800395a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800395e:	e036      	b.n	80039ce <UART_SetConfig+0x27e>
 8003960:	2310      	movs	r3, #16
 8003962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003966:	e032      	b.n	80039ce <UART_SetConfig+0x27e>
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a30      	ldr	r2, [pc, #192]	; (8003a30 <UART_SetConfig+0x2e0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d12a      	bne.n	80039c8 <UART_SetConfig+0x278>
 8003972:	4b31      	ldr	r3, [pc, #196]	; (8003a38 <UART_SetConfig+0x2e8>)
 8003974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003978:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800397c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003980:	d01a      	beq.n	80039b8 <UART_SetConfig+0x268>
 8003982:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003986:	d81b      	bhi.n	80039c0 <UART_SetConfig+0x270>
 8003988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800398c:	d00c      	beq.n	80039a8 <UART_SetConfig+0x258>
 800398e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003992:	d815      	bhi.n	80039c0 <UART_SetConfig+0x270>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <UART_SetConfig+0x250>
 8003998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399c:	d008      	beq.n	80039b0 <UART_SetConfig+0x260>
 800399e:	e00f      	b.n	80039c0 <UART_SetConfig+0x270>
 80039a0:	2300      	movs	r3, #0
 80039a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039a6:	e012      	b.n	80039ce <UART_SetConfig+0x27e>
 80039a8:	2302      	movs	r3, #2
 80039aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ae:	e00e      	b.n	80039ce <UART_SetConfig+0x27e>
 80039b0:	2304      	movs	r3, #4
 80039b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b6:	e00a      	b.n	80039ce <UART_SetConfig+0x27e>
 80039b8:	2308      	movs	r3, #8
 80039ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039be:	e006      	b.n	80039ce <UART_SetConfig+0x27e>
 80039c0:	2310      	movs	r3, #16
 80039c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c6:	e002      	b.n	80039ce <UART_SetConfig+0x27e>
 80039c8:	2310      	movs	r3, #16
 80039ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a17      	ldr	r2, [pc, #92]	; (8003a30 <UART_SetConfig+0x2e0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	f040 80a8 	bne.w	8003b2a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d834      	bhi.n	8003a4c <UART_SetConfig+0x2fc>
 80039e2:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <UART_SetConfig+0x298>)
 80039e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e8:	08003a0d 	.word	0x08003a0d
 80039ec:	08003a4d 	.word	0x08003a4d
 80039f0:	08003a15 	.word	0x08003a15
 80039f4:	08003a4d 	.word	0x08003a4d
 80039f8:	08003a1b 	.word	0x08003a1b
 80039fc:	08003a4d 	.word	0x08003a4d
 8003a00:	08003a4d 	.word	0x08003a4d
 8003a04:	08003a4d 	.word	0x08003a4d
 8003a08:	08003a23 	.word	0x08003a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a0c:	f7fe fb3e 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 8003a10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a12:	e021      	b.n	8003a58 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <UART_SetConfig+0x2f8>)
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a18:	e01e      	b.n	8003a58 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1a:	f7fe fac9 	bl	8001fb0 <HAL_RCC_GetSysClockFreq>
 8003a1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a20:	e01a      	b.n	8003a58 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a28:	e016      	b.n	8003a58 <UART_SetConfig+0x308>
 8003a2a:	bf00      	nop
 8003a2c:	cfff69f3 	.word	0xcfff69f3
 8003a30:	40008000 	.word	0x40008000
 8003a34:	40013800 	.word	0x40013800
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	40004400 	.word	0x40004400
 8003a40:	40004800 	.word	0x40004800
 8003a44:	40004c00 	.word	0x40004c00
 8003a48:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a56:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 812a 	beq.w	8003cb4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	4a9e      	ldr	r2, [pc, #632]	; (8003ce0 <UART_SetConfig+0x590>)
 8003a66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d305      	bcc.n	8003a90 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d903      	bls.n	8003a98 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a96:	e10d      	b.n	8003cb4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	60fa      	str	r2, [r7, #12]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	4a8e      	ldr	r2, [pc, #568]	; (8003ce0 <UART_SetConfig+0x590>)
 8003aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2200      	movs	r2, #0
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ab6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003aba:	f7fc fbad 	bl	8000218 <__aeabi_uldivmod>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	020b      	lsls	r3, r1, #8
 8003ad0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ad4:	0202      	lsls	r2, r0, #8
 8003ad6:	6979      	ldr	r1, [r7, #20]
 8003ad8:	6849      	ldr	r1, [r1, #4]
 8003ada:	0849      	lsrs	r1, r1, #1
 8003adc:	2000      	movs	r0, #0
 8003ade:	460c      	mov	r4, r1
 8003ae0:	4605      	mov	r5, r0
 8003ae2:	eb12 0804 	adds.w	r8, r2, r4
 8003ae6:	eb43 0905 	adc.w	r9, r3, r5
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	469a      	mov	sl, r3
 8003af2:	4693      	mov	fp, r2
 8003af4:	4652      	mov	r2, sl
 8003af6:	465b      	mov	r3, fp
 8003af8:	4640      	mov	r0, r8
 8003afa:	4649      	mov	r1, r9
 8003afc:	f7fc fb8c 	bl	8000218 <__aeabi_uldivmod>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4613      	mov	r3, r2
 8003b06:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b0e:	d308      	bcc.n	8003b22 <UART_SetConfig+0x3d2>
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b16:	d204      	bcs.n	8003b22 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6a3a      	ldr	r2, [r7, #32]
 8003b1e:	60da      	str	r2, [r3, #12]
 8003b20:	e0c8      	b.n	8003cb4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b28:	e0c4      	b.n	8003cb4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b32:	d167      	bne.n	8003c04 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003b34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d828      	bhi.n	8003b8e <UART_SetConfig+0x43e>
 8003b3c:	a201      	add	r2, pc, #4	; (adr r2, 8003b44 <UART_SetConfig+0x3f4>)
 8003b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b42:	bf00      	nop
 8003b44:	08003b69 	.word	0x08003b69
 8003b48:	08003b71 	.word	0x08003b71
 8003b4c:	08003b79 	.word	0x08003b79
 8003b50:	08003b8f 	.word	0x08003b8f
 8003b54:	08003b7f 	.word	0x08003b7f
 8003b58:	08003b8f 	.word	0x08003b8f
 8003b5c:	08003b8f 	.word	0x08003b8f
 8003b60:	08003b8f 	.word	0x08003b8f
 8003b64:	08003b87 	.word	0x08003b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b68:	f7fe fa90 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 8003b6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b6e:	e014      	b.n	8003b9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b70:	f7fe faa2 	bl	80020b8 <HAL_RCC_GetPCLK2Freq>
 8003b74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b76:	e010      	b.n	8003b9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b78:	4b5a      	ldr	r3, [pc, #360]	; (8003ce4 <UART_SetConfig+0x594>)
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b7c:	e00d      	b.n	8003b9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b7e:	f7fe fa17 	bl	8001fb0 <HAL_RCC_GetSysClockFreq>
 8003b82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b84:	e009      	b.n	8003b9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b8c:	e005      	b.n	8003b9a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8089 	beq.w	8003cb4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	4a4e      	ldr	r2, [pc, #312]	; (8003ce0 <UART_SetConfig+0x590>)
 8003ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bac:	461a      	mov	r2, r3
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bb4:	005a      	lsls	r2, r3, #1
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	085b      	lsrs	r3, r3, #1
 8003bbc:	441a      	add	r2, r3
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	2b0f      	cmp	r3, #15
 8003bcc:	d916      	bls.n	8003bfc <UART_SetConfig+0x4ac>
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd4:	d212      	bcs.n	8003bfc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	f023 030f 	bic.w	r3, r3, #15
 8003bde:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	085b      	lsrs	r3, r3, #1
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	8bfb      	ldrh	r3, [r7, #30]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	8bfa      	ldrh	r2, [r7, #30]
 8003bf8:	60da      	str	r2, [r3, #12]
 8003bfa:	e05b      	b.n	8003cb4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c02:	e057      	b.n	8003cb4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d828      	bhi.n	8003c5e <UART_SetConfig+0x50e>
 8003c0c:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <UART_SetConfig+0x4c4>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c39 	.word	0x08003c39
 8003c18:	08003c41 	.word	0x08003c41
 8003c1c:	08003c49 	.word	0x08003c49
 8003c20:	08003c5f 	.word	0x08003c5f
 8003c24:	08003c4f 	.word	0x08003c4f
 8003c28:	08003c5f 	.word	0x08003c5f
 8003c2c:	08003c5f 	.word	0x08003c5f
 8003c30:	08003c5f 	.word	0x08003c5f
 8003c34:	08003c57 	.word	0x08003c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c38:	f7fe fa28 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 8003c3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c3e:	e014      	b.n	8003c6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c40:	f7fe fa3a 	bl	80020b8 <HAL_RCC_GetPCLK2Freq>
 8003c44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c46:	e010      	b.n	8003c6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c48:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <UART_SetConfig+0x594>)
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c4c:	e00d      	b.n	8003c6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c4e:	f7fe f9af 	bl	8001fb0 <HAL_RCC_GetSysClockFreq>
 8003c52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c54:	e009      	b.n	8003c6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c5c:	e005      	b.n	8003c6a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c68:	bf00      	nop
    }

    if (pclk != 0U)
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d021      	beq.n	8003cb4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	4a1a      	ldr	r2, [pc, #104]	; (8003ce0 <UART_SetConfig+0x590>)
 8003c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	085b      	lsrs	r3, r3, #1
 8003c88:	441a      	add	r2, r3
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	2b0f      	cmp	r3, #15
 8003c98:	d909      	bls.n	8003cae <UART_SetConfig+0x55e>
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca0:	d205      	bcs.n	8003cae <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60da      	str	r2, [r3, #12]
 8003cac:	e002      	b.n	8003cb4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003cd0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3730      	adds	r7, #48	; 0x30
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cde:	bf00      	nop
 8003ce0:	080042e0 	.word	0x080042e0
 8003ce4:	00f42400 	.word	0x00f42400

08003ce8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d01a      	beq.n	8003dfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de6:	d10a      	bne.n	8003dfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	605a      	str	r2, [r3, #4]
  }
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e3c:	f7fd f936 	bl	80010ac <HAL_GetTick>
 8003e40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d10e      	bne.n	8003e6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f82f 	bl	8003ec2 <UART_WaitOnFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e025      	b.n	8003eba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d10e      	bne.n	8003e9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f819 	bl	8003ec2 <UART_WaitOnFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e00f      	b.n	8003eba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b09c      	sub	sp, #112	; 0x70
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	603b      	str	r3, [r7, #0]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed2:	e0a9      	b.n	8004028 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	f000 80a5 	beq.w	8004028 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ede:	f7fd f8e5 	bl	80010ac <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d302      	bcc.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d140      	bne.n	8003f76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f08:	667b      	str	r3, [r7, #100]	; 0x64
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f14:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e6      	bne.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3308      	adds	r3, #8
 8003f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3308      	adds	r3, #8
 8003f44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f46:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e5      	bne.n	8003f26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e069      	b.n	800404a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d051      	beq.n	8004028 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f92:	d149      	bne.n	8004028 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8003fbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e6      	bne.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	e853 3f00 	ldrex	r3, [r3]
 8003fde:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f023 0301 	bic.w	r3, r3, #1
 8003fe6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3308      	adds	r3, #8
 8003fee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ff0:	623a      	str	r2, [r7, #32]
 8003ff2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	69f9      	ldr	r1, [r7, #28]
 8003ff6:	6a3a      	ldr	r2, [r7, #32]
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e5      	bne.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e010      	b.n	800404a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	69da      	ldr	r2, [r3, #28]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4013      	ands	r3, r2
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	429a      	cmp	r2, r3
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	429a      	cmp	r2, r3
 8004044:	f43f af46 	beq.w	8003ed4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3770      	adds	r7, #112	; 0x70
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004052:	b480      	push	{r7}
 8004054:	b085      	sub	sp, #20
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_UARTEx_DisableFifoMode+0x16>
 8004064:	2302      	movs	r3, #2
 8004066:	e027      	b.n	80040b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2224      	movs	r2, #36	; 0x24
 8004074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0201 	bic.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004096:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80040d8:	2302      	movs	r3, #2
 80040da:	e02d      	b.n	8004138 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2224      	movs	r2, #36	; 0x24
 80040e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0201 	bic.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f84f 	bl	80041bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004154:	2302      	movs	r3, #2
 8004156:	e02d      	b.n	80041b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2224      	movs	r2, #36	; 0x24
 8004164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0201 	bic.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f811 	bl	80041bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d108      	bne.n	80041de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80041dc:	e031      	b.n	8004242 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80041de:	2308      	movs	r3, #8
 80041e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041e2:	2308      	movs	r3, #8
 80041e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	0e5b      	lsrs	r3, r3, #25
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	0f5b      	lsrs	r3, r3, #29
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004206:	7bbb      	ldrb	r3, [r7, #14]
 8004208:	7b3a      	ldrb	r2, [r7, #12]
 800420a:	4911      	ldr	r1, [pc, #68]	; (8004250 <UARTEx_SetNbDataToProcess+0x94>)
 800420c:	5c8a      	ldrb	r2, [r1, r2]
 800420e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004212:	7b3a      	ldrb	r2, [r7, #12]
 8004214:	490f      	ldr	r1, [pc, #60]	; (8004254 <UARTEx_SetNbDataToProcess+0x98>)
 8004216:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004218:	fb93 f3f2 	sdiv	r3, r3, r2
 800421c:	b29a      	uxth	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	7b7a      	ldrb	r2, [r7, #13]
 8004228:	4909      	ldr	r1, [pc, #36]	; (8004250 <UARTEx_SetNbDataToProcess+0x94>)
 800422a:	5c8a      	ldrb	r2, [r1, r2]
 800422c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004230:	7b7a      	ldrb	r2, [r7, #13]
 8004232:	4908      	ldr	r1, [pc, #32]	; (8004254 <UARTEx_SetNbDataToProcess+0x98>)
 8004234:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004236:	fb93 f3f2 	sdiv	r3, r3, r2
 800423a:	b29a      	uxth	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004242:	bf00      	nop
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	080042f8 	.word	0x080042f8
 8004254:	08004300 	.word	0x08004300

08004258 <memset>:
 8004258:	4402      	add	r2, r0
 800425a:	4603      	mov	r3, r0
 800425c:	4293      	cmp	r3, r2
 800425e:	d100      	bne.n	8004262 <memset+0xa>
 8004260:	4770      	bx	lr
 8004262:	f803 1b01 	strb.w	r1, [r3], #1
 8004266:	e7f9      	b.n	800425c <memset+0x4>

08004268 <__libc_init_array>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	4d0d      	ldr	r5, [pc, #52]	; (80042a0 <__libc_init_array+0x38>)
 800426c:	4c0d      	ldr	r4, [pc, #52]	; (80042a4 <__libc_init_array+0x3c>)
 800426e:	1b64      	subs	r4, r4, r5
 8004270:	10a4      	asrs	r4, r4, #2
 8004272:	2600      	movs	r6, #0
 8004274:	42a6      	cmp	r6, r4
 8004276:	d109      	bne.n	800428c <__libc_init_array+0x24>
 8004278:	4d0b      	ldr	r5, [pc, #44]	; (80042a8 <__libc_init_array+0x40>)
 800427a:	4c0c      	ldr	r4, [pc, #48]	; (80042ac <__libc_init_array+0x44>)
 800427c:	f000 f818 	bl	80042b0 <_init>
 8004280:	1b64      	subs	r4, r4, r5
 8004282:	10a4      	asrs	r4, r4, #2
 8004284:	2600      	movs	r6, #0
 8004286:	42a6      	cmp	r6, r4
 8004288:	d105      	bne.n	8004296 <__libc_init_array+0x2e>
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004290:	4798      	blx	r3
 8004292:	3601      	adds	r6, #1
 8004294:	e7ee      	b.n	8004274 <__libc_init_array+0xc>
 8004296:	f855 3b04 	ldr.w	r3, [r5], #4
 800429a:	4798      	blx	r3
 800429c:	3601      	adds	r6, #1
 800429e:	e7f2      	b.n	8004286 <__libc_init_array+0x1e>
 80042a0:	08004310 	.word	0x08004310
 80042a4:	08004310 	.word	0x08004310
 80042a8:	08004310 	.word	0x08004310
 80042ac:	08004314 	.word	0x08004314

080042b0 <_init>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	bf00      	nop
 80042b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b6:	bc08      	pop	{r3}
 80042b8:	469e      	mov	lr, r3
 80042ba:	4770      	bx	lr

080042bc <_fini>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	bf00      	nop
 80042c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c2:	bc08      	pop	{r3}
 80042c4:	469e      	mov	lr, r3
 80042c6:	4770      	bx	lr
