
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bb4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005d94  08005d94  00015d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e20  08005e20  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005e20  08005e20  00015e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e28  08005e28  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e28  08005e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e2c  08005e2c  00015e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20000068  08005e98  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08005e98  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000156e0  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002948  00000000  00000000  000357bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  00038108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f4e  00000000  00000000  00039488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f893  00000000  00000000  0003a3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000170f2  00000000  00000000  00059c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca87e  00000000  00000000  00070d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005af8  00000000  00000000  0013b5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001410d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005d7c 	.word	0x08005d7c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08005d7c 	.word	0x08005d7c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	230a      	movs	r3, #10
 80005ce:	68b9      	ldr	r1, [r7, #8]
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <_write+0x24>)
 80005d2:	f003 fe80 	bl	80042d6 <HAL_UART_Transmit>
	return len;
 80005d6:	687b      	ldr	r3, [r7, #4]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	2000024c 	.word	0x2000024c

080005e4 <read_encoder_value>:

int16_t read_encoder_value(TIM_TypeDef *TIM)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	uint16_t enc_buff = TIM->CNT;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f0:	81fb      	strh	r3, [r7, #14]
	TIM->CNT = 0;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2200      	movs	r2, #0
 80005f6:	625a      	str	r2, [r3, #36]	; 0x24
	return (int16_t)enc_buff;
 80005f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fe3f 	bl	800128e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f838 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 facc 	bl	8000bb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000618:	f000 fa7e 	bl	8000b18 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800061c:	f000 f984 	bl	8000928 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000620:	f000 f9d6 	bl	80009d0 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000624:	f000 f8ba 	bl	800079c <MX_TIM1_Init>
  MX_TIM17_Init();
 8000628:	f000 fa50 	bl	8000acc <MX_TIM17_Init>
  MX_I2C1_Init();
 800062c:	f000 f876 	bl	800071c <MX_I2C1_Init>
  MX_TIM16_Init();
 8000630:	f000 fa24 	bl	8000a7c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000634:	213c      	movs	r1, #60	; 0x3c
 8000636:	480e      	ldr	r0, [pc, #56]	; (8000670 <main+0x68>)
 8000638:	f002 fbd6 	bl	8002de8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800063c:	213c      	movs	r1, #60	; 0x3c
 800063e:	480d      	ldr	r0, [pc, #52]	; (8000674 <main+0x6c>)
 8000640:	f002 fbd2 	bl	8002de8 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Right:%d\r\n",read_encoder_value(TIM2));
 8000644:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000648:	f7ff ffcc 	bl	80005e4 <read_encoder_value>
 800064c:	4603      	mov	r3, r0
 800064e:	4619      	mov	r1, r3
 8000650:	4809      	ldr	r0, [pc, #36]	; (8000678 <main+0x70>)
 8000652:	f004 fd1d 	bl	8005090 <iprintf>
	  printf("Left :%d\r\n",read_encoder_value(TIM3));
 8000656:	4809      	ldr	r0, [pc, #36]	; (800067c <main+0x74>)
 8000658:	f7ff ffc4 	bl	80005e4 <read_encoder_value>
 800065c:	4603      	mov	r3, r0
 800065e:	4619      	mov	r1, r3
 8000660:	4807      	ldr	r0, [pc, #28]	; (8000680 <main+0x78>)
 8000662:	f004 fd15 	bl	8005090 <iprintf>
	  HAL_Delay(200);
 8000666:	20c8      	movs	r0, #200	; 0xc8
 8000668:	f000 fe82 	bl	8001370 <HAL_Delay>
	  printf("Right:%d\r\n",read_encoder_value(TIM2));
 800066c:	e7ea      	b.n	8000644 <main+0x3c>
 800066e:	bf00      	nop
 8000670:	2000011c 	.word	0x2000011c
 8000674:	20000168 	.word	0x20000168
 8000678:	08005d94 	.word	0x08005d94
 800067c:	40000400 	.word	0x40000400
 8000680:	08005da0 	.word	0x08005da0

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0318 	add.w	r3, r7, #24
 800068e:	2238      	movs	r2, #56	; 0x38
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f004 fd51 	bl	800513a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006aa:	f001 fa77 	bl	8001b9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2340      	movs	r3, #64	; 0x40
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006c8:	230a      	movs	r3, #10
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0318 	add.w	r3, r7, #24
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fb01 	bl	8001ce4 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x68>
  {
    Error_Handler();
 80006e8:	f000 fab8 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2303      	movs	r3, #3
 80006f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2102      	movs	r1, #2
 8000704:	4618      	mov	r0, r3
 8000706:	f001 fe05 	bl	8002314 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000710:	f000 faa4 	bl	8000c5c <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3750      	adds	r7, #80	; 0x50
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_I2C1_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_I2C1_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_I2C1_Init+0x74>)
 8000728:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <MX_I2C1_Init+0x7c>)
 800072a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_I2C1_Init+0x74>)
 8000734:	2201      	movs	r2, #1
 8000736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_I2C1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_I2C1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2C1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_I2C1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_I2C1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000756:	480e      	ldr	r0, [pc, #56]	; (8000790 <MX_I2C1_Init+0x74>)
 8000758:	f001 f8f9 	bl	800194e <HAL_I2C_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000762:	f000 fa7b 	bl	8000c5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000766:	2100      	movs	r1, #0
 8000768:	4809      	ldr	r0, [pc, #36]	; (8000790 <MX_I2C1_Init+0x74>)
 800076a:	f001 f97f 	bl	8001a6c <HAL_I2CEx_ConfigAnalogFilter>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000774:	f000 fa72 	bl	8000c5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000778:	2100      	movs	r1, #0
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_I2C1_Init+0x74>)
 800077c:	f001 f9c1 	bl	8001b02 <HAL_I2CEx_ConfigDigitalFilter>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 fa69 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000084 	.word	0x20000084
 8000794:	40005400 	.word	0x40005400
 8000798:	00702991 	.word	0x00702991

0800079c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b09c      	sub	sp, #112	; 0x70
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2234      	movs	r2, #52	; 0x34
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f004 fcaf 	bl	800513a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007dc:	4b4f      	ldr	r3, [pc, #316]	; (800091c <MX_TIM1_Init+0x180>)
 80007de:	4a50      	ldr	r2, [pc, #320]	; (8000920 <MX_TIM1_Init+0x184>)
 80007e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80007e2:	4b4e      	ldr	r3, [pc, #312]	; (800091c <MX_TIM1_Init+0x180>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e8:	4b4c      	ldr	r3, [pc, #304]	; (800091c <MX_TIM1_Init+0x180>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80007ee:	4b4b      	ldr	r3, [pc, #300]	; (800091c <MX_TIM1_Init+0x180>)
 80007f0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80007f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f6:	4b49      	ldr	r3, [pc, #292]	; (800091c <MX_TIM1_Init+0x180>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007fc:	4b47      	ldr	r3, [pc, #284]	; (800091c <MX_TIM1_Init+0x180>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000802:	4b46      	ldr	r3, [pc, #280]	; (800091c <MX_TIM1_Init+0x180>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000808:	4844      	ldr	r0, [pc, #272]	; (800091c <MX_TIM1_Init+0x180>)
 800080a:	f002 f98f 	bl	8002b2c <HAL_TIM_Base_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000814:	f000 fa22 	bl	8000c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800081e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000822:	4619      	mov	r1, r3
 8000824:	483d      	ldr	r0, [pc, #244]	; (800091c <MX_TIM1_Init+0x180>)
 8000826:	f002 fe01 	bl	800342c <HAL_TIM_ConfigClockSource>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000830:	f000 fa14 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000834:	4839      	ldr	r0, [pc, #228]	; (800091c <MX_TIM1_Init+0x180>)
 8000836:	f002 f9d0 	bl	8002bda <HAL_TIM_PWM_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000840:	f000 fa0c 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000850:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000854:	4619      	mov	r1, r3
 8000856:	4831      	ldr	r0, [pc, #196]	; (800091c <MX_TIM1_Init+0x180>)
 8000858:	f003 fb5c 	bl	8003f14 <HAL_TIMEx_MasterConfigSynchronization>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000862:	f000 f9fb 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 8000866:	4b2f      	ldr	r3, [pc, #188]	; (8000924 <MX_TIM1_Init+0x188>)
 8000868:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086e:	2300      	movs	r3, #0
 8000870:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000872:	2300      	movs	r3, #0
 8000874:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000882:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000886:	2200      	movs	r2, #0
 8000888:	4619      	mov	r1, r3
 800088a:	4824      	ldr	r0, [pc, #144]	; (800091c <MX_TIM1_Init+0x180>)
 800088c:	f002 fcba 	bl	8003204 <HAL_TIM_PWM_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000896:	f000 f9e1 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800089a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800089e:	2204      	movs	r2, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	481e      	ldr	r0, [pc, #120]	; (800091c <MX_TIM1_Init+0x180>)
 80008a4:	f002 fcae 	bl	8003204 <HAL_TIM_PWM_ConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80008ae:	f000 f9d5 	bl	8000c5c <Error_Handler>
  }
  HAL_TIMEx_ConfigAsymmetricalDeadTime(&htim1, 5);
 80008b2:	2105      	movs	r1, #5
 80008b4:	4819      	ldr	r0, [pc, #100]	; (800091c <MX_TIM1_Init+0x180>)
 80008b6:	f003 fc4f 	bl	8004158 <HAL_TIMEx_ConfigAsymmetricalDeadTime>
  HAL_TIMEx_EnableAsymmetricalDeadTime(&htim1);
 80008ba:	4818      	ldr	r0, [pc, #96]	; (800091c <MX_TIM1_Init+0x180>)
 80008bc:	f003 fc62 	bl	8004184 <HAL_TIMEx_EnableAsymmetricalDeadTime>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4619      	mov	r1, r3
 80008fc:	4807      	ldr	r0, [pc, #28]	; (800091c <MX_TIM1_Init+0x180>)
 80008fe:	f003 fb8b 	bl	8004018 <HAL_TIMEx_ConfigBreakDeadTime>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8000908:	f000 f9a8 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <MX_TIM1_Init+0x180>)
 800090e:	f000 fb1d 	bl	8000f4c <HAL_TIM_MspPostInit>

}
 8000912:	bf00      	nop
 8000914:	3770      	adds	r7, #112	; 0x70
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000d0 	.word	0x200000d0
 8000920:	40012c00 	.word	0x40012c00
 8000924:	00010060 	.word	0x00010060

08000928 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	; 0x30
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2224      	movs	r2, #36	; 0x24
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f004 fbff 	bl	800513a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <MX_TIM2_Init+0xa4>)
 8000948:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800094c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_TIM2_Init+0xa4>)
 8000950:	224f      	movs	r2, #79	; 0x4f
 8000952:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_TIM2_Init+0xa4>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_TIM2_Init+0xa4>)
 800095c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000960:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_TIM2_Init+0xa4>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_TIM2_Init+0xa4>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800096e:	2303      	movs	r3, #3
 8000970:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000976:	2301      	movs	r3, #1
 8000978:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000986:	2301      	movs	r3, #1
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <MX_TIM2_Init+0xa4>)
 800099a:	f002 f97f 	bl	8002c9c <HAL_TIM_Encoder_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80009a4:	f000 f95a 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a8:	2300      	movs	r3, #0
 80009aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009b0:	463b      	mov	r3, r7
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_TIM2_Init+0xa4>)
 80009b6:	f003 faad 	bl	8003f14 <HAL_TIMEx_MasterConfigSynchronization>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80009c0:	f000 f94c 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3730      	adds	r7, #48	; 0x30
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000011c 	.word	0x2000011c

080009d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	2224      	movs	r2, #36	; 0x24
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f004 fbab 	bl	800513a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e4:	463b      	mov	r3, r7
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009ee:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <MX_TIM3_Init+0xa4>)
 80009f0:	4a21      	ldr	r2, [pc, #132]	; (8000a78 <MX_TIM3_Init+0xa8>)
 80009f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009f4:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_TIM3_Init+0xa4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <MX_TIM3_Init+0xa4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_TIM3_Init+0xa4>)
 8000a02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_TIM3_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_TIM3_Init+0xa4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a14:	2303      	movs	r3, #3
 8000a16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480d      	ldr	r0, [pc, #52]	; (8000a74 <MX_TIM3_Init+0xa4>)
 8000a40:	f002 f92c 	bl	8002c9c <HAL_TIM_Encoder_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000a4a:	f000 f907 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a56:	463b      	mov	r3, r7
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4806      	ldr	r0, [pc, #24]	; (8000a74 <MX_TIM3_Init+0xa4>)
 8000a5c:	f003 fa5a 	bl	8003f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000a66:	f000 f8f9 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	3730      	adds	r7, #48	; 0x30
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000168 	.word	0x20000168
 8000a78:	40000400 	.word	0x40000400

08000a7c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_TIM16_Init+0x48>)
 8000a82:	4a11      	ldr	r2, [pc, #68]	; (8000ac8 <MX_TIM16_Init+0x4c>)
 8000a84:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 799;
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_TIM16_Init+0x48>)
 8000a88:	f240 321f 	movw	r2, #799	; 0x31f
 8000a8c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <MX_TIM16_Init+0x48>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_TIM16_Init+0x48>)
 8000a96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a9a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_TIM16_Init+0x48>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_TIM16_Init+0x48>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_TIM16_Init+0x48>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_TIM16_Init+0x48>)
 8000ab0:	f002 f83c 	bl	8002b2c <HAL_TIM_Base_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000aba:	f000 f8cf 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200001b4 	.word	0x200001b4
 8000ac8:	40014400 	.word	0x40014400

08000acc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_TIM17_Init+0x44>)
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <MX_TIM17_Init+0x48>)
 8000ad4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 79;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_TIM17_Init+0x44>)
 8000ad8:	224f      	movs	r2, #79	; 0x4f
 8000ada:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_TIM17_Init+0x44>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_TIM17_Init+0x44>)
 8000ae4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ae8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_TIM17_Init+0x44>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <MX_TIM17_Init+0x44>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_TIM17_Init+0x44>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_TIM17_Init+0x44>)
 8000afe:	f002 f815 	bl	8002b2c <HAL_TIM_Base_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000b08:	f000 f8a8 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000200 	.word	0x20000200
 8000b14:	40014800 	.word	0x40014800

08000b18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b1e:	4a23      	ldr	r2, [pc, #140]	; (8000bac <MX_USART2_UART_Init+0x94>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b60:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b62:	f003 fb68 	bl	8004236 <HAL_UART_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b6c:	f000 f876 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b70:	2100      	movs	r1, #0
 8000b72:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b74:	f004 f900 	bl	8004d78 <HAL_UARTEx_SetTxFifoThreshold>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b7e:	f000 f86d 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b82:	2100      	movs	r1, #0
 8000b84:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b86:	f004 f935 	bl	8004df4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b90:	f000 f864 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b96:	f004 f8b6 	bl	8004d06 <HAL_UARTEx_DisableFifoMode>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ba0:	f000 f85c 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2000024c 	.word	0x2000024c
 8000bac:	40004400 	.word	0x40004400

08000bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <MX_GPIO_Init+0xa4>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	4a22      	ldr	r2, [pc, #136]	; (8000c54 <MX_GPIO_Init+0xa4>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd2:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <MX_GPIO_Init+0xa4>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <MX_GPIO_Init+0xa4>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <MX_GPIO_Init+0xa4>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_GPIO_Init+0xa4>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfc:	4816      	ldr	r0, [pc, #88]	; (8000c58 <MX_GPIO_Init+0xa8>)
 8000bfe:	f000 fe6b 	bl	80018d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	4619      	mov	r1, r3
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1a:	f000 fcdb 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	4619      	mov	r1, r3
 8000c36:	4808      	ldr	r0, [pc, #32]	; (8000c58 <MX_GPIO_Init+0xa8>)
 8000c38:	f000 fccc 	bl	80015d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2017      	movs	r0, #23
 8000c42:	f000 fc92 	bl	800156a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c46:	2017      	movs	r0, #23
 8000c48:	f000 fca9 	bl	800159e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4c:	bf00      	nop
 8000c4e:	3720      	adds	r7, #32
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40021000 	.word	0x40021000
 8000c58:	48000400 	.word	0x48000400

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <Error_Handler+0x8>
	...

08000c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_MspInit+0x44>)
 8000c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c72:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <HAL_MspInit+0x44>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6613      	str	r3, [r2, #96]	; 0x60
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_MspInit+0x44>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <HAL_MspInit+0x44>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <HAL_MspInit+0x44>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c90:	6593      	str	r3, [r2, #88]	; 0x58
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_MspInit+0x44>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b09c      	sub	sp, #112	; 0x70
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc8:	f107 0318 	add.w	r3, r7, #24
 8000ccc:	2244      	movs	r2, #68	; 0x44
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f004 fa32 	bl	800513a <memset>
  if(hi2c->Instance==I2C1)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a2d      	ldr	r2, [pc, #180]	; (8000d90 <HAL_I2C_MspInit+0xe0>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d153      	bne.n	8000d88 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ce0:	2340      	movs	r3, #64	; 0x40
 8000ce2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce8:	f107 0318 	add.w	r3, r7, #24
 8000cec:	4618      	mov	r0, r3
 8000cee:	f001 fd2d 	bl	800274c <HAL_RCCEx_PeriphCLKConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000cf8:	f7ff ffb0 	bl	8000c5c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <HAL_I2C_MspInit+0xe4>)
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d00:	4a24      	ldr	r2, [pc, #144]	; (8000d94 <HAL_I2C_MspInit+0xe4>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d08:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <HAL_I2C_MspInit+0xe4>)
 8000d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <HAL_I2C_MspInit+0xe4>)
 8000d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d18:	4a1e      	ldr	r2, [pc, #120]	; (8000d94 <HAL_I2C_MspInit+0xe4>)
 8000d1a:	f043 0302 	orr.w	r3, r3, #2
 8000d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d20:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <HAL_I2C_MspInit+0xe4>)
 8000d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d30:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d32:	2312      	movs	r3, #18
 8000d34:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d46:	4619      	mov	r1, r3
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4c:	f000 fc42 	bl	80015d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d54:	2312      	movs	r3, #18
 8000d56:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d60:	2304      	movs	r3, #4
 8000d62:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480b      	ldr	r0, [pc, #44]	; (8000d98 <HAL_I2C_MspInit+0xe8>)
 8000d6c:	f000 fc32 	bl	80015d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <HAL_I2C_MspInit+0xe4>)
 8000d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d74:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <HAL_I2C_MspInit+0xe4>)
 8000d76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_I2C_MspInit+0xe4>)
 8000d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d88:	bf00      	nop
 8000d8a:	3770      	adds	r7, #112	; 0x70
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40005400 	.word	0x40005400
 8000d94:	40021000 	.word	0x40021000
 8000d98:	48000400 	.word	0x48000400

08000d9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a2b      	ldr	r2, [pc, #172]	; (8000e58 <HAL_TIM_Base_MspInit+0xbc>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d11c      	bne.n	8000de8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dae:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <HAL_TIM_Base_MspInit+0xc0>)
 8000db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db2:	4a2a      	ldr	r2, [pc, #168]	; (8000e5c <HAL_TIM_Base_MspInit+0xc0>)
 8000db4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000db8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dba:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <HAL_TIM_Base_MspInit+0xc0>)
 8000dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2019      	movs	r0, #25
 8000dcc:	f000 fbcd 	bl	800156a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000dd0:	2019      	movs	r0, #25
 8000dd2:	f000 fbe4 	bl	800159e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	201a      	movs	r0, #26
 8000ddc:	f000 fbc5 	bl	800156a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000de0:	201a      	movs	r0, #26
 8000de2:	f000 fbdc 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000de6:	e032      	b.n	8000e4e <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM16)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a1c      	ldr	r2, [pc, #112]	; (8000e60 <HAL_TIM_Base_MspInit+0xc4>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d114      	bne.n	8000e1c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <HAL_TIM_Base_MspInit+0xc0>)
 8000df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df6:	4a19      	ldr	r2, [pc, #100]	; (8000e5c <HAL_TIM_Base_MspInit+0xc0>)
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <HAL_TIM_Base_MspInit+0xc0>)
 8000e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2019      	movs	r0, #25
 8000e10:	f000 fbab 	bl	800156a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e14:	2019      	movs	r0, #25
 8000e16:	f000 fbc2 	bl	800159e <HAL_NVIC_EnableIRQ>
}
 8000e1a:	e018      	b.n	8000e4e <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM17)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <HAL_TIM_Base_MspInit+0xc8>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d113      	bne.n	8000e4e <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <HAL_TIM_Base_MspInit+0xc0>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2a:	4a0c      	ldr	r2, [pc, #48]	; (8000e5c <HAL_TIM_Base_MspInit+0xc0>)
 8000e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e30:	6613      	str	r3, [r2, #96]	; 0x60
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_TIM_Base_MspInit+0xc0>)
 8000e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	201a      	movs	r0, #26
 8000e44:	f000 fb91 	bl	800156a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000e48:	201a      	movs	r0, #26
 8000e4a:	f000 fba8 	bl	800159e <HAL_NVIC_EnableIRQ>
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40012c00 	.word	0x40012c00
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40014400 	.word	0x40014400
 8000e64:	40014800 	.word	0x40014800

08000e68 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08c      	sub	sp, #48	; 0x30
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e88:	d129      	bne.n	8000ede <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e8a:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8e:	4a2d      	ldr	r2, [pc, #180]	; (8000f44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6593      	str	r3, [r2, #88]	; 0x58
 8000e96:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	4a27      	ldr	r2, [pc, #156]	; (8000f44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eae:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed8:	f000 fb7c 	bl	80015d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000edc:	e02d      	b.n	8000f3a <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM3)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a19      	ldr	r2, [pc, #100]	; (8000f48 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d128      	bne.n	8000f3a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eec:	4a15      	ldr	r2, [pc, #84]	; (8000f44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000eee:	f043 0302 	orr.w	r3, r3, #2
 8000ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000f18:	2350      	movs	r3, #80	; 0x50
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	4619      	mov	r1, r3
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f000 fb4d 	bl	80015d4 <HAL_GPIO_Init>
}
 8000f3a:	bf00      	nop
 8000f3c:	3730      	adds	r7, #48	; 0x30
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40000400 	.word	0x40000400

08000f4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <HAL_TIM_MspPostInit+0x68>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d11d      	bne.n	8000faa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_TIM_MspPostInit+0x6c>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <HAL_TIM_MspPostInit+0x6c>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_TIM_MspPostInit+0x6c>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000f86:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000f8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f98:	2306      	movs	r3, #6
 8000f9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa6:	f000 fb15 	bl	80015d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	3720      	adds	r7, #32
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40012c00 	.word	0x40012c00
 8000fb8:	40021000 	.word	0x40021000

08000fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b09a      	sub	sp, #104	; 0x68
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	2244      	movs	r2, #68	; 0x44
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f004 f8ac 	bl	800513a <memset>
  if(huart->Instance==USART2)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a1f      	ldr	r2, [pc, #124]	; (8001064 <HAL_UART_MspInit+0xa8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d136      	bne.n	800105a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f001 fba7 	bl	800274c <HAL_RCCEx_PeriphCLKConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001004:	f7ff fe2a 	bl	8000c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_UART_MspInit+0xac>)
 800100a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100c:	4a16      	ldr	r2, [pc, #88]	; (8001068 <HAL_UART_MspInit+0xac>)
 800100e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001012:	6593      	str	r3, [r2, #88]	; 0x58
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_UART_MspInit+0xac>)
 8001016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_UART_MspInit+0xac>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	4a10      	ldr	r2, [pc, #64]	; (8001068 <HAL_UART_MspInit+0xac>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_UART_MspInit+0xac>)
 800102e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001038:	230c      	movs	r3, #12
 800103a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001048:	2307      	movs	r3, #7
 800104a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001050:	4619      	mov	r1, r3
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f000 fabd 	bl	80015d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	3768      	adds	r7, #104	; 0x68
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40004400 	.word	0x40004400
 8001068:	40021000 	.word	0x40021000

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler+0x4>

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b8:	f000 f93c 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80010c4:	2080      	movs	r0, #128	; 0x80
 80010c6:	f000 fc1f 	bl	8001908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010d4:	4803      	ldr	r0, [pc, #12]	; (80010e4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80010d6:	f001 ff15 	bl	8002f04 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80010da:	4803      	ldr	r0, [pc, #12]	; (80010e8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80010dc:	f001 ff12 	bl	8002f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200000d0 	.word	0x200000d0
 80010e8:	200001b4 	.word	0x200001b4

080010ec <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80010f2:	f001 ff07 	bl	8002f04 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80010f8:	f001 ff04 	bl	8002f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200000d0 	.word	0x200000d0
 8001104:	20000200 	.word	0x20000200

08001108 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	e00a      	b.n	8001130 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800111a:	f3af 8000 	nop.w
 800111e:	4601      	mov	r1, r0
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	1c5a      	adds	r2, r3, #1
 8001124:	60ba      	str	r2, [r7, #8]
 8001126:	b2ca      	uxtb	r2, r1
 8001128:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	3301      	adds	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	429a      	cmp	r2, r3
 8001136:	dbf0      	blt.n	800111a <_read+0x12>
  }

  return len;
 8001138:	687b      	ldr	r3, [r7, #4]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800116a:	605a      	str	r2, [r3, #4]
  return 0;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <_isatty>:

int _isatty(int file)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b4:	4a14      	ldr	r2, [pc, #80]	; (8001208 <_sbrk+0x5c>)
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <_sbrk+0x60>)
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d102      	bne.n	80011ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <_sbrk+0x64>)
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <_sbrk+0x68>)
 80011cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d207      	bcs.n	80011ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011dc:	f003 fffc 	bl	80051d8 <__errno>
 80011e0:	4603      	mov	r3, r0
 80011e2:	220c      	movs	r2, #12
 80011e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	e009      	b.n	8001200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <_sbrk+0x64>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <_sbrk+0x64>)
 80011fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20008000 	.word	0x20008000
 800120c:	00000400 	.word	0x00000400
 8001210:	200002dc 	.word	0x200002dc
 8001214:	20000430 	.word	0x20000430

08001218 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <SystemInit+0x20>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <SystemInit+0x20>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800123e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <LoopForever+0x6>)
  ldr r1, =_edata
 8001242:	490e      	ldr	r1, [pc, #56]	; (800127c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <LoopForever+0xe>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001258:	4c0b      	ldr	r4, [pc, #44]	; (8001288 <LoopForever+0x16>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001266:	f7ff ffd7 	bl	8001218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126a:	f003 ffbb 	bl	80051e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800126e:	f7ff f9cb 	bl	8000608 <main>

08001272 <LoopForever>:

LoopForever:
    b LoopForever
 8001272:	e7fe      	b.n	8001272 <LoopForever>
  ldr   r0, =_estack
 8001274:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001280:	08005e30 	.word	0x08005e30
  ldr r2, =_sbss
 8001284:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001288:	20000430 	.word	0x20000430

0800128c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC1_2_IRQHandler>

0800128e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f000 f95b 	bl	8001554 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800129e:	2001      	movs	r0, #1
 80012a0:	f000 f80e 	bl	80012c0 <HAL_InitTick>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d002      	beq.n	80012b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	71fb      	strb	r3, [r7, #7]
 80012ae:	e001      	b.n	80012b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012b0:	f7ff fcda 	bl	8000c68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012b4:	79fb      	ldrb	r3, [r7, #7]

}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <HAL_InitTick+0x68>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d022      	beq.n	800131a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_InitTick+0x6c>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <HAL_InitTick+0x68>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 f966 	bl	80015ba <HAL_SYSTICK_Config>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10f      	bne.n	8001314 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b0f      	cmp	r3, #15
 80012f8:	d809      	bhi.n	800130e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012fa:	2200      	movs	r2, #0
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001302:	f000 f932 	bl	800156a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <HAL_InitTick+0x70>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	e007      	b.n	800131e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	e004      	b.n	800131e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	e001      	b.n	800131e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800131e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000008 	.word	0x20000008
 800132c:	20000000 	.word	0x20000000
 8001330:	20000004 	.word	0x20000004

08001334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_IncTick+0x1c>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <HAL_IncTick+0x20>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4413      	add	r3, r2
 8001342:	4a03      	ldr	r2, [pc, #12]	; (8001350 <HAL_IncTick+0x1c>)
 8001344:	6013      	str	r3, [r2, #0]
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	200002e0 	.word	0x200002e0
 8001354:	20000008 	.word	0x20000008

08001358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_GetTick+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	200002e0 	.word	0x200002e0

08001370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001378:	f7ff ffee 	bl	8001358 <HAL_GetTick>
 800137c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001388:	d004      	beq.n	8001394 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_Delay+0x40>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4413      	add	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001394:	bf00      	nop
 8001396:	f7ff ffdf 	bl	8001358 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d8f7      	bhi.n	8001396 <HAL_Delay+0x26>
  {
  }
}
 80013a6:	bf00      	nop
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000008 	.word	0x20000008

080013b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <__NVIC_GetPriorityGrouping+0x18>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0307 	and.w	r3, r3, #7
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	2b00      	cmp	r3, #0
 8001428:	db0b      	blt.n	8001442 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	f003 021f 	and.w	r2, r3, #31
 8001430:	4907      	ldr	r1, [pc, #28]	; (8001450 <__NVIC_EnableIRQ+0x38>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	2001      	movs	r0, #1
 800143a:	fa00 f202 	lsl.w	r2, r0, r2
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000e100 	.word	0xe000e100

08001454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	db0a      	blt.n	800147e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	490c      	ldr	r1, [pc, #48]	; (80014a0 <__NVIC_SetPriority+0x4c>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	0112      	lsls	r2, r2, #4
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	440b      	add	r3, r1
 8001478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800147c:	e00a      	b.n	8001494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4908      	ldr	r1, [pc, #32]	; (80014a4 <__NVIC_SetPriority+0x50>)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	3b04      	subs	r3, #4
 800148c:	0112      	lsls	r2, r2, #4
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	440b      	add	r3, r1
 8001492:	761a      	strb	r2, [r3, #24]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	; 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f1c3 0307 	rsb	r3, r3, #7
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	bf28      	it	cs
 80014c6:	2304      	movcs	r3, #4
 80014c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3304      	adds	r3, #4
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d902      	bls.n	80014d8 <NVIC_EncodePriority+0x30>
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3b03      	subs	r3, #3
 80014d6:	e000      	b.n	80014da <NVIC_EncodePriority+0x32>
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	401a      	ands	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43d9      	mvns	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	4313      	orrs	r3, r2
         );
}
 8001502:	4618      	mov	r0, r3
 8001504:	3724      	adds	r7, #36	; 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001520:	d301      	bcc.n	8001526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001522:	2301      	movs	r3, #1
 8001524:	e00f      	b.n	8001546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <SysTick_Config+0x40>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152e:	210f      	movs	r1, #15
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f7ff ff8e 	bl	8001454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <SysTick_Config+0x40>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <SysTick_Config+0x40>)
 8001540:	2207      	movs	r2, #7
 8001542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	e000e010 	.word	0xe000e010

08001554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ff29 	bl	80013b4 <__NVIC_SetPriorityGrouping>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff40 	bl	80013fc <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff90 	bl	80014a8 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5f 	bl	8001454 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff33 	bl	8001418 <__NVIC_EnableIRQ>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffa4 	bl	8001510 <SysTick_Config>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015e2:	e15a      	b.n	800189a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	2101      	movs	r1, #1
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	4013      	ands	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 814c 	beq.w	8001894 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b01      	cmp	r3, #1
 8001606:	d005      	beq.n	8001614 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001610:	2b02      	cmp	r3, #2
 8001612:	d130      	bne.n	8001676 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800164a:	2201      	movs	r2, #1
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	091b      	lsrs	r3, r3, #4
 8001660:	f003 0201 	and.w	r2, r3, #1
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b03      	cmp	r3, #3
 8001680:	d017      	beq.n	80016b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	2203      	movs	r2, #3
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d123      	bne.n	8001706 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	08da      	lsrs	r2, r3, #3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3208      	adds	r2, #8
 80016c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	220f      	movs	r2, #15
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	691a      	ldr	r2, [r3, #16]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	08da      	lsrs	r2, r3, #3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3208      	adds	r2, #8
 8001700:	6939      	ldr	r1, [r7, #16]
 8001702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	2203      	movs	r2, #3
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0203 	and.w	r2, r3, #3
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80a6 	beq.w	8001894 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001748:	4b5b      	ldr	r3, [pc, #364]	; (80018b8 <HAL_GPIO_Init+0x2e4>)
 800174a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174c:	4a5a      	ldr	r2, [pc, #360]	; (80018b8 <HAL_GPIO_Init+0x2e4>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6613      	str	r3, [r2, #96]	; 0x60
 8001754:	4b58      	ldr	r3, [pc, #352]	; (80018b8 <HAL_GPIO_Init+0x2e4>)
 8001756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001760:	4a56      	ldr	r2, [pc, #344]	; (80018bc <HAL_GPIO_Init+0x2e8>)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3302      	adds	r3, #2
 8001768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	220f      	movs	r2, #15
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800178a:	d01f      	beq.n	80017cc <HAL_GPIO_Init+0x1f8>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a4c      	ldr	r2, [pc, #304]	; (80018c0 <HAL_GPIO_Init+0x2ec>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d019      	beq.n	80017c8 <HAL_GPIO_Init+0x1f4>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a4b      	ldr	r2, [pc, #300]	; (80018c4 <HAL_GPIO_Init+0x2f0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d013      	beq.n	80017c4 <HAL_GPIO_Init+0x1f0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a4a      	ldr	r2, [pc, #296]	; (80018c8 <HAL_GPIO_Init+0x2f4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d00d      	beq.n	80017c0 <HAL_GPIO_Init+0x1ec>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a49      	ldr	r2, [pc, #292]	; (80018cc <HAL_GPIO_Init+0x2f8>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d007      	beq.n	80017bc <HAL_GPIO_Init+0x1e8>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a48      	ldr	r2, [pc, #288]	; (80018d0 <HAL_GPIO_Init+0x2fc>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d101      	bne.n	80017b8 <HAL_GPIO_Init+0x1e4>
 80017b4:	2305      	movs	r3, #5
 80017b6:	e00a      	b.n	80017ce <HAL_GPIO_Init+0x1fa>
 80017b8:	2306      	movs	r3, #6
 80017ba:	e008      	b.n	80017ce <HAL_GPIO_Init+0x1fa>
 80017bc:	2304      	movs	r3, #4
 80017be:	e006      	b.n	80017ce <HAL_GPIO_Init+0x1fa>
 80017c0:	2303      	movs	r3, #3
 80017c2:	e004      	b.n	80017ce <HAL_GPIO_Init+0x1fa>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e002      	b.n	80017ce <HAL_GPIO_Init+0x1fa>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <HAL_GPIO_Init+0x1fa>
 80017cc:	2300      	movs	r3, #0
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	f002 0203 	and.w	r2, r2, #3
 80017d4:	0092      	lsls	r2, r2, #2
 80017d6:	4093      	lsls	r3, r2
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017de:	4937      	ldr	r1, [pc, #220]	; (80018bc <HAL_GPIO_Init+0x2e8>)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3302      	adds	r3, #2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ec:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <HAL_GPIO_Init+0x300>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001810:	4a30      	ldr	r2, [pc, #192]	; (80018d4 <HAL_GPIO_Init+0x300>)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001816:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <HAL_GPIO_Init+0x300>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800183a:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <HAL_GPIO_Init+0x300>)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001840:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_GPIO_Init+0x300>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001864:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <HAL_GPIO_Init+0x300>)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800186a:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <HAL_GPIO_Init+0x300>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800188e:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <HAL_GPIO_Init+0x300>)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3301      	adds	r3, #1
 8001898:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f47f ae9d 	bne.w	80015e4 <HAL_GPIO_Init+0x10>
  }
}
 80018aa:	bf00      	nop
 80018ac:	bf00      	nop
 80018ae:	371c      	adds	r7, #28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010000 	.word	0x40010000
 80018c0:	48000400 	.word	0x48000400
 80018c4:	48000800 	.word	0x48000800
 80018c8:	48000c00 	.word	0x48000c00
 80018cc:	48001000 	.word	0x48001000
 80018d0:	48001400 	.word	0x48001400
 80018d4:	40010400 	.word	0x40010400

080018d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]
 80018e4:	4613      	mov	r3, r2
 80018e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018e8:	787b      	ldrb	r3, [r7, #1]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018f4:	e002      	b.n	80018fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018f6:	887a      	ldrh	r2, [r7, #2]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001914:	695a      	ldr	r2, [r3, #20]
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	4013      	ands	r3, r2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d006      	beq.n	800192c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f806 	bl	8001938 <HAL_GPIO_EXTI_Callback>
  }
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40010400 	.word	0x40010400

08001938 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e081      	b.n	8001a64 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d106      	bne.n	800197a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff f99b 	bl	8000cb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2224      	movs	r2, #36	; 0x24
 800197e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0201 	bic.w	r2, r2, #1
 8001990:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800199e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d107      	bne.n	80019c8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	e006      	b.n	80019d6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019d4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d104      	bne.n	80019e8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019e6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019fa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a0a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69d9      	ldr	r1, [r3, #28]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1a      	ldr	r2, [r3, #32]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 0201 	orr.w	r2, r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b20      	cmp	r3, #32
 8001a80:	d138      	bne.n	8001af4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e032      	b.n	8001af6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2224      	movs	r2, #36	; 0x24
 8001a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0201 	bic.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001abe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6819      	ldr	r1, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e000      	b.n	8001af6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001af4:	2302      	movs	r3, #2
  }
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b085      	sub	sp, #20
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b20      	cmp	r3, #32
 8001b16:	d139      	bne.n	8001b8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e033      	b.n	8001b8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2224      	movs	r2, #36	; 0x24
 8001b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0201 	bic.w	r2, r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e000      	b.n	8001b8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b8c:	2302      	movs	r3, #2
  }
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d141      	bne.n	8001c2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001baa:	4b4b      	ldr	r3, [pc, #300]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	d131      	bne.n	8001c1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bb8:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bbe:	4a46      	ldr	r2, [pc, #280]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc8:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bd0:	4a41      	ldr	r2, [pc, #260]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bd8:	4b40      	ldr	r3, [pc, #256]	; (8001cdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2232      	movs	r2, #50	; 0x32
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	4a3f      	ldr	r2, [pc, #252]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	0c9b      	lsrs	r3, r3, #18
 8001bea:	3301      	adds	r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bee:	e002      	b.n	8001bf6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bf6:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c02:	d102      	bne.n	8001c0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f2      	bne.n	8001bf0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c0a:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c16:	d158      	bne.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e057      	b.n	8001ccc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c22:	4a2d      	ldr	r2, [pc, #180]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c2c:	e04d      	b.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c34:	d141      	bne.n	8001cba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c36:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c42:	d131      	bne.n	8001ca8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c44:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c4a:	4a23      	ldr	r2, [pc, #140]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c54:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c5c:	4a1e      	ldr	r2, [pc, #120]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c64:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2232      	movs	r2, #50	; 0x32
 8001c6a:	fb02 f303 	mul.w	r3, r2, r3
 8001c6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c70:	fba2 2303 	umull	r2, r3, r2, r3
 8001c74:	0c9b      	lsrs	r3, r3, #18
 8001c76:	3301      	adds	r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c7a:	e002      	b.n	8001c82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8e:	d102      	bne.n	8001c96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f2      	bne.n	8001c7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca2:	d112      	bne.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e011      	b.n	8001ccc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001cb8:	e007      	b.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	40007000 	.word	0x40007000
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	431bde83 	.word	0x431bde83

08001ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e306      	b.n	8002304 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d075      	beq.n	8001dee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d02:	4b97      	ldr	r3, [pc, #604]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d0c:	4b94      	ldr	r3, [pc, #592]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2b0c      	cmp	r3, #12
 8001d1a:	d102      	bne.n	8001d22 <HAL_RCC_OscConfig+0x3e>
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d002      	beq.n	8001d28 <HAL_RCC_OscConfig+0x44>
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d10b      	bne.n	8001d40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d28:	4b8d      	ldr	r3, [pc, #564]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d05b      	beq.n	8001dec <HAL_RCC_OscConfig+0x108>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d157      	bne.n	8001dec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e2e1      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d48:	d106      	bne.n	8001d58 <HAL_RCC_OscConfig+0x74>
 8001d4a:	4b85      	ldr	r3, [pc, #532]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a84      	ldr	r2, [pc, #528]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e01d      	b.n	8001d94 <HAL_RCC_OscConfig+0xb0>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x98>
 8001d62:	4b7f      	ldr	r3, [pc, #508]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a7e      	ldr	r2, [pc, #504]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b7c      	ldr	r3, [pc, #496]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a7b      	ldr	r2, [pc, #492]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e00b      	b.n	8001d94 <HAL_RCC_OscConfig+0xb0>
 8001d7c:	4b78      	ldr	r3, [pc, #480]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a77      	ldr	r2, [pc, #476]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b75      	ldr	r3, [pc, #468]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a74      	ldr	r2, [pc, #464]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d013      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fadc 	bl	8001358 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff fad8 	bl	8001358 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e2a6      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db6:	4b6a      	ldr	r3, [pc, #424]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0xc0>
 8001dc2:	e014      	b.n	8001dee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fac8 	bl	8001358 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dcc:	f7ff fac4 	bl	8001358 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b64      	cmp	r3, #100	; 0x64
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e292      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dde:	4b60      	ldr	r3, [pc, #384]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0xe8>
 8001dea:	e000      	b.n	8001dee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d075      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfa:	4b59      	ldr	r3, [pc, #356]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e04:	4b56      	ldr	r3, [pc, #344]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	2b0c      	cmp	r3, #12
 8001e12:	d102      	bne.n	8001e1a <HAL_RCC_OscConfig+0x136>
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d002      	beq.n	8001e20 <HAL_RCC_OscConfig+0x13c>
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d11f      	bne.n	8001e60 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e20:	4b4f      	ldr	r3, [pc, #316]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_OscConfig+0x154>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e265      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	4b49      	ldr	r3, [pc, #292]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	061b      	lsls	r3, r3, #24
 8001e46:	4946      	ldr	r1, [pc, #280]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e4c:	4b45      	ldr	r3, [pc, #276]	; (8001f64 <HAL_RCC_OscConfig+0x280>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fa35 	bl	80012c0 <HAL_InitTick>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d043      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e251      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d023      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e68:	4b3d      	ldr	r3, [pc, #244]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a3c      	ldr	r2, [pc, #240]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff fa70 	bl	8001358 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e7c:	f7ff fa6c 	bl	8001358 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e23a      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e8e:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9a:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	061b      	lsls	r3, r3, #24
 8001ea8:	492d      	ldr	r1, [pc, #180]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	604b      	str	r3, [r1, #4]
 8001eae:	e01a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a2a      	ldr	r2, [pc, #168]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fa4c 	bl	8001358 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec4:	f7ff fa48 	bl	8001358 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e216      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x1e0>
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ee4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d041      	beq.n	8001f76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d01c      	beq.n	8001f34 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efa:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f00:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0a:	f7ff fa25 	bl	8001358 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f12:	f7ff fa21 	bl	8001358 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e1ef      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0ef      	beq.n	8001f12 <HAL_RCC_OscConfig+0x22e>
 8001f32:	e020      	b.n	8001f76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3a:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f44:	f7ff fa08 	bl	8001358 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f4a:	e00d      	b.n	8001f68 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4c:	f7ff fa04 	bl	8001358 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d906      	bls.n	8001f68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e1d2      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f68:	4b8c      	ldr	r3, [pc, #560]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 8001f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ea      	bne.n	8001f4c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 80a6 	beq.w	80020d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f84:	2300      	movs	r3, #0
 8001f86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f88:	4b84      	ldr	r3, [pc, #528]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_OscConfig+0x2b4>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_RCC_OscConfig+0x2b6>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00d      	beq.n	8001fba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9e:	4b7f      	ldr	r3, [pc, #508]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa2:	4a7e      	ldr	r2, [pc, #504]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 8001fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8001faa:	4b7c      	ldr	r3, [pc, #496]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fba:	4b79      	ldr	r3, [pc, #484]	; (80021a0 <HAL_RCC_OscConfig+0x4bc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d118      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc6:	4b76      	ldr	r3, [pc, #472]	; (80021a0 <HAL_RCC_OscConfig+0x4bc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a75      	ldr	r2, [pc, #468]	; (80021a0 <HAL_RCC_OscConfig+0x4bc>)
 8001fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd2:	f7ff f9c1 	bl	8001358 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fda:	f7ff f9bd 	bl	8001358 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e18b      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fec:	4b6c      	ldr	r3, [pc, #432]	; (80021a0 <HAL_RCC_OscConfig+0x4bc>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d108      	bne.n	8002012 <HAL_RCC_OscConfig+0x32e>
 8002000:	4b66      	ldr	r3, [pc, #408]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002006:	4a65      	ldr	r2, [pc, #404]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002010:	e024      	b.n	800205c <HAL_RCC_OscConfig+0x378>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b05      	cmp	r3, #5
 8002018:	d110      	bne.n	800203c <HAL_RCC_OscConfig+0x358>
 800201a:	4b60      	ldr	r3, [pc, #384]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 800201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002020:	4a5e      	ldr	r2, [pc, #376]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 8002022:	f043 0304 	orr.w	r3, r3, #4
 8002026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800202a:	4b5c      	ldr	r3, [pc, #368]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002030:	4a5a      	ldr	r2, [pc, #360]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800203a:	e00f      	b.n	800205c <HAL_RCC_OscConfig+0x378>
 800203c:	4b57      	ldr	r3, [pc, #348]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002042:	4a56      	ldr	r2, [pc, #344]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800204c:	4b53      	ldr	r3, [pc, #332]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	4a52      	ldr	r2, [pc, #328]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 8002054:	f023 0304 	bic.w	r3, r3, #4
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d016      	beq.n	8002092 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002064:	f7ff f978 	bl	8001358 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800206a:	e00a      	b.n	8002082 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206c:	f7ff f974 	bl	8001358 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	; 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e140      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002082:	4b46      	ldr	r3, [pc, #280]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0ed      	beq.n	800206c <HAL_RCC_OscConfig+0x388>
 8002090:	e015      	b.n	80020be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002092:	f7ff f961 	bl	8001358 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002098:	e00a      	b.n	80020b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209a:	f7ff f95d 	bl	8001358 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e129      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020b0:	4b3a      	ldr	r3, [pc, #232]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 80020b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1ed      	bne.n	800209a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020be:	7ffb      	ldrb	r3, [r7, #31]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d105      	bne.n	80020d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c4:	4b35      	ldr	r3, [pc, #212]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	4a34      	ldr	r2, [pc, #208]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 80020ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d03c      	beq.n	8002156 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01c      	beq.n	800211e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020e4:	4b2d      	ldr	r3, [pc, #180]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 80020e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020ea:	4a2c      	ldr	r2, [pc, #176]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f4:	f7ff f930 	bl	8001358 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020fc:	f7ff f92c 	bl	8001358 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e0fa      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800210e:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 8002110:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ef      	beq.n	80020fc <HAL_RCC_OscConfig+0x418>
 800211c:	e01b      	b.n	8002156 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800211e:	4b1f      	ldr	r3, [pc, #124]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 8002120:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002124:	4a1d      	ldr	r2, [pc, #116]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 8002126:	f023 0301 	bic.w	r3, r3, #1
 800212a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7ff f913 	bl	8001358 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002136:	f7ff f90f 	bl	8001358 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e0dd      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 800214a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1ef      	bne.n	8002136 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 80d1 	beq.w	8002302 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b0c      	cmp	r3, #12
 800216a:	f000 808b 	beq.w	8002284 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d15e      	bne.n	8002234 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a08      	ldr	r2, [pc, #32]	; (800219c <HAL_RCC_OscConfig+0x4b8>)
 800217c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7ff f8e9 	bl	8001358 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002188:	e00c      	b.n	80021a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218a:	f7ff f8e5 	bl	8001358 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d905      	bls.n	80021a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e0b3      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
 800219c:	40021000 	.word	0x40021000
 80021a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a4:	4b59      	ldr	r3, [pc, #356]	; (800230c <HAL_RCC_OscConfig+0x628>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1ec      	bne.n	800218a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021b0:	4b56      	ldr	r3, [pc, #344]	; (800230c <HAL_RCC_OscConfig+0x628>)
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	4b56      	ldr	r3, [pc, #344]	; (8002310 <HAL_RCC_OscConfig+0x62c>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6a11      	ldr	r1, [r2, #32]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021c0:	3a01      	subs	r2, #1
 80021c2:	0112      	lsls	r2, r2, #4
 80021c4:	4311      	orrs	r1, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80021ca:	0212      	lsls	r2, r2, #8
 80021cc:	4311      	orrs	r1, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021d2:	0852      	lsrs	r2, r2, #1
 80021d4:	3a01      	subs	r2, #1
 80021d6:	0552      	lsls	r2, r2, #21
 80021d8:	4311      	orrs	r1, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021de:	0852      	lsrs	r2, r2, #1
 80021e0:	3a01      	subs	r2, #1
 80021e2:	0652      	lsls	r2, r2, #25
 80021e4:	4311      	orrs	r1, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021ea:	06d2      	lsls	r2, r2, #27
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4947      	ldr	r1, [pc, #284]	; (800230c <HAL_RCC_OscConfig+0x628>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f4:	4b45      	ldr	r3, [pc, #276]	; (800230c <HAL_RCC_OscConfig+0x628>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a44      	ldr	r2, [pc, #272]	; (800230c <HAL_RCC_OscConfig+0x628>)
 80021fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002200:	4b42      	ldr	r3, [pc, #264]	; (800230c <HAL_RCC_OscConfig+0x628>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a41      	ldr	r2, [pc, #260]	; (800230c <HAL_RCC_OscConfig+0x628>)
 8002206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7ff f8a4 	bl	8001358 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7ff f8a0 	bl	8001358 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e06e      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002226:	4b39      	ldr	r3, [pc, #228]	; (800230c <HAL_RCC_OscConfig+0x628>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x530>
 8002232:	e066      	b.n	8002302 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002234:	4b35      	ldr	r3, [pc, #212]	; (800230c <HAL_RCC_OscConfig+0x628>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a34      	ldr	r2, [pc, #208]	; (800230c <HAL_RCC_OscConfig+0x628>)
 800223a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800223e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002240:	4b32      	ldr	r3, [pc, #200]	; (800230c <HAL_RCC_OscConfig+0x628>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4a31      	ldr	r2, [pc, #196]	; (800230c <HAL_RCC_OscConfig+0x628>)
 8002246:	f023 0303 	bic.w	r3, r3, #3
 800224a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800224c:	4b2f      	ldr	r3, [pc, #188]	; (800230c <HAL_RCC_OscConfig+0x628>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a2e      	ldr	r2, [pc, #184]	; (800230c <HAL_RCC_OscConfig+0x628>)
 8002252:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff f87c 	bl	8001358 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002264:	f7ff f878 	bl	8001358 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e046      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002276:	4b25      	ldr	r3, [pc, #148]	; (800230c <HAL_RCC_OscConfig+0x628>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x580>
 8002282:	e03e      	b.n	8002302 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e039      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002290:	4b1e      	ldr	r3, [pc, #120]	; (800230c <HAL_RCC_OscConfig+0x628>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f003 0203 	and.w	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d12c      	bne.n	80022fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	3b01      	subs	r3, #1
 80022b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d123      	bne.n	80022fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d11b      	bne.n	80022fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d113      	bne.n	80022fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	085b      	lsrs	r3, r3, #1
 80022e2:	3b01      	subs	r3, #1
 80022e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d109      	bne.n	80022fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	3b01      	subs	r3, #1
 80022f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3720      	adds	r7, #32
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	019f800c 	.word	0x019f800c

08002314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e11e      	b.n	800256a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800232c:	4b91      	ldr	r3, [pc, #580]	; (8002574 <HAL_RCC_ClockConfig+0x260>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d910      	bls.n	800235c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b8e      	ldr	r3, [pc, #568]	; (8002574 <HAL_RCC_ClockConfig+0x260>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 020f 	bic.w	r2, r3, #15
 8002342:	498c      	ldr	r1, [pc, #560]	; (8002574 <HAL_RCC_ClockConfig+0x260>)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	4b8a      	ldr	r3, [pc, #552]	; (8002574 <HAL_RCC_ClockConfig+0x260>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e106      	b.n	800256a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d073      	beq.n	8002450 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d129      	bne.n	80023c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002370:	4b81      	ldr	r3, [pc, #516]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0f4      	b.n	800256a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002380:	f000 f99e 	bl	80026c0 <RCC_GetSysClockFreqFromPLLSource>
 8002384:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4a7c      	ldr	r2, [pc, #496]	; (800257c <HAL_RCC_ClockConfig+0x268>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d93f      	bls.n	800240e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800238e:	4b7a      	ldr	r3, [pc, #488]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d033      	beq.n	800240e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d12f      	bne.n	800240e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ae:	4b72      	ldr	r3, [pc, #456]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023b6:	4a70      	ldr	r2, [pc, #448]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 80023b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e024      	b.n	800240e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023cc:	4b6a      	ldr	r3, [pc, #424]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0c6      	b.n	800256a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023dc:	4b66      	ldr	r3, [pc, #408]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0be      	b.n	800256a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023ec:	f000 f8ce 	bl	800258c <HAL_RCC_GetSysClockFreq>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4a61      	ldr	r2, [pc, #388]	; (800257c <HAL_RCC_ClockConfig+0x268>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d909      	bls.n	800240e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023fa:	4b5f      	ldr	r3, [pc, #380]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002402:	4a5d      	ldr	r2, [pc, #372]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 8002404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002408:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800240e:	4b5a      	ldr	r3, [pc, #360]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f023 0203 	bic.w	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4957      	ldr	r1, [pc, #348]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 800241c:	4313      	orrs	r3, r2
 800241e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002420:	f7fe ff9a 	bl	8001358 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	e00a      	b.n	800243e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002428:	f7fe ff96 	bl	8001358 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	; 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e095      	b.n	800256a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	4b4e      	ldr	r3, [pc, #312]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 020c 	and.w	r2, r3, #12
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	429a      	cmp	r2, r3
 800244e:	d1eb      	bne.n	8002428 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d023      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002468:	4b43      	ldr	r3, [pc, #268]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4a42      	ldr	r2, [pc, #264]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 800246e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002472:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002480:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002488:	4a3b      	ldr	r2, [pc, #236]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 800248a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800248e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002490:	4b39      	ldr	r3, [pc, #228]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4936      	ldr	r1, [pc, #216]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	608b      	str	r3, [r1, #8]
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b80      	cmp	r3, #128	; 0x80
 80024a8:	d105      	bne.n	80024b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024aa:	4b33      	ldr	r3, [pc, #204]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	4a32      	ldr	r2, [pc, #200]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 80024b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024b6:	4b2f      	ldr	r3, [pc, #188]	; (8002574 <HAL_RCC_ClockConfig+0x260>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d21d      	bcs.n	8002500 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c4:	4b2b      	ldr	r3, [pc, #172]	; (8002574 <HAL_RCC_ClockConfig+0x260>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 020f 	bic.w	r2, r3, #15
 80024cc:	4929      	ldr	r1, [pc, #164]	; (8002574 <HAL_RCC_ClockConfig+0x260>)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024d4:	f7fe ff40 	bl	8001358 <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024dc:	f7fe ff3c 	bl	8001358 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e03b      	b.n	800256a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b20      	ldr	r3, [pc, #128]	; (8002574 <HAL_RCC_ClockConfig+0x260>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d1ed      	bne.n	80024dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800250c:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4917      	ldr	r1, [pc, #92]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	490f      	ldr	r1, [pc, #60]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800253e:	f000 f825 	bl	800258c <HAL_RCC_GetSysClockFreq>
 8002542:	4602      	mov	r2, r0
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <HAL_RCC_ClockConfig+0x264>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	490c      	ldr	r1, [pc, #48]	; (8002580 <HAL_RCC_ClockConfig+0x26c>)
 8002550:	5ccb      	ldrb	r3, [r1, r3]
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	fa22 f303 	lsr.w	r3, r2, r3
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <HAL_RCC_ClockConfig+0x270>)
 800255c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_RCC_ClockConfig+0x274>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe feac 	bl	80012c0 <HAL_InitTick>
 8002568:	4603      	mov	r3, r0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40022000 	.word	0x40022000
 8002578:	40021000 	.word	0x40021000
 800257c:	04c4b400 	.word	0x04c4b400
 8002580:	08005dac 	.word	0x08005dac
 8002584:	20000000 	.word	0x20000000
 8002588:	20000004 	.word	0x20000004

0800258c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002592:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b04      	cmp	r3, #4
 800259c:	d102      	bne.n	80025a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800259e:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	e047      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d102      	bne.n	80025b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025b0:	4b26      	ldr	r3, [pc, #152]	; (800264c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	e03e      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025b6:	4b23      	ldr	r3, [pc, #140]	; (8002644 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b0c      	cmp	r3, #12
 80025c0:	d136      	bne.n	8002630 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	3301      	adds	r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d10c      	bne.n	80025fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025e0:	4a1a      	ldr	r2, [pc, #104]	; (800264c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e8:	4a16      	ldr	r2, [pc, #88]	; (8002644 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ea:	68d2      	ldr	r2, [r2, #12]
 80025ec:	0a12      	lsrs	r2, r2, #8
 80025ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	617b      	str	r3, [r7, #20]
      break;
 80025f8:	e00c      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025fa:	4a13      	ldr	r2, [pc, #76]	; (8002648 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	4a10      	ldr	r2, [pc, #64]	; (8002644 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002604:	68d2      	ldr	r2, [r2, #12]
 8002606:	0a12      	lsrs	r2, r2, #8
 8002608:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800260c:	fb02 f303 	mul.w	r3, r2, r3
 8002610:	617b      	str	r3, [r7, #20]
      break;
 8002612:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	0e5b      	lsrs	r3, r3, #25
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	3301      	adds	r3, #1
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	fbb2 f3f3 	udiv	r3, r2, r3
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	e001      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002634:	693b      	ldr	r3, [r7, #16]
}
 8002636:	4618      	mov	r0, r3
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	00f42400 	.word	0x00f42400
 800264c:	007a1200 	.word	0x007a1200

08002650 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <HAL_RCC_GetHCLKFreq+0x14>)
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000000 	.word	0x20000000

08002668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800266c:	f7ff fff0 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0a1b      	lsrs	r3, r3, #8
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4904      	ldr	r1, [pc, #16]	; (8002690 <HAL_RCC_GetPCLK1Freq+0x28>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	08005dbc 	.word	0x08005dbc

08002694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002698:	f7ff ffda 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	0adb      	lsrs	r3, r3, #11
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4904      	ldr	r1, [pc, #16]	; (80026bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000
 80026bc:	08005dbc 	.word	0x08005dbc

080026c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026c6:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	3301      	adds	r3, #1
 80026dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d10c      	bne.n	80026fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026e4:	4a17      	ldr	r2, [pc, #92]	; (8002744 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ec:	4a14      	ldr	r2, [pc, #80]	; (8002740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ee:	68d2      	ldr	r2, [r2, #12]
 80026f0:	0a12      	lsrs	r2, r2, #8
 80026f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	617b      	str	r3, [r7, #20]
    break;
 80026fc:	e00c      	b.n	8002718 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026fe:	4a12      	ldr	r2, [pc, #72]	; (8002748 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002708:	68d2      	ldr	r2, [r2, #12]
 800270a:	0a12      	lsrs	r2, r2, #8
 800270c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002710:	fb02 f303 	mul.w	r3, r2, r3
 8002714:	617b      	str	r3, [r7, #20]
    break;
 8002716:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	0e5b      	lsrs	r3, r3, #25
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	3301      	adds	r3, #1
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002730:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002732:	687b      	ldr	r3, [r7, #4]
}
 8002734:	4618      	mov	r0, r3
 8002736:	371c      	adds	r7, #28
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	40021000 	.word	0x40021000
 8002744:	007a1200 	.word	0x007a1200
 8002748:	00f42400 	.word	0x00f42400

0800274c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002754:	2300      	movs	r3, #0
 8002756:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002758:	2300      	movs	r3, #0
 800275a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 8098 	beq.w	800289a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276e:	4b43      	ldr	r3, [pc, #268]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10d      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	4b40      	ldr	r3, [pc, #256]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800277c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277e:	4a3f      	ldr	r2, [pc, #252]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002784:	6593      	str	r3, [r2, #88]	; 0x58
 8002786:	4b3d      	ldr	r3, [pc, #244]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002792:	2301      	movs	r3, #1
 8002794:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002796:	4b3a      	ldr	r3, [pc, #232]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a39      	ldr	r2, [pc, #228]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800279c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027a2:	f7fe fdd9 	bl	8001358 <HAL_GetTick>
 80027a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027a8:	e009      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027aa:	f7fe fdd5 	bl	8001358 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d902      	bls.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	74fb      	strb	r3, [r7, #19]
        break;
 80027bc:	e005      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027be:	4b30      	ldr	r3, [pc, #192]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0ef      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80027ca:	7cfb      	ldrb	r3, [r7, #19]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d159      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027d0:	4b2a      	ldr	r3, [pc, #168]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d01e      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d019      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027ec:	4b23      	ldr	r3, [pc, #140]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027f8:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fe:	4a1f      	ldr	r2, [pc, #124]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002808:	4b1c      	ldr	r3, [pc, #112]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280e:	4a1b      	ldr	r2, [pc, #108]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002818:	4a18      	ldr	r2, [pc, #96]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d016      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282a:	f7fe fd95 	bl	8001358 <HAL_GetTick>
 800282e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002830:	e00b      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7fe fd91 	bl	8001358 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002840:	4293      	cmp	r3, r2
 8002842:	d902      	bls.n	800284a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	74fb      	strb	r3, [r7, #19]
            break;
 8002848:	e006      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0ec      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10b      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002864:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	4903      	ldr	r1, [pc, #12]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002874:	e008      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002876:	7cfb      	ldrb	r3, [r7, #19]
 8002878:	74bb      	strb	r3, [r7, #18]
 800287a:	e005      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800287c:	40021000 	.word	0x40021000
 8002880:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002884:	7cfb      	ldrb	r3, [r7, #19]
 8002886:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002888:	7c7b      	ldrb	r3, [r7, #17]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d105      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288e:	4ba6      	ldr	r3, [pc, #664]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	4aa5      	ldr	r2, [pc, #660]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002898:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028a6:	4ba0      	ldr	r3, [pc, #640]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ac:	f023 0203 	bic.w	r2, r3, #3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	499c      	ldr	r1, [pc, #624]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028c8:	4b97      	ldr	r3, [pc, #604]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	f023 020c 	bic.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	4994      	ldr	r1, [pc, #592]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028ea:	4b8f      	ldr	r3, [pc, #572]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	498b      	ldr	r1, [pc, #556]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800290c:	4b86      	ldr	r3, [pc, #536]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	4983      	ldr	r1, [pc, #524]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800292e:	4b7e      	ldr	r3, [pc, #504]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002934:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	497a      	ldr	r1, [pc, #488]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002950:	4b75      	ldr	r3, [pc, #468]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	4972      	ldr	r1, [pc, #456]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002972:	4b6d      	ldr	r3, [pc, #436]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002978:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	4969      	ldr	r1, [pc, #420]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002994:	4b64      	ldr	r3, [pc, #400]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	4961      	ldr	r1, [pc, #388]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029b6:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	4958      	ldr	r1, [pc, #352]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d015      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029d8:	4b53      	ldr	r3, [pc, #332]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	4950      	ldr	r1, [pc, #320]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029f6:	d105      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f8:	4b4b      	ldr	r3, [pc, #300]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4a4a      	ldr	r2, [pc, #296]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d015      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a10:	4b45      	ldr	r3, [pc, #276]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	4942      	ldr	r1, [pc, #264]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a2e:	d105      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a30:	4b3d      	ldr	r3, [pc, #244]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4a3c      	ldr	r2, [pc, #240]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d015      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a48:	4b37      	ldr	r3, [pc, #220]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	4934      	ldr	r1, [pc, #208]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a66:	d105      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a68:	4b2f      	ldr	r3, [pc, #188]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4a2e      	ldr	r2, [pc, #184]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a72:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d015      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a80:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8e:	4926      	ldr	r1, [pc, #152]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a9e:	d105      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa0:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a20      	ldr	r2, [pc, #128]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aaa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d015      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	4918      	ldr	r1, [pc, #96]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ad6:	d105      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d015      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002af0:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	490a      	ldr	r1, [pc, #40]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b0e:	d105      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000

08002b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e049      	b.n	8002bd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fe f922 	bl	8000d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f000 fd8a 	bl	8003684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e049      	b.n	8002c80 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d106      	bne.n	8002c06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f841 	bl	8002c88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3304      	adds	r3, #4
 8002c16:	4619      	mov	r1, r3
 8002c18:	4610      	mov	r0, r2
 8002c1a:	f000 fd33 	bl	8003684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e097      	b.n	8002de0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d106      	bne.n	8002cca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7fe f8cf 	bl	8000e68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002ce0:	f023 0307 	bic.w	r3, r3, #7
 8002ce4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3304      	adds	r3, #4
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	f000 fcc7 	bl	8003684 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d1e:	f023 0303 	bic.w	r3, r3, #3
 8002d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	021b      	lsls	r3, r3, #8
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002d3c:	f023 030c 	bic.w	r3, r3, #12
 8002d40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	011a      	lsls	r2, r3, #4
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	031b      	lsls	r3, r3, #12
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002d7a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002d82:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002df8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e00:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e08:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e10:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d110      	bne.n	8002e3a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d102      	bne.n	8002e24 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e1e:	7b7b      	ldrb	r3, [r7, #13]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d001      	beq.n	8002e28 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e069      	b.n	8002efc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e38:	e031      	b.n	8002e9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d110      	bne.n	8002e62 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e40:	7bbb      	ldrb	r3, [r7, #14]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d102      	bne.n	8002e4c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e46:	7b3b      	ldrb	r3, [r7, #12]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d001      	beq.n	8002e50 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e055      	b.n	8002efc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e60:	e01d      	b.n	8002e9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d108      	bne.n	8002e7a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e68:	7bbb      	ldrb	r3, [r7, #14]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d105      	bne.n	8002e7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e6e:	7b7b      	ldrb	r3, [r7, #13]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d102      	bne.n	8002e7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e74:	7b3b      	ldrb	r3, [r7, #12]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d001      	beq.n	8002e7e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e03e      	b.n	8002efc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2202      	movs	r2, #2
 8002e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2202      	movs	r2, #2
 8002e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_TIM_Encoder_Start+0xc4>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d008      	beq.n	8002ebc <HAL_TIM_Encoder_Start+0xd4>
 8002eaa:	e00f      	b.n	8002ecc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f001 f807 	bl	8003ec8 <TIM_CCxChannelCmd>
      break;
 8002eba:	e016      	b.n	8002eea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	2104      	movs	r1, #4
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 ffff 	bl	8003ec8 <TIM_CCxChannelCmd>
      break;
 8002eca:	e00e      	b.n	8002eea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fff7 	bl	8003ec8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	2104      	movs	r1, #4
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fff0 	bl	8003ec8 <TIM_CCxChannelCmd>
      break;
 8002ee8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d122      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d11b      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0202 	mvn.w	r2, #2
 8002f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fb7e 	bl	8003648 <HAL_TIM_IC_CaptureCallback>
 8002f4c:	e005      	b.n	8002f5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fb70 	bl	8003634 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fb81 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d122      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d11b      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0204 	mvn.w	r2, #4
 8002f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fb54 	bl	8003648 <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fb46 	bl	8003634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fb57 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d122      	bne.n	8003008 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d11b      	bne.n	8003008 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0208 	mvn.w	r2, #8
 8002fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2204      	movs	r2, #4
 8002fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fb2a 	bl	8003648 <HAL_TIM_IC_CaptureCallback>
 8002ff4:	e005      	b.n	8003002 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fb1c 	bl	8003634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fb2d 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b10      	cmp	r3, #16
 8003014:	d122      	bne.n	800305c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b10      	cmp	r3, #16
 8003022:	d11b      	bne.n	800305c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0210 	mvn.w	r2, #16
 800302c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2208      	movs	r2, #8
 8003032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fb00 	bl	8003648 <HAL_TIM_IC_CaptureCallback>
 8003048:	e005      	b.n	8003056 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 faf2 	bl	8003634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fb03 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d10e      	bne.n	8003088 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d107      	bne.n	8003088 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0201 	mvn.w	r2, #1
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 facc 	bl	8003620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003092:	2b80      	cmp	r3, #128	; 0x80
 8003094:	d10e      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a0:	2b80      	cmp	r3, #128	; 0x80
 80030a2:	d107      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f001 f885 	bl	80041be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c2:	d10e      	bne.n	80030e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ce:	2b80      	cmp	r3, #128	; 0x80
 80030d0:	d107      	bne.n	80030e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f001 f878 	bl	80041d2 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ec:	2b40      	cmp	r3, #64	; 0x40
 80030ee:	d10e      	bne.n	800310e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b40      	cmp	r3, #64	; 0x40
 80030fc:	d107      	bne.n	800310e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fab1 	bl	8003670 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b20      	cmp	r3, #32
 800311a:	d10e      	bne.n	800313a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b20      	cmp	r3, #32
 8003128:	d107      	bne.n	800313a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f06f 0220 	mvn.w	r2, #32
 8003132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f001 f838 	bl	80041aa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003148:	d10f      	bne.n	800316a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003158:	d107      	bne.n	800316a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f001 f83e 	bl	80041e6 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003174:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003178:	d10f      	bne.n	800319a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003184:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003188:	d107      	bne.n	800319a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f001 f830 	bl	80041fa <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a8:	d10f      	bne.n	80031ca <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b8:	d107      	bne.n	80031ca <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80031c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f001 f822 	bl	800420e <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031d8:	d10f      	bne.n	80031fa <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031e8:	d107      	bne.n	80031fa <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80031f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f001 f814 	bl	8004222 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800321e:	2302      	movs	r3, #2
 8003220:	e0ff      	b.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b14      	cmp	r3, #20
 800322e:	f200 80f0 	bhi.w	8003412 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003232:	a201      	add	r2, pc, #4	; (adr r2, 8003238 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	0800328d 	.word	0x0800328d
 800323c:	08003413 	.word	0x08003413
 8003240:	08003413 	.word	0x08003413
 8003244:	08003413 	.word	0x08003413
 8003248:	080032cd 	.word	0x080032cd
 800324c:	08003413 	.word	0x08003413
 8003250:	08003413 	.word	0x08003413
 8003254:	08003413 	.word	0x08003413
 8003258:	0800330f 	.word	0x0800330f
 800325c:	08003413 	.word	0x08003413
 8003260:	08003413 	.word	0x08003413
 8003264:	08003413 	.word	0x08003413
 8003268:	0800334f 	.word	0x0800334f
 800326c:	08003413 	.word	0x08003413
 8003270:	08003413 	.word	0x08003413
 8003274:	08003413 	.word	0x08003413
 8003278:	08003391 	.word	0x08003391
 800327c:	08003413 	.word	0x08003413
 8003280:	08003413 	.word	0x08003413
 8003284:	08003413 	.word	0x08003413
 8003288:	080033d1 	.word	0x080033d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fa86 	bl	80037a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0208 	orr.w	r2, r2, #8
 80032a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0204 	bic.w	r2, r2, #4
 80032b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6999      	ldr	r1, [r3, #24]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	619a      	str	r2, [r3, #24]
      break;
 80032ca:	e0a5      	b.n	8003418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 faf6 	bl	80038c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699a      	ldr	r2, [r3, #24]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6999      	ldr	r1, [r3, #24]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	021a      	lsls	r2, r3, #8
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	619a      	str	r2, [r3, #24]
      break;
 800330c:	e084      	b.n	8003418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fb5f 	bl	80039d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69da      	ldr	r2, [r3, #28]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0208 	orr.w	r2, r2, #8
 8003328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69da      	ldr	r2, [r3, #28]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0204 	bic.w	r2, r2, #4
 8003338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69d9      	ldr	r1, [r3, #28]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	61da      	str	r2, [r3, #28]
      break;
 800334c:	e064      	b.n	8003418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fbc7 	bl	8003ae8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69da      	ldr	r2, [r3, #28]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69d9      	ldr	r1, [r3, #28]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	021a      	lsls	r2, r3, #8
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	61da      	str	r2, [r3, #28]
      break;
 800338e:	e043      	b.n	8003418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fc30 	bl	8003bfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0208 	orr.w	r2, r2, #8
 80033aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0204 	bic.w	r2, r2, #4
 80033ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80033ce:	e023      	b.n	8003418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fc74 	bl	8003cc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	021a      	lsls	r2, r3, #8
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003410:	e002      	b.n	8003418 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	75fb      	strb	r3, [r7, #23]
      break;
 8003416:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003420:	7dfb      	ldrb	r3, [r7, #23]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop

0800342c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_TIM_ConfigClockSource+0x1c>
 8003444:	2302      	movs	r3, #2
 8003446:	e0de      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x1da>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003466:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800346a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a63      	ldr	r2, [pc, #396]	; (8003610 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	f000 80a9 	beq.w	80035da <HAL_TIM_ConfigClockSource+0x1ae>
 8003488:	4a61      	ldr	r2, [pc, #388]	; (8003610 <HAL_TIM_ConfigClockSource+0x1e4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	f200 80ae 	bhi.w	80035ec <HAL_TIM_ConfigClockSource+0x1c0>
 8003490:	4a60      	ldr	r2, [pc, #384]	; (8003614 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	f000 80a1 	beq.w	80035da <HAL_TIM_ConfigClockSource+0x1ae>
 8003498:	4a5e      	ldr	r2, [pc, #376]	; (8003614 <HAL_TIM_ConfigClockSource+0x1e8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	f200 80a6 	bhi.w	80035ec <HAL_TIM_ConfigClockSource+0x1c0>
 80034a0:	4a5d      	ldr	r2, [pc, #372]	; (8003618 <HAL_TIM_ConfigClockSource+0x1ec>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	f000 8099 	beq.w	80035da <HAL_TIM_ConfigClockSource+0x1ae>
 80034a8:	4a5b      	ldr	r2, [pc, #364]	; (8003618 <HAL_TIM_ConfigClockSource+0x1ec>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	f200 809e 	bhi.w	80035ec <HAL_TIM_ConfigClockSource+0x1c0>
 80034b0:	4a5a      	ldr	r2, [pc, #360]	; (800361c <HAL_TIM_ConfigClockSource+0x1f0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	f000 8091 	beq.w	80035da <HAL_TIM_ConfigClockSource+0x1ae>
 80034b8:	4a58      	ldr	r2, [pc, #352]	; (800361c <HAL_TIM_ConfigClockSource+0x1f0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	f200 8096 	bhi.w	80035ec <HAL_TIM_ConfigClockSource+0x1c0>
 80034c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80034c4:	f000 8089 	beq.w	80035da <HAL_TIM_ConfigClockSource+0x1ae>
 80034c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80034cc:	f200 808e 	bhi.w	80035ec <HAL_TIM_ConfigClockSource+0x1c0>
 80034d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d4:	d03e      	beq.n	8003554 <HAL_TIM_ConfigClockSource+0x128>
 80034d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034da:	f200 8087 	bhi.w	80035ec <HAL_TIM_ConfigClockSource+0x1c0>
 80034de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e2:	f000 8086 	beq.w	80035f2 <HAL_TIM_ConfigClockSource+0x1c6>
 80034e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ea:	d87f      	bhi.n	80035ec <HAL_TIM_ConfigClockSource+0x1c0>
 80034ec:	2b70      	cmp	r3, #112	; 0x70
 80034ee:	d01a      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0xfa>
 80034f0:	2b70      	cmp	r3, #112	; 0x70
 80034f2:	d87b      	bhi.n	80035ec <HAL_TIM_ConfigClockSource+0x1c0>
 80034f4:	2b60      	cmp	r3, #96	; 0x60
 80034f6:	d050      	beq.n	800359a <HAL_TIM_ConfigClockSource+0x16e>
 80034f8:	2b60      	cmp	r3, #96	; 0x60
 80034fa:	d877      	bhi.n	80035ec <HAL_TIM_ConfigClockSource+0x1c0>
 80034fc:	2b50      	cmp	r3, #80	; 0x50
 80034fe:	d03c      	beq.n	800357a <HAL_TIM_ConfigClockSource+0x14e>
 8003500:	2b50      	cmp	r3, #80	; 0x50
 8003502:	d873      	bhi.n	80035ec <HAL_TIM_ConfigClockSource+0x1c0>
 8003504:	2b40      	cmp	r3, #64	; 0x40
 8003506:	d058      	beq.n	80035ba <HAL_TIM_ConfigClockSource+0x18e>
 8003508:	2b40      	cmp	r3, #64	; 0x40
 800350a:	d86f      	bhi.n	80035ec <HAL_TIM_ConfigClockSource+0x1c0>
 800350c:	2b30      	cmp	r3, #48	; 0x30
 800350e:	d064      	beq.n	80035da <HAL_TIM_ConfigClockSource+0x1ae>
 8003510:	2b30      	cmp	r3, #48	; 0x30
 8003512:	d86b      	bhi.n	80035ec <HAL_TIM_ConfigClockSource+0x1c0>
 8003514:	2b20      	cmp	r3, #32
 8003516:	d060      	beq.n	80035da <HAL_TIM_ConfigClockSource+0x1ae>
 8003518:	2b20      	cmp	r3, #32
 800351a:	d867      	bhi.n	80035ec <HAL_TIM_ConfigClockSource+0x1c0>
 800351c:	2b00      	cmp	r3, #0
 800351e:	d05c      	beq.n	80035da <HAL_TIM_ConfigClockSource+0x1ae>
 8003520:	2b10      	cmp	r3, #16
 8003522:	d05a      	beq.n	80035da <HAL_TIM_ConfigClockSource+0x1ae>
 8003524:	e062      	b.n	80035ec <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6899      	ldr	r1, [r3, #8]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f000 fca7 	bl	8003e88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003548:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	609a      	str	r2, [r3, #8]
      break;
 8003552:	e04f      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	6899      	ldr	r1, [r3, #8]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f000 fc90 	bl	8003e88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003576:	609a      	str	r2, [r3, #8]
      break;
 8003578:	e03c      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6859      	ldr	r1, [r3, #4]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	461a      	mov	r2, r3
 8003588:	f000 fc02 	bl	8003d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2150      	movs	r1, #80	; 0x50
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fc5b 	bl	8003e4e <TIM_ITRx_SetConfig>
      break;
 8003598:	e02c      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6859      	ldr	r1, [r3, #4]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	461a      	mov	r2, r3
 80035a8:	f000 fc21 	bl	8003dee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2160      	movs	r1, #96	; 0x60
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fc4b 	bl	8003e4e <TIM_ITRx_SetConfig>
      break;
 80035b8:	e01c      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	6859      	ldr	r1, [r3, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	461a      	mov	r2, r3
 80035c8:	f000 fbe2 	bl	8003d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2140      	movs	r1, #64	; 0x40
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fc3b 	bl	8003e4e <TIM_ITRx_SetConfig>
      break;
 80035d8:	e00c      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4619      	mov	r1, r3
 80035e4:	4610      	mov	r0, r2
 80035e6:	f000 fc32 	bl	8003e4e <TIM_ITRx_SetConfig>
      break;
 80035ea:	e003      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
      break;
 80035f0:	e000      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80035f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003604:	7bfb      	ldrb	r3, [r7, #15]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	00100070 	.word	0x00100070
 8003614:	00100040 	.word	0x00100040
 8003618:	00100030 	.word	0x00100030
 800361c:	00100020 	.word	0x00100020

08003620 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a3c      	ldr	r2, [pc, #240]	; (8003788 <TIM_Base_SetConfig+0x104>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00f      	beq.n	80036bc <TIM_Base_SetConfig+0x38>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a2:	d00b      	beq.n	80036bc <TIM_Base_SetConfig+0x38>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a39      	ldr	r2, [pc, #228]	; (800378c <TIM_Base_SetConfig+0x108>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d007      	beq.n	80036bc <TIM_Base_SetConfig+0x38>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a38      	ldr	r2, [pc, #224]	; (8003790 <TIM_Base_SetConfig+0x10c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d003      	beq.n	80036bc <TIM_Base_SetConfig+0x38>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a37      	ldr	r2, [pc, #220]	; (8003794 <TIM_Base_SetConfig+0x110>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d108      	bne.n	80036ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a2d      	ldr	r2, [pc, #180]	; (8003788 <TIM_Base_SetConfig+0x104>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d01b      	beq.n	800370e <TIM_Base_SetConfig+0x8a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036dc:	d017      	beq.n	800370e <TIM_Base_SetConfig+0x8a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a2a      	ldr	r2, [pc, #168]	; (800378c <TIM_Base_SetConfig+0x108>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <TIM_Base_SetConfig+0x8a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a29      	ldr	r2, [pc, #164]	; (8003790 <TIM_Base_SetConfig+0x10c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00f      	beq.n	800370e <TIM_Base_SetConfig+0x8a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a28      	ldr	r2, [pc, #160]	; (8003794 <TIM_Base_SetConfig+0x110>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00b      	beq.n	800370e <TIM_Base_SetConfig+0x8a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a27      	ldr	r2, [pc, #156]	; (8003798 <TIM_Base_SetConfig+0x114>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d007      	beq.n	800370e <TIM_Base_SetConfig+0x8a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a26      	ldr	r2, [pc, #152]	; (800379c <TIM_Base_SetConfig+0x118>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d003      	beq.n	800370e <TIM_Base_SetConfig+0x8a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a25      	ldr	r2, [pc, #148]	; (80037a0 <TIM_Base_SetConfig+0x11c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d108      	bne.n	8003720 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a10      	ldr	r2, [pc, #64]	; (8003788 <TIM_Base_SetConfig+0x104>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00f      	beq.n	800376c <TIM_Base_SetConfig+0xe8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a11      	ldr	r2, [pc, #68]	; (8003794 <TIM_Base_SetConfig+0x110>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00b      	beq.n	800376c <TIM_Base_SetConfig+0xe8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a10      	ldr	r2, [pc, #64]	; (8003798 <TIM_Base_SetConfig+0x114>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d007      	beq.n	800376c <TIM_Base_SetConfig+0xe8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a0f      	ldr	r2, [pc, #60]	; (800379c <TIM_Base_SetConfig+0x118>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d003      	beq.n	800376c <TIM_Base_SetConfig+0xe8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a0e      	ldr	r2, [pc, #56]	; (80037a0 <TIM_Base_SetConfig+0x11c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d103      	bne.n	8003774 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	615a      	str	r2, [r3, #20]
}
 800377a:	bf00      	nop
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40000400 	.word	0x40000400
 8003790:	40000800 	.word	0x40000800
 8003794:	40013400 	.word	0x40013400
 8003798:	40014000 	.word	0x40014000
 800379c:	40014400 	.word	0x40014400
 80037a0:	40014800 	.word	0x40014800

080037a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	f023 0201 	bic.w	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0303 	bic.w	r3, r3, #3
 80037de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f023 0302 	bic.w	r3, r3, #2
 80037f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a2c      	ldr	r2, [pc, #176]	; (80038b0 <TIM_OC1_SetConfig+0x10c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d00f      	beq.n	8003824 <TIM_OC1_SetConfig+0x80>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a2b      	ldr	r2, [pc, #172]	; (80038b4 <TIM_OC1_SetConfig+0x110>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d00b      	beq.n	8003824 <TIM_OC1_SetConfig+0x80>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a2a      	ldr	r2, [pc, #168]	; (80038b8 <TIM_OC1_SetConfig+0x114>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d007      	beq.n	8003824 <TIM_OC1_SetConfig+0x80>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a29      	ldr	r2, [pc, #164]	; (80038bc <TIM_OC1_SetConfig+0x118>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d003      	beq.n	8003824 <TIM_OC1_SetConfig+0x80>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a28      	ldr	r2, [pc, #160]	; (80038c0 <TIM_OC1_SetConfig+0x11c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d10c      	bne.n	800383e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f023 0308 	bic.w	r3, r3, #8
 800382a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	4313      	orrs	r3, r2
 8003834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f023 0304 	bic.w	r3, r3, #4
 800383c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a1b      	ldr	r2, [pc, #108]	; (80038b0 <TIM_OC1_SetConfig+0x10c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00f      	beq.n	8003866 <TIM_OC1_SetConfig+0xc2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a1a      	ldr	r2, [pc, #104]	; (80038b4 <TIM_OC1_SetConfig+0x110>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00b      	beq.n	8003866 <TIM_OC1_SetConfig+0xc2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a19      	ldr	r2, [pc, #100]	; (80038b8 <TIM_OC1_SetConfig+0x114>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d007      	beq.n	8003866 <TIM_OC1_SetConfig+0xc2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a18      	ldr	r2, [pc, #96]	; (80038bc <TIM_OC1_SetConfig+0x118>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d003      	beq.n	8003866 <TIM_OC1_SetConfig+0xc2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a17      	ldr	r2, [pc, #92]	; (80038c0 <TIM_OC1_SetConfig+0x11c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d111      	bne.n	800388a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800386c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	621a      	str	r2, [r3, #32]
}
 80038a4:	bf00      	nop
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	40012c00 	.word	0x40012c00
 80038b4:	40013400 	.word	0x40013400
 80038b8:	40014000 	.word	0x40014000
 80038bc:	40014400 	.word	0x40014400
 80038c0:	40014800 	.word	0x40014800

080038c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	f023 0210 	bic.w	r2, r3, #16
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	021b      	lsls	r3, r3, #8
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f023 0320 	bic.w	r3, r3, #32
 8003912:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a28      	ldr	r2, [pc, #160]	; (80039c4 <TIM_OC2_SetConfig+0x100>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d003      	beq.n	8003930 <TIM_OC2_SetConfig+0x6c>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a27      	ldr	r2, [pc, #156]	; (80039c8 <TIM_OC2_SetConfig+0x104>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d10d      	bne.n	800394c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800394a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <TIM_OC2_SetConfig+0x100>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00f      	beq.n	8003974 <TIM_OC2_SetConfig+0xb0>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a1c      	ldr	r2, [pc, #112]	; (80039c8 <TIM_OC2_SetConfig+0x104>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00b      	beq.n	8003974 <TIM_OC2_SetConfig+0xb0>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a1b      	ldr	r2, [pc, #108]	; (80039cc <TIM_OC2_SetConfig+0x108>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d007      	beq.n	8003974 <TIM_OC2_SetConfig+0xb0>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a1a      	ldr	r2, [pc, #104]	; (80039d0 <TIM_OC2_SetConfig+0x10c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_OC2_SetConfig+0xb0>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a19      	ldr	r2, [pc, #100]	; (80039d4 <TIM_OC2_SetConfig+0x110>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d113      	bne.n	800399c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800397a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003982:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	621a      	str	r2, [r3, #32]
}
 80039b6:	bf00      	nop
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40012c00 	.word	0x40012c00
 80039c8:	40013400 	.word	0x40013400
 80039cc:	40014000 	.word	0x40014000
 80039d0:	40014400 	.word	0x40014400
 80039d4:	40014800 	.word	0x40014800

080039d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 0303 	bic.w	r3, r3, #3
 8003a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a27      	ldr	r2, [pc, #156]	; (8003ad4 <TIM_OC3_SetConfig+0xfc>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d003      	beq.n	8003a42 <TIM_OC3_SetConfig+0x6a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a26      	ldr	r2, [pc, #152]	; (8003ad8 <TIM_OC3_SetConfig+0x100>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d10d      	bne.n	8003a5e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	021b      	lsls	r3, r3, #8
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a1c      	ldr	r2, [pc, #112]	; (8003ad4 <TIM_OC3_SetConfig+0xfc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00f      	beq.n	8003a86 <TIM_OC3_SetConfig+0xae>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1b      	ldr	r2, [pc, #108]	; (8003ad8 <TIM_OC3_SetConfig+0x100>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00b      	beq.n	8003a86 <TIM_OC3_SetConfig+0xae>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a1a      	ldr	r2, [pc, #104]	; (8003adc <TIM_OC3_SetConfig+0x104>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d007      	beq.n	8003a86 <TIM_OC3_SetConfig+0xae>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a19      	ldr	r2, [pc, #100]	; (8003ae0 <TIM_OC3_SetConfig+0x108>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d003      	beq.n	8003a86 <TIM_OC3_SetConfig+0xae>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a18      	ldr	r2, [pc, #96]	; (8003ae4 <TIM_OC3_SetConfig+0x10c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d113      	bne.n	8003aae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	621a      	str	r2, [r3, #32]
}
 8003ac8:	bf00      	nop
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	40012c00 	.word	0x40012c00
 8003ad8:	40013400 	.word	0x40013400
 8003adc:	40014000 	.word	0x40014000
 8003ae0:	40014400 	.word	0x40014400
 8003ae4:	40014800 	.word	0x40014800

08003ae8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	021b      	lsls	r3, r3, #8
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	031b      	lsls	r3, r3, #12
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a28      	ldr	r2, [pc, #160]	; (8003be8 <TIM_OC4_SetConfig+0x100>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d003      	beq.n	8003b54 <TIM_OC4_SetConfig+0x6c>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a27      	ldr	r2, [pc, #156]	; (8003bec <TIM_OC4_SetConfig+0x104>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d10d      	bne.n	8003b70 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	031b      	lsls	r3, r3, #12
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a1d      	ldr	r2, [pc, #116]	; (8003be8 <TIM_OC4_SetConfig+0x100>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00f      	beq.n	8003b98 <TIM_OC4_SetConfig+0xb0>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a1c      	ldr	r2, [pc, #112]	; (8003bec <TIM_OC4_SetConfig+0x104>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00b      	beq.n	8003b98 <TIM_OC4_SetConfig+0xb0>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a1b      	ldr	r2, [pc, #108]	; (8003bf0 <TIM_OC4_SetConfig+0x108>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d007      	beq.n	8003b98 <TIM_OC4_SetConfig+0xb0>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a1a      	ldr	r2, [pc, #104]	; (8003bf4 <TIM_OC4_SetConfig+0x10c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d003      	beq.n	8003b98 <TIM_OC4_SetConfig+0xb0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a19      	ldr	r2, [pc, #100]	; (8003bf8 <TIM_OC4_SetConfig+0x110>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d113      	bne.n	8003bc0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b9e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ba6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	019b      	lsls	r3, r3, #6
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	019b      	lsls	r3, r3, #6
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	621a      	str	r2, [r3, #32]
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40012c00 	.word	0x40012c00
 8003bec:	40013400 	.word	0x40013400
 8003bf0:	40014000 	.word	0x40014000
 8003bf4:	40014400 	.word	0x40014400
 8003bf8:	40014800 	.word	0x40014800

08003bfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	041b      	lsls	r3, r3, #16
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a17      	ldr	r2, [pc, #92]	; (8003cb0 <TIM_OC5_SetConfig+0xb4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00f      	beq.n	8003c76 <TIM_OC5_SetConfig+0x7a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a16      	ldr	r2, [pc, #88]	; (8003cb4 <TIM_OC5_SetConfig+0xb8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00b      	beq.n	8003c76 <TIM_OC5_SetConfig+0x7a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a15      	ldr	r2, [pc, #84]	; (8003cb8 <TIM_OC5_SetConfig+0xbc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <TIM_OC5_SetConfig+0x7a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a14      	ldr	r2, [pc, #80]	; (8003cbc <TIM_OC5_SetConfig+0xc0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <TIM_OC5_SetConfig+0x7a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <TIM_OC5_SetConfig+0xc4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d109      	bne.n	8003c8a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	621a      	str	r2, [r3, #32]
}
 8003ca4:	bf00      	nop
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	40012c00 	.word	0x40012c00
 8003cb4:	40013400 	.word	0x40013400
 8003cb8:	40014000 	.word	0x40014000
 8003cbc:	40014400 	.word	0x40014400
 8003cc0:	40014800 	.word	0x40014800

08003cc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	051b      	lsls	r3, r3, #20
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a18      	ldr	r2, [pc, #96]	; (8003d7c <TIM_OC6_SetConfig+0xb8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00f      	beq.n	8003d40 <TIM_OC6_SetConfig+0x7c>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a17      	ldr	r2, [pc, #92]	; (8003d80 <TIM_OC6_SetConfig+0xbc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00b      	beq.n	8003d40 <TIM_OC6_SetConfig+0x7c>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a16      	ldr	r2, [pc, #88]	; (8003d84 <TIM_OC6_SetConfig+0xc0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d007      	beq.n	8003d40 <TIM_OC6_SetConfig+0x7c>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a15      	ldr	r2, [pc, #84]	; (8003d88 <TIM_OC6_SetConfig+0xc4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d003      	beq.n	8003d40 <TIM_OC6_SetConfig+0x7c>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a14      	ldr	r2, [pc, #80]	; (8003d8c <TIM_OC6_SetConfig+0xc8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d109      	bne.n	8003d54 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	029b      	lsls	r3, r3, #10
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	621a      	str	r2, [r3, #32]
}
 8003d6e:	bf00      	nop
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40012c00 	.word	0x40012c00
 8003d80:	40013400 	.word	0x40013400
 8003d84:	40014000 	.word	0x40014000
 8003d88:	40014400 	.word	0x40014400
 8003d8c:	40014800 	.word	0x40014800

08003d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	f023 0201 	bic.w	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f023 030a 	bic.w	r3, r3, #10
 8003dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	621a      	str	r2, [r3, #32]
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b087      	sub	sp, #28
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f023 0210 	bic.w	r2, r3, #16
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	031b      	lsls	r3, r3, #12
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f043 0307 	orr.w	r3, r3, #7
 8003e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	609a      	str	r2, [r3, #8]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	021a      	lsls	r2, r3, #8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	609a      	str	r2, [r3, #8]
}
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f003 031f 	and.w	r3, r3, #31
 8003eda:	2201      	movs	r2, #1
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a1a      	ldr	r2, [r3, #32]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	401a      	ands	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a1a      	ldr	r2, [r3, #32]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f003 031f 	and.w	r3, r3, #31
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	fa01 f303 	lsl.w	r3, r1, r3
 8003f00:	431a      	orrs	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	621a      	str	r2, [r3, #32]
}
 8003f06:	bf00      	nop
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e065      	b.n	8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a2c      	ldr	r2, [pc, #176]	; (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d004      	beq.n	8003f60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a2b      	ldr	r2, [pc, #172]	; (8004008 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d108      	bne.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a1b      	ldr	r2, [pc, #108]	; (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d018      	beq.n	8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa2:	d013      	beq.n	8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a18      	ldr	r2, [pc, #96]	; (800400c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00e      	beq.n	8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a17      	ldr	r2, [pc, #92]	; (8004010 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d009      	beq.n	8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a12      	ldr	r2, [pc, #72]	; (8004008 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d004      	beq.n	8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a13      	ldr	r2, [pc, #76]	; (8004014 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d10c      	bne.n	8003fe6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	40012c00 	.word	0x40012c00
 8004008:	40013400 	.word	0x40013400
 800400c:	40000400 	.word	0x40000400
 8004010:	40000800 	.word	0x40000800
 8004014:	40014000 	.word	0x40014000

08004018 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004030:	2302      	movs	r3, #2
 8004032:	e087      	b.n	8004144 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	041b      	lsls	r3, r3, #16
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a27      	ldr	r2, [pc, #156]	; (8004150 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d004      	beq.n	80040c2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a25      	ldr	r2, [pc, #148]	; (8004154 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d106      	bne.n	80040d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a1e      	ldr	r2, [pc, #120]	; (8004150 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d004      	beq.n	80040e4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d126      	bne.n	8004132 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	051b      	lsls	r3, r3, #20
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	4313      	orrs	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a0e      	ldr	r2, [pc, #56]	; (8004150 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a0d      	ldr	r2, [pc, #52]	; (8004154 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d106      	bne.n	8004132 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40013400 	.word	0x40013400

08004158 <HAL_TIMEx_ConfigAsymmetricalDeadTime>:
  * @param  FallingDeadtime Falling edge deadtime value
  * @note   This parameter can be a number between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigAsymmetricalDeadTime(TIM_HandleTypeDef *htim, uint32_t FallingDeadtime)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DEADTIME(FallingDeadtime));

  MODIFY_REG(htim->Instance->DTR2, TIM_DTR2_DTGF, FallingDeadtime);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004168:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_TIMEx_EnableAsymmetricalDeadTime>:
  * @brief  Enable asymmetrical deadtime
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableAsymmetricalDeadTime(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTAE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800419a:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e042      	b.n	80042ce <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fc feae 	bl	8000fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2224      	movs	r2, #36	; 0x24
 8004264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0201 	bic.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f8c3 	bl	8004404 <UART_SetConfig>
 800427e:	4603      	mov	r3, r0
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e022      	b.n	80042ce <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fb83 	bl	800499c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f042 0201 	orr.w	r2, r2, #1
 80042c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fc0a 	bl	8004ae0 <UART_CheckIdleState>
 80042cc:	4603      	mov	r3, r0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b08a      	sub	sp, #40	; 0x28
 80042da:	af02      	add	r7, sp, #8
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	603b      	str	r3, [r7, #0]
 80042e2:	4613      	mov	r3, r2
 80042e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ec:	2b20      	cmp	r3, #32
 80042ee:	f040 8083 	bne.w	80043f8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <HAL_UART_Transmit+0x28>
 80042f8:	88fb      	ldrh	r3, [r7, #6]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e07b      	b.n	80043fa <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_UART_Transmit+0x3a>
 800430c:	2302      	movs	r3, #2
 800430e:	e074      	b.n	80043fa <HAL_UART_Transmit+0x124>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2221      	movs	r2, #33	; 0x21
 8004324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004328:	f7fd f816 	bl	8001358 <HAL_GetTick>
 800432c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	88fa      	ldrh	r2, [r7, #6]
 8004332:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004346:	d108      	bne.n	800435a <HAL_UART_Transmit+0x84>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d104      	bne.n	800435a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004350:	2300      	movs	r3, #0
 8004352:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	e003      	b.n	8004362 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800435e:	2300      	movs	r3, #0
 8004360:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800436a:	e02c      	b.n	80043c6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2200      	movs	r2, #0
 8004374:	2180      	movs	r1, #128	; 0x80
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 fbfd 	bl	8004b76 <UART_WaitOnFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e039      	b.n	80043fa <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10b      	bne.n	80043a4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800439a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	3302      	adds	r3, #2
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	e007      	b.n	80043b4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	781a      	ldrb	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	3301      	adds	r3, #1
 80043b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1cc      	bne.n	800436c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2200      	movs	r2, #0
 80043da:	2140      	movs	r1, #64	; 0x40
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 fbca 	bl	8004b76 <UART_WaitOnFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e006      	b.n	80043fa <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	e000      	b.n	80043fa <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80043f8:	2302      	movs	r3, #2
  }
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3720      	adds	r7, #32
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004408:	b08c      	sub	sp, #48	; 0x30
 800440a:	af00      	add	r7, sp, #0
 800440c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	431a      	orrs	r2, r3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	431a      	orrs	r2, r3
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	4313      	orrs	r3, r2
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	4bab      	ldr	r3, [pc, #684]	; (80046e0 <UART_SetConfig+0x2dc>)
 8004434:	4013      	ands	r3, r2
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800443c:	430b      	orrs	r3, r1
 800443e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4aa0      	ldr	r2, [pc, #640]	; (80046e4 <UART_SetConfig+0x2e0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d004      	beq.n	8004470 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800446c:	4313      	orrs	r3, r2
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800447a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004484:	430b      	orrs	r3, r1
 8004486:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	f023 010f 	bic.w	r1, r3, #15
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a91      	ldr	r2, [pc, #580]	; (80046e8 <UART_SetConfig+0x2e4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d125      	bne.n	80044f4 <UART_SetConfig+0xf0>
 80044a8:	4b90      	ldr	r3, [pc, #576]	; (80046ec <UART_SetConfig+0x2e8>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d81a      	bhi.n	80044ec <UART_SetConfig+0xe8>
 80044b6:	a201      	add	r2, pc, #4	; (adr r2, 80044bc <UART_SetConfig+0xb8>)
 80044b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044bc:	080044cd 	.word	0x080044cd
 80044c0:	080044dd 	.word	0x080044dd
 80044c4:	080044d5 	.word	0x080044d5
 80044c8:	080044e5 	.word	0x080044e5
 80044cc:	2301      	movs	r3, #1
 80044ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044d2:	e0d6      	b.n	8004682 <UART_SetConfig+0x27e>
 80044d4:	2302      	movs	r3, #2
 80044d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044da:	e0d2      	b.n	8004682 <UART_SetConfig+0x27e>
 80044dc:	2304      	movs	r3, #4
 80044de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044e2:	e0ce      	b.n	8004682 <UART_SetConfig+0x27e>
 80044e4:	2308      	movs	r3, #8
 80044e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ea:	e0ca      	b.n	8004682 <UART_SetConfig+0x27e>
 80044ec:	2310      	movs	r3, #16
 80044ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044f2:	e0c6      	b.n	8004682 <UART_SetConfig+0x27e>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a7d      	ldr	r2, [pc, #500]	; (80046f0 <UART_SetConfig+0x2ec>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d138      	bne.n	8004570 <UART_SetConfig+0x16c>
 80044fe:	4b7b      	ldr	r3, [pc, #492]	; (80046ec <UART_SetConfig+0x2e8>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	f003 030c 	and.w	r3, r3, #12
 8004508:	2b0c      	cmp	r3, #12
 800450a:	d82d      	bhi.n	8004568 <UART_SetConfig+0x164>
 800450c:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <UART_SetConfig+0x110>)
 800450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004512:	bf00      	nop
 8004514:	08004549 	.word	0x08004549
 8004518:	08004569 	.word	0x08004569
 800451c:	08004569 	.word	0x08004569
 8004520:	08004569 	.word	0x08004569
 8004524:	08004559 	.word	0x08004559
 8004528:	08004569 	.word	0x08004569
 800452c:	08004569 	.word	0x08004569
 8004530:	08004569 	.word	0x08004569
 8004534:	08004551 	.word	0x08004551
 8004538:	08004569 	.word	0x08004569
 800453c:	08004569 	.word	0x08004569
 8004540:	08004569 	.word	0x08004569
 8004544:	08004561 	.word	0x08004561
 8004548:	2300      	movs	r3, #0
 800454a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800454e:	e098      	b.n	8004682 <UART_SetConfig+0x27e>
 8004550:	2302      	movs	r3, #2
 8004552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004556:	e094      	b.n	8004682 <UART_SetConfig+0x27e>
 8004558:	2304      	movs	r3, #4
 800455a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800455e:	e090      	b.n	8004682 <UART_SetConfig+0x27e>
 8004560:	2308      	movs	r3, #8
 8004562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004566:	e08c      	b.n	8004682 <UART_SetConfig+0x27e>
 8004568:	2310      	movs	r3, #16
 800456a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800456e:	e088      	b.n	8004682 <UART_SetConfig+0x27e>
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a5f      	ldr	r2, [pc, #380]	; (80046f4 <UART_SetConfig+0x2f0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d125      	bne.n	80045c6 <UART_SetConfig+0x1c2>
 800457a:	4b5c      	ldr	r3, [pc, #368]	; (80046ec <UART_SetConfig+0x2e8>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004580:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004584:	2b30      	cmp	r3, #48	; 0x30
 8004586:	d016      	beq.n	80045b6 <UART_SetConfig+0x1b2>
 8004588:	2b30      	cmp	r3, #48	; 0x30
 800458a:	d818      	bhi.n	80045be <UART_SetConfig+0x1ba>
 800458c:	2b20      	cmp	r3, #32
 800458e:	d00a      	beq.n	80045a6 <UART_SetConfig+0x1a2>
 8004590:	2b20      	cmp	r3, #32
 8004592:	d814      	bhi.n	80045be <UART_SetConfig+0x1ba>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <UART_SetConfig+0x19a>
 8004598:	2b10      	cmp	r3, #16
 800459a:	d008      	beq.n	80045ae <UART_SetConfig+0x1aa>
 800459c:	e00f      	b.n	80045be <UART_SetConfig+0x1ba>
 800459e:	2300      	movs	r3, #0
 80045a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045a4:	e06d      	b.n	8004682 <UART_SetConfig+0x27e>
 80045a6:	2302      	movs	r3, #2
 80045a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ac:	e069      	b.n	8004682 <UART_SetConfig+0x27e>
 80045ae:	2304      	movs	r3, #4
 80045b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045b4:	e065      	b.n	8004682 <UART_SetConfig+0x27e>
 80045b6:	2308      	movs	r3, #8
 80045b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045bc:	e061      	b.n	8004682 <UART_SetConfig+0x27e>
 80045be:	2310      	movs	r3, #16
 80045c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045c4:	e05d      	b.n	8004682 <UART_SetConfig+0x27e>
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a4b      	ldr	r2, [pc, #300]	; (80046f8 <UART_SetConfig+0x2f4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d125      	bne.n	800461c <UART_SetConfig+0x218>
 80045d0:	4b46      	ldr	r3, [pc, #280]	; (80046ec <UART_SetConfig+0x2e8>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045da:	2bc0      	cmp	r3, #192	; 0xc0
 80045dc:	d016      	beq.n	800460c <UART_SetConfig+0x208>
 80045de:	2bc0      	cmp	r3, #192	; 0xc0
 80045e0:	d818      	bhi.n	8004614 <UART_SetConfig+0x210>
 80045e2:	2b80      	cmp	r3, #128	; 0x80
 80045e4:	d00a      	beq.n	80045fc <UART_SetConfig+0x1f8>
 80045e6:	2b80      	cmp	r3, #128	; 0x80
 80045e8:	d814      	bhi.n	8004614 <UART_SetConfig+0x210>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <UART_SetConfig+0x1f0>
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d008      	beq.n	8004604 <UART_SetConfig+0x200>
 80045f2:	e00f      	b.n	8004614 <UART_SetConfig+0x210>
 80045f4:	2300      	movs	r3, #0
 80045f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045fa:	e042      	b.n	8004682 <UART_SetConfig+0x27e>
 80045fc:	2302      	movs	r3, #2
 80045fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004602:	e03e      	b.n	8004682 <UART_SetConfig+0x27e>
 8004604:	2304      	movs	r3, #4
 8004606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800460a:	e03a      	b.n	8004682 <UART_SetConfig+0x27e>
 800460c:	2308      	movs	r3, #8
 800460e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004612:	e036      	b.n	8004682 <UART_SetConfig+0x27e>
 8004614:	2310      	movs	r3, #16
 8004616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800461a:	e032      	b.n	8004682 <UART_SetConfig+0x27e>
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a30      	ldr	r2, [pc, #192]	; (80046e4 <UART_SetConfig+0x2e0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d12a      	bne.n	800467c <UART_SetConfig+0x278>
 8004626:	4b31      	ldr	r3, [pc, #196]	; (80046ec <UART_SetConfig+0x2e8>)
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004630:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004634:	d01a      	beq.n	800466c <UART_SetConfig+0x268>
 8004636:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800463a:	d81b      	bhi.n	8004674 <UART_SetConfig+0x270>
 800463c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004640:	d00c      	beq.n	800465c <UART_SetConfig+0x258>
 8004642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004646:	d815      	bhi.n	8004674 <UART_SetConfig+0x270>
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <UART_SetConfig+0x250>
 800464c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004650:	d008      	beq.n	8004664 <UART_SetConfig+0x260>
 8004652:	e00f      	b.n	8004674 <UART_SetConfig+0x270>
 8004654:	2300      	movs	r3, #0
 8004656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800465a:	e012      	b.n	8004682 <UART_SetConfig+0x27e>
 800465c:	2302      	movs	r3, #2
 800465e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004662:	e00e      	b.n	8004682 <UART_SetConfig+0x27e>
 8004664:	2304      	movs	r3, #4
 8004666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800466a:	e00a      	b.n	8004682 <UART_SetConfig+0x27e>
 800466c:	2308      	movs	r3, #8
 800466e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004672:	e006      	b.n	8004682 <UART_SetConfig+0x27e>
 8004674:	2310      	movs	r3, #16
 8004676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800467a:	e002      	b.n	8004682 <UART_SetConfig+0x27e>
 800467c:	2310      	movs	r3, #16
 800467e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a17      	ldr	r2, [pc, #92]	; (80046e4 <UART_SetConfig+0x2e0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	f040 80a8 	bne.w	80047de <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800468e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004692:	2b08      	cmp	r3, #8
 8004694:	d834      	bhi.n	8004700 <UART_SetConfig+0x2fc>
 8004696:	a201      	add	r2, pc, #4	; (adr r2, 800469c <UART_SetConfig+0x298>)
 8004698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469c:	080046c1 	.word	0x080046c1
 80046a0:	08004701 	.word	0x08004701
 80046a4:	080046c9 	.word	0x080046c9
 80046a8:	08004701 	.word	0x08004701
 80046ac:	080046cf 	.word	0x080046cf
 80046b0:	08004701 	.word	0x08004701
 80046b4:	08004701 	.word	0x08004701
 80046b8:	08004701 	.word	0x08004701
 80046bc:	080046d7 	.word	0x080046d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c0:	f7fd ffd2 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 80046c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046c6:	e021      	b.n	800470c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c8:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <UART_SetConfig+0x2f8>)
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046cc:	e01e      	b.n	800470c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ce:	f7fd ff5d 	bl	800258c <HAL_RCC_GetSysClockFreq>
 80046d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046d4:	e01a      	b.n	800470c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046dc:	e016      	b.n	800470c <UART_SetConfig+0x308>
 80046de:	bf00      	nop
 80046e0:	cfff69f3 	.word	0xcfff69f3
 80046e4:	40008000 	.word	0x40008000
 80046e8:	40013800 	.word	0x40013800
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40004400 	.word	0x40004400
 80046f4:	40004800 	.word	0x40004800
 80046f8:	40004c00 	.word	0x40004c00
 80046fc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800470a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 812a 	beq.w	8004968 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	4a9e      	ldr	r2, [pc, #632]	; (8004994 <UART_SetConfig+0x590>)
 800471a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800471e:	461a      	mov	r2, r3
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	fbb3 f3f2 	udiv	r3, r3, r2
 8004726:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	4413      	add	r3, r2
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	429a      	cmp	r2, r3
 8004736:	d305      	bcc.n	8004744 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	429a      	cmp	r2, r3
 8004742:	d903      	bls.n	800474c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800474a:	e10d      	b.n	8004968 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	2200      	movs	r2, #0
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	60fa      	str	r2, [r7, #12]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	4a8e      	ldr	r2, [pc, #568]	; (8004994 <UART_SetConfig+0x590>)
 800475a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800475e:	b29b      	uxth	r3, r3
 8004760:	2200      	movs	r2, #0
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800476a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800476e:	f7fb fda7 	bl	80002c0 <__aeabi_uldivmod>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4610      	mov	r0, r2
 8004778:	4619      	mov	r1, r3
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	020b      	lsls	r3, r1, #8
 8004784:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004788:	0202      	lsls	r2, r0, #8
 800478a:	6979      	ldr	r1, [r7, #20]
 800478c:	6849      	ldr	r1, [r1, #4]
 800478e:	0849      	lsrs	r1, r1, #1
 8004790:	2000      	movs	r0, #0
 8004792:	460c      	mov	r4, r1
 8004794:	4605      	mov	r5, r0
 8004796:	eb12 0804 	adds.w	r8, r2, r4
 800479a:	eb43 0905 	adc.w	r9, r3, r5
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	469a      	mov	sl, r3
 80047a6:	4693      	mov	fp, r2
 80047a8:	4652      	mov	r2, sl
 80047aa:	465b      	mov	r3, fp
 80047ac:	4640      	mov	r0, r8
 80047ae:	4649      	mov	r1, r9
 80047b0:	f7fb fd86 	bl	80002c0 <__aeabi_uldivmod>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4613      	mov	r3, r2
 80047ba:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047c2:	d308      	bcc.n	80047d6 <UART_SetConfig+0x3d2>
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ca:	d204      	bcs.n	80047d6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6a3a      	ldr	r2, [r7, #32]
 80047d2:	60da      	str	r2, [r3, #12]
 80047d4:	e0c8      	b.n	8004968 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047dc:	e0c4      	b.n	8004968 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047e6:	d167      	bne.n	80048b8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80047e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d828      	bhi.n	8004842 <UART_SetConfig+0x43e>
 80047f0:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <UART_SetConfig+0x3f4>)
 80047f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f6:	bf00      	nop
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	08004825 	.word	0x08004825
 8004800:	0800482d 	.word	0x0800482d
 8004804:	08004843 	.word	0x08004843
 8004808:	08004833 	.word	0x08004833
 800480c:	08004843 	.word	0x08004843
 8004810:	08004843 	.word	0x08004843
 8004814:	08004843 	.word	0x08004843
 8004818:	0800483b 	.word	0x0800483b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800481c:	f7fd ff24 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8004820:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004822:	e014      	b.n	800484e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004824:	f7fd ff36 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 8004828:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800482a:	e010      	b.n	800484e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800482c:	4b5a      	ldr	r3, [pc, #360]	; (8004998 <UART_SetConfig+0x594>)
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004830:	e00d      	b.n	800484e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004832:	f7fd feab 	bl	800258c <HAL_RCC_GetSysClockFreq>
 8004836:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004838:	e009      	b.n	800484e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800483a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004840:	e005      	b.n	800484e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800484c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8089 	beq.w	8004968 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	4a4e      	ldr	r2, [pc, #312]	; (8004994 <UART_SetConfig+0x590>)
 800485c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004860:	461a      	mov	r2, r3
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	fbb3 f3f2 	udiv	r3, r3, r2
 8004868:	005a      	lsls	r2, r3, #1
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	441a      	add	r2, r3
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	fbb2 f3f3 	udiv	r3, r2, r3
 800487a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	2b0f      	cmp	r3, #15
 8004880:	d916      	bls.n	80048b0 <UART_SetConfig+0x4ac>
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004888:	d212      	bcs.n	80048b0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	b29b      	uxth	r3, r3
 800488e:	f023 030f 	bic.w	r3, r3, #15
 8004892:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	085b      	lsrs	r3, r3, #1
 8004898:	b29b      	uxth	r3, r3
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	b29a      	uxth	r2, r3
 80048a0:	8bfb      	ldrh	r3, [r7, #30]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	8bfa      	ldrh	r2, [r7, #30]
 80048ac:	60da      	str	r2, [r3, #12]
 80048ae:	e05b      	b.n	8004968 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80048b6:	e057      	b.n	8004968 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d828      	bhi.n	8004912 <UART_SetConfig+0x50e>
 80048c0:	a201      	add	r2, pc, #4	; (adr r2, 80048c8 <UART_SetConfig+0x4c4>)
 80048c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c6:	bf00      	nop
 80048c8:	080048ed 	.word	0x080048ed
 80048cc:	080048f5 	.word	0x080048f5
 80048d0:	080048fd 	.word	0x080048fd
 80048d4:	08004913 	.word	0x08004913
 80048d8:	08004903 	.word	0x08004903
 80048dc:	08004913 	.word	0x08004913
 80048e0:	08004913 	.word	0x08004913
 80048e4:	08004913 	.word	0x08004913
 80048e8:	0800490b 	.word	0x0800490b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ec:	f7fd febc 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 80048f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048f2:	e014      	b.n	800491e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048f4:	f7fd fece 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 80048f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048fa:	e010      	b.n	800491e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048fc:	4b26      	ldr	r3, [pc, #152]	; (8004998 <UART_SetConfig+0x594>)
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004900:	e00d      	b.n	800491e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004902:	f7fd fe43 	bl	800258c <HAL_RCC_GetSysClockFreq>
 8004906:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004908:	e009      	b.n	800491e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004910:	e005      	b.n	800491e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800491c:	bf00      	nop
    }

    if (pclk != 0U)
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	2b00      	cmp	r3, #0
 8004922:	d021      	beq.n	8004968 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	4a1a      	ldr	r2, [pc, #104]	; (8004994 <UART_SetConfig+0x590>)
 800492a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800492e:	461a      	mov	r2, r3
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	fbb3 f2f2 	udiv	r2, r3, r2
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	085b      	lsrs	r3, r3, #1
 800493c:	441a      	add	r2, r3
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	fbb2 f3f3 	udiv	r3, r2, r3
 8004946:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	2b0f      	cmp	r3, #15
 800494c:	d909      	bls.n	8004962 <UART_SetConfig+0x55e>
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004954:	d205      	bcs.n	8004962 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	b29a      	uxth	r2, r3
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60da      	str	r2, [r3, #12]
 8004960:	e002      	b.n	8004968 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2201      	movs	r2, #1
 800496c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2201      	movs	r2, #1
 8004974:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2200      	movs	r2, #0
 800497c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2200      	movs	r2, #0
 8004982:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004984:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004988:	4618      	mov	r0, r3
 800498a:	3730      	adds	r7, #48	; 0x30
 800498c:	46bd      	mov	sp, r7
 800498e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004992:	bf00      	nop
 8004994:	08005dc4 	.word	0x08005dc4
 8004998:	00f42400 	.word	0x00f42400

0800499c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01a      	beq.n	8004ab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a9a:	d10a      	bne.n	8004ab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	605a      	str	r2, [r3, #4]
  }
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af02      	add	r7, sp, #8
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004af0:	f7fc fc32 	bl	8001358 <HAL_GetTick>
 8004af4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d10e      	bne.n	8004b22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f82f 	bl	8004b76 <UART_WaitOnFlagUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e025      	b.n	8004b6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d10e      	bne.n	8004b4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f819 	bl	8004b76 <UART_WaitOnFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e00f      	b.n	8004b6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b09c      	sub	sp, #112	; 0x70
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	603b      	str	r3, [r7, #0]
 8004b82:	4613      	mov	r3, r2
 8004b84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b86:	e0a9      	b.n	8004cdc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8e:	f000 80a5 	beq.w	8004cdc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b92:	f7fc fbe1 	bl	8001358 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d302      	bcc.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d140      	bne.n	8004c2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb0:	e853 3f00 	ldrex	r3, [r3]
 8004bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bbc:	667b      	str	r3, [r7, #100]	; 0x64
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bc8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e6      	bne.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3308      	adds	r3, #8
 8004be0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bec:	f023 0301 	bic.w	r3, r3, #1
 8004bf0:	663b      	str	r3, [r7, #96]	; 0x60
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3308      	adds	r3, #8
 8004bf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8004bfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e5      	bne.n	8004bda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e069      	b.n	8004cfe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d051      	beq.n	8004cdc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c46:	d149      	bne.n	8004cdc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c70:	637b      	str	r3, [r7, #52]	; 0x34
 8004c72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e6      	bne.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3308      	adds	r3, #8
 8004c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	613b      	str	r3, [r7, #16]
   return(result);
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f023 0301 	bic.w	r3, r3, #1
 8004c9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3308      	adds	r3, #8
 8004ca2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ca4:	623a      	str	r2, [r7, #32]
 8004ca6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca8:	69f9      	ldr	r1, [r7, #28]
 8004caa:	6a3a      	ldr	r2, [r7, #32]
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e5      	bne.n	8004c84 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e010      	b.n	8004cfe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69da      	ldr	r2, [r3, #28]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	bf0c      	ite	eq
 8004cec:	2301      	moveq	r3, #1
 8004cee:	2300      	movne	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	79fb      	ldrb	r3, [r7, #7]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	f43f af46 	beq.w	8004b88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3770      	adds	r7, #112	; 0x70
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b085      	sub	sp, #20
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_UARTEx_DisableFifoMode+0x16>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e027      	b.n	8004d6c <HAL_UARTEx_DisableFifoMode+0x66>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2224      	movs	r2, #36	; 0x24
 8004d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e02d      	b.n	8004dec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2224      	movs	r2, #36	; 0x24
 8004d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f84f 	bl	8004e70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e02d      	b.n	8004e68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2224      	movs	r2, #36	; 0x24
 8004e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f811 	bl	8004e70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d108      	bne.n	8004e92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e90:	e031      	b.n	8004ef6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e92:	2308      	movs	r3, #8
 8004e94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e96:	2308      	movs	r3, #8
 8004e98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	0e5b      	lsrs	r3, r3, #25
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	0f5b      	lsrs	r3, r3, #29
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004eba:	7bbb      	ldrb	r3, [r7, #14]
 8004ebc:	7b3a      	ldrb	r2, [r7, #12]
 8004ebe:	4911      	ldr	r1, [pc, #68]	; (8004f04 <UARTEx_SetNbDataToProcess+0x94>)
 8004ec0:	5c8a      	ldrb	r2, [r1, r2]
 8004ec2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ec6:	7b3a      	ldrb	r2, [r7, #12]
 8004ec8:	490f      	ldr	r1, [pc, #60]	; (8004f08 <UARTEx_SetNbDataToProcess+0x98>)
 8004eca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ecc:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	7b7a      	ldrb	r2, [r7, #13]
 8004edc:	4909      	ldr	r1, [pc, #36]	; (8004f04 <UARTEx_SetNbDataToProcess+0x94>)
 8004ede:	5c8a      	ldrb	r2, [r1, r2]
 8004ee0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ee4:	7b7a      	ldrb	r2, [r7, #13]
 8004ee6:	4908      	ldr	r1, [pc, #32]	; (8004f08 <UARTEx_SetNbDataToProcess+0x98>)
 8004ee8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004eea:	fb93 f3f2 	sdiv	r3, r3, r2
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	08005ddc 	.word	0x08005ddc
 8004f08:	08005de4 	.word	0x08005de4

08004f0c <std>:
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	b510      	push	{r4, lr}
 8004f10:	4604      	mov	r4, r0
 8004f12:	e9c0 3300 	strd	r3, r3, [r0]
 8004f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f1a:	6083      	str	r3, [r0, #8]
 8004f1c:	8181      	strh	r1, [r0, #12]
 8004f1e:	6643      	str	r3, [r0, #100]	; 0x64
 8004f20:	81c2      	strh	r2, [r0, #14]
 8004f22:	6183      	str	r3, [r0, #24]
 8004f24:	4619      	mov	r1, r3
 8004f26:	2208      	movs	r2, #8
 8004f28:	305c      	adds	r0, #92	; 0x5c
 8004f2a:	f000 f906 	bl	800513a <memset>
 8004f2e:	4b0d      	ldr	r3, [pc, #52]	; (8004f64 <std+0x58>)
 8004f30:	6263      	str	r3, [r4, #36]	; 0x24
 8004f32:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <std+0x5c>)
 8004f34:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f36:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <std+0x60>)
 8004f38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	; (8004f70 <std+0x64>)
 8004f3c:	6323      	str	r3, [r4, #48]	; 0x30
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <std+0x68>)
 8004f40:	6224      	str	r4, [r4, #32]
 8004f42:	429c      	cmp	r4, r3
 8004f44:	d006      	beq.n	8004f54 <std+0x48>
 8004f46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004f4a:	4294      	cmp	r4, r2
 8004f4c:	d002      	beq.n	8004f54 <std+0x48>
 8004f4e:	33d0      	adds	r3, #208	; 0xd0
 8004f50:	429c      	cmp	r4, r3
 8004f52:	d105      	bne.n	8004f60 <std+0x54>
 8004f54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f5c:	f000 b966 	b.w	800522c <__retarget_lock_init_recursive>
 8004f60:	bd10      	pop	{r4, pc}
 8004f62:	bf00      	nop
 8004f64:	080050b5 	.word	0x080050b5
 8004f68:	080050d7 	.word	0x080050d7
 8004f6c:	0800510f 	.word	0x0800510f
 8004f70:	08005133 	.word	0x08005133
 8004f74:	200002e4 	.word	0x200002e4

08004f78 <stdio_exit_handler>:
 8004f78:	4a02      	ldr	r2, [pc, #8]	; (8004f84 <stdio_exit_handler+0xc>)
 8004f7a:	4903      	ldr	r1, [pc, #12]	; (8004f88 <stdio_exit_handler+0x10>)
 8004f7c:	4803      	ldr	r0, [pc, #12]	; (8004f8c <stdio_exit_handler+0x14>)
 8004f7e:	f000 b869 	b.w	8005054 <_fwalk_sglue>
 8004f82:	bf00      	nop
 8004f84:	2000000c 	.word	0x2000000c
 8004f88:	08005ad9 	.word	0x08005ad9
 8004f8c:	20000018 	.word	0x20000018

08004f90 <cleanup_stdio>:
 8004f90:	6841      	ldr	r1, [r0, #4]
 8004f92:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <cleanup_stdio+0x34>)
 8004f94:	4299      	cmp	r1, r3
 8004f96:	b510      	push	{r4, lr}
 8004f98:	4604      	mov	r4, r0
 8004f9a:	d001      	beq.n	8004fa0 <cleanup_stdio+0x10>
 8004f9c:	f000 fd9c 	bl	8005ad8 <_fflush_r>
 8004fa0:	68a1      	ldr	r1, [r4, #8]
 8004fa2:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <cleanup_stdio+0x38>)
 8004fa4:	4299      	cmp	r1, r3
 8004fa6:	d002      	beq.n	8004fae <cleanup_stdio+0x1e>
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f000 fd95 	bl	8005ad8 <_fflush_r>
 8004fae:	68e1      	ldr	r1, [r4, #12]
 8004fb0:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <cleanup_stdio+0x3c>)
 8004fb2:	4299      	cmp	r1, r3
 8004fb4:	d004      	beq.n	8004fc0 <cleanup_stdio+0x30>
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fbc:	f000 bd8c 	b.w	8005ad8 <_fflush_r>
 8004fc0:	bd10      	pop	{r4, pc}
 8004fc2:	bf00      	nop
 8004fc4:	200002e4 	.word	0x200002e4
 8004fc8:	2000034c 	.word	0x2000034c
 8004fcc:	200003b4 	.word	0x200003b4

08004fd0 <global_stdio_init.part.0>:
 8004fd0:	b510      	push	{r4, lr}
 8004fd2:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <global_stdio_init.part.0+0x30>)
 8004fd4:	4c0b      	ldr	r4, [pc, #44]	; (8005004 <global_stdio_init.part.0+0x34>)
 8004fd6:	4a0c      	ldr	r2, [pc, #48]	; (8005008 <global_stdio_init.part.0+0x38>)
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	4620      	mov	r0, r4
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2104      	movs	r1, #4
 8004fe0:	f7ff ff94 	bl	8004f0c <std>
 8004fe4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004fe8:	2201      	movs	r2, #1
 8004fea:	2109      	movs	r1, #9
 8004fec:	f7ff ff8e 	bl	8004f0c <std>
 8004ff0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ffa:	2112      	movs	r1, #18
 8004ffc:	f7ff bf86 	b.w	8004f0c <std>
 8005000:	2000041c 	.word	0x2000041c
 8005004:	200002e4 	.word	0x200002e4
 8005008:	08004f79 	.word	0x08004f79

0800500c <__sfp_lock_acquire>:
 800500c:	4801      	ldr	r0, [pc, #4]	; (8005014 <__sfp_lock_acquire+0x8>)
 800500e:	f000 b90e 	b.w	800522e <__retarget_lock_acquire_recursive>
 8005012:	bf00      	nop
 8005014:	20000425 	.word	0x20000425

08005018 <__sfp_lock_release>:
 8005018:	4801      	ldr	r0, [pc, #4]	; (8005020 <__sfp_lock_release+0x8>)
 800501a:	f000 b909 	b.w	8005230 <__retarget_lock_release_recursive>
 800501e:	bf00      	nop
 8005020:	20000425 	.word	0x20000425

08005024 <__sinit>:
 8005024:	b510      	push	{r4, lr}
 8005026:	4604      	mov	r4, r0
 8005028:	f7ff fff0 	bl	800500c <__sfp_lock_acquire>
 800502c:	6a23      	ldr	r3, [r4, #32]
 800502e:	b11b      	cbz	r3, 8005038 <__sinit+0x14>
 8005030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005034:	f7ff bff0 	b.w	8005018 <__sfp_lock_release>
 8005038:	4b04      	ldr	r3, [pc, #16]	; (800504c <__sinit+0x28>)
 800503a:	6223      	str	r3, [r4, #32]
 800503c:	4b04      	ldr	r3, [pc, #16]	; (8005050 <__sinit+0x2c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1f5      	bne.n	8005030 <__sinit+0xc>
 8005044:	f7ff ffc4 	bl	8004fd0 <global_stdio_init.part.0>
 8005048:	e7f2      	b.n	8005030 <__sinit+0xc>
 800504a:	bf00      	nop
 800504c:	08004f91 	.word	0x08004f91
 8005050:	2000041c 	.word	0x2000041c

08005054 <_fwalk_sglue>:
 8005054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005058:	4607      	mov	r7, r0
 800505a:	4688      	mov	r8, r1
 800505c:	4614      	mov	r4, r2
 800505e:	2600      	movs	r6, #0
 8005060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005064:	f1b9 0901 	subs.w	r9, r9, #1
 8005068:	d505      	bpl.n	8005076 <_fwalk_sglue+0x22>
 800506a:	6824      	ldr	r4, [r4, #0]
 800506c:	2c00      	cmp	r4, #0
 800506e:	d1f7      	bne.n	8005060 <_fwalk_sglue+0xc>
 8005070:	4630      	mov	r0, r6
 8005072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005076:	89ab      	ldrh	r3, [r5, #12]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d907      	bls.n	800508c <_fwalk_sglue+0x38>
 800507c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005080:	3301      	adds	r3, #1
 8005082:	d003      	beq.n	800508c <_fwalk_sglue+0x38>
 8005084:	4629      	mov	r1, r5
 8005086:	4638      	mov	r0, r7
 8005088:	47c0      	blx	r8
 800508a:	4306      	orrs	r6, r0
 800508c:	3568      	adds	r5, #104	; 0x68
 800508e:	e7e9      	b.n	8005064 <_fwalk_sglue+0x10>

08005090 <iprintf>:
 8005090:	b40f      	push	{r0, r1, r2, r3}
 8005092:	b507      	push	{r0, r1, r2, lr}
 8005094:	4906      	ldr	r1, [pc, #24]	; (80050b0 <iprintf+0x20>)
 8005096:	ab04      	add	r3, sp, #16
 8005098:	6808      	ldr	r0, [r1, #0]
 800509a:	f853 2b04 	ldr.w	r2, [r3], #4
 800509e:	6881      	ldr	r1, [r0, #8]
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	f000 f9e9 	bl	8005478 <_vfiprintf_r>
 80050a6:	b003      	add	sp, #12
 80050a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050ac:	b004      	add	sp, #16
 80050ae:	4770      	bx	lr
 80050b0:	20000064 	.word	0x20000064

080050b4 <__sread>:
 80050b4:	b510      	push	{r4, lr}
 80050b6:	460c      	mov	r4, r1
 80050b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050bc:	f000 f868 	bl	8005190 <_read_r>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	bfab      	itete	ge
 80050c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050c6:	89a3      	ldrhlt	r3, [r4, #12]
 80050c8:	181b      	addge	r3, r3, r0
 80050ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050ce:	bfac      	ite	ge
 80050d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80050d2:	81a3      	strhlt	r3, [r4, #12]
 80050d4:	bd10      	pop	{r4, pc}

080050d6 <__swrite>:
 80050d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050da:	461f      	mov	r7, r3
 80050dc:	898b      	ldrh	r3, [r1, #12]
 80050de:	05db      	lsls	r3, r3, #23
 80050e0:	4605      	mov	r5, r0
 80050e2:	460c      	mov	r4, r1
 80050e4:	4616      	mov	r6, r2
 80050e6:	d505      	bpl.n	80050f4 <__swrite+0x1e>
 80050e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ec:	2302      	movs	r3, #2
 80050ee:	2200      	movs	r2, #0
 80050f0:	f000 f83c 	bl	800516c <_lseek_r>
 80050f4:	89a3      	ldrh	r3, [r4, #12]
 80050f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050fe:	81a3      	strh	r3, [r4, #12]
 8005100:	4632      	mov	r2, r6
 8005102:	463b      	mov	r3, r7
 8005104:	4628      	mov	r0, r5
 8005106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800510a:	f000 b853 	b.w	80051b4 <_write_r>

0800510e <__sseek>:
 800510e:	b510      	push	{r4, lr}
 8005110:	460c      	mov	r4, r1
 8005112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005116:	f000 f829 	bl	800516c <_lseek_r>
 800511a:	1c43      	adds	r3, r0, #1
 800511c:	89a3      	ldrh	r3, [r4, #12]
 800511e:	bf15      	itete	ne
 8005120:	6560      	strne	r0, [r4, #84]	; 0x54
 8005122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800512a:	81a3      	strheq	r3, [r4, #12]
 800512c:	bf18      	it	ne
 800512e:	81a3      	strhne	r3, [r4, #12]
 8005130:	bd10      	pop	{r4, pc}

08005132 <__sclose>:
 8005132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005136:	f000 b809 	b.w	800514c <_close_r>

0800513a <memset>:
 800513a:	4402      	add	r2, r0
 800513c:	4603      	mov	r3, r0
 800513e:	4293      	cmp	r3, r2
 8005140:	d100      	bne.n	8005144 <memset+0xa>
 8005142:	4770      	bx	lr
 8005144:	f803 1b01 	strb.w	r1, [r3], #1
 8005148:	e7f9      	b.n	800513e <memset+0x4>
	...

0800514c <_close_r>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	4d06      	ldr	r5, [pc, #24]	; (8005168 <_close_r+0x1c>)
 8005150:	2300      	movs	r3, #0
 8005152:	4604      	mov	r4, r0
 8005154:	4608      	mov	r0, r1
 8005156:	602b      	str	r3, [r5, #0]
 8005158:	f7fb fff3 	bl	8001142 <_close>
 800515c:	1c43      	adds	r3, r0, #1
 800515e:	d102      	bne.n	8005166 <_close_r+0x1a>
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	b103      	cbz	r3, 8005166 <_close_r+0x1a>
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	bd38      	pop	{r3, r4, r5, pc}
 8005168:	20000420 	.word	0x20000420

0800516c <_lseek_r>:
 800516c:	b538      	push	{r3, r4, r5, lr}
 800516e:	4d07      	ldr	r5, [pc, #28]	; (800518c <_lseek_r+0x20>)
 8005170:	4604      	mov	r4, r0
 8005172:	4608      	mov	r0, r1
 8005174:	4611      	mov	r1, r2
 8005176:	2200      	movs	r2, #0
 8005178:	602a      	str	r2, [r5, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	f7fc f808 	bl	8001190 <_lseek>
 8005180:	1c43      	adds	r3, r0, #1
 8005182:	d102      	bne.n	800518a <_lseek_r+0x1e>
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	b103      	cbz	r3, 800518a <_lseek_r+0x1e>
 8005188:	6023      	str	r3, [r4, #0]
 800518a:	bd38      	pop	{r3, r4, r5, pc}
 800518c:	20000420 	.word	0x20000420

08005190 <_read_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	4d07      	ldr	r5, [pc, #28]	; (80051b0 <_read_r+0x20>)
 8005194:	4604      	mov	r4, r0
 8005196:	4608      	mov	r0, r1
 8005198:	4611      	mov	r1, r2
 800519a:	2200      	movs	r2, #0
 800519c:	602a      	str	r2, [r5, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	f7fb ffb2 	bl	8001108 <_read>
 80051a4:	1c43      	adds	r3, r0, #1
 80051a6:	d102      	bne.n	80051ae <_read_r+0x1e>
 80051a8:	682b      	ldr	r3, [r5, #0]
 80051aa:	b103      	cbz	r3, 80051ae <_read_r+0x1e>
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	bd38      	pop	{r3, r4, r5, pc}
 80051b0:	20000420 	.word	0x20000420

080051b4 <_write_r>:
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	4d07      	ldr	r5, [pc, #28]	; (80051d4 <_write_r+0x20>)
 80051b8:	4604      	mov	r4, r0
 80051ba:	4608      	mov	r0, r1
 80051bc:	4611      	mov	r1, r2
 80051be:	2200      	movs	r2, #0
 80051c0:	602a      	str	r2, [r5, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	f7fb f9fa 	bl	80005bc <_write>
 80051c8:	1c43      	adds	r3, r0, #1
 80051ca:	d102      	bne.n	80051d2 <_write_r+0x1e>
 80051cc:	682b      	ldr	r3, [r5, #0]
 80051ce:	b103      	cbz	r3, 80051d2 <_write_r+0x1e>
 80051d0:	6023      	str	r3, [r4, #0]
 80051d2:	bd38      	pop	{r3, r4, r5, pc}
 80051d4:	20000420 	.word	0x20000420

080051d8 <__errno>:
 80051d8:	4b01      	ldr	r3, [pc, #4]	; (80051e0 <__errno+0x8>)
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	20000064 	.word	0x20000064

080051e4 <__libc_init_array>:
 80051e4:	b570      	push	{r4, r5, r6, lr}
 80051e6:	4d0d      	ldr	r5, [pc, #52]	; (800521c <__libc_init_array+0x38>)
 80051e8:	4c0d      	ldr	r4, [pc, #52]	; (8005220 <__libc_init_array+0x3c>)
 80051ea:	1b64      	subs	r4, r4, r5
 80051ec:	10a4      	asrs	r4, r4, #2
 80051ee:	2600      	movs	r6, #0
 80051f0:	42a6      	cmp	r6, r4
 80051f2:	d109      	bne.n	8005208 <__libc_init_array+0x24>
 80051f4:	4d0b      	ldr	r5, [pc, #44]	; (8005224 <__libc_init_array+0x40>)
 80051f6:	4c0c      	ldr	r4, [pc, #48]	; (8005228 <__libc_init_array+0x44>)
 80051f8:	f000 fdc0 	bl	8005d7c <_init>
 80051fc:	1b64      	subs	r4, r4, r5
 80051fe:	10a4      	asrs	r4, r4, #2
 8005200:	2600      	movs	r6, #0
 8005202:	42a6      	cmp	r6, r4
 8005204:	d105      	bne.n	8005212 <__libc_init_array+0x2e>
 8005206:	bd70      	pop	{r4, r5, r6, pc}
 8005208:	f855 3b04 	ldr.w	r3, [r5], #4
 800520c:	4798      	blx	r3
 800520e:	3601      	adds	r6, #1
 8005210:	e7ee      	b.n	80051f0 <__libc_init_array+0xc>
 8005212:	f855 3b04 	ldr.w	r3, [r5], #4
 8005216:	4798      	blx	r3
 8005218:	3601      	adds	r6, #1
 800521a:	e7f2      	b.n	8005202 <__libc_init_array+0x1e>
 800521c:	08005e28 	.word	0x08005e28
 8005220:	08005e28 	.word	0x08005e28
 8005224:	08005e28 	.word	0x08005e28
 8005228:	08005e2c 	.word	0x08005e2c

0800522c <__retarget_lock_init_recursive>:
 800522c:	4770      	bx	lr

0800522e <__retarget_lock_acquire_recursive>:
 800522e:	4770      	bx	lr

08005230 <__retarget_lock_release_recursive>:
 8005230:	4770      	bx	lr
	...

08005234 <_free_r>:
 8005234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005236:	2900      	cmp	r1, #0
 8005238:	d044      	beq.n	80052c4 <_free_r+0x90>
 800523a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800523e:	9001      	str	r0, [sp, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f1a1 0404 	sub.w	r4, r1, #4
 8005246:	bfb8      	it	lt
 8005248:	18e4      	addlt	r4, r4, r3
 800524a:	f000 f8df 	bl	800540c <__malloc_lock>
 800524e:	4a1e      	ldr	r2, [pc, #120]	; (80052c8 <_free_r+0x94>)
 8005250:	9801      	ldr	r0, [sp, #4]
 8005252:	6813      	ldr	r3, [r2, #0]
 8005254:	b933      	cbnz	r3, 8005264 <_free_r+0x30>
 8005256:	6063      	str	r3, [r4, #4]
 8005258:	6014      	str	r4, [r2, #0]
 800525a:	b003      	add	sp, #12
 800525c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005260:	f000 b8da 	b.w	8005418 <__malloc_unlock>
 8005264:	42a3      	cmp	r3, r4
 8005266:	d908      	bls.n	800527a <_free_r+0x46>
 8005268:	6825      	ldr	r5, [r4, #0]
 800526a:	1961      	adds	r1, r4, r5
 800526c:	428b      	cmp	r3, r1
 800526e:	bf01      	itttt	eq
 8005270:	6819      	ldreq	r1, [r3, #0]
 8005272:	685b      	ldreq	r3, [r3, #4]
 8005274:	1949      	addeq	r1, r1, r5
 8005276:	6021      	streq	r1, [r4, #0]
 8005278:	e7ed      	b.n	8005256 <_free_r+0x22>
 800527a:	461a      	mov	r2, r3
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	b10b      	cbz	r3, 8005284 <_free_r+0x50>
 8005280:	42a3      	cmp	r3, r4
 8005282:	d9fa      	bls.n	800527a <_free_r+0x46>
 8005284:	6811      	ldr	r1, [r2, #0]
 8005286:	1855      	adds	r5, r2, r1
 8005288:	42a5      	cmp	r5, r4
 800528a:	d10b      	bne.n	80052a4 <_free_r+0x70>
 800528c:	6824      	ldr	r4, [r4, #0]
 800528e:	4421      	add	r1, r4
 8005290:	1854      	adds	r4, r2, r1
 8005292:	42a3      	cmp	r3, r4
 8005294:	6011      	str	r1, [r2, #0]
 8005296:	d1e0      	bne.n	800525a <_free_r+0x26>
 8005298:	681c      	ldr	r4, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	6053      	str	r3, [r2, #4]
 800529e:	440c      	add	r4, r1
 80052a0:	6014      	str	r4, [r2, #0]
 80052a2:	e7da      	b.n	800525a <_free_r+0x26>
 80052a4:	d902      	bls.n	80052ac <_free_r+0x78>
 80052a6:	230c      	movs	r3, #12
 80052a8:	6003      	str	r3, [r0, #0]
 80052aa:	e7d6      	b.n	800525a <_free_r+0x26>
 80052ac:	6825      	ldr	r5, [r4, #0]
 80052ae:	1961      	adds	r1, r4, r5
 80052b0:	428b      	cmp	r3, r1
 80052b2:	bf04      	itt	eq
 80052b4:	6819      	ldreq	r1, [r3, #0]
 80052b6:	685b      	ldreq	r3, [r3, #4]
 80052b8:	6063      	str	r3, [r4, #4]
 80052ba:	bf04      	itt	eq
 80052bc:	1949      	addeq	r1, r1, r5
 80052be:	6021      	streq	r1, [r4, #0]
 80052c0:	6054      	str	r4, [r2, #4]
 80052c2:	e7ca      	b.n	800525a <_free_r+0x26>
 80052c4:	b003      	add	sp, #12
 80052c6:	bd30      	pop	{r4, r5, pc}
 80052c8:	20000428 	.word	0x20000428

080052cc <sbrk_aligned>:
 80052cc:	b570      	push	{r4, r5, r6, lr}
 80052ce:	4e0e      	ldr	r6, [pc, #56]	; (8005308 <sbrk_aligned+0x3c>)
 80052d0:	460c      	mov	r4, r1
 80052d2:	6831      	ldr	r1, [r6, #0]
 80052d4:	4605      	mov	r5, r0
 80052d6:	b911      	cbnz	r1, 80052de <sbrk_aligned+0x12>
 80052d8:	f000 fcbc 	bl	8005c54 <_sbrk_r>
 80052dc:	6030      	str	r0, [r6, #0]
 80052de:	4621      	mov	r1, r4
 80052e0:	4628      	mov	r0, r5
 80052e2:	f000 fcb7 	bl	8005c54 <_sbrk_r>
 80052e6:	1c43      	adds	r3, r0, #1
 80052e8:	d00a      	beq.n	8005300 <sbrk_aligned+0x34>
 80052ea:	1cc4      	adds	r4, r0, #3
 80052ec:	f024 0403 	bic.w	r4, r4, #3
 80052f0:	42a0      	cmp	r0, r4
 80052f2:	d007      	beq.n	8005304 <sbrk_aligned+0x38>
 80052f4:	1a21      	subs	r1, r4, r0
 80052f6:	4628      	mov	r0, r5
 80052f8:	f000 fcac 	bl	8005c54 <_sbrk_r>
 80052fc:	3001      	adds	r0, #1
 80052fe:	d101      	bne.n	8005304 <sbrk_aligned+0x38>
 8005300:	f04f 34ff 	mov.w	r4, #4294967295
 8005304:	4620      	mov	r0, r4
 8005306:	bd70      	pop	{r4, r5, r6, pc}
 8005308:	2000042c 	.word	0x2000042c

0800530c <_malloc_r>:
 800530c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005310:	1ccd      	adds	r5, r1, #3
 8005312:	f025 0503 	bic.w	r5, r5, #3
 8005316:	3508      	adds	r5, #8
 8005318:	2d0c      	cmp	r5, #12
 800531a:	bf38      	it	cc
 800531c:	250c      	movcc	r5, #12
 800531e:	2d00      	cmp	r5, #0
 8005320:	4607      	mov	r7, r0
 8005322:	db01      	blt.n	8005328 <_malloc_r+0x1c>
 8005324:	42a9      	cmp	r1, r5
 8005326:	d905      	bls.n	8005334 <_malloc_r+0x28>
 8005328:	230c      	movs	r3, #12
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	2600      	movs	r6, #0
 800532e:	4630      	mov	r0, r6
 8005330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005334:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005408 <_malloc_r+0xfc>
 8005338:	f000 f868 	bl	800540c <__malloc_lock>
 800533c:	f8d8 3000 	ldr.w	r3, [r8]
 8005340:	461c      	mov	r4, r3
 8005342:	bb5c      	cbnz	r4, 800539c <_malloc_r+0x90>
 8005344:	4629      	mov	r1, r5
 8005346:	4638      	mov	r0, r7
 8005348:	f7ff ffc0 	bl	80052cc <sbrk_aligned>
 800534c:	1c43      	adds	r3, r0, #1
 800534e:	4604      	mov	r4, r0
 8005350:	d155      	bne.n	80053fe <_malloc_r+0xf2>
 8005352:	f8d8 4000 	ldr.w	r4, [r8]
 8005356:	4626      	mov	r6, r4
 8005358:	2e00      	cmp	r6, #0
 800535a:	d145      	bne.n	80053e8 <_malloc_r+0xdc>
 800535c:	2c00      	cmp	r4, #0
 800535e:	d048      	beq.n	80053f2 <_malloc_r+0xe6>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	4631      	mov	r1, r6
 8005364:	4638      	mov	r0, r7
 8005366:	eb04 0903 	add.w	r9, r4, r3
 800536a:	f000 fc73 	bl	8005c54 <_sbrk_r>
 800536e:	4581      	cmp	r9, r0
 8005370:	d13f      	bne.n	80053f2 <_malloc_r+0xe6>
 8005372:	6821      	ldr	r1, [r4, #0]
 8005374:	1a6d      	subs	r5, r5, r1
 8005376:	4629      	mov	r1, r5
 8005378:	4638      	mov	r0, r7
 800537a:	f7ff ffa7 	bl	80052cc <sbrk_aligned>
 800537e:	3001      	adds	r0, #1
 8005380:	d037      	beq.n	80053f2 <_malloc_r+0xe6>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	442b      	add	r3, r5
 8005386:	6023      	str	r3, [r4, #0]
 8005388:	f8d8 3000 	ldr.w	r3, [r8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d038      	beq.n	8005402 <_malloc_r+0xf6>
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	42a2      	cmp	r2, r4
 8005394:	d12b      	bne.n	80053ee <_malloc_r+0xe2>
 8005396:	2200      	movs	r2, #0
 8005398:	605a      	str	r2, [r3, #4]
 800539a:	e00f      	b.n	80053bc <_malloc_r+0xb0>
 800539c:	6822      	ldr	r2, [r4, #0]
 800539e:	1b52      	subs	r2, r2, r5
 80053a0:	d41f      	bmi.n	80053e2 <_malloc_r+0xd6>
 80053a2:	2a0b      	cmp	r2, #11
 80053a4:	d917      	bls.n	80053d6 <_malloc_r+0xca>
 80053a6:	1961      	adds	r1, r4, r5
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	6025      	str	r5, [r4, #0]
 80053ac:	bf18      	it	ne
 80053ae:	6059      	strne	r1, [r3, #4]
 80053b0:	6863      	ldr	r3, [r4, #4]
 80053b2:	bf08      	it	eq
 80053b4:	f8c8 1000 	streq.w	r1, [r8]
 80053b8:	5162      	str	r2, [r4, r5]
 80053ba:	604b      	str	r3, [r1, #4]
 80053bc:	4638      	mov	r0, r7
 80053be:	f104 060b 	add.w	r6, r4, #11
 80053c2:	f000 f829 	bl	8005418 <__malloc_unlock>
 80053c6:	f026 0607 	bic.w	r6, r6, #7
 80053ca:	1d23      	adds	r3, r4, #4
 80053cc:	1af2      	subs	r2, r6, r3
 80053ce:	d0ae      	beq.n	800532e <_malloc_r+0x22>
 80053d0:	1b9b      	subs	r3, r3, r6
 80053d2:	50a3      	str	r3, [r4, r2]
 80053d4:	e7ab      	b.n	800532e <_malloc_r+0x22>
 80053d6:	42a3      	cmp	r3, r4
 80053d8:	6862      	ldr	r2, [r4, #4]
 80053da:	d1dd      	bne.n	8005398 <_malloc_r+0x8c>
 80053dc:	f8c8 2000 	str.w	r2, [r8]
 80053e0:	e7ec      	b.n	80053bc <_malloc_r+0xb0>
 80053e2:	4623      	mov	r3, r4
 80053e4:	6864      	ldr	r4, [r4, #4]
 80053e6:	e7ac      	b.n	8005342 <_malloc_r+0x36>
 80053e8:	4634      	mov	r4, r6
 80053ea:	6876      	ldr	r6, [r6, #4]
 80053ec:	e7b4      	b.n	8005358 <_malloc_r+0x4c>
 80053ee:	4613      	mov	r3, r2
 80053f0:	e7cc      	b.n	800538c <_malloc_r+0x80>
 80053f2:	230c      	movs	r3, #12
 80053f4:	603b      	str	r3, [r7, #0]
 80053f6:	4638      	mov	r0, r7
 80053f8:	f000 f80e 	bl	8005418 <__malloc_unlock>
 80053fc:	e797      	b.n	800532e <_malloc_r+0x22>
 80053fe:	6025      	str	r5, [r4, #0]
 8005400:	e7dc      	b.n	80053bc <_malloc_r+0xb0>
 8005402:	605b      	str	r3, [r3, #4]
 8005404:	deff      	udf	#255	; 0xff
 8005406:	bf00      	nop
 8005408:	20000428 	.word	0x20000428

0800540c <__malloc_lock>:
 800540c:	4801      	ldr	r0, [pc, #4]	; (8005414 <__malloc_lock+0x8>)
 800540e:	f7ff bf0e 	b.w	800522e <__retarget_lock_acquire_recursive>
 8005412:	bf00      	nop
 8005414:	20000424 	.word	0x20000424

08005418 <__malloc_unlock>:
 8005418:	4801      	ldr	r0, [pc, #4]	; (8005420 <__malloc_unlock+0x8>)
 800541a:	f7ff bf09 	b.w	8005230 <__retarget_lock_release_recursive>
 800541e:	bf00      	nop
 8005420:	20000424 	.word	0x20000424

08005424 <__sfputc_r>:
 8005424:	6893      	ldr	r3, [r2, #8]
 8005426:	3b01      	subs	r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	b410      	push	{r4}
 800542c:	6093      	str	r3, [r2, #8]
 800542e:	da08      	bge.n	8005442 <__sfputc_r+0x1e>
 8005430:	6994      	ldr	r4, [r2, #24]
 8005432:	42a3      	cmp	r3, r4
 8005434:	db01      	blt.n	800543a <__sfputc_r+0x16>
 8005436:	290a      	cmp	r1, #10
 8005438:	d103      	bne.n	8005442 <__sfputc_r+0x1e>
 800543a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800543e:	f000 bb73 	b.w	8005b28 <__swbuf_r>
 8005442:	6813      	ldr	r3, [r2, #0]
 8005444:	1c58      	adds	r0, r3, #1
 8005446:	6010      	str	r0, [r2, #0]
 8005448:	7019      	strb	r1, [r3, #0]
 800544a:	4608      	mov	r0, r1
 800544c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005450:	4770      	bx	lr

08005452 <__sfputs_r>:
 8005452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005454:	4606      	mov	r6, r0
 8005456:	460f      	mov	r7, r1
 8005458:	4614      	mov	r4, r2
 800545a:	18d5      	adds	r5, r2, r3
 800545c:	42ac      	cmp	r4, r5
 800545e:	d101      	bne.n	8005464 <__sfputs_r+0x12>
 8005460:	2000      	movs	r0, #0
 8005462:	e007      	b.n	8005474 <__sfputs_r+0x22>
 8005464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005468:	463a      	mov	r2, r7
 800546a:	4630      	mov	r0, r6
 800546c:	f7ff ffda 	bl	8005424 <__sfputc_r>
 8005470:	1c43      	adds	r3, r0, #1
 8005472:	d1f3      	bne.n	800545c <__sfputs_r+0xa>
 8005474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005478 <_vfiprintf_r>:
 8005478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547c:	460d      	mov	r5, r1
 800547e:	b09d      	sub	sp, #116	; 0x74
 8005480:	4614      	mov	r4, r2
 8005482:	4698      	mov	r8, r3
 8005484:	4606      	mov	r6, r0
 8005486:	b118      	cbz	r0, 8005490 <_vfiprintf_r+0x18>
 8005488:	6a03      	ldr	r3, [r0, #32]
 800548a:	b90b      	cbnz	r3, 8005490 <_vfiprintf_r+0x18>
 800548c:	f7ff fdca 	bl	8005024 <__sinit>
 8005490:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005492:	07d9      	lsls	r1, r3, #31
 8005494:	d405      	bmi.n	80054a2 <_vfiprintf_r+0x2a>
 8005496:	89ab      	ldrh	r3, [r5, #12]
 8005498:	059a      	lsls	r2, r3, #22
 800549a:	d402      	bmi.n	80054a2 <_vfiprintf_r+0x2a>
 800549c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800549e:	f7ff fec6 	bl	800522e <__retarget_lock_acquire_recursive>
 80054a2:	89ab      	ldrh	r3, [r5, #12]
 80054a4:	071b      	lsls	r3, r3, #28
 80054a6:	d501      	bpl.n	80054ac <_vfiprintf_r+0x34>
 80054a8:	692b      	ldr	r3, [r5, #16]
 80054aa:	b99b      	cbnz	r3, 80054d4 <_vfiprintf_r+0x5c>
 80054ac:	4629      	mov	r1, r5
 80054ae:	4630      	mov	r0, r6
 80054b0:	f000 fb78 	bl	8005ba4 <__swsetup_r>
 80054b4:	b170      	cbz	r0, 80054d4 <_vfiprintf_r+0x5c>
 80054b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054b8:	07dc      	lsls	r4, r3, #31
 80054ba:	d504      	bpl.n	80054c6 <_vfiprintf_r+0x4e>
 80054bc:	f04f 30ff 	mov.w	r0, #4294967295
 80054c0:	b01d      	add	sp, #116	; 0x74
 80054c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c6:	89ab      	ldrh	r3, [r5, #12]
 80054c8:	0598      	lsls	r0, r3, #22
 80054ca:	d4f7      	bmi.n	80054bc <_vfiprintf_r+0x44>
 80054cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054ce:	f7ff feaf 	bl	8005230 <__retarget_lock_release_recursive>
 80054d2:	e7f3      	b.n	80054bc <_vfiprintf_r+0x44>
 80054d4:	2300      	movs	r3, #0
 80054d6:	9309      	str	r3, [sp, #36]	; 0x24
 80054d8:	2320      	movs	r3, #32
 80054da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054de:	f8cd 800c 	str.w	r8, [sp, #12]
 80054e2:	2330      	movs	r3, #48	; 0x30
 80054e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005698 <_vfiprintf_r+0x220>
 80054e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054ec:	f04f 0901 	mov.w	r9, #1
 80054f0:	4623      	mov	r3, r4
 80054f2:	469a      	mov	sl, r3
 80054f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054f8:	b10a      	cbz	r2, 80054fe <_vfiprintf_r+0x86>
 80054fa:	2a25      	cmp	r2, #37	; 0x25
 80054fc:	d1f9      	bne.n	80054f2 <_vfiprintf_r+0x7a>
 80054fe:	ebba 0b04 	subs.w	fp, sl, r4
 8005502:	d00b      	beq.n	800551c <_vfiprintf_r+0xa4>
 8005504:	465b      	mov	r3, fp
 8005506:	4622      	mov	r2, r4
 8005508:	4629      	mov	r1, r5
 800550a:	4630      	mov	r0, r6
 800550c:	f7ff ffa1 	bl	8005452 <__sfputs_r>
 8005510:	3001      	adds	r0, #1
 8005512:	f000 80a9 	beq.w	8005668 <_vfiprintf_r+0x1f0>
 8005516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005518:	445a      	add	r2, fp
 800551a:	9209      	str	r2, [sp, #36]	; 0x24
 800551c:	f89a 3000 	ldrb.w	r3, [sl]
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 80a1 	beq.w	8005668 <_vfiprintf_r+0x1f0>
 8005526:	2300      	movs	r3, #0
 8005528:	f04f 32ff 	mov.w	r2, #4294967295
 800552c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005530:	f10a 0a01 	add.w	sl, sl, #1
 8005534:	9304      	str	r3, [sp, #16]
 8005536:	9307      	str	r3, [sp, #28]
 8005538:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800553c:	931a      	str	r3, [sp, #104]	; 0x68
 800553e:	4654      	mov	r4, sl
 8005540:	2205      	movs	r2, #5
 8005542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005546:	4854      	ldr	r0, [pc, #336]	; (8005698 <_vfiprintf_r+0x220>)
 8005548:	f7fa fe6a 	bl	8000220 <memchr>
 800554c:	9a04      	ldr	r2, [sp, #16]
 800554e:	b9d8      	cbnz	r0, 8005588 <_vfiprintf_r+0x110>
 8005550:	06d1      	lsls	r1, r2, #27
 8005552:	bf44      	itt	mi
 8005554:	2320      	movmi	r3, #32
 8005556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800555a:	0713      	lsls	r3, r2, #28
 800555c:	bf44      	itt	mi
 800555e:	232b      	movmi	r3, #43	; 0x2b
 8005560:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005564:	f89a 3000 	ldrb.w	r3, [sl]
 8005568:	2b2a      	cmp	r3, #42	; 0x2a
 800556a:	d015      	beq.n	8005598 <_vfiprintf_r+0x120>
 800556c:	9a07      	ldr	r2, [sp, #28]
 800556e:	4654      	mov	r4, sl
 8005570:	2000      	movs	r0, #0
 8005572:	f04f 0c0a 	mov.w	ip, #10
 8005576:	4621      	mov	r1, r4
 8005578:	f811 3b01 	ldrb.w	r3, [r1], #1
 800557c:	3b30      	subs	r3, #48	; 0x30
 800557e:	2b09      	cmp	r3, #9
 8005580:	d94d      	bls.n	800561e <_vfiprintf_r+0x1a6>
 8005582:	b1b0      	cbz	r0, 80055b2 <_vfiprintf_r+0x13a>
 8005584:	9207      	str	r2, [sp, #28]
 8005586:	e014      	b.n	80055b2 <_vfiprintf_r+0x13a>
 8005588:	eba0 0308 	sub.w	r3, r0, r8
 800558c:	fa09 f303 	lsl.w	r3, r9, r3
 8005590:	4313      	orrs	r3, r2
 8005592:	9304      	str	r3, [sp, #16]
 8005594:	46a2      	mov	sl, r4
 8005596:	e7d2      	b.n	800553e <_vfiprintf_r+0xc6>
 8005598:	9b03      	ldr	r3, [sp, #12]
 800559a:	1d19      	adds	r1, r3, #4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	9103      	str	r1, [sp, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	bfbb      	ittet	lt
 80055a4:	425b      	neglt	r3, r3
 80055a6:	f042 0202 	orrlt.w	r2, r2, #2
 80055aa:	9307      	strge	r3, [sp, #28]
 80055ac:	9307      	strlt	r3, [sp, #28]
 80055ae:	bfb8      	it	lt
 80055b0:	9204      	strlt	r2, [sp, #16]
 80055b2:	7823      	ldrb	r3, [r4, #0]
 80055b4:	2b2e      	cmp	r3, #46	; 0x2e
 80055b6:	d10c      	bne.n	80055d2 <_vfiprintf_r+0x15a>
 80055b8:	7863      	ldrb	r3, [r4, #1]
 80055ba:	2b2a      	cmp	r3, #42	; 0x2a
 80055bc:	d134      	bne.n	8005628 <_vfiprintf_r+0x1b0>
 80055be:	9b03      	ldr	r3, [sp, #12]
 80055c0:	1d1a      	adds	r2, r3, #4
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	9203      	str	r2, [sp, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	bfb8      	it	lt
 80055ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80055ce:	3402      	adds	r4, #2
 80055d0:	9305      	str	r3, [sp, #20]
 80055d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80056a8 <_vfiprintf_r+0x230>
 80055d6:	7821      	ldrb	r1, [r4, #0]
 80055d8:	2203      	movs	r2, #3
 80055da:	4650      	mov	r0, sl
 80055dc:	f7fa fe20 	bl	8000220 <memchr>
 80055e0:	b138      	cbz	r0, 80055f2 <_vfiprintf_r+0x17a>
 80055e2:	9b04      	ldr	r3, [sp, #16]
 80055e4:	eba0 000a 	sub.w	r0, r0, sl
 80055e8:	2240      	movs	r2, #64	; 0x40
 80055ea:	4082      	lsls	r2, r0
 80055ec:	4313      	orrs	r3, r2
 80055ee:	3401      	adds	r4, #1
 80055f0:	9304      	str	r3, [sp, #16]
 80055f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f6:	4829      	ldr	r0, [pc, #164]	; (800569c <_vfiprintf_r+0x224>)
 80055f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055fc:	2206      	movs	r2, #6
 80055fe:	f7fa fe0f 	bl	8000220 <memchr>
 8005602:	2800      	cmp	r0, #0
 8005604:	d03f      	beq.n	8005686 <_vfiprintf_r+0x20e>
 8005606:	4b26      	ldr	r3, [pc, #152]	; (80056a0 <_vfiprintf_r+0x228>)
 8005608:	bb1b      	cbnz	r3, 8005652 <_vfiprintf_r+0x1da>
 800560a:	9b03      	ldr	r3, [sp, #12]
 800560c:	3307      	adds	r3, #7
 800560e:	f023 0307 	bic.w	r3, r3, #7
 8005612:	3308      	adds	r3, #8
 8005614:	9303      	str	r3, [sp, #12]
 8005616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005618:	443b      	add	r3, r7
 800561a:	9309      	str	r3, [sp, #36]	; 0x24
 800561c:	e768      	b.n	80054f0 <_vfiprintf_r+0x78>
 800561e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005622:	460c      	mov	r4, r1
 8005624:	2001      	movs	r0, #1
 8005626:	e7a6      	b.n	8005576 <_vfiprintf_r+0xfe>
 8005628:	2300      	movs	r3, #0
 800562a:	3401      	adds	r4, #1
 800562c:	9305      	str	r3, [sp, #20]
 800562e:	4619      	mov	r1, r3
 8005630:	f04f 0c0a 	mov.w	ip, #10
 8005634:	4620      	mov	r0, r4
 8005636:	f810 2b01 	ldrb.w	r2, [r0], #1
 800563a:	3a30      	subs	r2, #48	; 0x30
 800563c:	2a09      	cmp	r2, #9
 800563e:	d903      	bls.n	8005648 <_vfiprintf_r+0x1d0>
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0c6      	beq.n	80055d2 <_vfiprintf_r+0x15a>
 8005644:	9105      	str	r1, [sp, #20]
 8005646:	e7c4      	b.n	80055d2 <_vfiprintf_r+0x15a>
 8005648:	fb0c 2101 	mla	r1, ip, r1, r2
 800564c:	4604      	mov	r4, r0
 800564e:	2301      	movs	r3, #1
 8005650:	e7f0      	b.n	8005634 <_vfiprintf_r+0x1bc>
 8005652:	ab03      	add	r3, sp, #12
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	462a      	mov	r2, r5
 8005658:	4b12      	ldr	r3, [pc, #72]	; (80056a4 <_vfiprintf_r+0x22c>)
 800565a:	a904      	add	r1, sp, #16
 800565c:	4630      	mov	r0, r6
 800565e:	f3af 8000 	nop.w
 8005662:	4607      	mov	r7, r0
 8005664:	1c78      	adds	r0, r7, #1
 8005666:	d1d6      	bne.n	8005616 <_vfiprintf_r+0x19e>
 8005668:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800566a:	07d9      	lsls	r1, r3, #31
 800566c:	d405      	bmi.n	800567a <_vfiprintf_r+0x202>
 800566e:	89ab      	ldrh	r3, [r5, #12]
 8005670:	059a      	lsls	r2, r3, #22
 8005672:	d402      	bmi.n	800567a <_vfiprintf_r+0x202>
 8005674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005676:	f7ff fddb 	bl	8005230 <__retarget_lock_release_recursive>
 800567a:	89ab      	ldrh	r3, [r5, #12]
 800567c:	065b      	lsls	r3, r3, #25
 800567e:	f53f af1d 	bmi.w	80054bc <_vfiprintf_r+0x44>
 8005682:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005684:	e71c      	b.n	80054c0 <_vfiprintf_r+0x48>
 8005686:	ab03      	add	r3, sp, #12
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	462a      	mov	r2, r5
 800568c:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <_vfiprintf_r+0x22c>)
 800568e:	a904      	add	r1, sp, #16
 8005690:	4630      	mov	r0, r6
 8005692:	f000 f879 	bl	8005788 <_printf_i>
 8005696:	e7e4      	b.n	8005662 <_vfiprintf_r+0x1ea>
 8005698:	08005dec 	.word	0x08005dec
 800569c:	08005df6 	.word	0x08005df6
 80056a0:	00000000 	.word	0x00000000
 80056a4:	08005453 	.word	0x08005453
 80056a8:	08005df2 	.word	0x08005df2

080056ac <_printf_common>:
 80056ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b0:	4616      	mov	r6, r2
 80056b2:	4699      	mov	r9, r3
 80056b4:	688a      	ldr	r2, [r1, #8]
 80056b6:	690b      	ldr	r3, [r1, #16]
 80056b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056bc:	4293      	cmp	r3, r2
 80056be:	bfb8      	it	lt
 80056c0:	4613      	movlt	r3, r2
 80056c2:	6033      	str	r3, [r6, #0]
 80056c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056c8:	4607      	mov	r7, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	b10a      	cbz	r2, 80056d2 <_printf_common+0x26>
 80056ce:	3301      	adds	r3, #1
 80056d0:	6033      	str	r3, [r6, #0]
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	0699      	lsls	r1, r3, #26
 80056d6:	bf42      	ittt	mi
 80056d8:	6833      	ldrmi	r3, [r6, #0]
 80056da:	3302      	addmi	r3, #2
 80056dc:	6033      	strmi	r3, [r6, #0]
 80056de:	6825      	ldr	r5, [r4, #0]
 80056e0:	f015 0506 	ands.w	r5, r5, #6
 80056e4:	d106      	bne.n	80056f4 <_printf_common+0x48>
 80056e6:	f104 0a19 	add.w	sl, r4, #25
 80056ea:	68e3      	ldr	r3, [r4, #12]
 80056ec:	6832      	ldr	r2, [r6, #0]
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	42ab      	cmp	r3, r5
 80056f2:	dc26      	bgt.n	8005742 <_printf_common+0x96>
 80056f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056f8:	1e13      	subs	r3, r2, #0
 80056fa:	6822      	ldr	r2, [r4, #0]
 80056fc:	bf18      	it	ne
 80056fe:	2301      	movne	r3, #1
 8005700:	0692      	lsls	r2, r2, #26
 8005702:	d42b      	bmi.n	800575c <_printf_common+0xb0>
 8005704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005708:	4649      	mov	r1, r9
 800570a:	4638      	mov	r0, r7
 800570c:	47c0      	blx	r8
 800570e:	3001      	adds	r0, #1
 8005710:	d01e      	beq.n	8005750 <_printf_common+0xa4>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	6922      	ldr	r2, [r4, #16]
 8005716:	f003 0306 	and.w	r3, r3, #6
 800571a:	2b04      	cmp	r3, #4
 800571c:	bf02      	ittt	eq
 800571e:	68e5      	ldreq	r5, [r4, #12]
 8005720:	6833      	ldreq	r3, [r6, #0]
 8005722:	1aed      	subeq	r5, r5, r3
 8005724:	68a3      	ldr	r3, [r4, #8]
 8005726:	bf0c      	ite	eq
 8005728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800572c:	2500      	movne	r5, #0
 800572e:	4293      	cmp	r3, r2
 8005730:	bfc4      	itt	gt
 8005732:	1a9b      	subgt	r3, r3, r2
 8005734:	18ed      	addgt	r5, r5, r3
 8005736:	2600      	movs	r6, #0
 8005738:	341a      	adds	r4, #26
 800573a:	42b5      	cmp	r5, r6
 800573c:	d11a      	bne.n	8005774 <_printf_common+0xc8>
 800573e:	2000      	movs	r0, #0
 8005740:	e008      	b.n	8005754 <_printf_common+0xa8>
 8005742:	2301      	movs	r3, #1
 8005744:	4652      	mov	r2, sl
 8005746:	4649      	mov	r1, r9
 8005748:	4638      	mov	r0, r7
 800574a:	47c0      	blx	r8
 800574c:	3001      	adds	r0, #1
 800574e:	d103      	bne.n	8005758 <_printf_common+0xac>
 8005750:	f04f 30ff 	mov.w	r0, #4294967295
 8005754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005758:	3501      	adds	r5, #1
 800575a:	e7c6      	b.n	80056ea <_printf_common+0x3e>
 800575c:	18e1      	adds	r1, r4, r3
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	2030      	movs	r0, #48	; 0x30
 8005762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005766:	4422      	add	r2, r4
 8005768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800576c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005770:	3302      	adds	r3, #2
 8005772:	e7c7      	b.n	8005704 <_printf_common+0x58>
 8005774:	2301      	movs	r3, #1
 8005776:	4622      	mov	r2, r4
 8005778:	4649      	mov	r1, r9
 800577a:	4638      	mov	r0, r7
 800577c:	47c0      	blx	r8
 800577e:	3001      	adds	r0, #1
 8005780:	d0e6      	beq.n	8005750 <_printf_common+0xa4>
 8005782:	3601      	adds	r6, #1
 8005784:	e7d9      	b.n	800573a <_printf_common+0x8e>
	...

08005788 <_printf_i>:
 8005788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800578c:	7e0f      	ldrb	r7, [r1, #24]
 800578e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005790:	2f78      	cmp	r7, #120	; 0x78
 8005792:	4691      	mov	r9, r2
 8005794:	4680      	mov	r8, r0
 8005796:	460c      	mov	r4, r1
 8005798:	469a      	mov	sl, r3
 800579a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800579e:	d807      	bhi.n	80057b0 <_printf_i+0x28>
 80057a0:	2f62      	cmp	r7, #98	; 0x62
 80057a2:	d80a      	bhi.n	80057ba <_printf_i+0x32>
 80057a4:	2f00      	cmp	r7, #0
 80057a6:	f000 80d4 	beq.w	8005952 <_printf_i+0x1ca>
 80057aa:	2f58      	cmp	r7, #88	; 0x58
 80057ac:	f000 80c0 	beq.w	8005930 <_printf_i+0x1a8>
 80057b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057b8:	e03a      	b.n	8005830 <_printf_i+0xa8>
 80057ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057be:	2b15      	cmp	r3, #21
 80057c0:	d8f6      	bhi.n	80057b0 <_printf_i+0x28>
 80057c2:	a101      	add	r1, pc, #4	; (adr r1, 80057c8 <_printf_i+0x40>)
 80057c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057c8:	08005821 	.word	0x08005821
 80057cc:	08005835 	.word	0x08005835
 80057d0:	080057b1 	.word	0x080057b1
 80057d4:	080057b1 	.word	0x080057b1
 80057d8:	080057b1 	.word	0x080057b1
 80057dc:	080057b1 	.word	0x080057b1
 80057e0:	08005835 	.word	0x08005835
 80057e4:	080057b1 	.word	0x080057b1
 80057e8:	080057b1 	.word	0x080057b1
 80057ec:	080057b1 	.word	0x080057b1
 80057f0:	080057b1 	.word	0x080057b1
 80057f4:	08005939 	.word	0x08005939
 80057f8:	08005861 	.word	0x08005861
 80057fc:	080058f3 	.word	0x080058f3
 8005800:	080057b1 	.word	0x080057b1
 8005804:	080057b1 	.word	0x080057b1
 8005808:	0800595b 	.word	0x0800595b
 800580c:	080057b1 	.word	0x080057b1
 8005810:	08005861 	.word	0x08005861
 8005814:	080057b1 	.word	0x080057b1
 8005818:	080057b1 	.word	0x080057b1
 800581c:	080058fb 	.word	0x080058fb
 8005820:	682b      	ldr	r3, [r5, #0]
 8005822:	1d1a      	adds	r2, r3, #4
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	602a      	str	r2, [r5, #0]
 8005828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800582c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005830:	2301      	movs	r3, #1
 8005832:	e09f      	b.n	8005974 <_printf_i+0x1ec>
 8005834:	6820      	ldr	r0, [r4, #0]
 8005836:	682b      	ldr	r3, [r5, #0]
 8005838:	0607      	lsls	r7, r0, #24
 800583a:	f103 0104 	add.w	r1, r3, #4
 800583e:	6029      	str	r1, [r5, #0]
 8005840:	d501      	bpl.n	8005846 <_printf_i+0xbe>
 8005842:	681e      	ldr	r6, [r3, #0]
 8005844:	e003      	b.n	800584e <_printf_i+0xc6>
 8005846:	0646      	lsls	r6, r0, #25
 8005848:	d5fb      	bpl.n	8005842 <_printf_i+0xba>
 800584a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800584e:	2e00      	cmp	r6, #0
 8005850:	da03      	bge.n	800585a <_printf_i+0xd2>
 8005852:	232d      	movs	r3, #45	; 0x2d
 8005854:	4276      	negs	r6, r6
 8005856:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800585a:	485a      	ldr	r0, [pc, #360]	; (80059c4 <_printf_i+0x23c>)
 800585c:	230a      	movs	r3, #10
 800585e:	e012      	b.n	8005886 <_printf_i+0xfe>
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	6820      	ldr	r0, [r4, #0]
 8005864:	1d19      	adds	r1, r3, #4
 8005866:	6029      	str	r1, [r5, #0]
 8005868:	0605      	lsls	r5, r0, #24
 800586a:	d501      	bpl.n	8005870 <_printf_i+0xe8>
 800586c:	681e      	ldr	r6, [r3, #0]
 800586e:	e002      	b.n	8005876 <_printf_i+0xee>
 8005870:	0641      	lsls	r1, r0, #25
 8005872:	d5fb      	bpl.n	800586c <_printf_i+0xe4>
 8005874:	881e      	ldrh	r6, [r3, #0]
 8005876:	4853      	ldr	r0, [pc, #332]	; (80059c4 <_printf_i+0x23c>)
 8005878:	2f6f      	cmp	r7, #111	; 0x6f
 800587a:	bf0c      	ite	eq
 800587c:	2308      	moveq	r3, #8
 800587e:	230a      	movne	r3, #10
 8005880:	2100      	movs	r1, #0
 8005882:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005886:	6865      	ldr	r5, [r4, #4]
 8005888:	60a5      	str	r5, [r4, #8]
 800588a:	2d00      	cmp	r5, #0
 800588c:	bfa2      	ittt	ge
 800588e:	6821      	ldrge	r1, [r4, #0]
 8005890:	f021 0104 	bicge.w	r1, r1, #4
 8005894:	6021      	strge	r1, [r4, #0]
 8005896:	b90e      	cbnz	r6, 800589c <_printf_i+0x114>
 8005898:	2d00      	cmp	r5, #0
 800589a:	d04b      	beq.n	8005934 <_printf_i+0x1ac>
 800589c:	4615      	mov	r5, r2
 800589e:	fbb6 f1f3 	udiv	r1, r6, r3
 80058a2:	fb03 6711 	mls	r7, r3, r1, r6
 80058a6:	5dc7      	ldrb	r7, [r0, r7]
 80058a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058ac:	4637      	mov	r7, r6
 80058ae:	42bb      	cmp	r3, r7
 80058b0:	460e      	mov	r6, r1
 80058b2:	d9f4      	bls.n	800589e <_printf_i+0x116>
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d10b      	bne.n	80058d0 <_printf_i+0x148>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	07de      	lsls	r6, r3, #31
 80058bc:	d508      	bpl.n	80058d0 <_printf_i+0x148>
 80058be:	6923      	ldr	r3, [r4, #16]
 80058c0:	6861      	ldr	r1, [r4, #4]
 80058c2:	4299      	cmp	r1, r3
 80058c4:	bfde      	ittt	le
 80058c6:	2330      	movle	r3, #48	; 0x30
 80058c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058d0:	1b52      	subs	r2, r2, r5
 80058d2:	6122      	str	r2, [r4, #16]
 80058d4:	f8cd a000 	str.w	sl, [sp]
 80058d8:	464b      	mov	r3, r9
 80058da:	aa03      	add	r2, sp, #12
 80058dc:	4621      	mov	r1, r4
 80058de:	4640      	mov	r0, r8
 80058e0:	f7ff fee4 	bl	80056ac <_printf_common>
 80058e4:	3001      	adds	r0, #1
 80058e6:	d14a      	bne.n	800597e <_printf_i+0x1f6>
 80058e8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ec:	b004      	add	sp, #16
 80058ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	f043 0320 	orr.w	r3, r3, #32
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	4833      	ldr	r0, [pc, #204]	; (80059c8 <_printf_i+0x240>)
 80058fc:	2778      	movs	r7, #120	; 0x78
 80058fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	6829      	ldr	r1, [r5, #0]
 8005906:	061f      	lsls	r7, r3, #24
 8005908:	f851 6b04 	ldr.w	r6, [r1], #4
 800590c:	d402      	bmi.n	8005914 <_printf_i+0x18c>
 800590e:	065f      	lsls	r7, r3, #25
 8005910:	bf48      	it	mi
 8005912:	b2b6      	uxthmi	r6, r6
 8005914:	07df      	lsls	r7, r3, #31
 8005916:	bf48      	it	mi
 8005918:	f043 0320 	orrmi.w	r3, r3, #32
 800591c:	6029      	str	r1, [r5, #0]
 800591e:	bf48      	it	mi
 8005920:	6023      	strmi	r3, [r4, #0]
 8005922:	b91e      	cbnz	r6, 800592c <_printf_i+0x1a4>
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	f023 0320 	bic.w	r3, r3, #32
 800592a:	6023      	str	r3, [r4, #0]
 800592c:	2310      	movs	r3, #16
 800592e:	e7a7      	b.n	8005880 <_printf_i+0xf8>
 8005930:	4824      	ldr	r0, [pc, #144]	; (80059c4 <_printf_i+0x23c>)
 8005932:	e7e4      	b.n	80058fe <_printf_i+0x176>
 8005934:	4615      	mov	r5, r2
 8005936:	e7bd      	b.n	80058b4 <_printf_i+0x12c>
 8005938:	682b      	ldr	r3, [r5, #0]
 800593a:	6826      	ldr	r6, [r4, #0]
 800593c:	6961      	ldr	r1, [r4, #20]
 800593e:	1d18      	adds	r0, r3, #4
 8005940:	6028      	str	r0, [r5, #0]
 8005942:	0635      	lsls	r5, r6, #24
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	d501      	bpl.n	800594c <_printf_i+0x1c4>
 8005948:	6019      	str	r1, [r3, #0]
 800594a:	e002      	b.n	8005952 <_printf_i+0x1ca>
 800594c:	0670      	lsls	r0, r6, #25
 800594e:	d5fb      	bpl.n	8005948 <_printf_i+0x1c0>
 8005950:	8019      	strh	r1, [r3, #0]
 8005952:	2300      	movs	r3, #0
 8005954:	6123      	str	r3, [r4, #16]
 8005956:	4615      	mov	r5, r2
 8005958:	e7bc      	b.n	80058d4 <_printf_i+0x14c>
 800595a:	682b      	ldr	r3, [r5, #0]
 800595c:	1d1a      	adds	r2, r3, #4
 800595e:	602a      	str	r2, [r5, #0]
 8005960:	681d      	ldr	r5, [r3, #0]
 8005962:	6862      	ldr	r2, [r4, #4]
 8005964:	2100      	movs	r1, #0
 8005966:	4628      	mov	r0, r5
 8005968:	f7fa fc5a 	bl	8000220 <memchr>
 800596c:	b108      	cbz	r0, 8005972 <_printf_i+0x1ea>
 800596e:	1b40      	subs	r0, r0, r5
 8005970:	6060      	str	r0, [r4, #4]
 8005972:	6863      	ldr	r3, [r4, #4]
 8005974:	6123      	str	r3, [r4, #16]
 8005976:	2300      	movs	r3, #0
 8005978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800597c:	e7aa      	b.n	80058d4 <_printf_i+0x14c>
 800597e:	6923      	ldr	r3, [r4, #16]
 8005980:	462a      	mov	r2, r5
 8005982:	4649      	mov	r1, r9
 8005984:	4640      	mov	r0, r8
 8005986:	47d0      	blx	sl
 8005988:	3001      	adds	r0, #1
 800598a:	d0ad      	beq.n	80058e8 <_printf_i+0x160>
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	079b      	lsls	r3, r3, #30
 8005990:	d413      	bmi.n	80059ba <_printf_i+0x232>
 8005992:	68e0      	ldr	r0, [r4, #12]
 8005994:	9b03      	ldr	r3, [sp, #12]
 8005996:	4298      	cmp	r0, r3
 8005998:	bfb8      	it	lt
 800599a:	4618      	movlt	r0, r3
 800599c:	e7a6      	b.n	80058ec <_printf_i+0x164>
 800599e:	2301      	movs	r3, #1
 80059a0:	4632      	mov	r2, r6
 80059a2:	4649      	mov	r1, r9
 80059a4:	4640      	mov	r0, r8
 80059a6:	47d0      	blx	sl
 80059a8:	3001      	adds	r0, #1
 80059aa:	d09d      	beq.n	80058e8 <_printf_i+0x160>
 80059ac:	3501      	adds	r5, #1
 80059ae:	68e3      	ldr	r3, [r4, #12]
 80059b0:	9903      	ldr	r1, [sp, #12]
 80059b2:	1a5b      	subs	r3, r3, r1
 80059b4:	42ab      	cmp	r3, r5
 80059b6:	dcf2      	bgt.n	800599e <_printf_i+0x216>
 80059b8:	e7eb      	b.n	8005992 <_printf_i+0x20a>
 80059ba:	2500      	movs	r5, #0
 80059bc:	f104 0619 	add.w	r6, r4, #25
 80059c0:	e7f5      	b.n	80059ae <_printf_i+0x226>
 80059c2:	bf00      	nop
 80059c4:	08005dfd 	.word	0x08005dfd
 80059c8:	08005e0e 	.word	0x08005e0e

080059cc <__sflush_r>:
 80059cc:	898a      	ldrh	r2, [r1, #12]
 80059ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d2:	4605      	mov	r5, r0
 80059d4:	0710      	lsls	r0, r2, #28
 80059d6:	460c      	mov	r4, r1
 80059d8:	d458      	bmi.n	8005a8c <__sflush_r+0xc0>
 80059da:	684b      	ldr	r3, [r1, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	dc05      	bgt.n	80059ec <__sflush_r+0x20>
 80059e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	dc02      	bgt.n	80059ec <__sflush_r+0x20>
 80059e6:	2000      	movs	r0, #0
 80059e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059ee:	2e00      	cmp	r6, #0
 80059f0:	d0f9      	beq.n	80059e6 <__sflush_r+0x1a>
 80059f2:	2300      	movs	r3, #0
 80059f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059f8:	682f      	ldr	r7, [r5, #0]
 80059fa:	6a21      	ldr	r1, [r4, #32]
 80059fc:	602b      	str	r3, [r5, #0]
 80059fe:	d032      	beq.n	8005a66 <__sflush_r+0x9a>
 8005a00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a02:	89a3      	ldrh	r3, [r4, #12]
 8005a04:	075a      	lsls	r2, r3, #29
 8005a06:	d505      	bpl.n	8005a14 <__sflush_r+0x48>
 8005a08:	6863      	ldr	r3, [r4, #4]
 8005a0a:	1ac0      	subs	r0, r0, r3
 8005a0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a0e:	b10b      	cbz	r3, 8005a14 <__sflush_r+0x48>
 8005a10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a12:	1ac0      	subs	r0, r0, r3
 8005a14:	2300      	movs	r3, #0
 8005a16:	4602      	mov	r2, r0
 8005a18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a1a:	6a21      	ldr	r1, [r4, #32]
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	47b0      	blx	r6
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	89a3      	ldrh	r3, [r4, #12]
 8005a24:	d106      	bne.n	8005a34 <__sflush_r+0x68>
 8005a26:	6829      	ldr	r1, [r5, #0]
 8005a28:	291d      	cmp	r1, #29
 8005a2a:	d82b      	bhi.n	8005a84 <__sflush_r+0xb8>
 8005a2c:	4a29      	ldr	r2, [pc, #164]	; (8005ad4 <__sflush_r+0x108>)
 8005a2e:	410a      	asrs	r2, r1
 8005a30:	07d6      	lsls	r6, r2, #31
 8005a32:	d427      	bmi.n	8005a84 <__sflush_r+0xb8>
 8005a34:	2200      	movs	r2, #0
 8005a36:	6062      	str	r2, [r4, #4]
 8005a38:	04d9      	lsls	r1, r3, #19
 8005a3a:	6922      	ldr	r2, [r4, #16]
 8005a3c:	6022      	str	r2, [r4, #0]
 8005a3e:	d504      	bpl.n	8005a4a <__sflush_r+0x7e>
 8005a40:	1c42      	adds	r2, r0, #1
 8005a42:	d101      	bne.n	8005a48 <__sflush_r+0x7c>
 8005a44:	682b      	ldr	r3, [r5, #0]
 8005a46:	b903      	cbnz	r3, 8005a4a <__sflush_r+0x7e>
 8005a48:	6560      	str	r0, [r4, #84]	; 0x54
 8005a4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a4c:	602f      	str	r7, [r5, #0]
 8005a4e:	2900      	cmp	r1, #0
 8005a50:	d0c9      	beq.n	80059e6 <__sflush_r+0x1a>
 8005a52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a56:	4299      	cmp	r1, r3
 8005a58:	d002      	beq.n	8005a60 <__sflush_r+0x94>
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	f7ff fbea 	bl	8005234 <_free_r>
 8005a60:	2000      	movs	r0, #0
 8005a62:	6360      	str	r0, [r4, #52]	; 0x34
 8005a64:	e7c0      	b.n	80059e8 <__sflush_r+0x1c>
 8005a66:	2301      	movs	r3, #1
 8005a68:	4628      	mov	r0, r5
 8005a6a:	47b0      	blx	r6
 8005a6c:	1c41      	adds	r1, r0, #1
 8005a6e:	d1c8      	bne.n	8005a02 <__sflush_r+0x36>
 8005a70:	682b      	ldr	r3, [r5, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0c5      	beq.n	8005a02 <__sflush_r+0x36>
 8005a76:	2b1d      	cmp	r3, #29
 8005a78:	d001      	beq.n	8005a7e <__sflush_r+0xb2>
 8005a7a:	2b16      	cmp	r3, #22
 8005a7c:	d101      	bne.n	8005a82 <__sflush_r+0xb6>
 8005a7e:	602f      	str	r7, [r5, #0]
 8005a80:	e7b1      	b.n	80059e6 <__sflush_r+0x1a>
 8005a82:	89a3      	ldrh	r3, [r4, #12]
 8005a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a88:	81a3      	strh	r3, [r4, #12]
 8005a8a:	e7ad      	b.n	80059e8 <__sflush_r+0x1c>
 8005a8c:	690f      	ldr	r7, [r1, #16]
 8005a8e:	2f00      	cmp	r7, #0
 8005a90:	d0a9      	beq.n	80059e6 <__sflush_r+0x1a>
 8005a92:	0793      	lsls	r3, r2, #30
 8005a94:	680e      	ldr	r6, [r1, #0]
 8005a96:	bf08      	it	eq
 8005a98:	694b      	ldreq	r3, [r1, #20]
 8005a9a:	600f      	str	r7, [r1, #0]
 8005a9c:	bf18      	it	ne
 8005a9e:	2300      	movne	r3, #0
 8005aa0:	eba6 0807 	sub.w	r8, r6, r7
 8005aa4:	608b      	str	r3, [r1, #8]
 8005aa6:	f1b8 0f00 	cmp.w	r8, #0
 8005aaa:	dd9c      	ble.n	80059e6 <__sflush_r+0x1a>
 8005aac:	6a21      	ldr	r1, [r4, #32]
 8005aae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ab0:	4643      	mov	r3, r8
 8005ab2:	463a      	mov	r2, r7
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	47b0      	blx	r6
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	dc06      	bgt.n	8005aca <__sflush_r+0xfe>
 8005abc:	89a3      	ldrh	r3, [r4, #12]
 8005abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ac2:	81a3      	strh	r3, [r4, #12]
 8005ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac8:	e78e      	b.n	80059e8 <__sflush_r+0x1c>
 8005aca:	4407      	add	r7, r0
 8005acc:	eba8 0800 	sub.w	r8, r8, r0
 8005ad0:	e7e9      	b.n	8005aa6 <__sflush_r+0xda>
 8005ad2:	bf00      	nop
 8005ad4:	dfbffffe 	.word	0xdfbffffe

08005ad8 <_fflush_r>:
 8005ad8:	b538      	push	{r3, r4, r5, lr}
 8005ada:	690b      	ldr	r3, [r1, #16]
 8005adc:	4605      	mov	r5, r0
 8005ade:	460c      	mov	r4, r1
 8005ae0:	b913      	cbnz	r3, 8005ae8 <_fflush_r+0x10>
 8005ae2:	2500      	movs	r5, #0
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	b118      	cbz	r0, 8005af2 <_fflush_r+0x1a>
 8005aea:	6a03      	ldr	r3, [r0, #32]
 8005aec:	b90b      	cbnz	r3, 8005af2 <_fflush_r+0x1a>
 8005aee:	f7ff fa99 	bl	8005024 <__sinit>
 8005af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0f3      	beq.n	8005ae2 <_fflush_r+0xa>
 8005afa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005afc:	07d0      	lsls	r0, r2, #31
 8005afe:	d404      	bmi.n	8005b0a <_fflush_r+0x32>
 8005b00:	0599      	lsls	r1, r3, #22
 8005b02:	d402      	bmi.n	8005b0a <_fflush_r+0x32>
 8005b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b06:	f7ff fb92 	bl	800522e <__retarget_lock_acquire_recursive>
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	f7ff ff5d 	bl	80059cc <__sflush_r>
 8005b12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b14:	07da      	lsls	r2, r3, #31
 8005b16:	4605      	mov	r5, r0
 8005b18:	d4e4      	bmi.n	8005ae4 <_fflush_r+0xc>
 8005b1a:	89a3      	ldrh	r3, [r4, #12]
 8005b1c:	059b      	lsls	r3, r3, #22
 8005b1e:	d4e1      	bmi.n	8005ae4 <_fflush_r+0xc>
 8005b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b22:	f7ff fb85 	bl	8005230 <__retarget_lock_release_recursive>
 8005b26:	e7dd      	b.n	8005ae4 <_fflush_r+0xc>

08005b28 <__swbuf_r>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	460e      	mov	r6, r1
 8005b2c:	4614      	mov	r4, r2
 8005b2e:	4605      	mov	r5, r0
 8005b30:	b118      	cbz	r0, 8005b3a <__swbuf_r+0x12>
 8005b32:	6a03      	ldr	r3, [r0, #32]
 8005b34:	b90b      	cbnz	r3, 8005b3a <__swbuf_r+0x12>
 8005b36:	f7ff fa75 	bl	8005024 <__sinit>
 8005b3a:	69a3      	ldr	r3, [r4, #24]
 8005b3c:	60a3      	str	r3, [r4, #8]
 8005b3e:	89a3      	ldrh	r3, [r4, #12]
 8005b40:	071a      	lsls	r2, r3, #28
 8005b42:	d525      	bpl.n	8005b90 <__swbuf_r+0x68>
 8005b44:	6923      	ldr	r3, [r4, #16]
 8005b46:	b31b      	cbz	r3, 8005b90 <__swbuf_r+0x68>
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	6922      	ldr	r2, [r4, #16]
 8005b4c:	1a98      	subs	r0, r3, r2
 8005b4e:	6963      	ldr	r3, [r4, #20]
 8005b50:	b2f6      	uxtb	r6, r6
 8005b52:	4283      	cmp	r3, r0
 8005b54:	4637      	mov	r7, r6
 8005b56:	dc04      	bgt.n	8005b62 <__swbuf_r+0x3a>
 8005b58:	4621      	mov	r1, r4
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f7ff ffbc 	bl	8005ad8 <_fflush_r>
 8005b60:	b9e0      	cbnz	r0, 8005b9c <__swbuf_r+0x74>
 8005b62:	68a3      	ldr	r3, [r4, #8]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	60a3      	str	r3, [r4, #8]
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	6022      	str	r2, [r4, #0]
 8005b6e:	701e      	strb	r6, [r3, #0]
 8005b70:	6962      	ldr	r2, [r4, #20]
 8005b72:	1c43      	adds	r3, r0, #1
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d004      	beq.n	8005b82 <__swbuf_r+0x5a>
 8005b78:	89a3      	ldrh	r3, [r4, #12]
 8005b7a:	07db      	lsls	r3, r3, #31
 8005b7c:	d506      	bpl.n	8005b8c <__swbuf_r+0x64>
 8005b7e:	2e0a      	cmp	r6, #10
 8005b80:	d104      	bne.n	8005b8c <__swbuf_r+0x64>
 8005b82:	4621      	mov	r1, r4
 8005b84:	4628      	mov	r0, r5
 8005b86:	f7ff ffa7 	bl	8005ad8 <_fflush_r>
 8005b8a:	b938      	cbnz	r0, 8005b9c <__swbuf_r+0x74>
 8005b8c:	4638      	mov	r0, r7
 8005b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b90:	4621      	mov	r1, r4
 8005b92:	4628      	mov	r0, r5
 8005b94:	f000 f806 	bl	8005ba4 <__swsetup_r>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	d0d5      	beq.n	8005b48 <__swbuf_r+0x20>
 8005b9c:	f04f 37ff 	mov.w	r7, #4294967295
 8005ba0:	e7f4      	b.n	8005b8c <__swbuf_r+0x64>
	...

08005ba4 <__swsetup_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4b2a      	ldr	r3, [pc, #168]	; (8005c50 <__swsetup_r+0xac>)
 8005ba8:	4605      	mov	r5, r0
 8005baa:	6818      	ldr	r0, [r3, #0]
 8005bac:	460c      	mov	r4, r1
 8005bae:	b118      	cbz	r0, 8005bb8 <__swsetup_r+0x14>
 8005bb0:	6a03      	ldr	r3, [r0, #32]
 8005bb2:	b90b      	cbnz	r3, 8005bb8 <__swsetup_r+0x14>
 8005bb4:	f7ff fa36 	bl	8005024 <__sinit>
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bbe:	0718      	lsls	r0, r3, #28
 8005bc0:	d422      	bmi.n	8005c08 <__swsetup_r+0x64>
 8005bc2:	06d9      	lsls	r1, r3, #27
 8005bc4:	d407      	bmi.n	8005bd6 <__swsetup_r+0x32>
 8005bc6:	2309      	movs	r3, #9
 8005bc8:	602b      	str	r3, [r5, #0]
 8005bca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005bce:	81a3      	strh	r3, [r4, #12]
 8005bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd4:	e034      	b.n	8005c40 <__swsetup_r+0x9c>
 8005bd6:	0758      	lsls	r0, r3, #29
 8005bd8:	d512      	bpl.n	8005c00 <__swsetup_r+0x5c>
 8005bda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bdc:	b141      	cbz	r1, 8005bf0 <__swsetup_r+0x4c>
 8005bde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005be2:	4299      	cmp	r1, r3
 8005be4:	d002      	beq.n	8005bec <__swsetup_r+0x48>
 8005be6:	4628      	mov	r0, r5
 8005be8:	f7ff fb24 	bl	8005234 <_free_r>
 8005bec:	2300      	movs	r3, #0
 8005bee:	6363      	str	r3, [r4, #52]	; 0x34
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bf6:	81a3      	strh	r3, [r4, #12]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	6063      	str	r3, [r4, #4]
 8005bfc:	6923      	ldr	r3, [r4, #16]
 8005bfe:	6023      	str	r3, [r4, #0]
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	f043 0308 	orr.w	r3, r3, #8
 8005c06:	81a3      	strh	r3, [r4, #12]
 8005c08:	6923      	ldr	r3, [r4, #16]
 8005c0a:	b94b      	cbnz	r3, 8005c20 <__swsetup_r+0x7c>
 8005c0c:	89a3      	ldrh	r3, [r4, #12]
 8005c0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c16:	d003      	beq.n	8005c20 <__swsetup_r+0x7c>
 8005c18:	4621      	mov	r1, r4
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f000 f850 	bl	8005cc0 <__smakebuf_r>
 8005c20:	89a0      	ldrh	r0, [r4, #12]
 8005c22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c26:	f010 0301 	ands.w	r3, r0, #1
 8005c2a:	d00a      	beq.n	8005c42 <__swsetup_r+0x9e>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60a3      	str	r3, [r4, #8]
 8005c30:	6963      	ldr	r3, [r4, #20]
 8005c32:	425b      	negs	r3, r3
 8005c34:	61a3      	str	r3, [r4, #24]
 8005c36:	6923      	ldr	r3, [r4, #16]
 8005c38:	b943      	cbnz	r3, 8005c4c <__swsetup_r+0xa8>
 8005c3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c3e:	d1c4      	bne.n	8005bca <__swsetup_r+0x26>
 8005c40:	bd38      	pop	{r3, r4, r5, pc}
 8005c42:	0781      	lsls	r1, r0, #30
 8005c44:	bf58      	it	pl
 8005c46:	6963      	ldrpl	r3, [r4, #20]
 8005c48:	60a3      	str	r3, [r4, #8]
 8005c4a:	e7f4      	b.n	8005c36 <__swsetup_r+0x92>
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	e7f7      	b.n	8005c40 <__swsetup_r+0x9c>
 8005c50:	20000064 	.word	0x20000064

08005c54 <_sbrk_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	4d06      	ldr	r5, [pc, #24]	; (8005c70 <_sbrk_r+0x1c>)
 8005c58:	2300      	movs	r3, #0
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	4608      	mov	r0, r1
 8005c5e:	602b      	str	r3, [r5, #0]
 8005c60:	f7fb faa4 	bl	80011ac <_sbrk>
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	d102      	bne.n	8005c6e <_sbrk_r+0x1a>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	b103      	cbz	r3, 8005c6e <_sbrk_r+0x1a>
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	bd38      	pop	{r3, r4, r5, pc}
 8005c70:	20000420 	.word	0x20000420

08005c74 <__swhatbuf_r>:
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	460c      	mov	r4, r1
 8005c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c7c:	2900      	cmp	r1, #0
 8005c7e:	b096      	sub	sp, #88	; 0x58
 8005c80:	4615      	mov	r5, r2
 8005c82:	461e      	mov	r6, r3
 8005c84:	da0d      	bge.n	8005ca2 <__swhatbuf_r+0x2e>
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c8c:	f04f 0100 	mov.w	r1, #0
 8005c90:	bf0c      	ite	eq
 8005c92:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005c96:	2340      	movne	r3, #64	; 0x40
 8005c98:	2000      	movs	r0, #0
 8005c9a:	6031      	str	r1, [r6, #0]
 8005c9c:	602b      	str	r3, [r5, #0]
 8005c9e:	b016      	add	sp, #88	; 0x58
 8005ca0:	bd70      	pop	{r4, r5, r6, pc}
 8005ca2:	466a      	mov	r2, sp
 8005ca4:	f000 f848 	bl	8005d38 <_fstat_r>
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	dbec      	blt.n	8005c86 <__swhatbuf_r+0x12>
 8005cac:	9901      	ldr	r1, [sp, #4]
 8005cae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005cb2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005cb6:	4259      	negs	r1, r3
 8005cb8:	4159      	adcs	r1, r3
 8005cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cbe:	e7eb      	b.n	8005c98 <__swhatbuf_r+0x24>

08005cc0 <__smakebuf_r>:
 8005cc0:	898b      	ldrh	r3, [r1, #12]
 8005cc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cc4:	079d      	lsls	r5, r3, #30
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	460c      	mov	r4, r1
 8005cca:	d507      	bpl.n	8005cdc <__smakebuf_r+0x1c>
 8005ccc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	6123      	str	r3, [r4, #16]
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	6163      	str	r3, [r4, #20]
 8005cd8:	b002      	add	sp, #8
 8005cda:	bd70      	pop	{r4, r5, r6, pc}
 8005cdc:	ab01      	add	r3, sp, #4
 8005cde:	466a      	mov	r2, sp
 8005ce0:	f7ff ffc8 	bl	8005c74 <__swhatbuf_r>
 8005ce4:	9900      	ldr	r1, [sp, #0]
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	4630      	mov	r0, r6
 8005cea:	f7ff fb0f 	bl	800530c <_malloc_r>
 8005cee:	b948      	cbnz	r0, 8005d04 <__smakebuf_r+0x44>
 8005cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf4:	059a      	lsls	r2, r3, #22
 8005cf6:	d4ef      	bmi.n	8005cd8 <__smakebuf_r+0x18>
 8005cf8:	f023 0303 	bic.w	r3, r3, #3
 8005cfc:	f043 0302 	orr.w	r3, r3, #2
 8005d00:	81a3      	strh	r3, [r4, #12]
 8005d02:	e7e3      	b.n	8005ccc <__smakebuf_r+0xc>
 8005d04:	89a3      	ldrh	r3, [r4, #12]
 8005d06:	6020      	str	r0, [r4, #0]
 8005d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d0c:	81a3      	strh	r3, [r4, #12]
 8005d0e:	9b00      	ldr	r3, [sp, #0]
 8005d10:	6163      	str	r3, [r4, #20]
 8005d12:	9b01      	ldr	r3, [sp, #4]
 8005d14:	6120      	str	r0, [r4, #16]
 8005d16:	b15b      	cbz	r3, 8005d30 <__smakebuf_r+0x70>
 8005d18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	f000 f81d 	bl	8005d5c <_isatty_r>
 8005d22:	b128      	cbz	r0, 8005d30 <__smakebuf_r+0x70>
 8005d24:	89a3      	ldrh	r3, [r4, #12]
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	f043 0301 	orr.w	r3, r3, #1
 8005d2e:	81a3      	strh	r3, [r4, #12]
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	431d      	orrs	r5, r3
 8005d34:	81a5      	strh	r5, [r4, #12]
 8005d36:	e7cf      	b.n	8005cd8 <__smakebuf_r+0x18>

08005d38 <_fstat_r>:
 8005d38:	b538      	push	{r3, r4, r5, lr}
 8005d3a:	4d07      	ldr	r5, [pc, #28]	; (8005d58 <_fstat_r+0x20>)
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	4604      	mov	r4, r0
 8005d40:	4608      	mov	r0, r1
 8005d42:	4611      	mov	r1, r2
 8005d44:	602b      	str	r3, [r5, #0]
 8005d46:	f7fb fa08 	bl	800115a <_fstat>
 8005d4a:	1c43      	adds	r3, r0, #1
 8005d4c:	d102      	bne.n	8005d54 <_fstat_r+0x1c>
 8005d4e:	682b      	ldr	r3, [r5, #0]
 8005d50:	b103      	cbz	r3, 8005d54 <_fstat_r+0x1c>
 8005d52:	6023      	str	r3, [r4, #0]
 8005d54:	bd38      	pop	{r3, r4, r5, pc}
 8005d56:	bf00      	nop
 8005d58:	20000420 	.word	0x20000420

08005d5c <_isatty_r>:
 8005d5c:	b538      	push	{r3, r4, r5, lr}
 8005d5e:	4d06      	ldr	r5, [pc, #24]	; (8005d78 <_isatty_r+0x1c>)
 8005d60:	2300      	movs	r3, #0
 8005d62:	4604      	mov	r4, r0
 8005d64:	4608      	mov	r0, r1
 8005d66:	602b      	str	r3, [r5, #0]
 8005d68:	f7fb fa07 	bl	800117a <_isatty>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d102      	bne.n	8005d76 <_isatty_r+0x1a>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	b103      	cbz	r3, 8005d76 <_isatty_r+0x1a>
 8005d74:	6023      	str	r3, [r4, #0]
 8005d76:	bd38      	pop	{r3, r4, r5, pc}
 8005d78:	20000420 	.word	0x20000420

08005d7c <_init>:
 8005d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7e:	bf00      	nop
 8005d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d82:	bc08      	pop	{r3}
 8005d84:	469e      	mov	lr, r3
 8005d86:	4770      	bx	lr

08005d88 <_fini>:
 8005d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8a:	bf00      	nop
 8005d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d8e:	bc08      	pop	{r3}
 8005d90:	469e      	mov	lr, r3
 8005d92:	4770      	bx	lr
