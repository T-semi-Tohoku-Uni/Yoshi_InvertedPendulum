
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087fc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  080089e0  080089e0  000189e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dd4  08008dd4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008dd4  08008dd4  00018dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ddc  08008ddc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ddc  08008ddc  00018ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008de0  08008de0  00018de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  200001d4  08008fb8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  08008fb8  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000157f0  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002940  00000000  00000000  00035a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001388  00000000  00000000  00038378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f55  00000000  00000000  00039700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f899  00000000  00000000  0003a655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001717e  00000000  00000000  00059eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca8bd  00000000  00000000  0007106c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006410  00000000  00000000  0013b92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00141d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080089c4 	.word	0x080089c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	080089c4 	.word	0x080089c4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	230a      	movs	r3, #10
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <_write+0x24>)
 8000f0a:	f004 fa70 	bl	80053ee <HAL_UART_Transmit>
	return len;
 8000f0e:	687b      	ldr	r3, [r7, #4]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200003b8 	.word	0x200003b8

08000f1c <read_encoder_value>:


int16_t read_encoder_value(TIM_TypeDef *TIM)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	uint16_t enc_buff = TIM->CNT;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	81fb      	strh	r3, [r7, #14]
	TIM->CNT = 0;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
	return (int16_t)enc_buff;
 8000f30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b092      	sub	sp, #72	; 0x48
 8000f44:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f46:	f000 fec2 	bl	8001cce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4a:	f000 f899 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4e:	f000 fb2d 	bl	80015ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f52:	f000 fadf 	bl	8001514 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f56:	f000 f9e5 	bl	8001324 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f5a:	f000 fa37 	bl	80013cc <MX_TIM3_Init>
  MX_TIM1_Init();
 8000f5e:	f000 f91b 	bl	8001198 <MX_TIM1_Init>
  MX_TIM17_Init();
 8000f62:	f000 fab1 	bl	80014c8 <MX_TIM17_Init>
  MX_I2C1_Init();
 8000f66:	f000 f8d7 	bl	8001118 <MX_I2C1_Init>
  MX_TIM16_Init();
 8000f6a:	f000 fa85 	bl	8001478 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000f6e:	213c      	movs	r1, #60	; 0x3c
 8000f70:	483b      	ldr	r0, [pc, #236]	; (8001060 <main+0x120>)
 8000f72:	f002 ffc5 	bl	8003f00 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f76:	213c      	movs	r1, #60	; 0x3c
 8000f78:	483a      	ldr	r0, [pc, #232]	; (8001064 <main+0x124>)
 8000f7a:	f002 ffc1 	bl	8003f00 <HAL_TIM_Encoder_Start>

  uint8_t Rxbuffer[6];
  float euler[3];
  char eulerheader[3][10] = {"x", "y", "z"};
 8000f7e:	4b3a      	ldr	r3, [pc, #232]	; (8001068 <main+0x128>)
 8000f80:	1d3c      	adds	r4, r7, #4
 8000f82:	461d      	mov	r5, r3
 8000f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f8c:	c407      	stmia	r4!, {r0, r1, r2}
 8000f8e:	8023      	strh	r3, [r4, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Right:%d\r\n",read_encoder_value(TIM2));
 8000f90:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f94:	f7ff ffc2 	bl	8000f1c <read_encoder_value>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4833      	ldr	r0, [pc, #204]	; (800106c <main+0x12c>)
 8000f9e:	f005 fd69 	bl	8006a74 <iprintf>
	  printf("Left :%d\r\n",read_encoder_value(TIM3));
 8000fa2:	4833      	ldr	r0, [pc, #204]	; (8001070 <main+0x130>)
 8000fa4:	f7ff ffba 	bl	8000f1c <read_encoder_value>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4619      	mov	r1, r3
 8000fac:	4831      	ldr	r0, [pc, #196]	; (8001074 <main+0x134>)
 8000fae:	f005 fd61 	bl	8006a74 <iprintf>
	  HAL_Delay(200);
 8000fb2:	20c8      	movs	r0, #200	; 0xc8
 8000fb4:	f000 fefc 	bl	8001db0 <HAL_Delay>

	  HAL_I2C_Mem_Read(&hi2c1, BNO_ADDRESS << 1, 0x1A, I2C_MEMADD_SIZE_8BIT, Rxbuffer, 6, 100);
 8000fb8:	2364      	movs	r3, #100	; 0x64
 8000fba:	9302      	str	r3, [sp, #8]
 8000fbc:	2306      	movs	r3, #6
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	221a      	movs	r2, #26
 8000fca:	2150      	movs	r1, #80	; 0x50
 8000fcc:	482a      	ldr	r0, [pc, #168]	; (8001078 <main+0x138>)
 8000fce:	f001 fa6d 	bl	80024ac <HAL_I2C_Mem_Read>

	  for(uint8_t i=0; i<3; i++){
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000fd8:	e03d      	b.n	8001056 <main+0x116>
		  euler[i] = (float)((Rxbuffer[i*2+1] << 8) | Rxbuffer[i*2])/16;
 8000fda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	3338      	adds	r3, #56	; 0x38
 8000fe4:	443b      	add	r3, r7
 8000fe6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000ff0:	0052      	lsls	r2, r2, #1
 8000ff2:	3238      	adds	r2, #56	; 0x38
 8000ff4:	443a      	add	r2, r7
 8000ff6:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	ee07 3a90 	vmov	s15, r3
 8001000:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001004:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001008:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800100c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	3338      	adds	r3, #56	; 0x38
 8001014:	443b      	add	r3, r7
 8001016:	3b14      	subs	r3, #20
 8001018:	edc3 7a00 	vstr	s15, [r3]
		  printf("%s:%f", eulerheader[i],euler[i]);
 800101c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001020:	1d39      	adds	r1, r7, #4
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	18cc      	adds	r4, r1, r3
 800102c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	3338      	adds	r3, #56	; 0x38
 8001034:	443b      	add	r3, r7
 8001036:	3b14      	subs	r3, #20
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff faac 	bl	8000598 <__aeabi_f2d>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4621      	mov	r1, r4
 8001046:	480d      	ldr	r0, [pc, #52]	; (800107c <main+0x13c>)
 8001048:	f005 fd14 	bl	8006a74 <iprintf>
	  for(uint8_t i=0; i<3; i++){
 800104c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001050:	3301      	adds	r3, #1
 8001052:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001056:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800105a:	2b02      	cmp	r3, #2
 800105c:	d9bd      	bls.n	8000fda <main+0x9a>
	  printf("Right:%d\r\n",read_encoder_value(TIM2));
 800105e:	e797      	b.n	8000f90 <main+0x50>
 8001060:	20000288 	.word	0x20000288
 8001064:	200002d4 	.word	0x200002d4
 8001068:	08008a00 	.word	0x08008a00
 800106c:	080089e0 	.word	0x080089e0
 8001070:	40000400 	.word	0x40000400
 8001074:	080089ec 	.word	0x080089ec
 8001078:	200001f0 	.word	0x200001f0
 800107c:	080089f8 	.word	0x080089f8

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b094      	sub	sp, #80	; 0x50
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	2238      	movs	r2, #56	; 0x38
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f005 fd45 	bl	8006b1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010a6:	f001 fe05 	bl	8002cb4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010aa:	2302      	movs	r3, #2
 80010ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b4:	2340      	movs	r3, #64	; 0x40
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b8:	2302      	movs	r3, #2
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010bc:	2302      	movs	r3, #2
 80010be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010c4:	230a      	movs	r3, #10
 80010c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d4:	f107 0318 	add.w	r3, r7, #24
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 fe8f 	bl	8002dfc <HAL_RCC_OscConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80010e4:	f000 fab8 	bl	8001658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e8:	230f      	movs	r3, #15
 80010ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ec:	2303      	movs	r3, #3
 80010ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2102      	movs	r1, #2
 8001100:	4618      	mov	r0, r3
 8001102:	f002 f993 	bl	800342c <HAL_RCC_ClockConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800110c:	f000 faa4 	bl	8001658 <Error_Handler>
  }
}
 8001110:	bf00      	nop
 8001112:	3750      	adds	r7, #80	; 0x50
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_I2C1_Init+0x74>)
 800111e:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <MX_I2C1_Init+0x78>)
 8001120:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001122:	4b1a      	ldr	r3, [pc, #104]	; (800118c <MX_I2C1_Init+0x74>)
 8001124:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <MX_I2C1_Init+0x7c>)
 8001126:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <MX_I2C1_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <MX_I2C1_Init+0x74>)
 8001130:	2201      	movs	r2, #1
 8001132:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <MX_I2C1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <MX_I2C1_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_I2C1_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001152:	480e      	ldr	r0, [pc, #56]	; (800118c <MX_I2C1_Init+0x74>)
 8001154:	f001 f91b 	bl	800238e <HAL_I2C_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800115e:	f000 fa7b 	bl	8001658 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001162:	2100      	movs	r1, #0
 8001164:	4809      	ldr	r0, [pc, #36]	; (800118c <MX_I2C1_Init+0x74>)
 8001166:	f001 fd0d 	bl	8002b84 <HAL_I2CEx_ConfigAnalogFilter>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001170:	f000 fa72 	bl	8001658 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001174:	2100      	movs	r1, #0
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_I2C1_Init+0x74>)
 8001178:	f001 fd4f 	bl	8002c1a <HAL_I2CEx_ConfigDigitalFilter>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001182:	f000 fa69 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200001f0 	.word	0x200001f0
 8001190:	40005400 	.word	0x40005400
 8001194:	00702991 	.word	0x00702991

08001198 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b09c      	sub	sp, #112	; 0x70
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	615a      	str	r2, [r3, #20]
 80011ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2234      	movs	r2, #52	; 0x34
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f005 fca3 	bl	8006b1e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011d8:	4b4f      	ldr	r3, [pc, #316]	; (8001318 <MX_TIM1_Init+0x180>)
 80011da:	4a50      	ldr	r2, [pc, #320]	; (800131c <MX_TIM1_Init+0x184>)
 80011dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80011de:	4b4e      	ldr	r3, [pc, #312]	; (8001318 <MX_TIM1_Init+0x180>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b4c      	ldr	r3, [pc, #304]	; (8001318 <MX_TIM1_Init+0x180>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80011ea:	4b4b      	ldr	r3, [pc, #300]	; (8001318 <MX_TIM1_Init+0x180>)
 80011ec:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80011f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f2:	4b49      	ldr	r3, [pc, #292]	; (8001318 <MX_TIM1_Init+0x180>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011f8:	4b47      	ldr	r3, [pc, #284]	; (8001318 <MX_TIM1_Init+0x180>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b46      	ldr	r3, [pc, #280]	; (8001318 <MX_TIM1_Init+0x180>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001204:	4844      	ldr	r0, [pc, #272]	; (8001318 <MX_TIM1_Init+0x180>)
 8001206:	f002 fd1d 	bl	8003c44 <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001210:	f000 fa22 	bl	8001658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001218:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800121a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800121e:	4619      	mov	r1, r3
 8001220:	483d      	ldr	r0, [pc, #244]	; (8001318 <MX_TIM1_Init+0x180>)
 8001222:	f003 f98f 	bl	8004544 <HAL_TIM_ConfigClockSource>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800122c:	f000 fa14 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001230:	4839      	ldr	r0, [pc, #228]	; (8001318 <MX_TIM1_Init+0x180>)
 8001232:	f002 fd5e 	bl	8003cf2 <HAL_TIM_PWM_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800123c:	f000 fa0c 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001244:	2300      	movs	r3, #0
 8001246:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800124c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001250:	4619      	mov	r1, r3
 8001252:	4831      	ldr	r0, [pc, #196]	; (8001318 <MX_TIM1_Init+0x180>)
 8001254:	f003 feea 	bl	800502c <HAL_TIMEx_MasterConfigSynchronization>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800125e:	f000 f9fb 	bl	8001658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 8001262:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <MX_TIM1_Init+0x188>)
 8001264:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800126a:	2300      	movs	r3, #0
 800126c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800126e:	2300      	movs	r3, #0
 8001270:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800127e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001282:	2200      	movs	r2, #0
 8001284:	4619      	mov	r1, r3
 8001286:	4824      	ldr	r0, [pc, #144]	; (8001318 <MX_TIM1_Init+0x180>)
 8001288:	f003 f848 	bl	800431c <HAL_TIM_PWM_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001292:	f000 f9e1 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001296:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800129a:	2204      	movs	r2, #4
 800129c:	4619      	mov	r1, r3
 800129e:	481e      	ldr	r0, [pc, #120]	; (8001318 <MX_TIM1_Init+0x180>)
 80012a0:	f003 f83c 	bl	800431c <HAL_TIM_PWM_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80012aa:	f000 f9d5 	bl	8001658 <Error_Handler>
  }
  HAL_TIMEx_ConfigAsymmetricalDeadTime(&htim1, 5);
 80012ae:	2105      	movs	r1, #5
 80012b0:	4819      	ldr	r0, [pc, #100]	; (8001318 <MX_TIM1_Init+0x180>)
 80012b2:	f003 ffdd 	bl	8005270 <HAL_TIMEx_ConfigAsymmetricalDeadTime>
  HAL_TIMEx_EnableAsymmetricalDeadTime(&htim1);
 80012b6:	4818      	ldr	r0, [pc, #96]	; (8001318 <MX_TIM1_Init+0x180>)
 80012b8:	f003 fff0 	bl	800529c <HAL_TIMEx_EnableAsymmetricalDeadTime>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012da:	2300      	movs	r3, #0
 80012dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4619      	mov	r1, r3
 80012f8:	4807      	ldr	r0, [pc, #28]	; (8001318 <MX_TIM1_Init+0x180>)
 80012fa:	f003 ff19 	bl	8005130 <HAL_TIMEx_ConfigBreakDeadTime>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001304:	f000 f9a8 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001308:	4803      	ldr	r0, [pc, #12]	; (8001318 <MX_TIM1_Init+0x180>)
 800130a:	f000 fb1d 	bl	8001948 <HAL_TIM_MspPostInit>

}
 800130e:	bf00      	nop
 8001310:	3770      	adds	r7, #112	; 0x70
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000023c 	.word	0x2000023c
 800131c:	40012c00 	.word	0x40012c00
 8001320:	00010060 	.word	0x00010060

08001324 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08c      	sub	sp, #48	; 0x30
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	2224      	movs	r2, #36	; 0x24
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f005 fbf3 	bl	8006b1e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001338:	463b      	mov	r3, r7
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001342:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <MX_TIM2_Init+0xa4>)
 8001344:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001348:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <MX_TIM2_Init+0xa4>)
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <MX_TIM2_Init+0xa4>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <MX_TIM2_Init+0xa4>)
 8001358:	f240 32e7 	movw	r2, #999	; 0x3e7
 800135c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_TIM2_Init+0xa4>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <MX_TIM2_Init+0xa4>)
 8001366:	2200      	movs	r2, #0
 8001368:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800136a:	2303      	movs	r3, #3
 800136c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001372:	2301      	movs	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001382:	2301      	movs	r3, #1
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4619      	mov	r1, r3
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <MX_TIM2_Init+0xa4>)
 8001396:	f002 fd0d 	bl	8003db4 <HAL_TIM_Encoder_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80013a0:	f000 f95a 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ac:	463b      	mov	r3, r7
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_TIM2_Init+0xa4>)
 80013b2:	f003 fe3b 	bl	800502c <HAL_TIMEx_MasterConfigSynchronization>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80013bc:	f000 f94c 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	3730      	adds	r7, #48	; 0x30
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000288 	.word	0x20000288

080013cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	; 0x30
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2224      	movs	r2, #36	; 0x24
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f005 fb9f 	bl	8006b1e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	463b      	mov	r3, r7
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ea:	4b21      	ldr	r3, [pc, #132]	; (8001470 <MX_TIM3_Init+0xa4>)
 80013ec:	4a21      	ldr	r2, [pc, #132]	; (8001474 <MX_TIM3_Init+0xa8>)
 80013ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013f0:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <MX_TIM3_Init+0xa4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <MX_TIM3_Init+0xa4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013fc:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <MX_TIM3_Init+0xa4>)
 80013fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001402:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <MX_TIM3_Init+0xa4>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <MX_TIM3_Init+0xa4>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001410:	2303      	movs	r3, #3
 8001412:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001418:	2301      	movs	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001428:	2301      	movs	r3, #1
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	4619      	mov	r1, r3
 800143a:	480d      	ldr	r0, [pc, #52]	; (8001470 <MX_TIM3_Init+0xa4>)
 800143c:	f002 fcba 	bl	8003db4 <HAL_TIM_Encoder_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001446:	f000 f907 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	; (8001470 <MX_TIM3_Init+0xa4>)
 8001458:	f003 fde8 	bl	800502c <HAL_TIMEx_MasterConfigSynchronization>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001462:	f000 f8f9 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	3730      	adds	r7, #48	; 0x30
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200002d4 	.word	0x200002d4
 8001474:	40000400 	.word	0x40000400

08001478 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800147c:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <MX_TIM16_Init+0x48>)
 800147e:	4a11      	ldr	r2, [pc, #68]	; (80014c4 <MX_TIM16_Init+0x4c>)
 8001480:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 799;
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_TIM16_Init+0x48>)
 8001484:	f240 321f 	movw	r2, #799	; 0x31f
 8001488:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <MX_TIM16_Init+0x48>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_TIM16_Init+0x48>)
 8001492:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001496:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_TIM16_Init+0x48>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_TIM16_Init+0x48>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_TIM16_Init+0x48>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_TIM16_Init+0x48>)
 80014ac:	f002 fbca 	bl	8003c44 <HAL_TIM_Base_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80014b6:	f000 f8cf 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000320 	.word	0x20000320
 80014c4:	40014400 	.word	0x40014400

080014c8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_TIM17_Init+0x44>)
 80014ce:	4a10      	ldr	r2, [pc, #64]	; (8001510 <MX_TIM17_Init+0x48>)
 80014d0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 79;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_TIM17_Init+0x44>)
 80014d4:	224f      	movs	r2, #79	; 0x4f
 80014d6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_TIM17_Init+0x44>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_TIM17_Init+0x44>)
 80014e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014e4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_TIM17_Init+0x44>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <MX_TIM17_Init+0x44>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_TIM17_Init+0x44>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_TIM17_Init+0x44>)
 80014fa:	f002 fba3 	bl	8003c44 <HAL_TIM_Base_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001504:	f000 f8a8 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2000036c 	.word	0x2000036c
 8001510:	40014800 	.word	0x40014800

08001514 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 800151a:	4a23      	ldr	r2, [pc, #140]	; (80015a8 <MX_USART2_UART_Init+0x94>)
 800151c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800151e:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001524:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800155c:	4811      	ldr	r0, [pc, #68]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 800155e:	f003 fef6 	bl	800534e <HAL_UART_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001568:	f000 f876 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156c:	2100      	movs	r1, #0
 800156e:	480d      	ldr	r0, [pc, #52]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001570:	f004 fc8e 	bl	8005e90 <HAL_UARTEx_SetTxFifoThreshold>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800157a:	f000 f86d 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800157e:	2100      	movs	r1, #0
 8001580:	4808      	ldr	r0, [pc, #32]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001582:	f004 fcc3 	bl	8005f0c <HAL_UARTEx_SetRxFifoThreshold>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800158c:	f000 f864 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001592:	f004 fc44 	bl	8005e1e <HAL_UARTEx_DisableFifoMode>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800159c:	f000 f85c 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200003b8 	.word	0x200003b8
 80015a8:	40004400 	.word	0x40004400

080015ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <MX_GPIO_Init+0xa4>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	4a22      	ldr	r2, [pc, #136]	; (8001650 <MX_GPIO_Init+0xa4>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <MX_GPIO_Init+0xa4>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <MX_GPIO_Init+0xa4>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <MX_GPIO_Init+0xa4>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_GPIO_Init+0xa4>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f8:	4816      	ldr	r0, [pc, #88]	; (8001654 <MX_GPIO_Init+0xa8>)
 80015fa:	f000 fe8d 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001602:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	4619      	mov	r1, r3
 8001612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001616:	f000 fcfd 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800161a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800161e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	4619      	mov	r1, r3
 8001632:	4808      	ldr	r0, [pc, #32]	; (8001654 <MX_GPIO_Init+0xa8>)
 8001634:	f000 fcee 	bl	8002014 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	2100      	movs	r1, #0
 800163c:	2017      	movs	r0, #23
 800163e:	f000 fcb4 	bl	8001faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001642:	2017      	movs	r0, #23
 8001644:	f000 fccb 	bl	8001fde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001648:	bf00      	nop
 800164a:	3720      	adds	r7, #32
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000
 8001654:	48000400 	.word	0x48000400

08001658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165c:	b672      	cpsid	i
}
 800165e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001660:	e7fe      	b.n	8001660 <Error_Handler+0x8>
	...

08001664 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_MspInit+0x44>)
 800166c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166e:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <HAL_MspInit+0x44>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6613      	str	r3, [r2, #96]	; 0x60
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_MspInit+0x44>)
 8001678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_MspInit+0x44>)
 8001684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_MspInit+0x44>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	6593      	str	r3, [r2, #88]	; 0x58
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_MspInit+0x44>)
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000

080016ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b09c      	sub	sp, #112	; 0x70
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c4:	f107 0318 	add.w	r3, r7, #24
 80016c8:	2244      	movs	r2, #68	; 0x44
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f005 fa26 	bl	8006b1e <memset>
  if(hi2c->Instance==I2C1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a2d      	ldr	r2, [pc, #180]	; (800178c <HAL_I2C_MspInit+0xe0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d153      	bne.n	8001784 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016dc:	2340      	movs	r3, #64	; 0x40
 80016de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e4:	f107 0318 	add.w	r3, r7, #24
 80016e8:	4618      	mov	r0, r3
 80016ea:	f002 f8bb 	bl	8003864 <HAL_RCCEx_PeriphCLKConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016f4:	f7ff ffb0 	bl	8001658 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <HAL_I2C_MspInit+0xe4>)
 80016fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fc:	4a24      	ldr	r2, [pc, #144]	; (8001790 <HAL_I2C_MspInit+0xe4>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_I2C_MspInit+0xe4>)
 8001706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001710:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <HAL_I2C_MspInit+0xe4>)
 8001712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001714:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <HAL_I2C_MspInit+0xe4>)
 8001716:	f043 0302 	orr.w	r3, r3, #2
 800171a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171c:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <HAL_I2C_MspInit+0xe4>)
 800171e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800172c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800172e:	2312      	movs	r3, #18
 8001730:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800173a:	2304      	movs	r3, #4
 800173c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001742:	4619      	mov	r1, r3
 8001744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001748:	f000 fc64 	bl	8002014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001750:	2312      	movs	r3, #18
 8001752:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800175c:	2304      	movs	r3, #4
 800175e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001760:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001764:	4619      	mov	r1, r3
 8001766:	480b      	ldr	r0, [pc, #44]	; (8001794 <HAL_I2C_MspInit+0xe8>)
 8001768:	f000 fc54 	bl	8002014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_I2C_MspInit+0xe4>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_I2C_MspInit+0xe4>)
 8001772:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001776:	6593      	str	r3, [r2, #88]	; 0x58
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <HAL_I2C_MspInit+0xe4>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001784:	bf00      	nop
 8001786:	3770      	adds	r7, #112	; 0x70
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40005400 	.word	0x40005400
 8001790:	40021000 	.word	0x40021000
 8001794:	48000400 	.word	0x48000400

08001798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a2b      	ldr	r2, [pc, #172]	; (8001854 <HAL_TIM_Base_MspInit+0xbc>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d11c      	bne.n	80017e4 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017aa:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <HAL_TIM_Base_MspInit+0xc0>)
 80017ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ae:	4a2a      	ldr	r2, [pc, #168]	; (8001858 <HAL_TIM_Base_MspInit+0xc0>)
 80017b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017b4:	6613      	str	r3, [r2, #96]	; 0x60
 80017b6:	4b28      	ldr	r3, [pc, #160]	; (8001858 <HAL_TIM_Base_MspInit+0xc0>)
 80017b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	2019      	movs	r0, #25
 80017c8:	f000 fbef 	bl	8001faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80017cc:	2019      	movs	r0, #25
 80017ce:	f000 fc06 	bl	8001fde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	201a      	movs	r0, #26
 80017d8:	f000 fbe7 	bl	8001faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80017dc:	201a      	movs	r0, #26
 80017de:	f000 fbfe 	bl	8001fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80017e2:	e032      	b.n	800184a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM16)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a1c      	ldr	r2, [pc, #112]	; (800185c <HAL_TIM_Base_MspInit+0xc4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d114      	bne.n	8001818 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80017ee:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <HAL_TIM_Base_MspInit+0xc0>)
 80017f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f2:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_TIM_Base_MspInit+0xc0>)
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	6613      	str	r3, [r2, #96]	; 0x60
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_TIM_Base_MspInit+0xc0>)
 80017fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	2019      	movs	r0, #25
 800180c:	f000 fbcd 	bl	8001faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001810:	2019      	movs	r0, #25
 8001812:	f000 fbe4 	bl	8001fde <HAL_NVIC_EnableIRQ>
}
 8001816:	e018      	b.n	800184a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM17)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a10      	ldr	r2, [pc, #64]	; (8001860 <HAL_TIM_Base_MspInit+0xc8>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d113      	bne.n	800184a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_TIM_Base_MspInit+0xc0>)
 8001824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001826:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <HAL_TIM_Base_MspInit+0xc0>)
 8001828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800182c:	6613      	str	r3, [r2, #96]	; 0x60
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_TIM_Base_MspInit+0xc0>)
 8001830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	201a      	movs	r0, #26
 8001840:	f000 fbb3 	bl	8001faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001844:	201a      	movs	r0, #26
 8001846:	f000 fbca 	bl	8001fde <HAL_NVIC_EnableIRQ>
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40012c00 	.word	0x40012c00
 8001858:	40021000 	.word	0x40021000
 800185c:	40014400 	.word	0x40014400
 8001860:	40014800 	.word	0x40014800

08001864 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001884:	d129      	bne.n	80018da <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001886:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188a:	4a2d      	ldr	r2, [pc, #180]	; (8001940 <HAL_TIM_Encoder_MspInit+0xdc>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6593      	str	r3, [r2, #88]	; 0x58
 8001892:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	4b28      	ldr	r3, [pc, #160]	; (8001940 <HAL_TIM_Encoder_MspInit+0xdc>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	4a27      	ldr	r2, [pc, #156]	; (8001940 <HAL_TIM_Encoder_MspInit+0xdc>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018aa:	4b25      	ldr	r3, [pc, #148]	; (8001940 <HAL_TIM_Encoder_MspInit+0xdc>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018b6:	2303      	movs	r3, #3
 80018b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018c6:	2301      	movs	r3, #1
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d4:	f000 fb9e 	bl	8002014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018d8:	e02d      	b.n	8001936 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM3)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a19      	ldr	r2, [pc, #100]	; (8001944 <HAL_TIM_Encoder_MspInit+0xe0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d128      	bne.n	8001936 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018e4:	4b16      	ldr	r3, [pc, #88]	; (8001940 <HAL_TIM_Encoder_MspInit+0xdc>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	4a15      	ldr	r2, [pc, #84]	; (8001940 <HAL_TIM_Encoder_MspInit+0xdc>)
 80018ea:	f043 0302 	orr.w	r3, r3, #2
 80018ee:	6593      	str	r3, [r2, #88]	; 0x58
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_TIM_Encoder_MspInit+0xdc>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_TIM_Encoder_MspInit+0xdc>)
 80018fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001900:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001908:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_TIM_Encoder_MspInit+0xdc>)
 800190a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001914:	2350      	movs	r3, #80	; 0x50
 8001916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001924:	2302      	movs	r3, #2
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	4619      	mov	r1, r3
 800192e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001932:	f000 fb6f 	bl	8002014 <HAL_GPIO_Init>
}
 8001936:	bf00      	nop
 8001938:	3730      	adds	r7, #48	; 0x30
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000
 8001944:	40000400 	.word	0x40000400

08001948 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <HAL_TIM_MspPostInit+0x68>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d11d      	bne.n	80019a6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_TIM_MspPostInit+0x6c>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	4a11      	ldr	r2, [pc, #68]	; (80019b4 <HAL_TIM_MspPostInit+0x6c>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_TIM_MspPostInit+0x6c>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001982:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001986:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001994:	2306      	movs	r3, #6
 8001996:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	4619      	mov	r1, r3
 800199e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a2:	f000 fb37 	bl	8002014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019a6:	bf00      	nop
 80019a8:	3720      	adds	r7, #32
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40012c00 	.word	0x40012c00
 80019b4:	40021000 	.word	0x40021000

080019b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b09a      	sub	sp, #104	; 0x68
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	2244      	movs	r2, #68	; 0x44
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f005 f8a0 	bl	8006b1e <memset>
  if(huart->Instance==USART2)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1f      	ldr	r2, [pc, #124]	; (8001a60 <HAL_UART_MspInit+0xa8>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d136      	bne.n	8001a56 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	4618      	mov	r0, r3
 80019f6:	f001 ff35 	bl	8003864 <HAL_RCCEx_PeriphCLKConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a00:	f7ff fe2a 	bl	8001658 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <HAL_UART_MspInit+0xac>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a08:	4a16      	ldr	r2, [pc, #88]	; (8001a64 <HAL_UART_MspInit+0xac>)
 8001a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <HAL_UART_MspInit+0xac>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_UART_MspInit+0xac>)
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a20:	4a10      	ldr	r2, [pc, #64]	; (8001a64 <HAL_UART_MspInit+0xac>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_UART_MspInit+0xac>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001a34:	230c      	movs	r3, #12
 8001a36:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a44:	2307      	movs	r3, #7
 8001a46:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a52:	f000 fadf 	bl	8002014 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a56:	bf00      	nop
 8001a58:	3768      	adds	r7, #104	; 0x68
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40004400 	.word	0x40004400
 8001a64:	40021000 	.word	0x40021000

08001a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <NMI_Handler+0x4>

08001a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <HardFault_Handler+0x4>

08001a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <MemManage_Handler+0x4>

08001a7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <BusFault_Handler+0x4>

08001a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <UsageFault_Handler+0x4>

08001a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab4:	f000 f95e 	bl	8001d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}

08001abc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001ac0:	2080      	movs	r0, #128	; 0x80
 8001ac2:	f000 fc41 	bl	8002348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ad0:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001ad2:	f002 faa3 	bl	800401c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001ad6:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001ad8:	f002 faa0 	bl	800401c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	2000023c 	.word	0x2000023c
 8001ae4:	20000320 	.word	0x20000320

08001ae8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001aec:	4803      	ldr	r0, [pc, #12]	; (8001afc <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001aee:	f002 fa95 	bl	800401c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001af2:	4803      	ldr	r0, [pc, #12]	; (8001b00 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001af4:	f002 fa92 	bl	800401c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	2000023c 	.word	0x2000023c
 8001b00:	2000036c 	.word	0x2000036c

08001b04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return 1;
 8001b08:	2301      	movs	r3, #1
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_kill>:

int _kill(int pid, int sig)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b1e:	f005 f851 	bl	8006bc4 <__errno>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2216      	movs	r2, #22
 8001b26:	601a      	str	r2, [r3, #0]
  return -1;
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_exit>:

void _exit (int status)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ffe7 	bl	8001b14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b46:	e7fe      	b.n	8001b46 <_exit+0x12>

08001b48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	e00a      	b.n	8001b70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b5a:	f3af 8000 	nop.w
 8001b5e:	4601      	mov	r1, r0
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	60ba      	str	r2, [r7, #8]
 8001b66:	b2ca      	uxtb	r2, r1
 8001b68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dbf0      	blt.n	8001b5a <_read+0x12>
  }

  return len;
 8001b78:	687b      	ldr	r3, [r7, #4]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001baa:	605a      	str	r2, [r3, #4]
  return 0;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <_isatty>:

int _isatty(int file)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf4:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <_sbrk+0x5c>)
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <_sbrk+0x60>)
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <_sbrk+0x64>)
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <_sbrk+0x68>)
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d207      	bcs.n	8001c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c1c:	f004 ffd2 	bl	8006bc4 <__errno>
 8001c20:	4603      	mov	r3, r0
 8001c22:	220c      	movs	r2, #12
 8001c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	e009      	b.n	8001c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <_sbrk+0x64>)
 8001c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20008000 	.word	0x20008000
 8001c4c:	00000400 	.word	0x00000400
 8001c50:	20000448 	.word	0x20000448
 8001c54:	200005a0 	.word	0x200005a0

08001c58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <SystemInit+0x20>)
 8001c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <SystemInit+0x20>)
 8001c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c7c:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c80:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c82:	490e      	ldr	r1, [pc, #56]	; (8001cbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c84:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <LoopForever+0xe>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c98:	4c0b      	ldr	r4, [pc, #44]	; (8001cc8 <LoopForever+0x16>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ca6:	f7ff ffd7 	bl	8001c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001caa:	f004 ff91 	bl	8006bd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cae:	f7ff f947 	bl	8000f40 <main>

08001cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cb2:	e7fe      	b.n	8001cb2 <LoopForever>
  ldr   r0, =_estack
 8001cb4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cbc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001cc0:	08008de4 	.word	0x08008de4
  ldr r2, =_sbss
 8001cc4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001cc8:	2000059c 	.word	0x2000059c

08001ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC1_2_IRQHandler>

08001cce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd8:	2003      	movs	r0, #3
 8001cda:	f000 f95b 	bl	8001f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f000 f80e 	bl	8001d00 <HAL_InitTick>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	71fb      	strb	r3, [r7, #7]
 8001cee:	e001      	b.n	8001cf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cf0:	f7ff fcb8 	bl	8001664 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cf4:	79fb      	ldrb	r3, [r7, #7]

}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <HAL_InitTick+0x68>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d022      	beq.n	8001d5a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_InitTick+0x6c>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <HAL_InitTick+0x68>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d20:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 f966 	bl	8001ffa <HAL_SYSTICK_Config>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10f      	bne.n	8001d54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b0f      	cmp	r3, #15
 8001d38:	d809      	bhi.n	8001d4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d42:	f000 f932 	bl	8001faa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <HAL_InitTick+0x70>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	e007      	b.n	8001d5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	e004      	b.n	8001d5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e001      	b.n	8001d5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	20000004 	.word	0x20000004

08001d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_IncTick+0x1c>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_IncTick+0x20>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4413      	add	r3, r2
 8001d82:	4a03      	ldr	r2, [pc, #12]	; (8001d90 <HAL_IncTick+0x1c>)
 8001d84:	6013      	str	r3, [r2, #0]
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	2000044c 	.word	0x2000044c
 8001d94:	20000008 	.word	0x20000008

08001d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_GetTick+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	2000044c 	.word	0x2000044c

08001db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff ffee 	bl	8001d98 <HAL_GetTick>
 8001dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc8:	d004      	beq.n	8001dd4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_Delay+0x40>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dd4:	bf00      	nop
 8001dd6:	f7ff ffdf 	bl	8001d98 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d8f7      	bhi.n	8001dd6 <HAL_Delay+0x26>
  {
  }
}
 8001de6:	bf00      	nop
 8001de8:	bf00      	nop
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000008 	.word	0x20000008

08001df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e10:	4013      	ands	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e26:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	60d3      	str	r3, [r2, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <__NVIC_GetPriorityGrouping+0x18>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	f003 0307 	and.w	r3, r3, #7
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	db0b      	blt.n	8001e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	4907      	ldr	r1, [pc, #28]	; (8001e90 <__NVIC_EnableIRQ+0x38>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2001      	movs	r0, #1
 8001e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	db0a      	blt.n	8001ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	490c      	ldr	r1, [pc, #48]	; (8001ee0 <__NVIC_SetPriority+0x4c>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ebc:	e00a      	b.n	8001ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4908      	ldr	r1, [pc, #32]	; (8001ee4 <__NVIC_SetPriority+0x50>)
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	3b04      	subs	r3, #4
 8001ecc:	0112      	lsls	r2, r2, #4
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	761a      	strb	r2, [r3, #24]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000e100 	.word	0xe000e100
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f1c3 0307 	rsb	r3, r3, #7
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	bf28      	it	cs
 8001f06:	2304      	movcs	r3, #4
 8001f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d902      	bls.n	8001f18 <NVIC_EncodePriority+0x30>
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3b03      	subs	r3, #3
 8001f16:	e000      	b.n	8001f1a <NVIC_EncodePriority+0x32>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43da      	mvns	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	4313      	orrs	r3, r2
         );
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f60:	d301      	bcc.n	8001f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00f      	b.n	8001f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f66:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <SysTick_Config+0x40>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6e:	210f      	movs	r1, #15
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	f7ff ff8e 	bl	8001e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <SysTick_Config+0x40>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7e:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <SysTick_Config+0x40>)
 8001f80:	2207      	movs	r2, #7
 8001f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	e000e010 	.word	0xe000e010

08001f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff29 	bl	8001df4 <__NVIC_SetPriorityGrouping>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb8:	f7ff ff40 	bl	8001e3c <__NVIC_GetPriorityGrouping>
 8001fbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f7ff ff90 	bl	8001ee8 <NVIC_EncodePriority>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff5f 	bl	8001e94 <__NVIC_SetPriority>
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff33 	bl	8001e58 <__NVIC_EnableIRQ>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ffa4 	bl	8001f50 <SysTick_Config>
 8002008:	4603      	mov	r3, r0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002022:	e15a      	b.n	80022da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2101      	movs	r1, #1
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	4013      	ands	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 814c 	beq.w	80022d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d005      	beq.n	8002054 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002050:	2b02      	cmp	r3, #2
 8002052:	d130      	bne.n	80020b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	2203      	movs	r2, #3
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800208a:	2201      	movs	r2, #1
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	f003 0201 	and.w	r2, r3, #1
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d017      	beq.n	80020f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	2203      	movs	r2, #3
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4013      	ands	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d123      	bne.n	8002146 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3208      	adds	r2, #8
 8002106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	220f      	movs	r2, #15
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	08da      	lsrs	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3208      	adds	r2, #8
 8002140:	6939      	ldr	r1, [r7, #16]
 8002142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2203      	movs	r2, #3
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0203 	and.w	r2, r3, #3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 80a6 	beq.w	80022d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002188:	4b5b      	ldr	r3, [pc, #364]	; (80022f8 <HAL_GPIO_Init+0x2e4>)
 800218a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218c:	4a5a      	ldr	r2, [pc, #360]	; (80022f8 <HAL_GPIO_Init+0x2e4>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6613      	str	r3, [r2, #96]	; 0x60
 8002194:	4b58      	ldr	r3, [pc, #352]	; (80022f8 <HAL_GPIO_Init+0x2e4>)
 8002196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021a0:	4a56      	ldr	r2, [pc, #344]	; (80022fc <HAL_GPIO_Init+0x2e8>)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	3302      	adds	r3, #2
 80021a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	220f      	movs	r2, #15
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021ca:	d01f      	beq.n	800220c <HAL_GPIO_Init+0x1f8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a4c      	ldr	r2, [pc, #304]	; (8002300 <HAL_GPIO_Init+0x2ec>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d019      	beq.n	8002208 <HAL_GPIO_Init+0x1f4>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a4b      	ldr	r2, [pc, #300]	; (8002304 <HAL_GPIO_Init+0x2f0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d013      	beq.n	8002204 <HAL_GPIO_Init+0x1f0>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a4a      	ldr	r2, [pc, #296]	; (8002308 <HAL_GPIO_Init+0x2f4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d00d      	beq.n	8002200 <HAL_GPIO_Init+0x1ec>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a49      	ldr	r2, [pc, #292]	; (800230c <HAL_GPIO_Init+0x2f8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d007      	beq.n	80021fc <HAL_GPIO_Init+0x1e8>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a48      	ldr	r2, [pc, #288]	; (8002310 <HAL_GPIO_Init+0x2fc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d101      	bne.n	80021f8 <HAL_GPIO_Init+0x1e4>
 80021f4:	2305      	movs	r3, #5
 80021f6:	e00a      	b.n	800220e <HAL_GPIO_Init+0x1fa>
 80021f8:	2306      	movs	r3, #6
 80021fa:	e008      	b.n	800220e <HAL_GPIO_Init+0x1fa>
 80021fc:	2304      	movs	r3, #4
 80021fe:	e006      	b.n	800220e <HAL_GPIO_Init+0x1fa>
 8002200:	2303      	movs	r3, #3
 8002202:	e004      	b.n	800220e <HAL_GPIO_Init+0x1fa>
 8002204:	2302      	movs	r3, #2
 8002206:	e002      	b.n	800220e <HAL_GPIO_Init+0x1fa>
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <HAL_GPIO_Init+0x1fa>
 800220c:	2300      	movs	r3, #0
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	f002 0203 	and.w	r2, r2, #3
 8002214:	0092      	lsls	r2, r2, #2
 8002216:	4093      	lsls	r3, r2
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800221e:	4937      	ldr	r1, [pc, #220]	; (80022fc <HAL_GPIO_Init+0x2e8>)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	3302      	adds	r3, #2
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800222c:	4b39      	ldr	r3, [pc, #228]	; (8002314 <HAL_GPIO_Init+0x300>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	43db      	mvns	r3, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002250:	4a30      	ldr	r2, [pc, #192]	; (8002314 <HAL_GPIO_Init+0x300>)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002256:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <HAL_GPIO_Init+0x300>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	43db      	mvns	r3, r3
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800227a:	4a26      	ldr	r2, [pc, #152]	; (8002314 <HAL_GPIO_Init+0x300>)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <HAL_GPIO_Init+0x300>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	43db      	mvns	r3, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022a4:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <HAL_GPIO_Init+0x300>)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <HAL_GPIO_Init+0x300>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022ce:	4a11      	ldr	r2, [pc, #68]	; (8002314 <HAL_GPIO_Init+0x300>)
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	3301      	adds	r3, #1
 80022d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	fa22 f303 	lsr.w	r3, r2, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f47f ae9d 	bne.w	8002024 <HAL_GPIO_Init+0x10>
  }
}
 80022ea:	bf00      	nop
 80022ec:	bf00      	nop
 80022ee:	371c      	adds	r7, #28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40010000 	.word	0x40010000
 8002300:	48000400 	.word	0x48000400
 8002304:	48000800 	.word	0x48000800
 8002308:	48000c00 	.word	0x48000c00
 800230c:	48001000 	.word	0x48001000
 8002310:	48001400 	.word	0x48001400
 8002314:	40010400 	.word	0x40010400

08002318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	807b      	strh	r3, [r7, #2]
 8002324:	4613      	mov	r3, r2
 8002326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002328:	787b      	ldrb	r3, [r7, #1]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002334:	e002      	b.n	800233c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002336:	887a      	ldrh	r2, [r7, #2]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d006      	beq.n	800236c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800235e:	4a05      	ldr	r2, [pc, #20]	; (8002374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f806 	bl	8002378 <HAL_GPIO_EXTI_Callback>
  }
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40010400 	.word	0x40010400

08002378 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e081      	b.n	80024a4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d106      	bne.n	80023ba <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff f979 	bl	80016ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2224      	movs	r2, #36	; 0x24
 80023be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0201 	bic.w	r2, r2, #1
 80023d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d107      	bne.n	8002408 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	e006      	b.n	8002416 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002414:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d104      	bne.n	8002428 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002426:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800243a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800244a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69d9      	ldr	r1, [r3, #28]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1a      	ldr	r2, [r3, #32]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0201 	orr.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	4608      	mov	r0, r1
 80024b6:	4611      	mov	r1, r2
 80024b8:	461a      	mov	r2, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	817b      	strh	r3, [r7, #10]
 80024be:	460b      	mov	r3, r1
 80024c0:	813b      	strh	r3, [r7, #8]
 80024c2:	4613      	mov	r3, r2
 80024c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	f040 80fd 	bne.w	80026ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <HAL_I2C_Mem_Read+0x34>
 80024da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0f1      	b.n	80026d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_I2C_Mem_Read+0x4e>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e0ea      	b.n	80026d0 <HAL_I2C_Mem_Read+0x224>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002502:	f7ff fc49 	bl	8001d98 <HAL_GetTick>
 8002506:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2319      	movs	r3, #25
 800250e:	2201      	movs	r2, #1
 8002510:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f95b 	bl	80027d0 <I2C_WaitOnFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0d5      	b.n	80026d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2222      	movs	r2, #34	; 0x22
 8002528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2240      	movs	r2, #64	; 0x40
 8002530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a3a      	ldr	r2, [r7, #32]
 800253e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002544:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800254c:	88f8      	ldrh	r0, [r7, #6]
 800254e:	893a      	ldrh	r2, [r7, #8]
 8002550:	8979      	ldrh	r1, [r7, #10]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	4603      	mov	r3, r0
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 f8bf 	bl	80026e0 <I2C_RequestMemoryRead>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0ad      	b.n	80026d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	2bff      	cmp	r3, #255	; 0xff
 800257c:	d90e      	bls.n	800259c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	22ff      	movs	r2, #255	; 0xff
 8002582:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	b2da      	uxtb	r2, r3
 800258a:	8979      	ldrh	r1, [r7, #10]
 800258c:	4b52      	ldr	r3, [pc, #328]	; (80026d8 <HAL_I2C_Mem_Read+0x22c>)
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 fac3 	bl	8002b20 <I2C_TransferConfig>
 800259a:	e00f      	b.n	80025bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	8979      	ldrh	r1, [r7, #10]
 80025ae:	4b4a      	ldr	r3, [pc, #296]	; (80026d8 <HAL_I2C_Mem_Read+0x22c>)
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fab2 	bl	8002b20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c2:	2200      	movs	r2, #0
 80025c4:	2104      	movs	r1, #4
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f902 	bl	80027d0 <I2C_WaitOnFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e07c      	b.n	80026d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d034      	beq.n	800267c <HAL_I2C_Mem_Read+0x1d0>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002616:	2b00      	cmp	r3, #0
 8002618:	d130      	bne.n	800267c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002620:	2200      	movs	r2, #0
 8002622:	2180      	movs	r1, #128	; 0x80
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 f8d3 	bl	80027d0 <I2C_WaitOnFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e04d      	b.n	80026d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	2bff      	cmp	r3, #255	; 0xff
 800263c:	d90e      	bls.n	800265c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	22ff      	movs	r2, #255	; 0xff
 8002642:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	b2da      	uxtb	r2, r3
 800264a:	8979      	ldrh	r1, [r7, #10]
 800264c:	2300      	movs	r3, #0
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 fa63 	bl	8002b20 <I2C_TransferConfig>
 800265a:	e00f      	b.n	800267c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266a:	b2da      	uxtb	r2, r3
 800266c:	8979      	ldrh	r1, [r7, #10]
 800266e:	2300      	movs	r3, #0
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fa52 	bl	8002b20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d19a      	bne.n	80025bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f920 	bl	80028d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e01a      	b.n	80026d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2220      	movs	r2, #32
 80026a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_I2C_Mem_Read+0x230>)
 80026ae:	400b      	ands	r3, r1
 80026b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026ce:	2302      	movs	r3, #2
  }
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	80002400 	.word	0x80002400
 80026dc:	fe00e800 	.word	0xfe00e800

080026e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	4608      	mov	r0, r1
 80026ea:	4611      	mov	r1, r2
 80026ec:	461a      	mov	r2, r3
 80026ee:	4603      	mov	r3, r0
 80026f0:	817b      	strh	r3, [r7, #10]
 80026f2:	460b      	mov	r3, r1
 80026f4:	813b      	strh	r3, [r7, #8]
 80026f6:	4613      	mov	r3, r2
 80026f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	8979      	ldrh	r1, [r7, #10]
 8002700:	4b20      	ldr	r3, [pc, #128]	; (8002784 <I2C_RequestMemoryRead+0xa4>)
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	2300      	movs	r3, #0
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fa0a 	bl	8002b20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	69b9      	ldr	r1, [r7, #24]
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f89d 	bl	8002850 <I2C_WaitOnTXISFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e02c      	b.n	800277a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d105      	bne.n	8002732 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002726:	893b      	ldrh	r3, [r7, #8]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	629a      	str	r2, [r3, #40]	; 0x28
 8002730:	e015      	b.n	800275e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002732:	893b      	ldrh	r3, [r7, #8]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	b29b      	uxth	r3, r3
 8002738:	b2da      	uxtb	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002740:	69fa      	ldr	r2, [r7, #28]
 8002742:	69b9      	ldr	r1, [r7, #24]
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f883 	bl	8002850 <I2C_WaitOnTXISFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e012      	b.n	800277a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002754:	893b      	ldrh	r3, [r7, #8]
 8002756:	b2da      	uxtb	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2200      	movs	r2, #0
 8002766:	2140      	movs	r1, #64	; 0x40
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f831 	bl	80027d0 <I2C_WaitOnFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	80002000 	.word	0x80002000

08002788 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b02      	cmp	r3, #2
 800279c:	d103      	bne.n	80027a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2200      	movs	r2, #0
 80027a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d007      	beq.n	80027c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	619a      	str	r2, [r3, #24]
  }
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027e0:	e022      	b.n	8002828 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d01e      	beq.n	8002828 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ea:	f7ff fad5 	bl	8001d98 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d302      	bcc.n	8002800 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d113      	bne.n	8002828 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	f043 0220 	orr.w	r2, r3, #32
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e00f      	b.n	8002848 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4013      	ands	r3, r2
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	429a      	cmp	r2, r3
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	429a      	cmp	r2, r3
 8002844:	d0cd      	beq.n	80027e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800285c:	e02c      	b.n	80028b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f870 	bl	8002948 <I2C_IsErrorOccurred>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e02a      	b.n	80028c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d01e      	beq.n	80028b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800287a:	f7ff fa8d 	bl	8001d98 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	429a      	cmp	r2, r3
 8002888:	d302      	bcc.n	8002890 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d113      	bne.n	80028b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	f043 0220 	orr.w	r2, r3, #32
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e007      	b.n	80028c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d1cb      	bne.n	800285e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028dc:	e028      	b.n	8002930 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f830 	bl	8002948 <I2C_IsErrorOccurred>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e026      	b.n	8002940 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f2:	f7ff fa51 	bl	8001d98 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d302      	bcc.n	8002908 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d113      	bne.n	8002930 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	f043 0220 	orr.w	r2, r3, #32
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e007      	b.n	8002940 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b20      	cmp	r3, #32
 800293c:	d1cf      	bne.n	80028de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	2b00      	cmp	r3, #0
 8002972:	d075      	beq.n	8002a60 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2210      	movs	r2, #16
 800297a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800297c:	e056      	b.n	8002a2c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002984:	d052      	beq.n	8002a2c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002986:	f7ff fa07 	bl	8001d98 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	429a      	cmp	r2, r3
 8002994:	d302      	bcc.n	800299c <I2C_IsErrorOccurred+0x54>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d147      	bne.n	8002a2c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029be:	d12e      	bne.n	8002a1e <I2C_IsErrorOccurred+0xd6>
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029c6:	d02a      	beq.n	8002a1e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d027      	beq.n	8002a1e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029dc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80029de:	f7ff f9db 	bl	8001d98 <HAL_GetTick>
 80029e2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029e4:	e01b      	b.n	8002a1e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029e6:	f7ff f9d7 	bl	8001d98 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b19      	cmp	r3, #25
 80029f2:	d914      	bls.n	8002a1e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b20      	cmp	r3, #32
 8002a2a:	d1dc      	bne.n	80029e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	d003      	beq.n	8002a42 <I2C_IsErrorOccurred+0xfa>
 8002a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d09d      	beq.n	800297e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d103      	bne.n	8002a52 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00b      	beq.n	8002aac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	f043 0308 	orr.w	r3, r3, #8
 8002a9a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aa4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00b      	beq.n	8002ace <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01c      	beq.n	8002b10 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f7ff fe56 	bl	8002788 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6859      	ldr	r1, [r3, #4]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <I2C_IsErrorOccurred+0x1d4>)
 8002ae8:	400b      	ands	r3, r1
 8002aea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3728      	adds	r7, #40	; 0x28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	fe00e800 	.word	0xfe00e800

08002b20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	817b      	strh	r3, [r7, #10]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b32:	897b      	ldrh	r3, [r7, #10]
 8002b34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b38:	7a7b      	ldrb	r3, [r7, #9]
 8002b3a:	041b      	lsls	r3, r3, #16
 8002b3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b40:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b4e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	0d5b      	lsrs	r3, r3, #21
 8002b5a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <I2C_TransferConfig+0x60>)
 8002b60:	430b      	orrs	r3, r1
 8002b62:	43db      	mvns	r3, r3
 8002b64:	ea02 0103 	and.w	r1, r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b72:	bf00      	nop
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	03ff63ff 	.word	0x03ff63ff

08002b84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	d138      	bne.n	8002c0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e032      	b.n	8002c0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2224      	movs	r2, #36	; 0x24
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0201 	bic.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6819      	ldr	r1, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e000      	b.n	8002c0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
  }
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b085      	sub	sp, #20
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d139      	bne.n	8002ca4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e033      	b.n	8002ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2224      	movs	r2, #36	; 0x24
 8002c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0201 	bic.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e000      	b.n	8002ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ca4:	2302      	movs	r3, #2
  }
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d141      	bne.n	8002d46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cc2:	4b4b      	ldr	r3, [pc, #300]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cce:	d131      	bne.n	8002d34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cd0:	4b47      	ldr	r3, [pc, #284]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cd6:	4a46      	ldr	r2, [pc, #280]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ce0:	4b43      	ldr	r3, [pc, #268]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ce8:	4a41      	ldr	r2, [pc, #260]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cf0:	4b40      	ldr	r3, [pc, #256]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2232      	movs	r2, #50	; 0x32
 8002cf6:	fb02 f303 	mul.w	r3, r2, r3
 8002cfa:	4a3f      	ldr	r2, [pc, #252]	; (8002df8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	0c9b      	lsrs	r3, r3, #18
 8002d02:	3301      	adds	r3, #1
 8002d04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d06:	e002      	b.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d0e:	4b38      	ldr	r3, [pc, #224]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1a:	d102      	bne.n	8002d22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f2      	bne.n	8002d08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d22:	4b33      	ldr	r3, [pc, #204]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2e:	d158      	bne.n	8002de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e057      	b.n	8002de4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d34:	4b2e      	ldr	r3, [pc, #184]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d3a:	4a2d      	ldr	r2, [pc, #180]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d44:	e04d      	b.n	8002de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d4c:	d141      	bne.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d4e:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5a:	d131      	bne.n	8002dc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d5c:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d62:	4a23      	ldr	r2, [pc, #140]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d6c:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d74:	4a1e      	ldr	r2, [pc, #120]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2232      	movs	r2, #50	; 0x32
 8002d82:	fb02 f303 	mul.w	r3, r2, r3
 8002d86:	4a1c      	ldr	r2, [pc, #112]	; (8002df8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	0c9b      	lsrs	r3, r3, #18
 8002d8e:	3301      	adds	r3, #1
 8002d90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d92:	e002      	b.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da6:	d102      	bne.n	8002dae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f2      	bne.n	8002d94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dba:	d112      	bne.n	8002de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e011      	b.n	8002de4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002dd0:	e007      	b.n	8002de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dd2:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dda:	4a05      	ldr	r2, [pc, #20]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ddc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002de0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	40007000 	.word	0x40007000
 8002df4:	20000000 	.word	0x20000000
 8002df8:	431bde83 	.word	0x431bde83

08002dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e306      	b.n	800341c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d075      	beq.n	8002f06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e1a:	4b97      	ldr	r3, [pc, #604]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e24:	4b94      	ldr	r3, [pc, #592]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	2b0c      	cmp	r3, #12
 8002e32:	d102      	bne.n	8002e3a <HAL_RCC_OscConfig+0x3e>
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d002      	beq.n	8002e40 <HAL_RCC_OscConfig+0x44>
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d10b      	bne.n	8002e58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e40:	4b8d      	ldr	r3, [pc, #564]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d05b      	beq.n	8002f04 <HAL_RCC_OscConfig+0x108>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d157      	bne.n	8002f04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e2e1      	b.n	800341c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e60:	d106      	bne.n	8002e70 <HAL_RCC_OscConfig+0x74>
 8002e62:	4b85      	ldr	r3, [pc, #532]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a84      	ldr	r2, [pc, #528]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	e01d      	b.n	8002eac <HAL_RCC_OscConfig+0xb0>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x98>
 8002e7a:	4b7f      	ldr	r3, [pc, #508]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a7e      	ldr	r2, [pc, #504]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	4b7c      	ldr	r3, [pc, #496]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a7b      	ldr	r2, [pc, #492]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e00b      	b.n	8002eac <HAL_RCC_OscConfig+0xb0>
 8002e94:	4b78      	ldr	r3, [pc, #480]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a77      	ldr	r2, [pc, #476]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	4b75      	ldr	r3, [pc, #468]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a74      	ldr	r2, [pc, #464]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d013      	beq.n	8002edc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe ff70 	bl	8001d98 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ebc:	f7fe ff6c 	bl	8001d98 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b64      	cmp	r3, #100	; 0x64
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e2a6      	b.n	800341c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ece:	4b6a      	ldr	r3, [pc, #424]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0xc0>
 8002eda:	e014      	b.n	8002f06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fe ff5c 	bl	8001d98 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7fe ff58 	bl	8001d98 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	; 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e292      	b.n	800341c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ef6:	4b60      	ldr	r3, [pc, #384]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0xe8>
 8002f02:	e000      	b.n	8002f06 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d075      	beq.n	8002ffe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f12:	4b59      	ldr	r3, [pc, #356]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f1c:	4b56      	ldr	r3, [pc, #344]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b0c      	cmp	r3, #12
 8002f2a:	d102      	bne.n	8002f32 <HAL_RCC_OscConfig+0x136>
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d002      	beq.n	8002f38 <HAL_RCC_OscConfig+0x13c>
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d11f      	bne.n	8002f78 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f38:	4b4f      	ldr	r3, [pc, #316]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_OscConfig+0x154>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e265      	b.n	800341c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f50:	4b49      	ldr	r3, [pc, #292]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	061b      	lsls	r3, r3, #24
 8002f5e:	4946      	ldr	r1, [pc, #280]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f64:	4b45      	ldr	r3, [pc, #276]	; (800307c <HAL_RCC_OscConfig+0x280>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fe fec9 	bl	8001d00 <HAL_InitTick>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d043      	beq.n	8002ffc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e251      	b.n	800341c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d023      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f80:	4b3d      	ldr	r3, [pc, #244]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a3c      	ldr	r2, [pc, #240]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8c:	f7fe ff04 	bl	8001d98 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f94:	f7fe ff00 	bl	8001d98 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e23a      	b.n	800341c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fa6:	4b34      	ldr	r3, [pc, #208]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb2:	4b31      	ldr	r3, [pc, #196]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	061b      	lsls	r3, r3, #24
 8002fc0:	492d      	ldr	r1, [pc, #180]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	604b      	str	r3, [r1, #4]
 8002fc6:	e01a      	b.n	8002ffe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2a      	ldr	r2, [pc, #168]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002fce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fee0 	bl	8001d98 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fdc:	f7fe fedc 	bl	8001d98 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e216      	b.n	800341c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fee:	4b22      	ldr	r3, [pc, #136]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x1e0>
 8002ffa:	e000      	b.n	8002ffe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ffc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d041      	beq.n	800308e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d01c      	beq.n	800304c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003012:	4b19      	ldr	r3, [pc, #100]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8003014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003018:	4a17      	ldr	r2, [pc, #92]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fe feb9 	bl	8001d98 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302a:	f7fe feb5 	bl	8001d98 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e1ef      	b.n	800341c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800303c:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 800303e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0ef      	beq.n	800302a <HAL_RCC_OscConfig+0x22e>
 800304a:	e020      	b.n	800308e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 800304e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003052:	4a09      	ldr	r2, [pc, #36]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305c:	f7fe fe9c 	bl	8001d98 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003062:	e00d      	b.n	8003080 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003064:	f7fe fe98 	bl	8001d98 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d906      	bls.n	8003080 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e1d2      	b.n	800341c <HAL_RCC_OscConfig+0x620>
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000
 800307c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003080:	4b8c      	ldr	r3, [pc, #560]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 8003082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1ea      	bne.n	8003064 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 80a6 	beq.w	80031e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309c:	2300      	movs	r3, #0
 800309e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030a0:	4b84      	ldr	r3, [pc, #528]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_OscConfig+0x2b4>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x2b6>
 80030b0:	2300      	movs	r3, #0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00d      	beq.n	80030d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b6:	4b7f      	ldr	r3, [pc, #508]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	4a7e      	ldr	r2, [pc, #504]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 80030bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c0:	6593      	str	r3, [r2, #88]	; 0x58
 80030c2:	4b7c      	ldr	r3, [pc, #496]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030ce:	2301      	movs	r3, #1
 80030d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d2:	4b79      	ldr	r3, [pc, #484]	; (80032b8 <HAL_RCC_OscConfig+0x4bc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d118      	bne.n	8003110 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030de:	4b76      	ldr	r3, [pc, #472]	; (80032b8 <HAL_RCC_OscConfig+0x4bc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a75      	ldr	r2, [pc, #468]	; (80032b8 <HAL_RCC_OscConfig+0x4bc>)
 80030e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ea:	f7fe fe55 	bl	8001d98 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f2:	f7fe fe51 	bl	8001d98 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e18b      	b.n	800341c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003104:	4b6c      	ldr	r3, [pc, #432]	; (80032b8 <HAL_RCC_OscConfig+0x4bc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d108      	bne.n	800312a <HAL_RCC_OscConfig+0x32e>
 8003118:	4b66      	ldr	r3, [pc, #408]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	4a65      	ldr	r2, [pc, #404]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003128:	e024      	b.n	8003174 <HAL_RCC_OscConfig+0x378>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b05      	cmp	r3, #5
 8003130:	d110      	bne.n	8003154 <HAL_RCC_OscConfig+0x358>
 8003132:	4b60      	ldr	r3, [pc, #384]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 8003134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003138:	4a5e      	ldr	r2, [pc, #376]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 800313a:	f043 0304 	orr.w	r3, r3, #4
 800313e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003142:	4b5c      	ldr	r3, [pc, #368]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 8003144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003148:	4a5a      	ldr	r2, [pc, #360]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003152:	e00f      	b.n	8003174 <HAL_RCC_OscConfig+0x378>
 8003154:	4b57      	ldr	r3, [pc, #348]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	4a56      	ldr	r2, [pc, #344]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003164:	4b53      	ldr	r3, [pc, #332]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316a:	4a52      	ldr	r2, [pc, #328]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 800316c:	f023 0304 	bic.w	r3, r3, #4
 8003170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d016      	beq.n	80031aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317c:	f7fe fe0c 	bl	8001d98 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003182:	e00a      	b.n	800319a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7fe fe08 	bl	8001d98 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e140      	b.n	800341c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800319a:	4b46      	ldr	r3, [pc, #280]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 800319c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0ed      	beq.n	8003184 <HAL_RCC_OscConfig+0x388>
 80031a8:	e015      	b.n	80031d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031aa:	f7fe fdf5 	bl	8001d98 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fe fdf1 	bl	8001d98 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e129      	b.n	800341c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031c8:	4b3a      	ldr	r3, [pc, #232]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1ed      	bne.n	80031b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031d6:	7ffb      	ldrb	r3, [r7, #31]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d105      	bne.n	80031e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031dc:	4b35      	ldr	r3, [pc, #212]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 80031de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e0:	4a34      	ldr	r2, [pc, #208]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 80031e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d03c      	beq.n	800326e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01c      	beq.n	8003236 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031fc:	4b2d      	ldr	r3, [pc, #180]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 80031fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003202:	4a2c      	ldr	r2, [pc, #176]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320c:	f7fe fdc4 	bl	8001d98 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003214:	f7fe fdc0 	bl	8001d98 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e0fa      	b.n	800341c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003226:	4b23      	ldr	r3, [pc, #140]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 8003228:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0ef      	beq.n	8003214 <HAL_RCC_OscConfig+0x418>
 8003234:	e01b      	b.n	800326e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003236:	4b1f      	ldr	r3, [pc, #124]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 8003238:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800323c:	4a1d      	ldr	r2, [pc, #116]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003246:	f7fe fda7 	bl	8001d98 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800324e:	f7fe fda3 	bl	8001d98 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e0dd      	b.n	800341c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003260:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 8003262:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1ef      	bne.n	800324e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80d1 	beq.w	800341a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003278:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 030c 	and.w	r3, r3, #12
 8003280:	2b0c      	cmp	r3, #12
 8003282:	f000 808b 	beq.w	800339c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d15e      	bne.n	800334c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a08      	ldr	r2, [pc, #32]	; (80032b4 <HAL_RCC_OscConfig+0x4b8>)
 8003294:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fe fd7d 	bl	8001d98 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a0:	e00c      	b.n	80032bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a2:	f7fe fd79 	bl	8001d98 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d905      	bls.n	80032bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e0b3      	b.n	800341c <HAL_RCC_OscConfig+0x620>
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032bc:	4b59      	ldr	r3, [pc, #356]	; (8003424 <HAL_RCC_OscConfig+0x628>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1ec      	bne.n	80032a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032c8:	4b56      	ldr	r3, [pc, #344]	; (8003424 <HAL_RCC_OscConfig+0x628>)
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	4b56      	ldr	r3, [pc, #344]	; (8003428 <HAL_RCC_OscConfig+0x62c>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6a11      	ldr	r1, [r2, #32]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032d8:	3a01      	subs	r2, #1
 80032da:	0112      	lsls	r2, r2, #4
 80032dc:	4311      	orrs	r1, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80032e2:	0212      	lsls	r2, r2, #8
 80032e4:	4311      	orrs	r1, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032ea:	0852      	lsrs	r2, r2, #1
 80032ec:	3a01      	subs	r2, #1
 80032ee:	0552      	lsls	r2, r2, #21
 80032f0:	4311      	orrs	r1, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032f6:	0852      	lsrs	r2, r2, #1
 80032f8:	3a01      	subs	r2, #1
 80032fa:	0652      	lsls	r2, r2, #25
 80032fc:	4311      	orrs	r1, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003302:	06d2      	lsls	r2, r2, #27
 8003304:	430a      	orrs	r2, r1
 8003306:	4947      	ldr	r1, [pc, #284]	; (8003424 <HAL_RCC_OscConfig+0x628>)
 8003308:	4313      	orrs	r3, r2
 800330a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800330c:	4b45      	ldr	r3, [pc, #276]	; (8003424 <HAL_RCC_OscConfig+0x628>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a44      	ldr	r2, [pc, #272]	; (8003424 <HAL_RCC_OscConfig+0x628>)
 8003312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003316:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003318:	4b42      	ldr	r3, [pc, #264]	; (8003424 <HAL_RCC_OscConfig+0x628>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4a41      	ldr	r2, [pc, #260]	; (8003424 <HAL_RCC_OscConfig+0x628>)
 800331e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003322:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fe fd38 	bl	8001d98 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332c:	f7fe fd34 	bl	8001d98 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e06e      	b.n	800341c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800333e:	4b39      	ldr	r3, [pc, #228]	; (8003424 <HAL_RCC_OscConfig+0x628>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x530>
 800334a:	e066      	b.n	800341a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334c:	4b35      	ldr	r3, [pc, #212]	; (8003424 <HAL_RCC_OscConfig+0x628>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a34      	ldr	r2, [pc, #208]	; (8003424 <HAL_RCC_OscConfig+0x628>)
 8003352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003356:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003358:	4b32      	ldr	r3, [pc, #200]	; (8003424 <HAL_RCC_OscConfig+0x628>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4a31      	ldr	r2, [pc, #196]	; (8003424 <HAL_RCC_OscConfig+0x628>)
 800335e:	f023 0303 	bic.w	r3, r3, #3
 8003362:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003364:	4b2f      	ldr	r3, [pc, #188]	; (8003424 <HAL_RCC_OscConfig+0x628>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4a2e      	ldr	r2, [pc, #184]	; (8003424 <HAL_RCC_OscConfig+0x628>)
 800336a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800336e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003372:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe fd10 	bl	8001d98 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337c:	f7fe fd0c 	bl	8001d98 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e046      	b.n	800341c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338e:	4b25      	ldr	r3, [pc, #148]	; (8003424 <HAL_RCC_OscConfig+0x628>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x580>
 800339a:	e03e      	b.n	800341a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e039      	b.n	800341c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80033a8:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <HAL_RCC_OscConfig+0x628>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f003 0203 	and.w	r2, r3, #3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d12c      	bne.n	8003416 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	3b01      	subs	r3, #1
 80033c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d123      	bne.n	8003416 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033da:	429a      	cmp	r2, r3
 80033dc:	d11b      	bne.n	8003416 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d113      	bne.n	8003416 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	085b      	lsrs	r3, r3, #1
 80033fa:	3b01      	subs	r3, #1
 80033fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033fe:	429a      	cmp	r2, r3
 8003400:	d109      	bne.n	8003416 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	3b01      	subs	r3, #1
 8003410:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d001      	beq.n	800341a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3720      	adds	r7, #32
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40021000 	.word	0x40021000
 8003428:	019f800c 	.word	0x019f800c

0800342c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e11e      	b.n	8003682 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003444:	4b91      	ldr	r3, [pc, #580]	; (800368c <HAL_RCC_ClockConfig+0x260>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d910      	bls.n	8003474 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	4b8e      	ldr	r3, [pc, #568]	; (800368c <HAL_RCC_ClockConfig+0x260>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 020f 	bic.w	r2, r3, #15
 800345a:	498c      	ldr	r1, [pc, #560]	; (800368c <HAL_RCC_ClockConfig+0x260>)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003462:	4b8a      	ldr	r3, [pc, #552]	; (800368c <HAL_RCC_ClockConfig+0x260>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e106      	b.n	8003682 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d073      	beq.n	8003568 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d129      	bne.n	80034dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003488:	4b81      	ldr	r3, [pc, #516]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0f4      	b.n	8003682 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003498:	f000 f99e 	bl	80037d8 <RCC_GetSysClockFreqFromPLLSource>
 800349c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4a7c      	ldr	r2, [pc, #496]	; (8003694 <HAL_RCC_ClockConfig+0x268>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d93f      	bls.n	8003526 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034a6:	4b7a      	ldr	r3, [pc, #488]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d033      	beq.n	8003526 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d12f      	bne.n	8003526 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034c6:	4b72      	ldr	r3, [pc, #456]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ce:	4a70      	ldr	r2, [pc, #448]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 80034d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034d6:	2380      	movs	r3, #128	; 0x80
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	e024      	b.n	8003526 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d107      	bne.n	80034f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034e4:	4b6a      	ldr	r3, [pc, #424]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d109      	bne.n	8003504 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0c6      	b.n	8003682 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034f4:	4b66      	ldr	r3, [pc, #408]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0be      	b.n	8003682 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003504:	f000 f8ce 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8003508:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4a61      	ldr	r2, [pc, #388]	; (8003694 <HAL_RCC_ClockConfig+0x268>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d909      	bls.n	8003526 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003512:	4b5f      	ldr	r3, [pc, #380]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800351a:	4a5d      	ldr	r2, [pc, #372]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 800351c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003520:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003526:	4b5a      	ldr	r3, [pc, #360]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f023 0203 	bic.w	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4957      	ldr	r1, [pc, #348]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003534:	4313      	orrs	r3, r2
 8003536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003538:	f7fe fc2e 	bl	8001d98 <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	e00a      	b.n	8003556 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003540:	f7fe fc2a 	bl	8001d98 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	; 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e095      	b.n	8003682 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	4b4e      	ldr	r3, [pc, #312]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 020c 	and.w	r2, r3, #12
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	429a      	cmp	r2, r3
 8003566:	d1eb      	bne.n	8003540 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d023      	beq.n	80035bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003580:	4b43      	ldr	r3, [pc, #268]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4a42      	ldr	r2, [pc, #264]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003586:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800358a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003598:	4b3d      	ldr	r3, [pc, #244]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80035a0:	4a3b      	ldr	r2, [pc, #236]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 80035a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a8:	4b39      	ldr	r3, [pc, #228]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4936      	ldr	r1, [pc, #216]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
 80035ba:	e008      	b.n	80035ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b80      	cmp	r3, #128	; 0x80
 80035c0:	d105      	bne.n	80035ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80035c2:	4b33      	ldr	r3, [pc, #204]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	4a32      	ldr	r2, [pc, #200]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 80035c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035ce:	4b2f      	ldr	r3, [pc, #188]	; (800368c <HAL_RCC_ClockConfig+0x260>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d21d      	bcs.n	8003618 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035dc:	4b2b      	ldr	r3, [pc, #172]	; (800368c <HAL_RCC_ClockConfig+0x260>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 020f 	bic.w	r2, r3, #15
 80035e4:	4929      	ldr	r1, [pc, #164]	; (800368c <HAL_RCC_ClockConfig+0x260>)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035ec:	f7fe fbd4 	bl	8001d98 <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	e00a      	b.n	800360a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f4:	f7fe fbd0 	bl	8001d98 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e03b      	b.n	8003682 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360a:	4b20      	ldr	r3, [pc, #128]	; (800368c <HAL_RCC_ClockConfig+0x260>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d1ed      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003624:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4917      	ldr	r1, [pc, #92]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003642:	4b13      	ldr	r3, [pc, #76]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	490f      	ldr	r1, [pc, #60]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003656:	f000 f825 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 800365a:	4602      	mov	r2, r0
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	490c      	ldr	r1, [pc, #48]	; (8003698 <HAL_RCC_ClockConfig+0x26c>)
 8003668:	5ccb      	ldrb	r3, [r1, r3]
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	fa22 f303 	lsr.w	r3, r2, r3
 8003672:	4a0a      	ldr	r2, [pc, #40]	; (800369c <HAL_RCC_ClockConfig+0x270>)
 8003674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003676:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <HAL_RCC_ClockConfig+0x274>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fe fb40 	bl	8001d00 <HAL_InitTick>
 8003680:	4603      	mov	r3, r0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40022000 	.word	0x40022000
 8003690:	40021000 	.word	0x40021000
 8003694:	04c4b400 	.word	0x04c4b400
 8003698:	08008a20 	.word	0x08008a20
 800369c:	20000000 	.word	0x20000000
 80036a0:	20000004 	.word	0x20000004

080036a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80036aa:	4b2c      	ldr	r3, [pc, #176]	; (800375c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d102      	bne.n	80036bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036b6:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	e047      	b.n	800374c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036bc:	4b27      	ldr	r3, [pc, #156]	; (800375c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d102      	bne.n	80036ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036c8:	4b26      	ldr	r3, [pc, #152]	; (8003764 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	e03e      	b.n	800374c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80036ce:	4b23      	ldr	r3, [pc, #140]	; (800375c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b0c      	cmp	r3, #12
 80036d8:	d136      	bne.n	8003748 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036da:	4b20      	ldr	r3, [pc, #128]	; (800375c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036e4:	4b1d      	ldr	r3, [pc, #116]	; (800375c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	3301      	adds	r3, #1
 80036f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d10c      	bne.n	8003712 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036f8:	4a1a      	ldr	r2, [pc, #104]	; (8003764 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003700:	4a16      	ldr	r2, [pc, #88]	; (800375c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003702:	68d2      	ldr	r2, [r2, #12]
 8003704:	0a12      	lsrs	r2, r2, #8
 8003706:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	617b      	str	r3, [r7, #20]
      break;
 8003710:	e00c      	b.n	800372c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003712:	4a13      	ldr	r2, [pc, #76]	; (8003760 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	fbb2 f3f3 	udiv	r3, r2, r3
 800371a:	4a10      	ldr	r2, [pc, #64]	; (800375c <HAL_RCC_GetSysClockFreq+0xb8>)
 800371c:	68d2      	ldr	r2, [r2, #12]
 800371e:	0a12      	lsrs	r2, r2, #8
 8003720:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003724:	fb02 f303 	mul.w	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]
      break;
 800372a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_GetSysClockFreq+0xb8>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	0e5b      	lsrs	r3, r3, #25
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	3301      	adds	r3, #1
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	e001      	b.n	800374c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800374c:	693b      	ldr	r3, [r7, #16]
}
 800374e:	4618      	mov	r0, r3
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
 8003760:	00f42400 	.word	0x00f42400
 8003764:	007a1200 	.word	0x007a1200

08003768 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <HAL_RCC_GetHCLKFreq+0x14>)
 800376e:	681b      	ldr	r3, [r3, #0]
}
 8003770:	4618      	mov	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	20000000 	.word	0x20000000

08003780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003784:	f7ff fff0 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 8003788:	4602      	mov	r2, r0
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	4904      	ldr	r1, [pc, #16]	; (80037a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003796:	5ccb      	ldrb	r3, [r1, r3]
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000
 80037a8:	08008a30 	.word	0x08008a30

080037ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037b0:	f7ff ffda 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 80037b4:	4602      	mov	r2, r0
 80037b6:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	0adb      	lsrs	r3, r3, #11
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	4904      	ldr	r1, [pc, #16]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037c2:	5ccb      	ldrb	r3, [r1, r3]
 80037c4:	f003 031f 	and.w	r3, r3, #31
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40021000 	.word	0x40021000
 80037d4:	08008a30 	.word	0x08008a30

080037d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037de:	4b1e      	ldr	r3, [pc, #120]	; (8003858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037e8:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	091b      	lsrs	r3, r3, #4
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	3301      	adds	r3, #1
 80037f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d10c      	bne.n	8003816 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037fc:	4a17      	ldr	r2, [pc, #92]	; (800385c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	fbb2 f3f3 	udiv	r3, r2, r3
 8003804:	4a14      	ldr	r2, [pc, #80]	; (8003858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003806:	68d2      	ldr	r2, [r2, #12]
 8003808:	0a12      	lsrs	r2, r2, #8
 800380a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	617b      	str	r3, [r7, #20]
    break;
 8003814:	e00c      	b.n	8003830 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003816:	4a12      	ldr	r2, [pc, #72]	; (8003860 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
 800381e:	4a0e      	ldr	r2, [pc, #56]	; (8003858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003820:	68d2      	ldr	r2, [r2, #12]
 8003822:	0a12      	lsrs	r2, r2, #8
 8003824:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003828:	fb02 f303 	mul.w	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]
    break;
 800382e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	0e5b      	lsrs	r3, r3, #25
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	3301      	adds	r3, #1
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	fbb2 f3f3 	udiv	r3, r2, r3
 8003848:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800384a:	687b      	ldr	r3, [r7, #4]
}
 800384c:	4618      	mov	r0, r3
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	40021000 	.word	0x40021000
 800385c:	007a1200 	.word	0x007a1200
 8003860:	00f42400 	.word	0x00f42400

08003864 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800386c:	2300      	movs	r3, #0
 800386e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003870:	2300      	movs	r3, #0
 8003872:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8098 	beq.w	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003882:	2300      	movs	r3, #0
 8003884:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003886:	4b43      	ldr	r3, [pc, #268]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10d      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003892:	4b40      	ldr	r3, [pc, #256]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	4a3f      	ldr	r2, [pc, #252]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389c:	6593      	str	r3, [r2, #88]	; 0x58
 800389e:	4b3d      	ldr	r3, [pc, #244]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038aa:	2301      	movs	r3, #1
 80038ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ae:	4b3a      	ldr	r3, [pc, #232]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a39      	ldr	r2, [pc, #228]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038ba:	f7fe fa6d 	bl	8001d98 <HAL_GetTick>
 80038be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038c0:	e009      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c2:	f7fe fa69 	bl	8001d98 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d902      	bls.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	74fb      	strb	r3, [r7, #19]
        break;
 80038d4:	e005      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038d6:	4b30      	ldr	r3, [pc, #192]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0ef      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d159      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038e8:	4b2a      	ldr	r3, [pc, #168]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d01e      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	429a      	cmp	r2, r3
 8003902:	d019      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003904:	4b23      	ldr	r3, [pc, #140]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003910:	4b20      	ldr	r3, [pc, #128]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003916:	4a1f      	ldr	r2, [pc, #124]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003920:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003926:	4a1b      	ldr	r2, [pc, #108]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003930:	4a18      	ldr	r2, [pc, #96]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d016      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003942:	f7fe fa29 	bl	8001d98 <HAL_GetTick>
 8003946:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003948:	e00b      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394a:	f7fe fa25 	bl	8001d98 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f241 3288 	movw	r2, #5000	; 0x1388
 8003958:	4293      	cmp	r3, r2
 800395a:	d902      	bls.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	74fb      	strb	r3, [r7, #19]
            break;
 8003960:	e006      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003962:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ec      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003970:	7cfb      	ldrb	r3, [r7, #19]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10b      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003976:	4b07      	ldr	r3, [pc, #28]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	4903      	ldr	r1, [pc, #12]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800398c:	e008      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800398e:	7cfb      	ldrb	r3, [r7, #19]
 8003990:	74bb      	strb	r3, [r7, #18]
 8003992:	e005      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003994:	40021000 	.word	0x40021000
 8003998:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399c:	7cfb      	ldrb	r3, [r7, #19]
 800399e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039a0:	7c7b      	ldrb	r3, [r7, #17]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d105      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a6:	4ba6      	ldr	r3, [pc, #664]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	4aa5      	ldr	r2, [pc, #660]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039be:	4ba0      	ldr	r3, [pc, #640]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c4:	f023 0203 	bic.w	r2, r3, #3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	499c      	ldr	r1, [pc, #624]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039e0:	4b97      	ldr	r3, [pc, #604]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	f023 020c 	bic.w	r2, r3, #12
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	4994      	ldr	r1, [pc, #592]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a02:	4b8f      	ldr	r3, [pc, #572]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	498b      	ldr	r1, [pc, #556]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a24:	4b86      	ldr	r3, [pc, #536]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	4983      	ldr	r1, [pc, #524]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a46:	4b7e      	ldr	r3, [pc, #504]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	497a      	ldr	r1, [pc, #488]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00a      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a68:	4b75      	ldr	r3, [pc, #468]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	4972      	ldr	r1, [pc, #456]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a8a:	4b6d      	ldr	r3, [pc, #436]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	4969      	ldr	r1, [pc, #420]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aac:	4b64      	ldr	r3, [pc, #400]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	4961      	ldr	r1, [pc, #388]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ace:	4b5c      	ldr	r3, [pc, #368]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	4958      	ldr	r1, [pc, #352]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d015      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003af0:	4b53      	ldr	r3, [pc, #332]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	4950      	ldr	r1, [pc, #320]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b0e:	d105      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b10:	4b4b      	ldr	r3, [pc, #300]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4a4a      	ldr	r2, [pc, #296]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d015      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b28:	4b45      	ldr	r3, [pc, #276]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	4942      	ldr	r1, [pc, #264]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b46:	d105      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b48:	4b3d      	ldr	r3, [pc, #244]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4a3c      	ldr	r2, [pc, #240]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b52:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d015      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b60:	4b37      	ldr	r3, [pc, #220]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	4934      	ldr	r1, [pc, #208]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b7e:	d105      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b80:	4b2f      	ldr	r3, [pc, #188]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	4a2e      	ldr	r2, [pc, #184]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d015      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b98:	4b29      	ldr	r3, [pc, #164]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba6:	4926      	ldr	r1, [pc, #152]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bb6:	d105      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bb8:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4a20      	ldr	r2, [pc, #128]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bc2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d015      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bd0:	4b1b      	ldr	r3, [pc, #108]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	4918      	ldr	r1, [pc, #96]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bee:	d105      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bf0:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	4a12      	ldr	r2, [pc, #72]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bfa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d015      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c08:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c16:	490a      	ldr	r1, [pc, #40]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c26:	d105      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c34:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000

08003c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e049      	b.n	8003cea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fd fd94 	bl	8001798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4619      	mov	r1, r3
 8003c82:	4610      	mov	r0, r2
 8003c84:	f000 fd8a 	bl	800479c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e049      	b.n	8003d98 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d106      	bne.n	8003d1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f841 	bl	8003da0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2202      	movs	r2, #2
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4610      	mov	r0, r2
 8003d32:	f000 fd33 	bl	800479c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e097      	b.n	8003ef8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7fd fd41 	bl	8001864 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2202      	movs	r2, #2
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003df8:	f023 0307 	bic.w	r3, r3, #7
 8003dfc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3304      	adds	r3, #4
 8003e06:	4619      	mov	r1, r3
 8003e08:	4610      	mov	r0, r2
 8003e0a:	f000 fcc7 	bl	800479c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e36:	f023 0303 	bic.w	r3, r3, #3
 8003e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	4313      	orrs	r3, r2
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e54:	f023 030c 	bic.w	r3, r3, #12
 8003e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	021b      	lsls	r3, r3, #8
 8003e70:	4313      	orrs	r3, r2
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	011a      	lsls	r2, r3, #4
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	031b      	lsls	r3, r3, #12
 8003e84:	4313      	orrs	r3, r2
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003e9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d110      	bne.n	8003f52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d102      	bne.n	8003f3c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f36:	7b7b      	ldrb	r3, [r7, #13]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d001      	beq.n	8003f40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e069      	b.n	8004014 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f50:	e031      	b.n	8003fb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d110      	bne.n	8003f7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f58:	7bbb      	ldrb	r3, [r7, #14]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d102      	bne.n	8003f64 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f5e:	7b3b      	ldrb	r3, [r7, #12]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d001      	beq.n	8003f68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e055      	b.n	8004014 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f78:	e01d      	b.n	8003fb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d108      	bne.n	8003f92 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f80:	7bbb      	ldrb	r3, [r7, #14]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d105      	bne.n	8003f92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f86:	7b7b      	ldrb	r3, [r7, #13]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d102      	bne.n	8003f92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f8c:	7b3b      	ldrb	r3, [r7, #12]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d001      	beq.n	8003f96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e03e      	b.n	8004014 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_TIM_Encoder_Start+0xc4>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d008      	beq.n	8003fd4 <HAL_TIM_Encoder_Start+0xd4>
 8003fc2:	e00f      	b.n	8003fe4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 f807 	bl	8004fe0 <TIM_CCxChannelCmd>
      break;
 8003fd2:	e016      	b.n	8004002 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	2104      	movs	r1, #4
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 ffff 	bl	8004fe0 <TIM_CCxChannelCmd>
      break;
 8003fe2:	e00e      	b.n	8004002 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	2100      	movs	r1, #0
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fff7 	bl	8004fe0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	2104      	movs	r1, #4
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fff0 	bl	8004fe0 <TIM_CCxChannelCmd>
      break;
 8004000:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0201 	orr.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b02      	cmp	r3, #2
 8004030:	d122      	bne.n	8004078 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b02      	cmp	r3, #2
 800403e:	d11b      	bne.n	8004078 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0202 	mvn.w	r2, #2
 8004048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fb7e 	bl	8004760 <HAL_TIM_IC_CaptureCallback>
 8004064:	e005      	b.n	8004072 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fb70 	bl	800474c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fb81 	bl	8004774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b04      	cmp	r3, #4
 8004084:	d122      	bne.n	80040cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b04      	cmp	r3, #4
 8004092:	d11b      	bne.n	80040cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0204 	mvn.w	r2, #4
 800409c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2202      	movs	r2, #2
 80040a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fb54 	bl	8004760 <HAL_TIM_IC_CaptureCallback>
 80040b8:	e005      	b.n	80040c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fb46 	bl	800474c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fb57 	bl	8004774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d122      	bne.n	8004120 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d11b      	bne.n	8004120 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0208 	mvn.w	r2, #8
 80040f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2204      	movs	r2, #4
 80040f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fb2a 	bl	8004760 <HAL_TIM_IC_CaptureCallback>
 800410c:	e005      	b.n	800411a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fb1c 	bl	800474c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 fb2d 	bl	8004774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0310 	and.w	r3, r3, #16
 800412a:	2b10      	cmp	r3, #16
 800412c:	d122      	bne.n	8004174 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b10      	cmp	r3, #16
 800413a:	d11b      	bne.n	8004174 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0210 	mvn.w	r2, #16
 8004144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2208      	movs	r2, #8
 800414a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 fb00 	bl	8004760 <HAL_TIM_IC_CaptureCallback>
 8004160:	e005      	b.n	800416e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 faf2 	bl	800474c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fb03 	bl	8004774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b01      	cmp	r3, #1
 8004180:	d10e      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b01      	cmp	r3, #1
 800418e:	d107      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0201 	mvn.w	r2, #1
 8004198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 facc 	bl	8004738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041aa:	2b80      	cmp	r3, #128	; 0x80
 80041ac:	d10e      	bne.n	80041cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b8:	2b80      	cmp	r3, #128	; 0x80
 80041ba:	d107      	bne.n	80041cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f001 f885 	bl	80052d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041da:	d10e      	bne.n	80041fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e6:	2b80      	cmp	r3, #128	; 0x80
 80041e8:	d107      	bne.n	80041fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f001 f878 	bl	80052ea <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004204:	2b40      	cmp	r3, #64	; 0x40
 8004206:	d10e      	bne.n	8004226 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004212:	2b40      	cmp	r3, #64	; 0x40
 8004214:	d107      	bne.n	8004226 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800421e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fab1 	bl	8004788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b20      	cmp	r3, #32
 8004232:	d10e      	bne.n	8004252 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f003 0320 	and.w	r3, r3, #32
 800423e:	2b20      	cmp	r3, #32
 8004240:	d107      	bne.n	8004252 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f06f 0220 	mvn.w	r2, #32
 800424a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f001 f838 	bl	80052c2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800425c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004260:	d10f      	bne.n	8004282 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800426c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004270:	d107      	bne.n	8004282 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800427a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f001 f83e 	bl	80052fe <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800428c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004290:	d10f      	bne.n	80042b2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800429c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042a0:	d107      	bne.n	80042b2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80042aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f001 f830 	bl	8005312 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c0:	d10f      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042d0:	d107      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80042da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f001 f822 	bl	8005326 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042f0:	d10f      	bne.n	8004312 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004300:	d107      	bne.n	8004312 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800430a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f001 f814 	bl	800533a <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004336:	2302      	movs	r3, #2
 8004338:	e0ff      	b.n	800453a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b14      	cmp	r3, #20
 8004346:	f200 80f0 	bhi.w	800452a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800434a:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800434c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004350:	080043a5 	.word	0x080043a5
 8004354:	0800452b 	.word	0x0800452b
 8004358:	0800452b 	.word	0x0800452b
 800435c:	0800452b 	.word	0x0800452b
 8004360:	080043e5 	.word	0x080043e5
 8004364:	0800452b 	.word	0x0800452b
 8004368:	0800452b 	.word	0x0800452b
 800436c:	0800452b 	.word	0x0800452b
 8004370:	08004427 	.word	0x08004427
 8004374:	0800452b 	.word	0x0800452b
 8004378:	0800452b 	.word	0x0800452b
 800437c:	0800452b 	.word	0x0800452b
 8004380:	08004467 	.word	0x08004467
 8004384:	0800452b 	.word	0x0800452b
 8004388:	0800452b 	.word	0x0800452b
 800438c:	0800452b 	.word	0x0800452b
 8004390:	080044a9 	.word	0x080044a9
 8004394:	0800452b 	.word	0x0800452b
 8004398:	0800452b 	.word	0x0800452b
 800439c:	0800452b 	.word	0x0800452b
 80043a0:	080044e9 	.word	0x080044e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fa86 	bl	80048bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0208 	orr.w	r2, r2, #8
 80043be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699a      	ldr	r2, [r3, #24]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0204 	bic.w	r2, r2, #4
 80043ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6999      	ldr	r1, [r3, #24]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	619a      	str	r2, [r3, #24]
      break;
 80043e2:	e0a5      	b.n	8004530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 faf6 	bl	80049dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800440e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6999      	ldr	r1, [r3, #24]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	021a      	lsls	r2, r3, #8
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	619a      	str	r2, [r3, #24]
      break;
 8004424:	e084      	b.n	8004530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fb5f 	bl	8004af0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0208 	orr.w	r2, r2, #8
 8004440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69da      	ldr	r2, [r3, #28]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0204 	bic.w	r2, r2, #4
 8004450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69d9      	ldr	r1, [r3, #28]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	61da      	str	r2, [r3, #28]
      break;
 8004464:	e064      	b.n	8004530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68b9      	ldr	r1, [r7, #8]
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fbc7 	bl	8004c00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69d9      	ldr	r1, [r3, #28]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	021a      	lsls	r2, r3, #8
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	61da      	str	r2, [r3, #28]
      break;
 80044a6:	e043      	b.n	8004530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68b9      	ldr	r1, [r7, #8]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fc30 	bl	8004d14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0208 	orr.w	r2, r2, #8
 80044c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0204 	bic.w	r2, r2, #4
 80044d2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80044e6:	e023      	b.n	8004530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fc74 	bl	8004ddc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004502:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004512:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	021a      	lsls	r2, r3, #8
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004528:	e002      	b.n	8004530 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	75fb      	strb	r3, [r7, #23]
      break;
 800452e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004538:	7dfb      	ldrb	r3, [r7, #23]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop

08004544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_TIM_ConfigClockSource+0x1c>
 800455c:	2302      	movs	r3, #2
 800455e:	e0de      	b.n	800471e <HAL_TIM_ConfigClockSource+0x1da>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800457e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800458a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a63      	ldr	r2, [pc, #396]	; (8004728 <HAL_TIM_ConfigClockSource+0x1e4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	f000 80a9 	beq.w	80046f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80045a0:	4a61      	ldr	r2, [pc, #388]	; (8004728 <HAL_TIM_ConfigClockSource+0x1e4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	f200 80ae 	bhi.w	8004704 <HAL_TIM_ConfigClockSource+0x1c0>
 80045a8:	4a60      	ldr	r2, [pc, #384]	; (800472c <HAL_TIM_ConfigClockSource+0x1e8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	f000 80a1 	beq.w	80046f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80045b0:	4a5e      	ldr	r2, [pc, #376]	; (800472c <HAL_TIM_ConfigClockSource+0x1e8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	f200 80a6 	bhi.w	8004704 <HAL_TIM_ConfigClockSource+0x1c0>
 80045b8:	4a5d      	ldr	r2, [pc, #372]	; (8004730 <HAL_TIM_ConfigClockSource+0x1ec>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	f000 8099 	beq.w	80046f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80045c0:	4a5b      	ldr	r2, [pc, #364]	; (8004730 <HAL_TIM_ConfigClockSource+0x1ec>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	f200 809e 	bhi.w	8004704 <HAL_TIM_ConfigClockSource+0x1c0>
 80045c8:	4a5a      	ldr	r2, [pc, #360]	; (8004734 <HAL_TIM_ConfigClockSource+0x1f0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	f000 8091 	beq.w	80046f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80045d0:	4a58      	ldr	r2, [pc, #352]	; (8004734 <HAL_TIM_ConfigClockSource+0x1f0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	f200 8096 	bhi.w	8004704 <HAL_TIM_ConfigClockSource+0x1c0>
 80045d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80045dc:	f000 8089 	beq.w	80046f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80045e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80045e4:	f200 808e 	bhi.w	8004704 <HAL_TIM_ConfigClockSource+0x1c0>
 80045e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ec:	d03e      	beq.n	800466c <HAL_TIM_ConfigClockSource+0x128>
 80045ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f2:	f200 8087 	bhi.w	8004704 <HAL_TIM_ConfigClockSource+0x1c0>
 80045f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045fa:	f000 8086 	beq.w	800470a <HAL_TIM_ConfigClockSource+0x1c6>
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004602:	d87f      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x1c0>
 8004604:	2b70      	cmp	r3, #112	; 0x70
 8004606:	d01a      	beq.n	800463e <HAL_TIM_ConfigClockSource+0xfa>
 8004608:	2b70      	cmp	r3, #112	; 0x70
 800460a:	d87b      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x1c0>
 800460c:	2b60      	cmp	r3, #96	; 0x60
 800460e:	d050      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x16e>
 8004610:	2b60      	cmp	r3, #96	; 0x60
 8004612:	d877      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x1c0>
 8004614:	2b50      	cmp	r3, #80	; 0x50
 8004616:	d03c      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x14e>
 8004618:	2b50      	cmp	r3, #80	; 0x50
 800461a:	d873      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x1c0>
 800461c:	2b40      	cmp	r3, #64	; 0x40
 800461e:	d058      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x18e>
 8004620:	2b40      	cmp	r3, #64	; 0x40
 8004622:	d86f      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x1c0>
 8004624:	2b30      	cmp	r3, #48	; 0x30
 8004626:	d064      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004628:	2b30      	cmp	r3, #48	; 0x30
 800462a:	d86b      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x1c0>
 800462c:	2b20      	cmp	r3, #32
 800462e:	d060      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004630:	2b20      	cmp	r3, #32
 8004632:	d867      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x1c0>
 8004634:	2b00      	cmp	r3, #0
 8004636:	d05c      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004638:	2b10      	cmp	r3, #16
 800463a:	d05a      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0x1ae>
 800463c:	e062      	b.n	8004704 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	6899      	ldr	r1, [r3, #8]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f000 fca7 	bl	8004fa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004660:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	609a      	str	r2, [r3, #8]
      break;
 800466a:	e04f      	b.n	800470c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	6899      	ldr	r1, [r3, #8]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f000 fc90 	bl	8004fa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800468e:	609a      	str	r2, [r3, #8]
      break;
 8004690:	e03c      	b.n	800470c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6859      	ldr	r1, [r3, #4]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	461a      	mov	r2, r3
 80046a0:	f000 fc02 	bl	8004ea8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2150      	movs	r1, #80	; 0x50
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fc5b 	bl	8004f66 <TIM_ITRx_SetConfig>
      break;
 80046b0:	e02c      	b.n	800470c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	6859      	ldr	r1, [r3, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	461a      	mov	r2, r3
 80046c0:	f000 fc21 	bl	8004f06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2160      	movs	r1, #96	; 0x60
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fc4b 	bl	8004f66 <TIM_ITRx_SetConfig>
      break;
 80046d0:	e01c      	b.n	800470c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	6859      	ldr	r1, [r3, #4]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	461a      	mov	r2, r3
 80046e0:	f000 fbe2 	bl	8004ea8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2140      	movs	r1, #64	; 0x40
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fc3b 	bl	8004f66 <TIM_ITRx_SetConfig>
      break;
 80046f0:	e00c      	b.n	800470c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4619      	mov	r1, r3
 80046fc:	4610      	mov	r0, r2
 80046fe:	f000 fc32 	bl	8004f66 <TIM_ITRx_SetConfig>
      break;
 8004702:	e003      	b.n	800470c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	73fb      	strb	r3, [r7, #15]
      break;
 8004708:	e000      	b.n	800470c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800470a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800471c:	7bfb      	ldrb	r3, [r7, #15]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	00100070 	.word	0x00100070
 800472c:	00100040 	.word	0x00100040
 8004730:	00100030 	.word	0x00100030
 8004734:	00100020 	.word	0x00100020

08004738 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a3c      	ldr	r2, [pc, #240]	; (80048a0 <TIM_Base_SetConfig+0x104>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00f      	beq.n	80047d4 <TIM_Base_SetConfig+0x38>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ba:	d00b      	beq.n	80047d4 <TIM_Base_SetConfig+0x38>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a39      	ldr	r2, [pc, #228]	; (80048a4 <TIM_Base_SetConfig+0x108>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d007      	beq.n	80047d4 <TIM_Base_SetConfig+0x38>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a38      	ldr	r2, [pc, #224]	; (80048a8 <TIM_Base_SetConfig+0x10c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d003      	beq.n	80047d4 <TIM_Base_SetConfig+0x38>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a37      	ldr	r2, [pc, #220]	; (80048ac <TIM_Base_SetConfig+0x110>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d108      	bne.n	80047e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a2d      	ldr	r2, [pc, #180]	; (80048a0 <TIM_Base_SetConfig+0x104>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d01b      	beq.n	8004826 <TIM_Base_SetConfig+0x8a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f4:	d017      	beq.n	8004826 <TIM_Base_SetConfig+0x8a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a2a      	ldr	r2, [pc, #168]	; (80048a4 <TIM_Base_SetConfig+0x108>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d013      	beq.n	8004826 <TIM_Base_SetConfig+0x8a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a29      	ldr	r2, [pc, #164]	; (80048a8 <TIM_Base_SetConfig+0x10c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00f      	beq.n	8004826 <TIM_Base_SetConfig+0x8a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a28      	ldr	r2, [pc, #160]	; (80048ac <TIM_Base_SetConfig+0x110>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00b      	beq.n	8004826 <TIM_Base_SetConfig+0x8a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a27      	ldr	r2, [pc, #156]	; (80048b0 <TIM_Base_SetConfig+0x114>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d007      	beq.n	8004826 <TIM_Base_SetConfig+0x8a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a26      	ldr	r2, [pc, #152]	; (80048b4 <TIM_Base_SetConfig+0x118>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d003      	beq.n	8004826 <TIM_Base_SetConfig+0x8a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a25      	ldr	r2, [pc, #148]	; (80048b8 <TIM_Base_SetConfig+0x11c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d108      	bne.n	8004838 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4313      	orrs	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a10      	ldr	r2, [pc, #64]	; (80048a0 <TIM_Base_SetConfig+0x104>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00f      	beq.n	8004884 <TIM_Base_SetConfig+0xe8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a11      	ldr	r2, [pc, #68]	; (80048ac <TIM_Base_SetConfig+0x110>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00b      	beq.n	8004884 <TIM_Base_SetConfig+0xe8>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a10      	ldr	r2, [pc, #64]	; (80048b0 <TIM_Base_SetConfig+0x114>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d007      	beq.n	8004884 <TIM_Base_SetConfig+0xe8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a0f      	ldr	r2, [pc, #60]	; (80048b4 <TIM_Base_SetConfig+0x118>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d003      	beq.n	8004884 <TIM_Base_SetConfig+0xe8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a0e      	ldr	r2, [pc, #56]	; (80048b8 <TIM_Base_SetConfig+0x11c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d103      	bne.n	800488c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	615a      	str	r2, [r3, #20]
}
 8004892:	bf00      	nop
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40012c00 	.word	0x40012c00
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40013400 	.word	0x40013400
 80048b0:	40014000 	.word	0x40014000
 80048b4:	40014400 	.word	0x40014400
 80048b8:	40014800 	.word	0x40014800

080048bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	f023 0201 	bic.w	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f023 0302 	bic.w	r3, r3, #2
 8004908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a2c      	ldr	r2, [pc, #176]	; (80049c8 <TIM_OC1_SetConfig+0x10c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00f      	beq.n	800493c <TIM_OC1_SetConfig+0x80>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a2b      	ldr	r2, [pc, #172]	; (80049cc <TIM_OC1_SetConfig+0x110>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00b      	beq.n	800493c <TIM_OC1_SetConfig+0x80>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a2a      	ldr	r2, [pc, #168]	; (80049d0 <TIM_OC1_SetConfig+0x114>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d007      	beq.n	800493c <TIM_OC1_SetConfig+0x80>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a29      	ldr	r2, [pc, #164]	; (80049d4 <TIM_OC1_SetConfig+0x118>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d003      	beq.n	800493c <TIM_OC1_SetConfig+0x80>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a28      	ldr	r2, [pc, #160]	; (80049d8 <TIM_OC1_SetConfig+0x11c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d10c      	bne.n	8004956 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f023 0308 	bic.w	r3, r3, #8
 8004942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f023 0304 	bic.w	r3, r3, #4
 8004954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a1b      	ldr	r2, [pc, #108]	; (80049c8 <TIM_OC1_SetConfig+0x10c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00f      	beq.n	800497e <TIM_OC1_SetConfig+0xc2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a1a      	ldr	r2, [pc, #104]	; (80049cc <TIM_OC1_SetConfig+0x110>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00b      	beq.n	800497e <TIM_OC1_SetConfig+0xc2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a19      	ldr	r2, [pc, #100]	; (80049d0 <TIM_OC1_SetConfig+0x114>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d007      	beq.n	800497e <TIM_OC1_SetConfig+0xc2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a18      	ldr	r2, [pc, #96]	; (80049d4 <TIM_OC1_SetConfig+0x118>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d003      	beq.n	800497e <TIM_OC1_SetConfig+0xc2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a17      	ldr	r2, [pc, #92]	; (80049d8 <TIM_OC1_SetConfig+0x11c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d111      	bne.n	80049a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800498c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	621a      	str	r2, [r3, #32]
}
 80049bc:	bf00      	nop
 80049be:	371c      	adds	r7, #28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	40012c00 	.word	0x40012c00
 80049cc:	40013400 	.word	0x40013400
 80049d0:	40014000 	.word	0x40014000
 80049d4:	40014400 	.word	0x40014400
 80049d8:	40014800 	.word	0x40014800

080049dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f023 0210 	bic.w	r2, r3, #16
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f023 0320 	bic.w	r3, r3, #32
 8004a2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a28      	ldr	r2, [pc, #160]	; (8004adc <TIM_OC2_SetConfig+0x100>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <TIM_OC2_SetConfig+0x6c>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a27      	ldr	r2, [pc, #156]	; (8004ae0 <TIM_OC2_SetConfig+0x104>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d10d      	bne.n	8004a64 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a1d      	ldr	r2, [pc, #116]	; (8004adc <TIM_OC2_SetConfig+0x100>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00f      	beq.n	8004a8c <TIM_OC2_SetConfig+0xb0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a1c      	ldr	r2, [pc, #112]	; (8004ae0 <TIM_OC2_SetConfig+0x104>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00b      	beq.n	8004a8c <TIM_OC2_SetConfig+0xb0>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a1b      	ldr	r2, [pc, #108]	; (8004ae4 <TIM_OC2_SetConfig+0x108>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d007      	beq.n	8004a8c <TIM_OC2_SetConfig+0xb0>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ae8 <TIM_OC2_SetConfig+0x10c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d003      	beq.n	8004a8c <TIM_OC2_SetConfig+0xb0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a19      	ldr	r2, [pc, #100]	; (8004aec <TIM_OC2_SetConfig+0x110>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d113      	bne.n	8004ab4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	621a      	str	r2, [r3, #32]
}
 8004ace:	bf00      	nop
 8004ad0:	371c      	adds	r7, #28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40012c00 	.word	0x40012c00
 8004ae0:	40013400 	.word	0x40013400
 8004ae4:	40014000 	.word	0x40014000
 8004ae8:	40014400 	.word	0x40014400
 8004aec:	40014800 	.word	0x40014800

08004af0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0303 	bic.w	r3, r3, #3
 8004b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a27      	ldr	r2, [pc, #156]	; (8004bec <TIM_OC3_SetConfig+0xfc>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d003      	beq.n	8004b5a <TIM_OC3_SetConfig+0x6a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a26      	ldr	r2, [pc, #152]	; (8004bf0 <TIM_OC3_SetConfig+0x100>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d10d      	bne.n	8004b76 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a1c      	ldr	r2, [pc, #112]	; (8004bec <TIM_OC3_SetConfig+0xfc>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00f      	beq.n	8004b9e <TIM_OC3_SetConfig+0xae>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a1b      	ldr	r2, [pc, #108]	; (8004bf0 <TIM_OC3_SetConfig+0x100>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00b      	beq.n	8004b9e <TIM_OC3_SetConfig+0xae>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a1a      	ldr	r2, [pc, #104]	; (8004bf4 <TIM_OC3_SetConfig+0x104>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d007      	beq.n	8004b9e <TIM_OC3_SetConfig+0xae>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a19      	ldr	r2, [pc, #100]	; (8004bf8 <TIM_OC3_SetConfig+0x108>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d003      	beq.n	8004b9e <TIM_OC3_SetConfig+0xae>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a18      	ldr	r2, [pc, #96]	; (8004bfc <TIM_OC3_SetConfig+0x10c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d113      	bne.n	8004bc6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	621a      	str	r2, [r3, #32]
}
 8004be0:	bf00      	nop
 8004be2:	371c      	adds	r7, #28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	40012c00 	.word	0x40012c00
 8004bf0:	40013400 	.word	0x40013400
 8004bf4:	40014000 	.word	0x40014000
 8004bf8:	40014400 	.word	0x40014400
 8004bfc:	40014800 	.word	0x40014800

08004c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	031b      	lsls	r3, r3, #12
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a28      	ldr	r2, [pc, #160]	; (8004d00 <TIM_OC4_SetConfig+0x100>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d003      	beq.n	8004c6c <TIM_OC4_SetConfig+0x6c>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a27      	ldr	r2, [pc, #156]	; (8004d04 <TIM_OC4_SetConfig+0x104>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d10d      	bne.n	8004c88 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	031b      	lsls	r3, r3, #12
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a1d      	ldr	r2, [pc, #116]	; (8004d00 <TIM_OC4_SetConfig+0x100>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00f      	beq.n	8004cb0 <TIM_OC4_SetConfig+0xb0>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a1c      	ldr	r2, [pc, #112]	; (8004d04 <TIM_OC4_SetConfig+0x104>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00b      	beq.n	8004cb0 <TIM_OC4_SetConfig+0xb0>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a1b      	ldr	r2, [pc, #108]	; (8004d08 <TIM_OC4_SetConfig+0x108>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d007      	beq.n	8004cb0 <TIM_OC4_SetConfig+0xb0>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a1a      	ldr	r2, [pc, #104]	; (8004d0c <TIM_OC4_SetConfig+0x10c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_OC4_SetConfig+0xb0>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a19      	ldr	r2, [pc, #100]	; (8004d10 <TIM_OC4_SetConfig+0x110>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d113      	bne.n	8004cd8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cb6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cbe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	019b      	lsls	r3, r3, #6
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	019b      	lsls	r3, r3, #6
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40013400 	.word	0x40013400
 8004d08:	40014000 	.word	0x40014000
 8004d0c:	40014400 	.word	0x40014400
 8004d10:	40014800 	.word	0x40014800

08004d14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	041b      	lsls	r3, r3, #16
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a17      	ldr	r2, [pc, #92]	; (8004dc8 <TIM_OC5_SetConfig+0xb4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00f      	beq.n	8004d8e <TIM_OC5_SetConfig+0x7a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a16      	ldr	r2, [pc, #88]	; (8004dcc <TIM_OC5_SetConfig+0xb8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00b      	beq.n	8004d8e <TIM_OC5_SetConfig+0x7a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <TIM_OC5_SetConfig+0xbc>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d007      	beq.n	8004d8e <TIM_OC5_SetConfig+0x7a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a14      	ldr	r2, [pc, #80]	; (8004dd4 <TIM_OC5_SetConfig+0xc0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d003      	beq.n	8004d8e <TIM_OC5_SetConfig+0x7a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a13      	ldr	r2, [pc, #76]	; (8004dd8 <TIM_OC5_SetConfig+0xc4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d109      	bne.n	8004da2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	021b      	lsls	r3, r3, #8
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	621a      	str	r2, [r3, #32]
}
 8004dbc:	bf00      	nop
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	40012c00 	.word	0x40012c00
 8004dcc:	40013400 	.word	0x40013400
 8004dd0:	40014000 	.word	0x40014000
 8004dd4:	40014400 	.word	0x40014400
 8004dd8:	40014800 	.word	0x40014800

08004ddc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	021b      	lsls	r3, r3, #8
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	051b      	lsls	r3, r3, #20
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a18      	ldr	r2, [pc, #96]	; (8004e94 <TIM_OC6_SetConfig+0xb8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00f      	beq.n	8004e58 <TIM_OC6_SetConfig+0x7c>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a17      	ldr	r2, [pc, #92]	; (8004e98 <TIM_OC6_SetConfig+0xbc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00b      	beq.n	8004e58 <TIM_OC6_SetConfig+0x7c>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a16      	ldr	r2, [pc, #88]	; (8004e9c <TIM_OC6_SetConfig+0xc0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d007      	beq.n	8004e58 <TIM_OC6_SetConfig+0x7c>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a15      	ldr	r2, [pc, #84]	; (8004ea0 <TIM_OC6_SetConfig+0xc4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d003      	beq.n	8004e58 <TIM_OC6_SetConfig+0x7c>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a14      	ldr	r2, [pc, #80]	; (8004ea4 <TIM_OC6_SetConfig+0xc8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d109      	bne.n	8004e6c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	029b      	lsls	r3, r3, #10
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	621a      	str	r2, [r3, #32]
}
 8004e86:	bf00      	nop
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	40013400 	.word	0x40013400
 8004e9c:	40014000 	.word	0x40014000
 8004ea0:	40014400 	.word	0x40014400
 8004ea4:	40014800 	.word	0x40014800

08004ea8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	f023 0201 	bic.w	r2, r3, #1
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f023 030a 	bic.w	r3, r3, #10
 8004ee4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	621a      	str	r2, [r3, #32]
}
 8004efa:	bf00      	nop
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b087      	sub	sp, #28
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	60f8      	str	r0, [r7, #12]
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	f023 0210 	bic.w	r2, r3, #16
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	031b      	lsls	r3, r3, #12
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b085      	sub	sp, #20
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f043 0307 	orr.w	r3, r3, #7
 8004f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	609a      	str	r2, [r3, #8]
}
 8004f94:	bf00      	nop
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	021a      	lsls	r2, r3, #8
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	609a      	str	r2, [r3, #8]
}
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a1a      	ldr	r2, [r3, #32]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	43db      	mvns	r3, r3
 8005002:	401a      	ands	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a1a      	ldr	r2, [r3, #32]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	fa01 f303 	lsl.w	r3, r1, r3
 8005018:	431a      	orrs	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	621a      	str	r2, [r3, #32]
}
 800501e:	bf00      	nop
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800503c:	2b01      	cmp	r3, #1
 800503e:	d101      	bne.n	8005044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005040:	2302      	movs	r3, #2
 8005042:	e065      	b.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a2c      	ldr	r2, [pc, #176]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d004      	beq.n	8005078 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a2b      	ldr	r2, [pc, #172]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d108      	bne.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800507e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005094:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4313      	orrs	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1b      	ldr	r2, [pc, #108]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d018      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ba:	d013      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a18      	ldr	r2, [pc, #96]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00e      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a17      	ldr	r2, [pc, #92]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d009      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a12      	ldr	r2, [pc, #72]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d004      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a13      	ldr	r2, [pc, #76]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d10c      	bne.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	40012c00 	.word	0x40012c00
 8005120:	40013400 	.word	0x40013400
 8005124:	40000400 	.word	0x40000400
 8005128:	40000800 	.word	0x40000800
 800512c:	40014000 	.word	0x40014000

08005130 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005148:	2302      	movs	r3, #2
 800514a:	e087      	b.n	800525c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	041b      	lsls	r3, r3, #16
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a27      	ldr	r2, [pc, #156]	; (8005268 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d004      	beq.n	80051da <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a25      	ldr	r2, [pc, #148]	; (800526c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d106      	bne.n	80051e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a1e      	ldr	r2, [pc, #120]	; (8005268 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d004      	beq.n	80051fc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1d      	ldr	r2, [pc, #116]	; (800526c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d126      	bne.n	800524a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005206:	051b      	lsls	r3, r3, #20
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	4313      	orrs	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a0e      	ldr	r2, [pc, #56]	; (8005268 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d004      	beq.n	800523c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a0d      	ldr	r2, [pc, #52]	; (800526c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d106      	bne.n	800524a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	40012c00 	.word	0x40012c00
 800526c:	40013400 	.word	0x40013400

08005270 <HAL_TIMEx_ConfigAsymmetricalDeadTime>:
  * @param  FallingDeadtime Falling edge deadtime value
  * @note   This parameter can be a number between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigAsymmetricalDeadTime(TIM_HandleTypeDef *htim, uint32_t FallingDeadtime)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DEADTIME(FallingDeadtime));

  MODIFY_REG(htim->Instance->DTR2, TIM_DTR2_DTGF, FallingDeadtime);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005280:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_TIMEx_EnableAsymmetricalDeadTime>:
  * @brief  Enable asymmetrical deadtime
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableAsymmetricalDeadTime(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTAE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80052b2:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e042      	b.n	80053e6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005366:	2b00      	cmp	r3, #0
 8005368:	d106      	bne.n	8005378 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fc fb20 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2224      	movs	r2, #36	; 0x24
 800537c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0201 	bic.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f8c3 	bl	800551c <UART_SetConfig>
 8005396:	4603      	mov	r3, r0
 8005398:	2b01      	cmp	r3, #1
 800539a:	d101      	bne.n	80053a0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e022      	b.n	80053e6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 fb83 	bl	8005ab4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0201 	orr.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fc0a 	bl	8005bf8 <UART_CheckIdleState>
 80053e4:	4603      	mov	r3, r0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b08a      	sub	sp, #40	; 0x28
 80053f2:	af02      	add	r7, sp, #8
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	603b      	str	r3, [r7, #0]
 80053fa:	4613      	mov	r3, r2
 80053fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005404:	2b20      	cmp	r3, #32
 8005406:	f040 8083 	bne.w	8005510 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <HAL_UART_Transmit+0x28>
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e07b      	b.n	8005512 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <HAL_UART_Transmit+0x3a>
 8005424:	2302      	movs	r3, #2
 8005426:	e074      	b.n	8005512 <HAL_UART_Transmit+0x124>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2221      	movs	r2, #33	; 0x21
 800543c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005440:	f7fc fcaa 	bl	8001d98 <HAL_GetTick>
 8005444:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	88fa      	ldrh	r2, [r7, #6]
 800544a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	88fa      	ldrh	r2, [r7, #6]
 8005452:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545e:	d108      	bne.n	8005472 <HAL_UART_Transmit+0x84>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d104      	bne.n	8005472 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005468:	2300      	movs	r3, #0
 800546a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	61bb      	str	r3, [r7, #24]
 8005470:	e003      	b.n	800547a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005476:	2300      	movs	r3, #0
 8005478:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005482:	e02c      	b.n	80054de <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2200      	movs	r2, #0
 800548c:	2180      	movs	r1, #128	; 0x80
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 fbfd 	bl	8005c8e <UART_WaitOnFlagUntilTimeout>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e039      	b.n	8005512 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10b      	bne.n	80054bc <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	3302      	adds	r3, #2
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	e007      	b.n	80054cc <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	781a      	ldrb	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	3301      	adds	r3, #1
 80054ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1cc      	bne.n	8005484 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2200      	movs	r2, #0
 80054f2:	2140      	movs	r1, #64	; 0x40
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 fbca 	bl	8005c8e <UART_WaitOnFlagUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e006      	b.n	8005512 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	e000      	b.n	8005512 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005510:	2302      	movs	r3, #2
  }
}
 8005512:	4618      	mov	r0, r3
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800551c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005520:	b08c      	sub	sp, #48	; 0x30
 8005522:	af00      	add	r7, sp, #0
 8005524:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	431a      	orrs	r2, r3
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	431a      	orrs	r2, r3
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	4313      	orrs	r3, r2
 8005542:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4bab      	ldr	r3, [pc, #684]	; (80057f8 <UART_SetConfig+0x2dc>)
 800554c:	4013      	ands	r3, r2
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	6812      	ldr	r2, [r2, #0]
 8005552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005554:	430b      	orrs	r3, r1
 8005556:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4aa0      	ldr	r2, [pc, #640]	; (80057fc <UART_SetConfig+0x2e0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d004      	beq.n	8005588 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005584:	4313      	orrs	r3, r2
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005592:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	6812      	ldr	r2, [r2, #0]
 800559a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800559c:	430b      	orrs	r3, r1
 800559e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a6:	f023 010f 	bic.w	r1, r3, #15
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a91      	ldr	r2, [pc, #580]	; (8005800 <UART_SetConfig+0x2e4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d125      	bne.n	800560c <UART_SetConfig+0xf0>
 80055c0:	4b90      	ldr	r3, [pc, #576]	; (8005804 <UART_SetConfig+0x2e8>)
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d81a      	bhi.n	8005604 <UART_SetConfig+0xe8>
 80055ce:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <UART_SetConfig+0xb8>)
 80055d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d4:	080055e5 	.word	0x080055e5
 80055d8:	080055f5 	.word	0x080055f5
 80055dc:	080055ed 	.word	0x080055ed
 80055e0:	080055fd 	.word	0x080055fd
 80055e4:	2301      	movs	r3, #1
 80055e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ea:	e0d6      	b.n	800579a <UART_SetConfig+0x27e>
 80055ec:	2302      	movs	r3, #2
 80055ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055f2:	e0d2      	b.n	800579a <UART_SetConfig+0x27e>
 80055f4:	2304      	movs	r3, #4
 80055f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055fa:	e0ce      	b.n	800579a <UART_SetConfig+0x27e>
 80055fc:	2308      	movs	r3, #8
 80055fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005602:	e0ca      	b.n	800579a <UART_SetConfig+0x27e>
 8005604:	2310      	movs	r3, #16
 8005606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800560a:	e0c6      	b.n	800579a <UART_SetConfig+0x27e>
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a7d      	ldr	r2, [pc, #500]	; (8005808 <UART_SetConfig+0x2ec>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d138      	bne.n	8005688 <UART_SetConfig+0x16c>
 8005616:	4b7b      	ldr	r3, [pc, #492]	; (8005804 <UART_SetConfig+0x2e8>)
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561c:	f003 030c 	and.w	r3, r3, #12
 8005620:	2b0c      	cmp	r3, #12
 8005622:	d82d      	bhi.n	8005680 <UART_SetConfig+0x164>
 8005624:	a201      	add	r2, pc, #4	; (adr r2, 800562c <UART_SetConfig+0x110>)
 8005626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562a:	bf00      	nop
 800562c:	08005661 	.word	0x08005661
 8005630:	08005681 	.word	0x08005681
 8005634:	08005681 	.word	0x08005681
 8005638:	08005681 	.word	0x08005681
 800563c:	08005671 	.word	0x08005671
 8005640:	08005681 	.word	0x08005681
 8005644:	08005681 	.word	0x08005681
 8005648:	08005681 	.word	0x08005681
 800564c:	08005669 	.word	0x08005669
 8005650:	08005681 	.word	0x08005681
 8005654:	08005681 	.word	0x08005681
 8005658:	08005681 	.word	0x08005681
 800565c:	08005679 	.word	0x08005679
 8005660:	2300      	movs	r3, #0
 8005662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005666:	e098      	b.n	800579a <UART_SetConfig+0x27e>
 8005668:	2302      	movs	r3, #2
 800566a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800566e:	e094      	b.n	800579a <UART_SetConfig+0x27e>
 8005670:	2304      	movs	r3, #4
 8005672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005676:	e090      	b.n	800579a <UART_SetConfig+0x27e>
 8005678:	2308      	movs	r3, #8
 800567a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800567e:	e08c      	b.n	800579a <UART_SetConfig+0x27e>
 8005680:	2310      	movs	r3, #16
 8005682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005686:	e088      	b.n	800579a <UART_SetConfig+0x27e>
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a5f      	ldr	r2, [pc, #380]	; (800580c <UART_SetConfig+0x2f0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d125      	bne.n	80056de <UART_SetConfig+0x1c2>
 8005692:	4b5c      	ldr	r3, [pc, #368]	; (8005804 <UART_SetConfig+0x2e8>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005698:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800569c:	2b30      	cmp	r3, #48	; 0x30
 800569e:	d016      	beq.n	80056ce <UART_SetConfig+0x1b2>
 80056a0:	2b30      	cmp	r3, #48	; 0x30
 80056a2:	d818      	bhi.n	80056d6 <UART_SetConfig+0x1ba>
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	d00a      	beq.n	80056be <UART_SetConfig+0x1a2>
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d814      	bhi.n	80056d6 <UART_SetConfig+0x1ba>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <UART_SetConfig+0x19a>
 80056b0:	2b10      	cmp	r3, #16
 80056b2:	d008      	beq.n	80056c6 <UART_SetConfig+0x1aa>
 80056b4:	e00f      	b.n	80056d6 <UART_SetConfig+0x1ba>
 80056b6:	2300      	movs	r3, #0
 80056b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056bc:	e06d      	b.n	800579a <UART_SetConfig+0x27e>
 80056be:	2302      	movs	r3, #2
 80056c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056c4:	e069      	b.n	800579a <UART_SetConfig+0x27e>
 80056c6:	2304      	movs	r3, #4
 80056c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056cc:	e065      	b.n	800579a <UART_SetConfig+0x27e>
 80056ce:	2308      	movs	r3, #8
 80056d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056d4:	e061      	b.n	800579a <UART_SetConfig+0x27e>
 80056d6:	2310      	movs	r3, #16
 80056d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056dc:	e05d      	b.n	800579a <UART_SetConfig+0x27e>
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a4b      	ldr	r2, [pc, #300]	; (8005810 <UART_SetConfig+0x2f4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d125      	bne.n	8005734 <UART_SetConfig+0x218>
 80056e8:	4b46      	ldr	r3, [pc, #280]	; (8005804 <UART_SetConfig+0x2e8>)
 80056ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056f2:	2bc0      	cmp	r3, #192	; 0xc0
 80056f4:	d016      	beq.n	8005724 <UART_SetConfig+0x208>
 80056f6:	2bc0      	cmp	r3, #192	; 0xc0
 80056f8:	d818      	bhi.n	800572c <UART_SetConfig+0x210>
 80056fa:	2b80      	cmp	r3, #128	; 0x80
 80056fc:	d00a      	beq.n	8005714 <UART_SetConfig+0x1f8>
 80056fe:	2b80      	cmp	r3, #128	; 0x80
 8005700:	d814      	bhi.n	800572c <UART_SetConfig+0x210>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <UART_SetConfig+0x1f0>
 8005706:	2b40      	cmp	r3, #64	; 0x40
 8005708:	d008      	beq.n	800571c <UART_SetConfig+0x200>
 800570a:	e00f      	b.n	800572c <UART_SetConfig+0x210>
 800570c:	2300      	movs	r3, #0
 800570e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005712:	e042      	b.n	800579a <UART_SetConfig+0x27e>
 8005714:	2302      	movs	r3, #2
 8005716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800571a:	e03e      	b.n	800579a <UART_SetConfig+0x27e>
 800571c:	2304      	movs	r3, #4
 800571e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005722:	e03a      	b.n	800579a <UART_SetConfig+0x27e>
 8005724:	2308      	movs	r3, #8
 8005726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800572a:	e036      	b.n	800579a <UART_SetConfig+0x27e>
 800572c:	2310      	movs	r3, #16
 800572e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005732:	e032      	b.n	800579a <UART_SetConfig+0x27e>
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a30      	ldr	r2, [pc, #192]	; (80057fc <UART_SetConfig+0x2e0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d12a      	bne.n	8005794 <UART_SetConfig+0x278>
 800573e:	4b31      	ldr	r3, [pc, #196]	; (8005804 <UART_SetConfig+0x2e8>)
 8005740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005744:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005748:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800574c:	d01a      	beq.n	8005784 <UART_SetConfig+0x268>
 800574e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005752:	d81b      	bhi.n	800578c <UART_SetConfig+0x270>
 8005754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005758:	d00c      	beq.n	8005774 <UART_SetConfig+0x258>
 800575a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800575e:	d815      	bhi.n	800578c <UART_SetConfig+0x270>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <UART_SetConfig+0x250>
 8005764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005768:	d008      	beq.n	800577c <UART_SetConfig+0x260>
 800576a:	e00f      	b.n	800578c <UART_SetConfig+0x270>
 800576c:	2300      	movs	r3, #0
 800576e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005772:	e012      	b.n	800579a <UART_SetConfig+0x27e>
 8005774:	2302      	movs	r3, #2
 8005776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800577a:	e00e      	b.n	800579a <UART_SetConfig+0x27e>
 800577c:	2304      	movs	r3, #4
 800577e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005782:	e00a      	b.n	800579a <UART_SetConfig+0x27e>
 8005784:	2308      	movs	r3, #8
 8005786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800578a:	e006      	b.n	800579a <UART_SetConfig+0x27e>
 800578c:	2310      	movs	r3, #16
 800578e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005792:	e002      	b.n	800579a <UART_SetConfig+0x27e>
 8005794:	2310      	movs	r3, #16
 8005796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a17      	ldr	r2, [pc, #92]	; (80057fc <UART_SetConfig+0x2e0>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	f040 80a8 	bne.w	80058f6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057aa:	2b08      	cmp	r3, #8
 80057ac:	d834      	bhi.n	8005818 <UART_SetConfig+0x2fc>
 80057ae:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <UART_SetConfig+0x298>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	080057d9 	.word	0x080057d9
 80057b8:	08005819 	.word	0x08005819
 80057bc:	080057e1 	.word	0x080057e1
 80057c0:	08005819 	.word	0x08005819
 80057c4:	080057e7 	.word	0x080057e7
 80057c8:	08005819 	.word	0x08005819
 80057cc:	08005819 	.word	0x08005819
 80057d0:	08005819 	.word	0x08005819
 80057d4:	080057ef 	.word	0x080057ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d8:	f7fd ffd2 	bl	8003780 <HAL_RCC_GetPCLK1Freq>
 80057dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057de:	e021      	b.n	8005824 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057e0:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <UART_SetConfig+0x2f8>)
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057e4:	e01e      	b.n	8005824 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057e6:	f7fd ff5d 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 80057ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057ec:	e01a      	b.n	8005824 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057f4:	e016      	b.n	8005824 <UART_SetConfig+0x308>
 80057f6:	bf00      	nop
 80057f8:	cfff69f3 	.word	0xcfff69f3
 80057fc:	40008000 	.word	0x40008000
 8005800:	40013800 	.word	0x40013800
 8005804:	40021000 	.word	0x40021000
 8005808:	40004400 	.word	0x40004400
 800580c:	40004800 	.word	0x40004800
 8005810:	40004c00 	.word	0x40004c00
 8005814:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005822:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 812a 	beq.w	8005a80 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	4a9e      	ldr	r2, [pc, #632]	; (8005aac <UART_SetConfig+0x590>)
 8005832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005836:	461a      	mov	r2, r3
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	fbb3 f3f2 	udiv	r3, r3, r2
 800583e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	4613      	mov	r3, r2
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	4413      	add	r3, r2
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	429a      	cmp	r2, r3
 800584e:	d305      	bcc.n	800585c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	429a      	cmp	r2, r3
 800585a:	d903      	bls.n	8005864 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005862:	e10d      	b.n	8005a80 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	2200      	movs	r2, #0
 8005868:	60bb      	str	r3, [r7, #8]
 800586a:	60fa      	str	r2, [r7, #12]
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	4a8e      	ldr	r2, [pc, #568]	; (8005aac <UART_SetConfig+0x590>)
 8005872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005876:	b29b      	uxth	r3, r3
 8005878:	2200      	movs	r2, #0
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	607a      	str	r2, [r7, #4]
 800587e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005882:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005886:	f7fb f9b7 	bl	8000bf8 <__aeabi_uldivmod>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4610      	mov	r0, r2
 8005890:	4619      	mov	r1, r3
 8005892:	f04f 0200 	mov.w	r2, #0
 8005896:	f04f 0300 	mov.w	r3, #0
 800589a:	020b      	lsls	r3, r1, #8
 800589c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058a0:	0202      	lsls	r2, r0, #8
 80058a2:	6979      	ldr	r1, [r7, #20]
 80058a4:	6849      	ldr	r1, [r1, #4]
 80058a6:	0849      	lsrs	r1, r1, #1
 80058a8:	2000      	movs	r0, #0
 80058aa:	460c      	mov	r4, r1
 80058ac:	4605      	mov	r5, r0
 80058ae:	eb12 0804 	adds.w	r8, r2, r4
 80058b2:	eb43 0905 	adc.w	r9, r3, r5
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	469a      	mov	sl, r3
 80058be:	4693      	mov	fp, r2
 80058c0:	4652      	mov	r2, sl
 80058c2:	465b      	mov	r3, fp
 80058c4:	4640      	mov	r0, r8
 80058c6:	4649      	mov	r1, r9
 80058c8:	f7fb f996 	bl	8000bf8 <__aeabi_uldivmod>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4613      	mov	r3, r2
 80058d2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058da:	d308      	bcc.n	80058ee <UART_SetConfig+0x3d2>
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058e2:	d204      	bcs.n	80058ee <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6a3a      	ldr	r2, [r7, #32]
 80058ea:	60da      	str	r2, [r3, #12]
 80058ec:	e0c8      	b.n	8005a80 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058f4:	e0c4      	b.n	8005a80 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058fe:	d167      	bne.n	80059d0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005900:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005904:	2b08      	cmp	r3, #8
 8005906:	d828      	bhi.n	800595a <UART_SetConfig+0x43e>
 8005908:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <UART_SetConfig+0x3f4>)
 800590a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590e:	bf00      	nop
 8005910:	08005935 	.word	0x08005935
 8005914:	0800593d 	.word	0x0800593d
 8005918:	08005945 	.word	0x08005945
 800591c:	0800595b 	.word	0x0800595b
 8005920:	0800594b 	.word	0x0800594b
 8005924:	0800595b 	.word	0x0800595b
 8005928:	0800595b 	.word	0x0800595b
 800592c:	0800595b 	.word	0x0800595b
 8005930:	08005953 	.word	0x08005953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005934:	f7fd ff24 	bl	8003780 <HAL_RCC_GetPCLK1Freq>
 8005938:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800593a:	e014      	b.n	8005966 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800593c:	f7fd ff36 	bl	80037ac <HAL_RCC_GetPCLK2Freq>
 8005940:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005942:	e010      	b.n	8005966 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005944:	4b5a      	ldr	r3, [pc, #360]	; (8005ab0 <UART_SetConfig+0x594>)
 8005946:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005948:	e00d      	b.n	8005966 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800594a:	f7fd feab 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 800594e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005950:	e009      	b.n	8005966 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005956:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005958:	e005      	b.n	8005966 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005964:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 8089 	beq.w	8005a80 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	4a4e      	ldr	r2, [pc, #312]	; (8005aac <UART_SetConfig+0x590>)
 8005974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005978:	461a      	mov	r2, r3
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005980:	005a      	lsls	r2, r3, #1
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	085b      	lsrs	r3, r3, #1
 8005988:	441a      	add	r2, r3
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005992:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	2b0f      	cmp	r3, #15
 8005998:	d916      	bls.n	80059c8 <UART_SetConfig+0x4ac>
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a0:	d212      	bcs.n	80059c8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	f023 030f 	bic.w	r3, r3, #15
 80059aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	085b      	lsrs	r3, r3, #1
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	8bfb      	ldrh	r3, [r7, #30]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	8bfa      	ldrh	r2, [r7, #30]
 80059c4:	60da      	str	r2, [r3, #12]
 80059c6:	e05b      	b.n	8005a80 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80059ce:	e057      	b.n	8005a80 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d828      	bhi.n	8005a2a <UART_SetConfig+0x50e>
 80059d8:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <UART_SetConfig+0x4c4>)
 80059da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059de:	bf00      	nop
 80059e0:	08005a05 	.word	0x08005a05
 80059e4:	08005a0d 	.word	0x08005a0d
 80059e8:	08005a15 	.word	0x08005a15
 80059ec:	08005a2b 	.word	0x08005a2b
 80059f0:	08005a1b 	.word	0x08005a1b
 80059f4:	08005a2b 	.word	0x08005a2b
 80059f8:	08005a2b 	.word	0x08005a2b
 80059fc:	08005a2b 	.word	0x08005a2b
 8005a00:	08005a23 	.word	0x08005a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a04:	f7fd febc 	bl	8003780 <HAL_RCC_GetPCLK1Freq>
 8005a08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a0a:	e014      	b.n	8005a36 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a0c:	f7fd fece 	bl	80037ac <HAL_RCC_GetPCLK2Freq>
 8005a10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a12:	e010      	b.n	8005a36 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a14:	4b26      	ldr	r3, [pc, #152]	; (8005ab0 <UART_SetConfig+0x594>)
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a18:	e00d      	b.n	8005a36 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a1a:	f7fd fe43 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8005a1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a20:	e009      	b.n	8005a36 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a28:	e005      	b.n	8005a36 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a34:	bf00      	nop
    }

    if (pclk != 0U)
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d021      	beq.n	8005a80 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	4a1a      	ldr	r2, [pc, #104]	; (8005aac <UART_SetConfig+0x590>)
 8005a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a46:	461a      	mov	r2, r3
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	441a      	add	r2, r3
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	2b0f      	cmp	r3, #15
 8005a64:	d909      	bls.n	8005a7a <UART_SetConfig+0x55e>
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6c:	d205      	bcs.n	8005a7a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	60da      	str	r2, [r3, #12]
 8005a78:	e002      	b.n	8005a80 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2200      	movs	r2, #0
 8005a94:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005a9c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3730      	adds	r7, #48	; 0x30
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aaa:	bf00      	nop
 8005aac:	08008a38 	.word	0x08008a38
 8005ab0:	00f42400 	.word	0x00f42400

08005ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00a      	beq.n	8005ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	f003 0308 	and.w	r3, r3, #8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00a      	beq.n	8005b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d01a      	beq.n	8005bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bb2:	d10a      	bne.n	8005bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	605a      	str	r2, [r3, #4]
  }
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c08:	f7fc f8c6 	bl	8001d98 <HAL_GetTick>
 8005c0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d10e      	bne.n	8005c3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f82f 	bl	8005c8e <UART_WaitOnFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e025      	b.n	8005c86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d10e      	bne.n	8005c66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f819 	bl	8005c8e <UART_WaitOnFlagUntilTimeout>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e00f      	b.n	8005c86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b09c      	sub	sp, #112	; 0x70
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	603b      	str	r3, [r7, #0]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c9e:	e0a9      	b.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca6:	f000 80a5 	beq.w	8005df4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005caa:	f7fc f875 	bl	8001d98 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d302      	bcc.n	8005cc0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005cba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d140      	bne.n	8005d42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cd4:	667b      	str	r3, [r7, #100]	; 0x64
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ce0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ce4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ce6:	e841 2300 	strex	r3, r2, [r1]
 8005cea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e6      	bne.n	8005cc0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3308      	adds	r3, #8
 8005cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d04:	f023 0301 	bic.w	r3, r3, #1
 8005d08:	663b      	str	r3, [r7, #96]	; 0x60
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3308      	adds	r3, #8
 8005d10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d12:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d1a:	e841 2300 	strex	r3, r2, [r1]
 8005d1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1e5      	bne.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e069      	b.n	8005e16 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d051      	beq.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d5e:	d149      	bne.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	461a      	mov	r2, r3
 8005d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d88:	637b      	str	r3, [r7, #52]	; 0x34
 8005d8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d90:	e841 2300 	strex	r3, r2, [r1]
 8005d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e6      	bne.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3308      	adds	r3, #8
 8005da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	613b      	str	r3, [r7, #16]
   return(result);
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f023 0301 	bic.w	r3, r3, #1
 8005db2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3308      	adds	r3, #8
 8005dba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005dbc:	623a      	str	r2, [r7, #32]
 8005dbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	69f9      	ldr	r1, [r7, #28]
 8005dc2:	6a3a      	ldr	r2, [r7, #32]
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e5      	bne.n	8005d9c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e010      	b.n	8005e16 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	69da      	ldr	r2, [r3, #28]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	bf0c      	ite	eq
 8005e04:	2301      	moveq	r3, #1
 8005e06:	2300      	movne	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	f43f af46 	beq.w	8005ca0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3770      	adds	r7, #112	; 0x70
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b085      	sub	sp, #20
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e027      	b.n	8005e84 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2224      	movs	r2, #36	; 0x24
 8005e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0201 	bic.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e02d      	b.n	8005f04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2224      	movs	r2, #36	; 0x24
 8005eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0201 	bic.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f84f 	bl	8005f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e02d      	b.n	8005f80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2224      	movs	r2, #36	; 0x24
 8005f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0201 	bic.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f811 	bl	8005f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d108      	bne.n	8005faa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fa8:	e031      	b.n	800600e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005faa:	2308      	movs	r3, #8
 8005fac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fae:	2308      	movs	r3, #8
 8005fb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	0e5b      	lsrs	r3, r3, #25
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	0f5b      	lsrs	r3, r3, #29
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fd2:	7bbb      	ldrb	r3, [r7, #14]
 8005fd4:	7b3a      	ldrb	r2, [r7, #12]
 8005fd6:	4911      	ldr	r1, [pc, #68]	; (800601c <UARTEx_SetNbDataToProcess+0x94>)
 8005fd8:	5c8a      	ldrb	r2, [r1, r2]
 8005fda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fde:	7b3a      	ldrb	r2, [r7, #12]
 8005fe0:	490f      	ldr	r1, [pc, #60]	; (8006020 <UARTEx_SetNbDataToProcess+0x98>)
 8005fe2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fe4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	7b7a      	ldrb	r2, [r7, #13]
 8005ff4:	4909      	ldr	r1, [pc, #36]	; (800601c <UARTEx_SetNbDataToProcess+0x94>)
 8005ff6:	5c8a      	ldrb	r2, [r1, r2]
 8005ff8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ffc:	7b7a      	ldrb	r2, [r7, #13]
 8005ffe:	4908      	ldr	r1, [pc, #32]	; (8006020 <UARTEx_SetNbDataToProcess+0x98>)
 8006000:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006002:	fb93 f3f2 	sdiv	r3, r3, r2
 8006006:	b29a      	uxth	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	08008a50 	.word	0x08008a50
 8006020:	08008a58 	.word	0x08008a58

08006024 <__cvt>:
 8006024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006028:	ec55 4b10 	vmov	r4, r5, d0
 800602c:	2d00      	cmp	r5, #0
 800602e:	460e      	mov	r6, r1
 8006030:	4619      	mov	r1, r3
 8006032:	462b      	mov	r3, r5
 8006034:	bfbb      	ittet	lt
 8006036:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800603a:	461d      	movlt	r5, r3
 800603c:	2300      	movge	r3, #0
 800603e:	232d      	movlt	r3, #45	; 0x2d
 8006040:	700b      	strb	r3, [r1, #0]
 8006042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006044:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006048:	4691      	mov	r9, r2
 800604a:	f023 0820 	bic.w	r8, r3, #32
 800604e:	bfbc      	itt	lt
 8006050:	4622      	movlt	r2, r4
 8006052:	4614      	movlt	r4, r2
 8006054:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006058:	d005      	beq.n	8006066 <__cvt+0x42>
 800605a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800605e:	d100      	bne.n	8006062 <__cvt+0x3e>
 8006060:	3601      	adds	r6, #1
 8006062:	2102      	movs	r1, #2
 8006064:	e000      	b.n	8006068 <__cvt+0x44>
 8006066:	2103      	movs	r1, #3
 8006068:	ab03      	add	r3, sp, #12
 800606a:	9301      	str	r3, [sp, #4]
 800606c:	ab02      	add	r3, sp, #8
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	ec45 4b10 	vmov	d0, r4, r5
 8006074:	4653      	mov	r3, sl
 8006076:	4632      	mov	r2, r6
 8006078:	f000 fe5a 	bl	8006d30 <_dtoa_r>
 800607c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006080:	4607      	mov	r7, r0
 8006082:	d102      	bne.n	800608a <__cvt+0x66>
 8006084:	f019 0f01 	tst.w	r9, #1
 8006088:	d022      	beq.n	80060d0 <__cvt+0xac>
 800608a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800608e:	eb07 0906 	add.w	r9, r7, r6
 8006092:	d110      	bne.n	80060b6 <__cvt+0x92>
 8006094:	783b      	ldrb	r3, [r7, #0]
 8006096:	2b30      	cmp	r3, #48	; 0x30
 8006098:	d10a      	bne.n	80060b0 <__cvt+0x8c>
 800609a:	2200      	movs	r2, #0
 800609c:	2300      	movs	r3, #0
 800609e:	4620      	mov	r0, r4
 80060a0:	4629      	mov	r1, r5
 80060a2:	f7fa fd39 	bl	8000b18 <__aeabi_dcmpeq>
 80060a6:	b918      	cbnz	r0, 80060b0 <__cvt+0x8c>
 80060a8:	f1c6 0601 	rsb	r6, r6, #1
 80060ac:	f8ca 6000 	str.w	r6, [sl]
 80060b0:	f8da 3000 	ldr.w	r3, [sl]
 80060b4:	4499      	add	r9, r3
 80060b6:	2200      	movs	r2, #0
 80060b8:	2300      	movs	r3, #0
 80060ba:	4620      	mov	r0, r4
 80060bc:	4629      	mov	r1, r5
 80060be:	f7fa fd2b 	bl	8000b18 <__aeabi_dcmpeq>
 80060c2:	b108      	cbz	r0, 80060c8 <__cvt+0xa4>
 80060c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80060c8:	2230      	movs	r2, #48	; 0x30
 80060ca:	9b03      	ldr	r3, [sp, #12]
 80060cc:	454b      	cmp	r3, r9
 80060ce:	d307      	bcc.n	80060e0 <__cvt+0xbc>
 80060d0:	9b03      	ldr	r3, [sp, #12]
 80060d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060d4:	1bdb      	subs	r3, r3, r7
 80060d6:	4638      	mov	r0, r7
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	b004      	add	sp, #16
 80060dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e0:	1c59      	adds	r1, r3, #1
 80060e2:	9103      	str	r1, [sp, #12]
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	e7f0      	b.n	80060ca <__cvt+0xa6>

080060e8 <__exponent>:
 80060e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060ea:	4603      	mov	r3, r0
 80060ec:	2900      	cmp	r1, #0
 80060ee:	bfb8      	it	lt
 80060f0:	4249      	neglt	r1, r1
 80060f2:	f803 2b02 	strb.w	r2, [r3], #2
 80060f6:	bfb4      	ite	lt
 80060f8:	222d      	movlt	r2, #45	; 0x2d
 80060fa:	222b      	movge	r2, #43	; 0x2b
 80060fc:	2909      	cmp	r1, #9
 80060fe:	7042      	strb	r2, [r0, #1]
 8006100:	dd2a      	ble.n	8006158 <__exponent+0x70>
 8006102:	f10d 0207 	add.w	r2, sp, #7
 8006106:	4617      	mov	r7, r2
 8006108:	260a      	movs	r6, #10
 800610a:	4694      	mov	ip, r2
 800610c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006110:	fb06 1415 	mls	r4, r6, r5, r1
 8006114:	3430      	adds	r4, #48	; 0x30
 8006116:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800611a:	460c      	mov	r4, r1
 800611c:	2c63      	cmp	r4, #99	; 0x63
 800611e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006122:	4629      	mov	r1, r5
 8006124:	dcf1      	bgt.n	800610a <__exponent+0x22>
 8006126:	3130      	adds	r1, #48	; 0x30
 8006128:	f1ac 0402 	sub.w	r4, ip, #2
 800612c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006130:	1c41      	adds	r1, r0, #1
 8006132:	4622      	mov	r2, r4
 8006134:	42ba      	cmp	r2, r7
 8006136:	d30a      	bcc.n	800614e <__exponent+0x66>
 8006138:	f10d 0209 	add.w	r2, sp, #9
 800613c:	eba2 020c 	sub.w	r2, r2, ip
 8006140:	42bc      	cmp	r4, r7
 8006142:	bf88      	it	hi
 8006144:	2200      	movhi	r2, #0
 8006146:	4413      	add	r3, r2
 8006148:	1a18      	subs	r0, r3, r0
 800614a:	b003      	add	sp, #12
 800614c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800614e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006152:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006156:	e7ed      	b.n	8006134 <__exponent+0x4c>
 8006158:	2330      	movs	r3, #48	; 0x30
 800615a:	3130      	adds	r1, #48	; 0x30
 800615c:	7083      	strb	r3, [r0, #2]
 800615e:	70c1      	strb	r1, [r0, #3]
 8006160:	1d03      	adds	r3, r0, #4
 8006162:	e7f1      	b.n	8006148 <__exponent+0x60>

08006164 <_printf_float>:
 8006164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006168:	ed2d 8b02 	vpush	{d8}
 800616c:	b08d      	sub	sp, #52	; 0x34
 800616e:	460c      	mov	r4, r1
 8006170:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006174:	4616      	mov	r6, r2
 8006176:	461f      	mov	r7, r3
 8006178:	4605      	mov	r5, r0
 800617a:	f000 fcd9 	bl	8006b30 <_localeconv_r>
 800617e:	f8d0 a000 	ldr.w	sl, [r0]
 8006182:	4650      	mov	r0, sl
 8006184:	f7fa f89c 	bl	80002c0 <strlen>
 8006188:	2300      	movs	r3, #0
 800618a:	930a      	str	r3, [sp, #40]	; 0x28
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	9305      	str	r3, [sp, #20]
 8006190:	f8d8 3000 	ldr.w	r3, [r8]
 8006194:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006198:	3307      	adds	r3, #7
 800619a:	f023 0307 	bic.w	r3, r3, #7
 800619e:	f103 0208 	add.w	r2, r3, #8
 80061a2:	f8c8 2000 	str.w	r2, [r8]
 80061a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80061ae:	9307      	str	r3, [sp, #28]
 80061b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80061b4:	ee08 0a10 	vmov	s16, r0
 80061b8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80061bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061c0:	4b9e      	ldr	r3, [pc, #632]	; (800643c <_printf_float+0x2d8>)
 80061c2:	f04f 32ff 	mov.w	r2, #4294967295
 80061c6:	f7fa fcd9 	bl	8000b7c <__aeabi_dcmpun>
 80061ca:	bb88      	cbnz	r0, 8006230 <_printf_float+0xcc>
 80061cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061d0:	4b9a      	ldr	r3, [pc, #616]	; (800643c <_printf_float+0x2d8>)
 80061d2:	f04f 32ff 	mov.w	r2, #4294967295
 80061d6:	f7fa fcb3 	bl	8000b40 <__aeabi_dcmple>
 80061da:	bb48      	cbnz	r0, 8006230 <_printf_float+0xcc>
 80061dc:	2200      	movs	r2, #0
 80061de:	2300      	movs	r3, #0
 80061e0:	4640      	mov	r0, r8
 80061e2:	4649      	mov	r1, r9
 80061e4:	f7fa fca2 	bl	8000b2c <__aeabi_dcmplt>
 80061e8:	b110      	cbz	r0, 80061f0 <_printf_float+0x8c>
 80061ea:	232d      	movs	r3, #45	; 0x2d
 80061ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061f0:	4a93      	ldr	r2, [pc, #588]	; (8006440 <_printf_float+0x2dc>)
 80061f2:	4b94      	ldr	r3, [pc, #592]	; (8006444 <_printf_float+0x2e0>)
 80061f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80061f8:	bf94      	ite	ls
 80061fa:	4690      	movls	r8, r2
 80061fc:	4698      	movhi	r8, r3
 80061fe:	2303      	movs	r3, #3
 8006200:	6123      	str	r3, [r4, #16]
 8006202:	9b05      	ldr	r3, [sp, #20]
 8006204:	f023 0304 	bic.w	r3, r3, #4
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	f04f 0900 	mov.w	r9, #0
 800620e:	9700      	str	r7, [sp, #0]
 8006210:	4633      	mov	r3, r6
 8006212:	aa0b      	add	r2, sp, #44	; 0x2c
 8006214:	4621      	mov	r1, r4
 8006216:	4628      	mov	r0, r5
 8006218:	f000 f9da 	bl	80065d0 <_printf_common>
 800621c:	3001      	adds	r0, #1
 800621e:	f040 8090 	bne.w	8006342 <_printf_float+0x1de>
 8006222:	f04f 30ff 	mov.w	r0, #4294967295
 8006226:	b00d      	add	sp, #52	; 0x34
 8006228:	ecbd 8b02 	vpop	{d8}
 800622c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006230:	4642      	mov	r2, r8
 8006232:	464b      	mov	r3, r9
 8006234:	4640      	mov	r0, r8
 8006236:	4649      	mov	r1, r9
 8006238:	f7fa fca0 	bl	8000b7c <__aeabi_dcmpun>
 800623c:	b140      	cbz	r0, 8006250 <_printf_float+0xec>
 800623e:	464b      	mov	r3, r9
 8006240:	2b00      	cmp	r3, #0
 8006242:	bfbc      	itt	lt
 8006244:	232d      	movlt	r3, #45	; 0x2d
 8006246:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800624a:	4a7f      	ldr	r2, [pc, #508]	; (8006448 <_printf_float+0x2e4>)
 800624c:	4b7f      	ldr	r3, [pc, #508]	; (800644c <_printf_float+0x2e8>)
 800624e:	e7d1      	b.n	80061f4 <_printf_float+0x90>
 8006250:	6863      	ldr	r3, [r4, #4]
 8006252:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006256:	9206      	str	r2, [sp, #24]
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	d13f      	bne.n	80062dc <_printf_float+0x178>
 800625c:	2306      	movs	r3, #6
 800625e:	6063      	str	r3, [r4, #4]
 8006260:	9b05      	ldr	r3, [sp, #20]
 8006262:	6861      	ldr	r1, [r4, #4]
 8006264:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006268:	2300      	movs	r3, #0
 800626a:	9303      	str	r3, [sp, #12]
 800626c:	ab0a      	add	r3, sp, #40	; 0x28
 800626e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006272:	ab09      	add	r3, sp, #36	; 0x24
 8006274:	ec49 8b10 	vmov	d0, r8, r9
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	6022      	str	r2, [r4, #0]
 800627c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006280:	4628      	mov	r0, r5
 8006282:	f7ff fecf 	bl	8006024 <__cvt>
 8006286:	9b06      	ldr	r3, [sp, #24]
 8006288:	9909      	ldr	r1, [sp, #36]	; 0x24
 800628a:	2b47      	cmp	r3, #71	; 0x47
 800628c:	4680      	mov	r8, r0
 800628e:	d108      	bne.n	80062a2 <_printf_float+0x13e>
 8006290:	1cc8      	adds	r0, r1, #3
 8006292:	db02      	blt.n	800629a <_printf_float+0x136>
 8006294:	6863      	ldr	r3, [r4, #4]
 8006296:	4299      	cmp	r1, r3
 8006298:	dd41      	ble.n	800631e <_printf_float+0x1ba>
 800629a:	f1ab 0302 	sub.w	r3, fp, #2
 800629e:	fa5f fb83 	uxtb.w	fp, r3
 80062a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80062a6:	d820      	bhi.n	80062ea <_printf_float+0x186>
 80062a8:	3901      	subs	r1, #1
 80062aa:	465a      	mov	r2, fp
 80062ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80062b0:	9109      	str	r1, [sp, #36]	; 0x24
 80062b2:	f7ff ff19 	bl	80060e8 <__exponent>
 80062b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062b8:	1813      	adds	r3, r2, r0
 80062ba:	2a01      	cmp	r2, #1
 80062bc:	4681      	mov	r9, r0
 80062be:	6123      	str	r3, [r4, #16]
 80062c0:	dc02      	bgt.n	80062c8 <_printf_float+0x164>
 80062c2:	6822      	ldr	r2, [r4, #0]
 80062c4:	07d2      	lsls	r2, r2, #31
 80062c6:	d501      	bpl.n	80062cc <_printf_float+0x168>
 80062c8:	3301      	adds	r3, #1
 80062ca:	6123      	str	r3, [r4, #16]
 80062cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d09c      	beq.n	800620e <_printf_float+0xaa>
 80062d4:	232d      	movs	r3, #45	; 0x2d
 80062d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062da:	e798      	b.n	800620e <_printf_float+0xaa>
 80062dc:	9a06      	ldr	r2, [sp, #24]
 80062de:	2a47      	cmp	r2, #71	; 0x47
 80062e0:	d1be      	bne.n	8006260 <_printf_float+0xfc>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1bc      	bne.n	8006260 <_printf_float+0xfc>
 80062e6:	2301      	movs	r3, #1
 80062e8:	e7b9      	b.n	800625e <_printf_float+0xfa>
 80062ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80062ee:	d118      	bne.n	8006322 <_printf_float+0x1be>
 80062f0:	2900      	cmp	r1, #0
 80062f2:	6863      	ldr	r3, [r4, #4]
 80062f4:	dd0b      	ble.n	800630e <_printf_float+0x1aa>
 80062f6:	6121      	str	r1, [r4, #16]
 80062f8:	b913      	cbnz	r3, 8006300 <_printf_float+0x19c>
 80062fa:	6822      	ldr	r2, [r4, #0]
 80062fc:	07d0      	lsls	r0, r2, #31
 80062fe:	d502      	bpl.n	8006306 <_printf_float+0x1a2>
 8006300:	3301      	adds	r3, #1
 8006302:	440b      	add	r3, r1
 8006304:	6123      	str	r3, [r4, #16]
 8006306:	65a1      	str	r1, [r4, #88]	; 0x58
 8006308:	f04f 0900 	mov.w	r9, #0
 800630c:	e7de      	b.n	80062cc <_printf_float+0x168>
 800630e:	b913      	cbnz	r3, 8006316 <_printf_float+0x1b2>
 8006310:	6822      	ldr	r2, [r4, #0]
 8006312:	07d2      	lsls	r2, r2, #31
 8006314:	d501      	bpl.n	800631a <_printf_float+0x1b6>
 8006316:	3302      	adds	r3, #2
 8006318:	e7f4      	b.n	8006304 <_printf_float+0x1a0>
 800631a:	2301      	movs	r3, #1
 800631c:	e7f2      	b.n	8006304 <_printf_float+0x1a0>
 800631e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006324:	4299      	cmp	r1, r3
 8006326:	db05      	blt.n	8006334 <_printf_float+0x1d0>
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	6121      	str	r1, [r4, #16]
 800632c:	07d8      	lsls	r0, r3, #31
 800632e:	d5ea      	bpl.n	8006306 <_printf_float+0x1a2>
 8006330:	1c4b      	adds	r3, r1, #1
 8006332:	e7e7      	b.n	8006304 <_printf_float+0x1a0>
 8006334:	2900      	cmp	r1, #0
 8006336:	bfd4      	ite	le
 8006338:	f1c1 0202 	rsble	r2, r1, #2
 800633c:	2201      	movgt	r2, #1
 800633e:	4413      	add	r3, r2
 8006340:	e7e0      	b.n	8006304 <_printf_float+0x1a0>
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	055a      	lsls	r2, r3, #21
 8006346:	d407      	bmi.n	8006358 <_printf_float+0x1f4>
 8006348:	6923      	ldr	r3, [r4, #16]
 800634a:	4642      	mov	r2, r8
 800634c:	4631      	mov	r1, r6
 800634e:	4628      	mov	r0, r5
 8006350:	47b8      	blx	r7
 8006352:	3001      	adds	r0, #1
 8006354:	d12c      	bne.n	80063b0 <_printf_float+0x24c>
 8006356:	e764      	b.n	8006222 <_printf_float+0xbe>
 8006358:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800635c:	f240 80e0 	bls.w	8006520 <_printf_float+0x3bc>
 8006360:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006364:	2200      	movs	r2, #0
 8006366:	2300      	movs	r3, #0
 8006368:	f7fa fbd6 	bl	8000b18 <__aeabi_dcmpeq>
 800636c:	2800      	cmp	r0, #0
 800636e:	d034      	beq.n	80063da <_printf_float+0x276>
 8006370:	4a37      	ldr	r2, [pc, #220]	; (8006450 <_printf_float+0x2ec>)
 8006372:	2301      	movs	r3, #1
 8006374:	4631      	mov	r1, r6
 8006376:	4628      	mov	r0, r5
 8006378:	47b8      	blx	r7
 800637a:	3001      	adds	r0, #1
 800637c:	f43f af51 	beq.w	8006222 <_printf_float+0xbe>
 8006380:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006384:	429a      	cmp	r2, r3
 8006386:	db02      	blt.n	800638e <_printf_float+0x22a>
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	07d8      	lsls	r0, r3, #31
 800638c:	d510      	bpl.n	80063b0 <_printf_float+0x24c>
 800638e:	ee18 3a10 	vmov	r3, s16
 8006392:	4652      	mov	r2, sl
 8006394:	4631      	mov	r1, r6
 8006396:	4628      	mov	r0, r5
 8006398:	47b8      	blx	r7
 800639a:	3001      	adds	r0, #1
 800639c:	f43f af41 	beq.w	8006222 <_printf_float+0xbe>
 80063a0:	f04f 0800 	mov.w	r8, #0
 80063a4:	f104 091a 	add.w	r9, r4, #26
 80063a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063aa:	3b01      	subs	r3, #1
 80063ac:	4543      	cmp	r3, r8
 80063ae:	dc09      	bgt.n	80063c4 <_printf_float+0x260>
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	079b      	lsls	r3, r3, #30
 80063b4:	f100 8107 	bmi.w	80065c6 <_printf_float+0x462>
 80063b8:	68e0      	ldr	r0, [r4, #12]
 80063ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063bc:	4298      	cmp	r0, r3
 80063be:	bfb8      	it	lt
 80063c0:	4618      	movlt	r0, r3
 80063c2:	e730      	b.n	8006226 <_printf_float+0xc2>
 80063c4:	2301      	movs	r3, #1
 80063c6:	464a      	mov	r2, r9
 80063c8:	4631      	mov	r1, r6
 80063ca:	4628      	mov	r0, r5
 80063cc:	47b8      	blx	r7
 80063ce:	3001      	adds	r0, #1
 80063d0:	f43f af27 	beq.w	8006222 <_printf_float+0xbe>
 80063d4:	f108 0801 	add.w	r8, r8, #1
 80063d8:	e7e6      	b.n	80063a8 <_printf_float+0x244>
 80063da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063dc:	2b00      	cmp	r3, #0
 80063de:	dc39      	bgt.n	8006454 <_printf_float+0x2f0>
 80063e0:	4a1b      	ldr	r2, [pc, #108]	; (8006450 <_printf_float+0x2ec>)
 80063e2:	2301      	movs	r3, #1
 80063e4:	4631      	mov	r1, r6
 80063e6:	4628      	mov	r0, r5
 80063e8:	47b8      	blx	r7
 80063ea:	3001      	adds	r0, #1
 80063ec:	f43f af19 	beq.w	8006222 <_printf_float+0xbe>
 80063f0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80063f4:	4313      	orrs	r3, r2
 80063f6:	d102      	bne.n	80063fe <_printf_float+0x29a>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	07d9      	lsls	r1, r3, #31
 80063fc:	d5d8      	bpl.n	80063b0 <_printf_float+0x24c>
 80063fe:	ee18 3a10 	vmov	r3, s16
 8006402:	4652      	mov	r2, sl
 8006404:	4631      	mov	r1, r6
 8006406:	4628      	mov	r0, r5
 8006408:	47b8      	blx	r7
 800640a:	3001      	adds	r0, #1
 800640c:	f43f af09 	beq.w	8006222 <_printf_float+0xbe>
 8006410:	f04f 0900 	mov.w	r9, #0
 8006414:	f104 0a1a 	add.w	sl, r4, #26
 8006418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800641a:	425b      	negs	r3, r3
 800641c:	454b      	cmp	r3, r9
 800641e:	dc01      	bgt.n	8006424 <_printf_float+0x2c0>
 8006420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006422:	e792      	b.n	800634a <_printf_float+0x1e6>
 8006424:	2301      	movs	r3, #1
 8006426:	4652      	mov	r2, sl
 8006428:	4631      	mov	r1, r6
 800642a:	4628      	mov	r0, r5
 800642c:	47b8      	blx	r7
 800642e:	3001      	adds	r0, #1
 8006430:	f43f aef7 	beq.w	8006222 <_printf_float+0xbe>
 8006434:	f109 0901 	add.w	r9, r9, #1
 8006438:	e7ee      	b.n	8006418 <_printf_float+0x2b4>
 800643a:	bf00      	nop
 800643c:	7fefffff 	.word	0x7fefffff
 8006440:	08008a60 	.word	0x08008a60
 8006444:	08008a64 	.word	0x08008a64
 8006448:	08008a68 	.word	0x08008a68
 800644c:	08008a6c 	.word	0x08008a6c
 8006450:	08008a70 	.word	0x08008a70
 8006454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006456:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006458:	429a      	cmp	r2, r3
 800645a:	bfa8      	it	ge
 800645c:	461a      	movge	r2, r3
 800645e:	2a00      	cmp	r2, #0
 8006460:	4691      	mov	r9, r2
 8006462:	dc37      	bgt.n	80064d4 <_printf_float+0x370>
 8006464:	f04f 0b00 	mov.w	fp, #0
 8006468:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800646c:	f104 021a 	add.w	r2, r4, #26
 8006470:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006472:	9305      	str	r3, [sp, #20]
 8006474:	eba3 0309 	sub.w	r3, r3, r9
 8006478:	455b      	cmp	r3, fp
 800647a:	dc33      	bgt.n	80064e4 <_printf_float+0x380>
 800647c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006480:	429a      	cmp	r2, r3
 8006482:	db3b      	blt.n	80064fc <_printf_float+0x398>
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	07da      	lsls	r2, r3, #31
 8006488:	d438      	bmi.n	80064fc <_printf_float+0x398>
 800648a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800648e:	eba2 0903 	sub.w	r9, r2, r3
 8006492:	9b05      	ldr	r3, [sp, #20]
 8006494:	1ad2      	subs	r2, r2, r3
 8006496:	4591      	cmp	r9, r2
 8006498:	bfa8      	it	ge
 800649a:	4691      	movge	r9, r2
 800649c:	f1b9 0f00 	cmp.w	r9, #0
 80064a0:	dc35      	bgt.n	800650e <_printf_float+0x3aa>
 80064a2:	f04f 0800 	mov.w	r8, #0
 80064a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064aa:	f104 0a1a 	add.w	sl, r4, #26
 80064ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064b2:	1a9b      	subs	r3, r3, r2
 80064b4:	eba3 0309 	sub.w	r3, r3, r9
 80064b8:	4543      	cmp	r3, r8
 80064ba:	f77f af79 	ble.w	80063b0 <_printf_float+0x24c>
 80064be:	2301      	movs	r3, #1
 80064c0:	4652      	mov	r2, sl
 80064c2:	4631      	mov	r1, r6
 80064c4:	4628      	mov	r0, r5
 80064c6:	47b8      	blx	r7
 80064c8:	3001      	adds	r0, #1
 80064ca:	f43f aeaa 	beq.w	8006222 <_printf_float+0xbe>
 80064ce:	f108 0801 	add.w	r8, r8, #1
 80064d2:	e7ec      	b.n	80064ae <_printf_float+0x34a>
 80064d4:	4613      	mov	r3, r2
 80064d6:	4631      	mov	r1, r6
 80064d8:	4642      	mov	r2, r8
 80064da:	4628      	mov	r0, r5
 80064dc:	47b8      	blx	r7
 80064de:	3001      	adds	r0, #1
 80064e0:	d1c0      	bne.n	8006464 <_printf_float+0x300>
 80064e2:	e69e      	b.n	8006222 <_printf_float+0xbe>
 80064e4:	2301      	movs	r3, #1
 80064e6:	4631      	mov	r1, r6
 80064e8:	4628      	mov	r0, r5
 80064ea:	9205      	str	r2, [sp, #20]
 80064ec:	47b8      	blx	r7
 80064ee:	3001      	adds	r0, #1
 80064f0:	f43f ae97 	beq.w	8006222 <_printf_float+0xbe>
 80064f4:	9a05      	ldr	r2, [sp, #20]
 80064f6:	f10b 0b01 	add.w	fp, fp, #1
 80064fa:	e7b9      	b.n	8006470 <_printf_float+0x30c>
 80064fc:	ee18 3a10 	vmov	r3, s16
 8006500:	4652      	mov	r2, sl
 8006502:	4631      	mov	r1, r6
 8006504:	4628      	mov	r0, r5
 8006506:	47b8      	blx	r7
 8006508:	3001      	adds	r0, #1
 800650a:	d1be      	bne.n	800648a <_printf_float+0x326>
 800650c:	e689      	b.n	8006222 <_printf_float+0xbe>
 800650e:	9a05      	ldr	r2, [sp, #20]
 8006510:	464b      	mov	r3, r9
 8006512:	4442      	add	r2, r8
 8006514:	4631      	mov	r1, r6
 8006516:	4628      	mov	r0, r5
 8006518:	47b8      	blx	r7
 800651a:	3001      	adds	r0, #1
 800651c:	d1c1      	bne.n	80064a2 <_printf_float+0x33e>
 800651e:	e680      	b.n	8006222 <_printf_float+0xbe>
 8006520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006522:	2a01      	cmp	r2, #1
 8006524:	dc01      	bgt.n	800652a <_printf_float+0x3c6>
 8006526:	07db      	lsls	r3, r3, #31
 8006528:	d53a      	bpl.n	80065a0 <_printf_float+0x43c>
 800652a:	2301      	movs	r3, #1
 800652c:	4642      	mov	r2, r8
 800652e:	4631      	mov	r1, r6
 8006530:	4628      	mov	r0, r5
 8006532:	47b8      	blx	r7
 8006534:	3001      	adds	r0, #1
 8006536:	f43f ae74 	beq.w	8006222 <_printf_float+0xbe>
 800653a:	ee18 3a10 	vmov	r3, s16
 800653e:	4652      	mov	r2, sl
 8006540:	4631      	mov	r1, r6
 8006542:	4628      	mov	r0, r5
 8006544:	47b8      	blx	r7
 8006546:	3001      	adds	r0, #1
 8006548:	f43f ae6b 	beq.w	8006222 <_printf_float+0xbe>
 800654c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006550:	2200      	movs	r2, #0
 8006552:	2300      	movs	r3, #0
 8006554:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006558:	f7fa fade 	bl	8000b18 <__aeabi_dcmpeq>
 800655c:	b9d8      	cbnz	r0, 8006596 <_printf_float+0x432>
 800655e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006562:	f108 0201 	add.w	r2, r8, #1
 8006566:	4631      	mov	r1, r6
 8006568:	4628      	mov	r0, r5
 800656a:	47b8      	blx	r7
 800656c:	3001      	adds	r0, #1
 800656e:	d10e      	bne.n	800658e <_printf_float+0x42a>
 8006570:	e657      	b.n	8006222 <_printf_float+0xbe>
 8006572:	2301      	movs	r3, #1
 8006574:	4652      	mov	r2, sl
 8006576:	4631      	mov	r1, r6
 8006578:	4628      	mov	r0, r5
 800657a:	47b8      	blx	r7
 800657c:	3001      	adds	r0, #1
 800657e:	f43f ae50 	beq.w	8006222 <_printf_float+0xbe>
 8006582:	f108 0801 	add.w	r8, r8, #1
 8006586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006588:	3b01      	subs	r3, #1
 800658a:	4543      	cmp	r3, r8
 800658c:	dcf1      	bgt.n	8006572 <_printf_float+0x40e>
 800658e:	464b      	mov	r3, r9
 8006590:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006594:	e6da      	b.n	800634c <_printf_float+0x1e8>
 8006596:	f04f 0800 	mov.w	r8, #0
 800659a:	f104 0a1a 	add.w	sl, r4, #26
 800659e:	e7f2      	b.n	8006586 <_printf_float+0x422>
 80065a0:	2301      	movs	r3, #1
 80065a2:	4642      	mov	r2, r8
 80065a4:	e7df      	b.n	8006566 <_printf_float+0x402>
 80065a6:	2301      	movs	r3, #1
 80065a8:	464a      	mov	r2, r9
 80065aa:	4631      	mov	r1, r6
 80065ac:	4628      	mov	r0, r5
 80065ae:	47b8      	blx	r7
 80065b0:	3001      	adds	r0, #1
 80065b2:	f43f ae36 	beq.w	8006222 <_printf_float+0xbe>
 80065b6:	f108 0801 	add.w	r8, r8, #1
 80065ba:	68e3      	ldr	r3, [r4, #12]
 80065bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065be:	1a5b      	subs	r3, r3, r1
 80065c0:	4543      	cmp	r3, r8
 80065c2:	dcf0      	bgt.n	80065a6 <_printf_float+0x442>
 80065c4:	e6f8      	b.n	80063b8 <_printf_float+0x254>
 80065c6:	f04f 0800 	mov.w	r8, #0
 80065ca:	f104 0919 	add.w	r9, r4, #25
 80065ce:	e7f4      	b.n	80065ba <_printf_float+0x456>

080065d0 <_printf_common>:
 80065d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d4:	4616      	mov	r6, r2
 80065d6:	4699      	mov	r9, r3
 80065d8:	688a      	ldr	r2, [r1, #8]
 80065da:	690b      	ldr	r3, [r1, #16]
 80065dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065e0:	4293      	cmp	r3, r2
 80065e2:	bfb8      	it	lt
 80065e4:	4613      	movlt	r3, r2
 80065e6:	6033      	str	r3, [r6, #0]
 80065e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065ec:	4607      	mov	r7, r0
 80065ee:	460c      	mov	r4, r1
 80065f0:	b10a      	cbz	r2, 80065f6 <_printf_common+0x26>
 80065f2:	3301      	adds	r3, #1
 80065f4:	6033      	str	r3, [r6, #0]
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	0699      	lsls	r1, r3, #26
 80065fa:	bf42      	ittt	mi
 80065fc:	6833      	ldrmi	r3, [r6, #0]
 80065fe:	3302      	addmi	r3, #2
 8006600:	6033      	strmi	r3, [r6, #0]
 8006602:	6825      	ldr	r5, [r4, #0]
 8006604:	f015 0506 	ands.w	r5, r5, #6
 8006608:	d106      	bne.n	8006618 <_printf_common+0x48>
 800660a:	f104 0a19 	add.w	sl, r4, #25
 800660e:	68e3      	ldr	r3, [r4, #12]
 8006610:	6832      	ldr	r2, [r6, #0]
 8006612:	1a9b      	subs	r3, r3, r2
 8006614:	42ab      	cmp	r3, r5
 8006616:	dc26      	bgt.n	8006666 <_printf_common+0x96>
 8006618:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800661c:	1e13      	subs	r3, r2, #0
 800661e:	6822      	ldr	r2, [r4, #0]
 8006620:	bf18      	it	ne
 8006622:	2301      	movne	r3, #1
 8006624:	0692      	lsls	r2, r2, #26
 8006626:	d42b      	bmi.n	8006680 <_printf_common+0xb0>
 8006628:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800662c:	4649      	mov	r1, r9
 800662e:	4638      	mov	r0, r7
 8006630:	47c0      	blx	r8
 8006632:	3001      	adds	r0, #1
 8006634:	d01e      	beq.n	8006674 <_printf_common+0xa4>
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	6922      	ldr	r2, [r4, #16]
 800663a:	f003 0306 	and.w	r3, r3, #6
 800663e:	2b04      	cmp	r3, #4
 8006640:	bf02      	ittt	eq
 8006642:	68e5      	ldreq	r5, [r4, #12]
 8006644:	6833      	ldreq	r3, [r6, #0]
 8006646:	1aed      	subeq	r5, r5, r3
 8006648:	68a3      	ldr	r3, [r4, #8]
 800664a:	bf0c      	ite	eq
 800664c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006650:	2500      	movne	r5, #0
 8006652:	4293      	cmp	r3, r2
 8006654:	bfc4      	itt	gt
 8006656:	1a9b      	subgt	r3, r3, r2
 8006658:	18ed      	addgt	r5, r5, r3
 800665a:	2600      	movs	r6, #0
 800665c:	341a      	adds	r4, #26
 800665e:	42b5      	cmp	r5, r6
 8006660:	d11a      	bne.n	8006698 <_printf_common+0xc8>
 8006662:	2000      	movs	r0, #0
 8006664:	e008      	b.n	8006678 <_printf_common+0xa8>
 8006666:	2301      	movs	r3, #1
 8006668:	4652      	mov	r2, sl
 800666a:	4649      	mov	r1, r9
 800666c:	4638      	mov	r0, r7
 800666e:	47c0      	blx	r8
 8006670:	3001      	adds	r0, #1
 8006672:	d103      	bne.n	800667c <_printf_common+0xac>
 8006674:	f04f 30ff 	mov.w	r0, #4294967295
 8006678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667c:	3501      	adds	r5, #1
 800667e:	e7c6      	b.n	800660e <_printf_common+0x3e>
 8006680:	18e1      	adds	r1, r4, r3
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	2030      	movs	r0, #48	; 0x30
 8006686:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800668a:	4422      	add	r2, r4
 800668c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006690:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006694:	3302      	adds	r3, #2
 8006696:	e7c7      	b.n	8006628 <_printf_common+0x58>
 8006698:	2301      	movs	r3, #1
 800669a:	4622      	mov	r2, r4
 800669c:	4649      	mov	r1, r9
 800669e:	4638      	mov	r0, r7
 80066a0:	47c0      	blx	r8
 80066a2:	3001      	adds	r0, #1
 80066a4:	d0e6      	beq.n	8006674 <_printf_common+0xa4>
 80066a6:	3601      	adds	r6, #1
 80066a8:	e7d9      	b.n	800665e <_printf_common+0x8e>
	...

080066ac <_printf_i>:
 80066ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066b0:	7e0f      	ldrb	r7, [r1, #24]
 80066b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066b4:	2f78      	cmp	r7, #120	; 0x78
 80066b6:	4691      	mov	r9, r2
 80066b8:	4680      	mov	r8, r0
 80066ba:	460c      	mov	r4, r1
 80066bc:	469a      	mov	sl, r3
 80066be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066c2:	d807      	bhi.n	80066d4 <_printf_i+0x28>
 80066c4:	2f62      	cmp	r7, #98	; 0x62
 80066c6:	d80a      	bhi.n	80066de <_printf_i+0x32>
 80066c8:	2f00      	cmp	r7, #0
 80066ca:	f000 80d4 	beq.w	8006876 <_printf_i+0x1ca>
 80066ce:	2f58      	cmp	r7, #88	; 0x58
 80066d0:	f000 80c0 	beq.w	8006854 <_printf_i+0x1a8>
 80066d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066dc:	e03a      	b.n	8006754 <_printf_i+0xa8>
 80066de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066e2:	2b15      	cmp	r3, #21
 80066e4:	d8f6      	bhi.n	80066d4 <_printf_i+0x28>
 80066e6:	a101      	add	r1, pc, #4	; (adr r1, 80066ec <_printf_i+0x40>)
 80066e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066ec:	08006745 	.word	0x08006745
 80066f0:	08006759 	.word	0x08006759
 80066f4:	080066d5 	.word	0x080066d5
 80066f8:	080066d5 	.word	0x080066d5
 80066fc:	080066d5 	.word	0x080066d5
 8006700:	080066d5 	.word	0x080066d5
 8006704:	08006759 	.word	0x08006759
 8006708:	080066d5 	.word	0x080066d5
 800670c:	080066d5 	.word	0x080066d5
 8006710:	080066d5 	.word	0x080066d5
 8006714:	080066d5 	.word	0x080066d5
 8006718:	0800685d 	.word	0x0800685d
 800671c:	08006785 	.word	0x08006785
 8006720:	08006817 	.word	0x08006817
 8006724:	080066d5 	.word	0x080066d5
 8006728:	080066d5 	.word	0x080066d5
 800672c:	0800687f 	.word	0x0800687f
 8006730:	080066d5 	.word	0x080066d5
 8006734:	08006785 	.word	0x08006785
 8006738:	080066d5 	.word	0x080066d5
 800673c:	080066d5 	.word	0x080066d5
 8006740:	0800681f 	.word	0x0800681f
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	1d1a      	adds	r2, r3, #4
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	602a      	str	r2, [r5, #0]
 800674c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006750:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006754:	2301      	movs	r3, #1
 8006756:	e09f      	b.n	8006898 <_printf_i+0x1ec>
 8006758:	6820      	ldr	r0, [r4, #0]
 800675a:	682b      	ldr	r3, [r5, #0]
 800675c:	0607      	lsls	r7, r0, #24
 800675e:	f103 0104 	add.w	r1, r3, #4
 8006762:	6029      	str	r1, [r5, #0]
 8006764:	d501      	bpl.n	800676a <_printf_i+0xbe>
 8006766:	681e      	ldr	r6, [r3, #0]
 8006768:	e003      	b.n	8006772 <_printf_i+0xc6>
 800676a:	0646      	lsls	r6, r0, #25
 800676c:	d5fb      	bpl.n	8006766 <_printf_i+0xba>
 800676e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006772:	2e00      	cmp	r6, #0
 8006774:	da03      	bge.n	800677e <_printf_i+0xd2>
 8006776:	232d      	movs	r3, #45	; 0x2d
 8006778:	4276      	negs	r6, r6
 800677a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800677e:	485a      	ldr	r0, [pc, #360]	; (80068e8 <_printf_i+0x23c>)
 8006780:	230a      	movs	r3, #10
 8006782:	e012      	b.n	80067aa <_printf_i+0xfe>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	6820      	ldr	r0, [r4, #0]
 8006788:	1d19      	adds	r1, r3, #4
 800678a:	6029      	str	r1, [r5, #0]
 800678c:	0605      	lsls	r5, r0, #24
 800678e:	d501      	bpl.n	8006794 <_printf_i+0xe8>
 8006790:	681e      	ldr	r6, [r3, #0]
 8006792:	e002      	b.n	800679a <_printf_i+0xee>
 8006794:	0641      	lsls	r1, r0, #25
 8006796:	d5fb      	bpl.n	8006790 <_printf_i+0xe4>
 8006798:	881e      	ldrh	r6, [r3, #0]
 800679a:	4853      	ldr	r0, [pc, #332]	; (80068e8 <_printf_i+0x23c>)
 800679c:	2f6f      	cmp	r7, #111	; 0x6f
 800679e:	bf0c      	ite	eq
 80067a0:	2308      	moveq	r3, #8
 80067a2:	230a      	movne	r3, #10
 80067a4:	2100      	movs	r1, #0
 80067a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067aa:	6865      	ldr	r5, [r4, #4]
 80067ac:	60a5      	str	r5, [r4, #8]
 80067ae:	2d00      	cmp	r5, #0
 80067b0:	bfa2      	ittt	ge
 80067b2:	6821      	ldrge	r1, [r4, #0]
 80067b4:	f021 0104 	bicge.w	r1, r1, #4
 80067b8:	6021      	strge	r1, [r4, #0]
 80067ba:	b90e      	cbnz	r6, 80067c0 <_printf_i+0x114>
 80067bc:	2d00      	cmp	r5, #0
 80067be:	d04b      	beq.n	8006858 <_printf_i+0x1ac>
 80067c0:	4615      	mov	r5, r2
 80067c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80067c6:	fb03 6711 	mls	r7, r3, r1, r6
 80067ca:	5dc7      	ldrb	r7, [r0, r7]
 80067cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067d0:	4637      	mov	r7, r6
 80067d2:	42bb      	cmp	r3, r7
 80067d4:	460e      	mov	r6, r1
 80067d6:	d9f4      	bls.n	80067c2 <_printf_i+0x116>
 80067d8:	2b08      	cmp	r3, #8
 80067da:	d10b      	bne.n	80067f4 <_printf_i+0x148>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	07de      	lsls	r6, r3, #31
 80067e0:	d508      	bpl.n	80067f4 <_printf_i+0x148>
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	6861      	ldr	r1, [r4, #4]
 80067e6:	4299      	cmp	r1, r3
 80067e8:	bfde      	ittt	le
 80067ea:	2330      	movle	r3, #48	; 0x30
 80067ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067f4:	1b52      	subs	r2, r2, r5
 80067f6:	6122      	str	r2, [r4, #16]
 80067f8:	f8cd a000 	str.w	sl, [sp]
 80067fc:	464b      	mov	r3, r9
 80067fe:	aa03      	add	r2, sp, #12
 8006800:	4621      	mov	r1, r4
 8006802:	4640      	mov	r0, r8
 8006804:	f7ff fee4 	bl	80065d0 <_printf_common>
 8006808:	3001      	adds	r0, #1
 800680a:	d14a      	bne.n	80068a2 <_printf_i+0x1f6>
 800680c:	f04f 30ff 	mov.w	r0, #4294967295
 8006810:	b004      	add	sp, #16
 8006812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	f043 0320 	orr.w	r3, r3, #32
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	4833      	ldr	r0, [pc, #204]	; (80068ec <_printf_i+0x240>)
 8006820:	2778      	movs	r7, #120	; 0x78
 8006822:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	6829      	ldr	r1, [r5, #0]
 800682a:	061f      	lsls	r7, r3, #24
 800682c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006830:	d402      	bmi.n	8006838 <_printf_i+0x18c>
 8006832:	065f      	lsls	r7, r3, #25
 8006834:	bf48      	it	mi
 8006836:	b2b6      	uxthmi	r6, r6
 8006838:	07df      	lsls	r7, r3, #31
 800683a:	bf48      	it	mi
 800683c:	f043 0320 	orrmi.w	r3, r3, #32
 8006840:	6029      	str	r1, [r5, #0]
 8006842:	bf48      	it	mi
 8006844:	6023      	strmi	r3, [r4, #0]
 8006846:	b91e      	cbnz	r6, 8006850 <_printf_i+0x1a4>
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	f023 0320 	bic.w	r3, r3, #32
 800684e:	6023      	str	r3, [r4, #0]
 8006850:	2310      	movs	r3, #16
 8006852:	e7a7      	b.n	80067a4 <_printf_i+0xf8>
 8006854:	4824      	ldr	r0, [pc, #144]	; (80068e8 <_printf_i+0x23c>)
 8006856:	e7e4      	b.n	8006822 <_printf_i+0x176>
 8006858:	4615      	mov	r5, r2
 800685a:	e7bd      	b.n	80067d8 <_printf_i+0x12c>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	6826      	ldr	r6, [r4, #0]
 8006860:	6961      	ldr	r1, [r4, #20]
 8006862:	1d18      	adds	r0, r3, #4
 8006864:	6028      	str	r0, [r5, #0]
 8006866:	0635      	lsls	r5, r6, #24
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	d501      	bpl.n	8006870 <_printf_i+0x1c4>
 800686c:	6019      	str	r1, [r3, #0]
 800686e:	e002      	b.n	8006876 <_printf_i+0x1ca>
 8006870:	0670      	lsls	r0, r6, #25
 8006872:	d5fb      	bpl.n	800686c <_printf_i+0x1c0>
 8006874:	8019      	strh	r1, [r3, #0]
 8006876:	2300      	movs	r3, #0
 8006878:	6123      	str	r3, [r4, #16]
 800687a:	4615      	mov	r5, r2
 800687c:	e7bc      	b.n	80067f8 <_printf_i+0x14c>
 800687e:	682b      	ldr	r3, [r5, #0]
 8006880:	1d1a      	adds	r2, r3, #4
 8006882:	602a      	str	r2, [r5, #0]
 8006884:	681d      	ldr	r5, [r3, #0]
 8006886:	6862      	ldr	r2, [r4, #4]
 8006888:	2100      	movs	r1, #0
 800688a:	4628      	mov	r0, r5
 800688c:	f7f9 fcc8 	bl	8000220 <memchr>
 8006890:	b108      	cbz	r0, 8006896 <_printf_i+0x1ea>
 8006892:	1b40      	subs	r0, r0, r5
 8006894:	6060      	str	r0, [r4, #4]
 8006896:	6863      	ldr	r3, [r4, #4]
 8006898:	6123      	str	r3, [r4, #16]
 800689a:	2300      	movs	r3, #0
 800689c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068a0:	e7aa      	b.n	80067f8 <_printf_i+0x14c>
 80068a2:	6923      	ldr	r3, [r4, #16]
 80068a4:	462a      	mov	r2, r5
 80068a6:	4649      	mov	r1, r9
 80068a8:	4640      	mov	r0, r8
 80068aa:	47d0      	blx	sl
 80068ac:	3001      	adds	r0, #1
 80068ae:	d0ad      	beq.n	800680c <_printf_i+0x160>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	079b      	lsls	r3, r3, #30
 80068b4:	d413      	bmi.n	80068de <_printf_i+0x232>
 80068b6:	68e0      	ldr	r0, [r4, #12]
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	4298      	cmp	r0, r3
 80068bc:	bfb8      	it	lt
 80068be:	4618      	movlt	r0, r3
 80068c0:	e7a6      	b.n	8006810 <_printf_i+0x164>
 80068c2:	2301      	movs	r3, #1
 80068c4:	4632      	mov	r2, r6
 80068c6:	4649      	mov	r1, r9
 80068c8:	4640      	mov	r0, r8
 80068ca:	47d0      	blx	sl
 80068cc:	3001      	adds	r0, #1
 80068ce:	d09d      	beq.n	800680c <_printf_i+0x160>
 80068d0:	3501      	adds	r5, #1
 80068d2:	68e3      	ldr	r3, [r4, #12]
 80068d4:	9903      	ldr	r1, [sp, #12]
 80068d6:	1a5b      	subs	r3, r3, r1
 80068d8:	42ab      	cmp	r3, r5
 80068da:	dcf2      	bgt.n	80068c2 <_printf_i+0x216>
 80068dc:	e7eb      	b.n	80068b6 <_printf_i+0x20a>
 80068de:	2500      	movs	r5, #0
 80068e0:	f104 0619 	add.w	r6, r4, #25
 80068e4:	e7f5      	b.n	80068d2 <_printf_i+0x226>
 80068e6:	bf00      	nop
 80068e8:	08008a72 	.word	0x08008a72
 80068ec:	08008a83 	.word	0x08008a83

080068f0 <std>:
 80068f0:	2300      	movs	r3, #0
 80068f2:	b510      	push	{r4, lr}
 80068f4:	4604      	mov	r4, r0
 80068f6:	e9c0 3300 	strd	r3, r3, [r0]
 80068fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068fe:	6083      	str	r3, [r0, #8]
 8006900:	8181      	strh	r1, [r0, #12]
 8006902:	6643      	str	r3, [r0, #100]	; 0x64
 8006904:	81c2      	strh	r2, [r0, #14]
 8006906:	6183      	str	r3, [r0, #24]
 8006908:	4619      	mov	r1, r3
 800690a:	2208      	movs	r2, #8
 800690c:	305c      	adds	r0, #92	; 0x5c
 800690e:	f000 f906 	bl	8006b1e <memset>
 8006912:	4b0d      	ldr	r3, [pc, #52]	; (8006948 <std+0x58>)
 8006914:	6263      	str	r3, [r4, #36]	; 0x24
 8006916:	4b0d      	ldr	r3, [pc, #52]	; (800694c <std+0x5c>)
 8006918:	62a3      	str	r3, [r4, #40]	; 0x28
 800691a:	4b0d      	ldr	r3, [pc, #52]	; (8006950 <std+0x60>)
 800691c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800691e:	4b0d      	ldr	r3, [pc, #52]	; (8006954 <std+0x64>)
 8006920:	6323      	str	r3, [r4, #48]	; 0x30
 8006922:	4b0d      	ldr	r3, [pc, #52]	; (8006958 <std+0x68>)
 8006924:	6224      	str	r4, [r4, #32]
 8006926:	429c      	cmp	r4, r3
 8006928:	d006      	beq.n	8006938 <std+0x48>
 800692a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800692e:	4294      	cmp	r4, r2
 8006930:	d002      	beq.n	8006938 <std+0x48>
 8006932:	33d0      	adds	r3, #208	; 0xd0
 8006934:	429c      	cmp	r4, r3
 8006936:	d105      	bne.n	8006944 <std+0x54>
 8006938:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800693c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006940:	f000 b96a 	b.w	8006c18 <__retarget_lock_init_recursive>
 8006944:	bd10      	pop	{r4, pc}
 8006946:	bf00      	nop
 8006948:	08006a99 	.word	0x08006a99
 800694c:	08006abb 	.word	0x08006abb
 8006950:	08006af3 	.word	0x08006af3
 8006954:	08006b17 	.word	0x08006b17
 8006958:	20000450 	.word	0x20000450

0800695c <stdio_exit_handler>:
 800695c:	4a02      	ldr	r2, [pc, #8]	; (8006968 <stdio_exit_handler+0xc>)
 800695e:	4903      	ldr	r1, [pc, #12]	; (800696c <stdio_exit_handler+0x10>)
 8006960:	4803      	ldr	r0, [pc, #12]	; (8006970 <stdio_exit_handler+0x14>)
 8006962:	f000 b869 	b.w	8006a38 <_fwalk_sglue>
 8006966:	bf00      	nop
 8006968:	2000000c 	.word	0x2000000c
 800696c:	080085a1 	.word	0x080085a1
 8006970:	20000018 	.word	0x20000018

08006974 <cleanup_stdio>:
 8006974:	6841      	ldr	r1, [r0, #4]
 8006976:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <cleanup_stdio+0x34>)
 8006978:	4299      	cmp	r1, r3
 800697a:	b510      	push	{r4, lr}
 800697c:	4604      	mov	r4, r0
 800697e:	d001      	beq.n	8006984 <cleanup_stdio+0x10>
 8006980:	f001 fe0e 	bl	80085a0 <_fflush_r>
 8006984:	68a1      	ldr	r1, [r4, #8]
 8006986:	4b09      	ldr	r3, [pc, #36]	; (80069ac <cleanup_stdio+0x38>)
 8006988:	4299      	cmp	r1, r3
 800698a:	d002      	beq.n	8006992 <cleanup_stdio+0x1e>
 800698c:	4620      	mov	r0, r4
 800698e:	f001 fe07 	bl	80085a0 <_fflush_r>
 8006992:	68e1      	ldr	r1, [r4, #12]
 8006994:	4b06      	ldr	r3, [pc, #24]	; (80069b0 <cleanup_stdio+0x3c>)
 8006996:	4299      	cmp	r1, r3
 8006998:	d004      	beq.n	80069a4 <cleanup_stdio+0x30>
 800699a:	4620      	mov	r0, r4
 800699c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069a0:	f001 bdfe 	b.w	80085a0 <_fflush_r>
 80069a4:	bd10      	pop	{r4, pc}
 80069a6:	bf00      	nop
 80069a8:	20000450 	.word	0x20000450
 80069ac:	200004b8 	.word	0x200004b8
 80069b0:	20000520 	.word	0x20000520

080069b4 <global_stdio_init.part.0>:
 80069b4:	b510      	push	{r4, lr}
 80069b6:	4b0b      	ldr	r3, [pc, #44]	; (80069e4 <global_stdio_init.part.0+0x30>)
 80069b8:	4c0b      	ldr	r4, [pc, #44]	; (80069e8 <global_stdio_init.part.0+0x34>)
 80069ba:	4a0c      	ldr	r2, [pc, #48]	; (80069ec <global_stdio_init.part.0+0x38>)
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	4620      	mov	r0, r4
 80069c0:	2200      	movs	r2, #0
 80069c2:	2104      	movs	r1, #4
 80069c4:	f7ff ff94 	bl	80068f0 <std>
 80069c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80069cc:	2201      	movs	r2, #1
 80069ce:	2109      	movs	r1, #9
 80069d0:	f7ff ff8e 	bl	80068f0 <std>
 80069d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80069d8:	2202      	movs	r2, #2
 80069da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069de:	2112      	movs	r1, #18
 80069e0:	f7ff bf86 	b.w	80068f0 <std>
 80069e4:	20000588 	.word	0x20000588
 80069e8:	20000450 	.word	0x20000450
 80069ec:	0800695d 	.word	0x0800695d

080069f0 <__sfp_lock_acquire>:
 80069f0:	4801      	ldr	r0, [pc, #4]	; (80069f8 <__sfp_lock_acquire+0x8>)
 80069f2:	f000 b912 	b.w	8006c1a <__retarget_lock_acquire_recursive>
 80069f6:	bf00      	nop
 80069f8:	20000591 	.word	0x20000591

080069fc <__sfp_lock_release>:
 80069fc:	4801      	ldr	r0, [pc, #4]	; (8006a04 <__sfp_lock_release+0x8>)
 80069fe:	f000 b90d 	b.w	8006c1c <__retarget_lock_release_recursive>
 8006a02:	bf00      	nop
 8006a04:	20000591 	.word	0x20000591

08006a08 <__sinit>:
 8006a08:	b510      	push	{r4, lr}
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	f7ff fff0 	bl	80069f0 <__sfp_lock_acquire>
 8006a10:	6a23      	ldr	r3, [r4, #32]
 8006a12:	b11b      	cbz	r3, 8006a1c <__sinit+0x14>
 8006a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a18:	f7ff bff0 	b.w	80069fc <__sfp_lock_release>
 8006a1c:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <__sinit+0x28>)
 8006a1e:	6223      	str	r3, [r4, #32]
 8006a20:	4b04      	ldr	r3, [pc, #16]	; (8006a34 <__sinit+0x2c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1f5      	bne.n	8006a14 <__sinit+0xc>
 8006a28:	f7ff ffc4 	bl	80069b4 <global_stdio_init.part.0>
 8006a2c:	e7f2      	b.n	8006a14 <__sinit+0xc>
 8006a2e:	bf00      	nop
 8006a30:	08006975 	.word	0x08006975
 8006a34:	20000588 	.word	0x20000588

08006a38 <_fwalk_sglue>:
 8006a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a3c:	4607      	mov	r7, r0
 8006a3e:	4688      	mov	r8, r1
 8006a40:	4614      	mov	r4, r2
 8006a42:	2600      	movs	r6, #0
 8006a44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a48:	f1b9 0901 	subs.w	r9, r9, #1
 8006a4c:	d505      	bpl.n	8006a5a <_fwalk_sglue+0x22>
 8006a4e:	6824      	ldr	r4, [r4, #0]
 8006a50:	2c00      	cmp	r4, #0
 8006a52:	d1f7      	bne.n	8006a44 <_fwalk_sglue+0xc>
 8006a54:	4630      	mov	r0, r6
 8006a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a5a:	89ab      	ldrh	r3, [r5, #12]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d907      	bls.n	8006a70 <_fwalk_sglue+0x38>
 8006a60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a64:	3301      	adds	r3, #1
 8006a66:	d003      	beq.n	8006a70 <_fwalk_sglue+0x38>
 8006a68:	4629      	mov	r1, r5
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	47c0      	blx	r8
 8006a6e:	4306      	orrs	r6, r0
 8006a70:	3568      	adds	r5, #104	; 0x68
 8006a72:	e7e9      	b.n	8006a48 <_fwalk_sglue+0x10>

08006a74 <iprintf>:
 8006a74:	b40f      	push	{r0, r1, r2, r3}
 8006a76:	b507      	push	{r0, r1, r2, lr}
 8006a78:	4906      	ldr	r1, [pc, #24]	; (8006a94 <iprintf+0x20>)
 8006a7a:	ab04      	add	r3, sp, #16
 8006a7c:	6808      	ldr	r0, [r1, #0]
 8006a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a82:	6881      	ldr	r1, [r0, #8]
 8006a84:	9301      	str	r3, [sp, #4]
 8006a86:	f001 fbeb 	bl	8008260 <_vfiprintf_r>
 8006a8a:	b003      	add	sp, #12
 8006a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a90:	b004      	add	sp, #16
 8006a92:	4770      	bx	lr
 8006a94:	20000064 	.word	0x20000064

08006a98 <__sread>:
 8006a98:	b510      	push	{r4, lr}
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa0:	f000 f86c 	bl	8006b7c <_read_r>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	bfab      	itete	ge
 8006aa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8006aac:	181b      	addge	r3, r3, r0
 8006aae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ab2:	bfac      	ite	ge
 8006ab4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ab6:	81a3      	strhlt	r3, [r4, #12]
 8006ab8:	bd10      	pop	{r4, pc}

08006aba <__swrite>:
 8006aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006abe:	461f      	mov	r7, r3
 8006ac0:	898b      	ldrh	r3, [r1, #12]
 8006ac2:	05db      	lsls	r3, r3, #23
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	4616      	mov	r6, r2
 8006aca:	d505      	bpl.n	8006ad8 <__swrite+0x1e>
 8006acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f000 f840 	bl	8006b58 <_lseek_r>
 8006ad8:	89a3      	ldrh	r3, [r4, #12]
 8006ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ae2:	81a3      	strh	r3, [r4, #12]
 8006ae4:	4632      	mov	r2, r6
 8006ae6:	463b      	mov	r3, r7
 8006ae8:	4628      	mov	r0, r5
 8006aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aee:	f000 b857 	b.w	8006ba0 <_write_r>

08006af2 <__sseek>:
 8006af2:	b510      	push	{r4, lr}
 8006af4:	460c      	mov	r4, r1
 8006af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006afa:	f000 f82d 	bl	8006b58 <_lseek_r>
 8006afe:	1c43      	adds	r3, r0, #1
 8006b00:	89a3      	ldrh	r3, [r4, #12]
 8006b02:	bf15      	itete	ne
 8006b04:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b0e:	81a3      	strheq	r3, [r4, #12]
 8006b10:	bf18      	it	ne
 8006b12:	81a3      	strhne	r3, [r4, #12]
 8006b14:	bd10      	pop	{r4, pc}

08006b16 <__sclose>:
 8006b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b1a:	f000 b80d 	b.w	8006b38 <_close_r>

08006b1e <memset>:
 8006b1e:	4402      	add	r2, r0
 8006b20:	4603      	mov	r3, r0
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d100      	bne.n	8006b28 <memset+0xa>
 8006b26:	4770      	bx	lr
 8006b28:	f803 1b01 	strb.w	r1, [r3], #1
 8006b2c:	e7f9      	b.n	8006b22 <memset+0x4>
	...

08006b30 <_localeconv_r>:
 8006b30:	4800      	ldr	r0, [pc, #0]	; (8006b34 <_localeconv_r+0x4>)
 8006b32:	4770      	bx	lr
 8006b34:	20000158 	.word	0x20000158

08006b38 <_close_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4d06      	ldr	r5, [pc, #24]	; (8006b54 <_close_r+0x1c>)
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4604      	mov	r4, r0
 8006b40:	4608      	mov	r0, r1
 8006b42:	602b      	str	r3, [r5, #0]
 8006b44:	f7fb f81d 	bl	8001b82 <_close>
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	d102      	bne.n	8006b52 <_close_r+0x1a>
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	b103      	cbz	r3, 8006b52 <_close_r+0x1a>
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	bd38      	pop	{r3, r4, r5, pc}
 8006b54:	2000058c 	.word	0x2000058c

08006b58 <_lseek_r>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	4d07      	ldr	r5, [pc, #28]	; (8006b78 <_lseek_r+0x20>)
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	4608      	mov	r0, r1
 8006b60:	4611      	mov	r1, r2
 8006b62:	2200      	movs	r2, #0
 8006b64:	602a      	str	r2, [r5, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	f7fb f832 	bl	8001bd0 <_lseek>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d102      	bne.n	8006b76 <_lseek_r+0x1e>
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	b103      	cbz	r3, 8006b76 <_lseek_r+0x1e>
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	2000058c 	.word	0x2000058c

08006b7c <_read_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4d07      	ldr	r5, [pc, #28]	; (8006b9c <_read_r+0x20>)
 8006b80:	4604      	mov	r4, r0
 8006b82:	4608      	mov	r0, r1
 8006b84:	4611      	mov	r1, r2
 8006b86:	2200      	movs	r2, #0
 8006b88:	602a      	str	r2, [r5, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f7fa ffdc 	bl	8001b48 <_read>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d102      	bne.n	8006b9a <_read_r+0x1e>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	b103      	cbz	r3, 8006b9a <_read_r+0x1e>
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	2000058c 	.word	0x2000058c

08006ba0 <_write_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4d07      	ldr	r5, [pc, #28]	; (8006bc0 <_write_r+0x20>)
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	4608      	mov	r0, r1
 8006ba8:	4611      	mov	r1, r2
 8006baa:	2200      	movs	r2, #0
 8006bac:	602a      	str	r2, [r5, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f7fa f9a0 	bl	8000ef4 <_write>
 8006bb4:	1c43      	adds	r3, r0, #1
 8006bb6:	d102      	bne.n	8006bbe <_write_r+0x1e>
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	b103      	cbz	r3, 8006bbe <_write_r+0x1e>
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	bd38      	pop	{r3, r4, r5, pc}
 8006bc0:	2000058c 	.word	0x2000058c

08006bc4 <__errno>:
 8006bc4:	4b01      	ldr	r3, [pc, #4]	; (8006bcc <__errno+0x8>)
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	20000064 	.word	0x20000064

08006bd0 <__libc_init_array>:
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	4d0d      	ldr	r5, [pc, #52]	; (8006c08 <__libc_init_array+0x38>)
 8006bd4:	4c0d      	ldr	r4, [pc, #52]	; (8006c0c <__libc_init_array+0x3c>)
 8006bd6:	1b64      	subs	r4, r4, r5
 8006bd8:	10a4      	asrs	r4, r4, #2
 8006bda:	2600      	movs	r6, #0
 8006bdc:	42a6      	cmp	r6, r4
 8006bde:	d109      	bne.n	8006bf4 <__libc_init_array+0x24>
 8006be0:	4d0b      	ldr	r5, [pc, #44]	; (8006c10 <__libc_init_array+0x40>)
 8006be2:	4c0c      	ldr	r4, [pc, #48]	; (8006c14 <__libc_init_array+0x44>)
 8006be4:	f001 feee 	bl	80089c4 <_init>
 8006be8:	1b64      	subs	r4, r4, r5
 8006bea:	10a4      	asrs	r4, r4, #2
 8006bec:	2600      	movs	r6, #0
 8006bee:	42a6      	cmp	r6, r4
 8006bf0:	d105      	bne.n	8006bfe <__libc_init_array+0x2e>
 8006bf2:	bd70      	pop	{r4, r5, r6, pc}
 8006bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bf8:	4798      	blx	r3
 8006bfa:	3601      	adds	r6, #1
 8006bfc:	e7ee      	b.n	8006bdc <__libc_init_array+0xc>
 8006bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c02:	4798      	blx	r3
 8006c04:	3601      	adds	r6, #1
 8006c06:	e7f2      	b.n	8006bee <__libc_init_array+0x1e>
 8006c08:	08008ddc 	.word	0x08008ddc
 8006c0c:	08008ddc 	.word	0x08008ddc
 8006c10:	08008ddc 	.word	0x08008ddc
 8006c14:	08008de0 	.word	0x08008de0

08006c18 <__retarget_lock_init_recursive>:
 8006c18:	4770      	bx	lr

08006c1a <__retarget_lock_acquire_recursive>:
 8006c1a:	4770      	bx	lr

08006c1c <__retarget_lock_release_recursive>:
 8006c1c:	4770      	bx	lr

08006c1e <quorem>:
 8006c1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c22:	6903      	ldr	r3, [r0, #16]
 8006c24:	690c      	ldr	r4, [r1, #16]
 8006c26:	42a3      	cmp	r3, r4
 8006c28:	4607      	mov	r7, r0
 8006c2a:	db7e      	blt.n	8006d2a <quorem+0x10c>
 8006c2c:	3c01      	subs	r4, #1
 8006c2e:	f101 0814 	add.w	r8, r1, #20
 8006c32:	f100 0514 	add.w	r5, r0, #20
 8006c36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c3a:	9301      	str	r3, [sp, #4]
 8006c3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c44:	3301      	adds	r3, #1
 8006c46:	429a      	cmp	r2, r3
 8006c48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c50:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c54:	d331      	bcc.n	8006cba <quorem+0x9c>
 8006c56:	f04f 0e00 	mov.w	lr, #0
 8006c5a:	4640      	mov	r0, r8
 8006c5c:	46ac      	mov	ip, r5
 8006c5e:	46f2      	mov	sl, lr
 8006c60:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c64:	b293      	uxth	r3, r2
 8006c66:	fb06 e303 	mla	r3, r6, r3, lr
 8006c6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c6e:	0c1a      	lsrs	r2, r3, #16
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	ebaa 0303 	sub.w	r3, sl, r3
 8006c76:	f8dc a000 	ldr.w	sl, [ip]
 8006c7a:	fa13 f38a 	uxtah	r3, r3, sl
 8006c7e:	fb06 220e 	mla	r2, r6, lr, r2
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	9b00      	ldr	r3, [sp, #0]
 8006c86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c8a:	b292      	uxth	r2, r2
 8006c8c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006c90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c94:	f8bd 3000 	ldrh.w	r3, [sp]
 8006c98:	4581      	cmp	r9, r0
 8006c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c9e:	f84c 3b04 	str.w	r3, [ip], #4
 8006ca2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ca6:	d2db      	bcs.n	8006c60 <quorem+0x42>
 8006ca8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006cac:	b92b      	cbnz	r3, 8006cba <quorem+0x9c>
 8006cae:	9b01      	ldr	r3, [sp, #4]
 8006cb0:	3b04      	subs	r3, #4
 8006cb2:	429d      	cmp	r5, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	d32c      	bcc.n	8006d12 <quorem+0xf4>
 8006cb8:	613c      	str	r4, [r7, #16]
 8006cba:	4638      	mov	r0, r7
 8006cbc:	f001 f9a6 	bl	800800c <__mcmp>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	db22      	blt.n	8006d0a <quorem+0xec>
 8006cc4:	3601      	adds	r6, #1
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	2000      	movs	r0, #0
 8006cca:	f858 2b04 	ldr.w	r2, [r8], #4
 8006cce:	f8d1 c000 	ldr.w	ip, [r1]
 8006cd2:	b293      	uxth	r3, r2
 8006cd4:	1ac3      	subs	r3, r0, r3
 8006cd6:	0c12      	lsrs	r2, r2, #16
 8006cd8:	fa13 f38c 	uxtah	r3, r3, ip
 8006cdc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006ce0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cea:	45c1      	cmp	r9, r8
 8006cec:	f841 3b04 	str.w	r3, [r1], #4
 8006cf0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006cf4:	d2e9      	bcs.n	8006cca <quorem+0xac>
 8006cf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cfe:	b922      	cbnz	r2, 8006d0a <quorem+0xec>
 8006d00:	3b04      	subs	r3, #4
 8006d02:	429d      	cmp	r5, r3
 8006d04:	461a      	mov	r2, r3
 8006d06:	d30a      	bcc.n	8006d1e <quorem+0x100>
 8006d08:	613c      	str	r4, [r7, #16]
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	b003      	add	sp, #12
 8006d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d12:	6812      	ldr	r2, [r2, #0]
 8006d14:	3b04      	subs	r3, #4
 8006d16:	2a00      	cmp	r2, #0
 8006d18:	d1ce      	bne.n	8006cb8 <quorem+0x9a>
 8006d1a:	3c01      	subs	r4, #1
 8006d1c:	e7c9      	b.n	8006cb2 <quorem+0x94>
 8006d1e:	6812      	ldr	r2, [r2, #0]
 8006d20:	3b04      	subs	r3, #4
 8006d22:	2a00      	cmp	r2, #0
 8006d24:	d1f0      	bne.n	8006d08 <quorem+0xea>
 8006d26:	3c01      	subs	r4, #1
 8006d28:	e7eb      	b.n	8006d02 <quorem+0xe4>
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	e7ee      	b.n	8006d0c <quorem+0xee>
	...

08006d30 <_dtoa_r>:
 8006d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d34:	ed2d 8b04 	vpush	{d8-d9}
 8006d38:	69c5      	ldr	r5, [r0, #28]
 8006d3a:	b093      	sub	sp, #76	; 0x4c
 8006d3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006d40:	ec57 6b10 	vmov	r6, r7, d0
 8006d44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006d48:	9107      	str	r1, [sp, #28]
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	920a      	str	r2, [sp, #40]	; 0x28
 8006d4e:	930d      	str	r3, [sp, #52]	; 0x34
 8006d50:	b975      	cbnz	r5, 8006d70 <_dtoa_r+0x40>
 8006d52:	2010      	movs	r0, #16
 8006d54:	f000 fe2a 	bl	80079ac <malloc>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	61e0      	str	r0, [r4, #28]
 8006d5c:	b920      	cbnz	r0, 8006d68 <_dtoa_r+0x38>
 8006d5e:	4bae      	ldr	r3, [pc, #696]	; (8007018 <_dtoa_r+0x2e8>)
 8006d60:	21ef      	movs	r1, #239	; 0xef
 8006d62:	48ae      	ldr	r0, [pc, #696]	; (800701c <_dtoa_r+0x2ec>)
 8006d64:	f001 fcf8 	bl	8008758 <__assert_func>
 8006d68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d6c:	6005      	str	r5, [r0, #0]
 8006d6e:	60c5      	str	r5, [r0, #12]
 8006d70:	69e3      	ldr	r3, [r4, #28]
 8006d72:	6819      	ldr	r1, [r3, #0]
 8006d74:	b151      	cbz	r1, 8006d8c <_dtoa_r+0x5c>
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	604a      	str	r2, [r1, #4]
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	4093      	lsls	r3, r2
 8006d7e:	608b      	str	r3, [r1, #8]
 8006d80:	4620      	mov	r0, r4
 8006d82:	f000 ff07 	bl	8007b94 <_Bfree>
 8006d86:	69e3      	ldr	r3, [r4, #28]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	1e3b      	subs	r3, r7, #0
 8006d8e:	bfbb      	ittet	lt
 8006d90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d94:	9303      	strlt	r3, [sp, #12]
 8006d96:	2300      	movge	r3, #0
 8006d98:	2201      	movlt	r2, #1
 8006d9a:	bfac      	ite	ge
 8006d9c:	f8c8 3000 	strge.w	r3, [r8]
 8006da0:	f8c8 2000 	strlt.w	r2, [r8]
 8006da4:	4b9e      	ldr	r3, [pc, #632]	; (8007020 <_dtoa_r+0x2f0>)
 8006da6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006daa:	ea33 0308 	bics.w	r3, r3, r8
 8006dae:	d11b      	bne.n	8006de8 <_dtoa_r+0xb8>
 8006db0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006db2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006dbc:	4333      	orrs	r3, r6
 8006dbe:	f000 8593 	beq.w	80078e8 <_dtoa_r+0xbb8>
 8006dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dc4:	b963      	cbnz	r3, 8006de0 <_dtoa_r+0xb0>
 8006dc6:	4b97      	ldr	r3, [pc, #604]	; (8007024 <_dtoa_r+0x2f4>)
 8006dc8:	e027      	b.n	8006e1a <_dtoa_r+0xea>
 8006dca:	4b97      	ldr	r3, [pc, #604]	; (8007028 <_dtoa_r+0x2f8>)
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	9800      	ldr	r0, [sp, #0]
 8006dd6:	b013      	add	sp, #76	; 0x4c
 8006dd8:	ecbd 8b04 	vpop	{d8-d9}
 8006ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de0:	4b90      	ldr	r3, [pc, #576]	; (8007024 <_dtoa_r+0x2f4>)
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	3303      	adds	r3, #3
 8006de6:	e7f3      	b.n	8006dd0 <_dtoa_r+0xa0>
 8006de8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006dec:	2200      	movs	r2, #0
 8006dee:	ec51 0b17 	vmov	r0, r1, d7
 8006df2:	eeb0 8a47 	vmov.f32	s16, s14
 8006df6:	eef0 8a67 	vmov.f32	s17, s15
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f7f9 fe8c 	bl	8000b18 <__aeabi_dcmpeq>
 8006e00:	4681      	mov	r9, r0
 8006e02:	b160      	cbz	r0, 8006e1e <_dtoa_r+0xee>
 8006e04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e06:	2301      	movs	r3, #1
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 8568 	beq.w	80078e2 <_dtoa_r+0xbb2>
 8006e12:	4b86      	ldr	r3, [pc, #536]	; (800702c <_dtoa_r+0x2fc>)
 8006e14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	e7da      	b.n	8006dd4 <_dtoa_r+0xa4>
 8006e1e:	aa10      	add	r2, sp, #64	; 0x40
 8006e20:	a911      	add	r1, sp, #68	; 0x44
 8006e22:	4620      	mov	r0, r4
 8006e24:	eeb0 0a48 	vmov.f32	s0, s16
 8006e28:	eef0 0a68 	vmov.f32	s1, s17
 8006e2c:	f001 f994 	bl	8008158 <__d2b>
 8006e30:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006e34:	4682      	mov	sl, r0
 8006e36:	2d00      	cmp	r5, #0
 8006e38:	d07f      	beq.n	8006f3a <_dtoa_r+0x20a>
 8006e3a:	ee18 3a90 	vmov	r3, s17
 8006e3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e42:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006e46:	ec51 0b18 	vmov	r0, r1, d8
 8006e4a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006e4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e52:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006e56:	4619      	mov	r1, r3
 8006e58:	2200      	movs	r2, #0
 8006e5a:	4b75      	ldr	r3, [pc, #468]	; (8007030 <_dtoa_r+0x300>)
 8006e5c:	f7f9 fa3c 	bl	80002d8 <__aeabi_dsub>
 8006e60:	a367      	add	r3, pc, #412	; (adr r3, 8007000 <_dtoa_r+0x2d0>)
 8006e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e66:	f7f9 fbef 	bl	8000648 <__aeabi_dmul>
 8006e6a:	a367      	add	r3, pc, #412	; (adr r3, 8007008 <_dtoa_r+0x2d8>)
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	f7f9 fa34 	bl	80002dc <__adddf3>
 8006e74:	4606      	mov	r6, r0
 8006e76:	4628      	mov	r0, r5
 8006e78:	460f      	mov	r7, r1
 8006e7a:	f7f9 fb7b 	bl	8000574 <__aeabi_i2d>
 8006e7e:	a364      	add	r3, pc, #400	; (adr r3, 8007010 <_dtoa_r+0x2e0>)
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	f7f9 fbe0 	bl	8000648 <__aeabi_dmul>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	4639      	mov	r1, r7
 8006e90:	f7f9 fa24 	bl	80002dc <__adddf3>
 8006e94:	4606      	mov	r6, r0
 8006e96:	460f      	mov	r7, r1
 8006e98:	f7f9 fe86 	bl	8000ba8 <__aeabi_d2iz>
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	4683      	mov	fp, r0
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	4639      	mov	r1, r7
 8006ea6:	f7f9 fe41 	bl	8000b2c <__aeabi_dcmplt>
 8006eaa:	b148      	cbz	r0, 8006ec0 <_dtoa_r+0x190>
 8006eac:	4658      	mov	r0, fp
 8006eae:	f7f9 fb61 	bl	8000574 <__aeabi_i2d>
 8006eb2:	4632      	mov	r2, r6
 8006eb4:	463b      	mov	r3, r7
 8006eb6:	f7f9 fe2f 	bl	8000b18 <__aeabi_dcmpeq>
 8006eba:	b908      	cbnz	r0, 8006ec0 <_dtoa_r+0x190>
 8006ebc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ec0:	f1bb 0f16 	cmp.w	fp, #22
 8006ec4:	d857      	bhi.n	8006f76 <_dtoa_r+0x246>
 8006ec6:	4b5b      	ldr	r3, [pc, #364]	; (8007034 <_dtoa_r+0x304>)
 8006ec8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed0:	ec51 0b18 	vmov	r0, r1, d8
 8006ed4:	f7f9 fe2a 	bl	8000b2c <__aeabi_dcmplt>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d04e      	beq.n	8006f7a <_dtoa_r+0x24a>
 8006edc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	930c      	str	r3, [sp, #48]	; 0x30
 8006ee4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ee6:	1b5b      	subs	r3, r3, r5
 8006ee8:	1e5a      	subs	r2, r3, #1
 8006eea:	bf45      	ittet	mi
 8006eec:	f1c3 0301 	rsbmi	r3, r3, #1
 8006ef0:	9305      	strmi	r3, [sp, #20]
 8006ef2:	2300      	movpl	r3, #0
 8006ef4:	2300      	movmi	r3, #0
 8006ef6:	9206      	str	r2, [sp, #24]
 8006ef8:	bf54      	ite	pl
 8006efa:	9305      	strpl	r3, [sp, #20]
 8006efc:	9306      	strmi	r3, [sp, #24]
 8006efe:	f1bb 0f00 	cmp.w	fp, #0
 8006f02:	db3c      	blt.n	8006f7e <_dtoa_r+0x24e>
 8006f04:	9b06      	ldr	r3, [sp, #24]
 8006f06:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006f0a:	445b      	add	r3, fp
 8006f0c:	9306      	str	r3, [sp, #24]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	9308      	str	r3, [sp, #32]
 8006f12:	9b07      	ldr	r3, [sp, #28]
 8006f14:	2b09      	cmp	r3, #9
 8006f16:	d868      	bhi.n	8006fea <_dtoa_r+0x2ba>
 8006f18:	2b05      	cmp	r3, #5
 8006f1a:	bfc4      	itt	gt
 8006f1c:	3b04      	subgt	r3, #4
 8006f1e:	9307      	strgt	r3, [sp, #28]
 8006f20:	9b07      	ldr	r3, [sp, #28]
 8006f22:	f1a3 0302 	sub.w	r3, r3, #2
 8006f26:	bfcc      	ite	gt
 8006f28:	2500      	movgt	r5, #0
 8006f2a:	2501      	movle	r5, #1
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	f200 8085 	bhi.w	800703c <_dtoa_r+0x30c>
 8006f32:	e8df f003 	tbb	[pc, r3]
 8006f36:	3b2e      	.short	0x3b2e
 8006f38:	5839      	.short	0x5839
 8006f3a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006f3e:	441d      	add	r5, r3
 8006f40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	bfc1      	itttt	gt
 8006f48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f4c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006f50:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006f54:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006f58:	bfd6      	itet	le
 8006f5a:	f1c3 0320 	rsble	r3, r3, #32
 8006f5e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006f62:	fa06 f003 	lslle.w	r0, r6, r3
 8006f66:	f7f9 faf5 	bl	8000554 <__aeabi_ui2d>
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006f70:	3d01      	subs	r5, #1
 8006f72:	920e      	str	r2, [sp, #56]	; 0x38
 8006f74:	e76f      	b.n	8006e56 <_dtoa_r+0x126>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e7b3      	b.n	8006ee2 <_dtoa_r+0x1b2>
 8006f7a:	900c      	str	r0, [sp, #48]	; 0x30
 8006f7c:	e7b2      	b.n	8006ee4 <_dtoa_r+0x1b4>
 8006f7e:	9b05      	ldr	r3, [sp, #20]
 8006f80:	eba3 030b 	sub.w	r3, r3, fp
 8006f84:	9305      	str	r3, [sp, #20]
 8006f86:	f1cb 0300 	rsb	r3, fp, #0
 8006f8a:	9308      	str	r3, [sp, #32]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f90:	e7bf      	b.n	8006f12 <_dtoa_r+0x1e2>
 8006f92:	2300      	movs	r3, #0
 8006f94:	9309      	str	r3, [sp, #36]	; 0x24
 8006f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	dc52      	bgt.n	8007042 <_dtoa_r+0x312>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	9301      	str	r3, [sp, #4]
 8006fa0:	9304      	str	r3, [sp, #16]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	920a      	str	r2, [sp, #40]	; 0x28
 8006fa6:	e00b      	b.n	8006fc0 <_dtoa_r+0x290>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e7f3      	b.n	8006f94 <_dtoa_r+0x264>
 8006fac:	2300      	movs	r3, #0
 8006fae:	9309      	str	r3, [sp, #36]	; 0x24
 8006fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb2:	445b      	add	r3, fp
 8006fb4:	9301      	str	r3, [sp, #4]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	9304      	str	r3, [sp, #16]
 8006fbc:	bfb8      	it	lt
 8006fbe:	2301      	movlt	r3, #1
 8006fc0:	69e0      	ldr	r0, [r4, #28]
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	f102 0614 	add.w	r6, r2, #20
 8006fca:	429e      	cmp	r6, r3
 8006fcc:	d93d      	bls.n	800704a <_dtoa_r+0x31a>
 8006fce:	6041      	str	r1, [r0, #4]
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 fd9f 	bl	8007b14 <_Balloc>
 8006fd6:	9000      	str	r0, [sp, #0]
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d139      	bne.n	8007050 <_dtoa_r+0x320>
 8006fdc:	4b16      	ldr	r3, [pc, #88]	; (8007038 <_dtoa_r+0x308>)
 8006fde:	4602      	mov	r2, r0
 8006fe0:	f240 11af 	movw	r1, #431	; 0x1af
 8006fe4:	e6bd      	b.n	8006d62 <_dtoa_r+0x32>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e7e1      	b.n	8006fae <_dtoa_r+0x27e>
 8006fea:	2501      	movs	r5, #1
 8006fec:	2300      	movs	r3, #0
 8006fee:	9307      	str	r3, [sp, #28]
 8006ff0:	9509      	str	r5, [sp, #36]	; 0x24
 8006ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	9304      	str	r3, [sp, #16]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2312      	movs	r3, #18
 8006ffe:	e7d1      	b.n	8006fa4 <_dtoa_r+0x274>
 8007000:	636f4361 	.word	0x636f4361
 8007004:	3fd287a7 	.word	0x3fd287a7
 8007008:	8b60c8b3 	.word	0x8b60c8b3
 800700c:	3fc68a28 	.word	0x3fc68a28
 8007010:	509f79fb 	.word	0x509f79fb
 8007014:	3fd34413 	.word	0x3fd34413
 8007018:	08008aa1 	.word	0x08008aa1
 800701c:	08008ab8 	.word	0x08008ab8
 8007020:	7ff00000 	.word	0x7ff00000
 8007024:	08008a9d 	.word	0x08008a9d
 8007028:	08008a94 	.word	0x08008a94
 800702c:	08008a71 	.word	0x08008a71
 8007030:	3ff80000 	.word	0x3ff80000
 8007034:	08008ba8 	.word	0x08008ba8
 8007038:	08008b10 	.word	0x08008b10
 800703c:	2301      	movs	r3, #1
 800703e:	9309      	str	r3, [sp, #36]	; 0x24
 8007040:	e7d7      	b.n	8006ff2 <_dtoa_r+0x2c2>
 8007042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	9304      	str	r3, [sp, #16]
 8007048:	e7ba      	b.n	8006fc0 <_dtoa_r+0x290>
 800704a:	3101      	adds	r1, #1
 800704c:	0052      	lsls	r2, r2, #1
 800704e:	e7ba      	b.n	8006fc6 <_dtoa_r+0x296>
 8007050:	69e3      	ldr	r3, [r4, #28]
 8007052:	9a00      	ldr	r2, [sp, #0]
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	9b04      	ldr	r3, [sp, #16]
 8007058:	2b0e      	cmp	r3, #14
 800705a:	f200 80a8 	bhi.w	80071ae <_dtoa_r+0x47e>
 800705e:	2d00      	cmp	r5, #0
 8007060:	f000 80a5 	beq.w	80071ae <_dtoa_r+0x47e>
 8007064:	f1bb 0f00 	cmp.w	fp, #0
 8007068:	dd38      	ble.n	80070dc <_dtoa_r+0x3ac>
 800706a:	4bc0      	ldr	r3, [pc, #768]	; (800736c <_dtoa_r+0x63c>)
 800706c:	f00b 020f 	and.w	r2, fp, #15
 8007070:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007074:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007078:	e9d3 6700 	ldrd	r6, r7, [r3]
 800707c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007080:	d019      	beq.n	80070b6 <_dtoa_r+0x386>
 8007082:	4bbb      	ldr	r3, [pc, #748]	; (8007370 <_dtoa_r+0x640>)
 8007084:	ec51 0b18 	vmov	r0, r1, d8
 8007088:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800708c:	f7f9 fc06 	bl	800089c <__aeabi_ddiv>
 8007090:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007094:	f008 080f 	and.w	r8, r8, #15
 8007098:	2503      	movs	r5, #3
 800709a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007370 <_dtoa_r+0x640>
 800709e:	f1b8 0f00 	cmp.w	r8, #0
 80070a2:	d10a      	bne.n	80070ba <_dtoa_r+0x38a>
 80070a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070a8:	4632      	mov	r2, r6
 80070aa:	463b      	mov	r3, r7
 80070ac:	f7f9 fbf6 	bl	800089c <__aeabi_ddiv>
 80070b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070b4:	e02b      	b.n	800710e <_dtoa_r+0x3de>
 80070b6:	2502      	movs	r5, #2
 80070b8:	e7ef      	b.n	800709a <_dtoa_r+0x36a>
 80070ba:	f018 0f01 	tst.w	r8, #1
 80070be:	d008      	beq.n	80070d2 <_dtoa_r+0x3a2>
 80070c0:	4630      	mov	r0, r6
 80070c2:	4639      	mov	r1, r7
 80070c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80070c8:	f7f9 fabe 	bl	8000648 <__aeabi_dmul>
 80070cc:	3501      	adds	r5, #1
 80070ce:	4606      	mov	r6, r0
 80070d0:	460f      	mov	r7, r1
 80070d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80070d6:	f109 0908 	add.w	r9, r9, #8
 80070da:	e7e0      	b.n	800709e <_dtoa_r+0x36e>
 80070dc:	f000 809f 	beq.w	800721e <_dtoa_r+0x4ee>
 80070e0:	f1cb 0600 	rsb	r6, fp, #0
 80070e4:	4ba1      	ldr	r3, [pc, #644]	; (800736c <_dtoa_r+0x63c>)
 80070e6:	4fa2      	ldr	r7, [pc, #648]	; (8007370 <_dtoa_r+0x640>)
 80070e8:	f006 020f 	and.w	r2, r6, #15
 80070ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	ec51 0b18 	vmov	r0, r1, d8
 80070f8:	f7f9 faa6 	bl	8000648 <__aeabi_dmul>
 80070fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007100:	1136      	asrs	r6, r6, #4
 8007102:	2300      	movs	r3, #0
 8007104:	2502      	movs	r5, #2
 8007106:	2e00      	cmp	r6, #0
 8007108:	d17e      	bne.n	8007208 <_dtoa_r+0x4d8>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1d0      	bne.n	80070b0 <_dtoa_r+0x380>
 800710e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007110:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 8084 	beq.w	8007222 <_dtoa_r+0x4f2>
 800711a:	4b96      	ldr	r3, [pc, #600]	; (8007374 <_dtoa_r+0x644>)
 800711c:	2200      	movs	r2, #0
 800711e:	4640      	mov	r0, r8
 8007120:	4649      	mov	r1, r9
 8007122:	f7f9 fd03 	bl	8000b2c <__aeabi_dcmplt>
 8007126:	2800      	cmp	r0, #0
 8007128:	d07b      	beq.n	8007222 <_dtoa_r+0x4f2>
 800712a:	9b04      	ldr	r3, [sp, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d078      	beq.n	8007222 <_dtoa_r+0x4f2>
 8007130:	9b01      	ldr	r3, [sp, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	dd39      	ble.n	80071aa <_dtoa_r+0x47a>
 8007136:	4b90      	ldr	r3, [pc, #576]	; (8007378 <_dtoa_r+0x648>)
 8007138:	2200      	movs	r2, #0
 800713a:	4640      	mov	r0, r8
 800713c:	4649      	mov	r1, r9
 800713e:	f7f9 fa83 	bl	8000648 <__aeabi_dmul>
 8007142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007146:	9e01      	ldr	r6, [sp, #4]
 8007148:	f10b 37ff 	add.w	r7, fp, #4294967295
 800714c:	3501      	adds	r5, #1
 800714e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007152:	4628      	mov	r0, r5
 8007154:	f7f9 fa0e 	bl	8000574 <__aeabi_i2d>
 8007158:	4642      	mov	r2, r8
 800715a:	464b      	mov	r3, r9
 800715c:	f7f9 fa74 	bl	8000648 <__aeabi_dmul>
 8007160:	4b86      	ldr	r3, [pc, #536]	; (800737c <_dtoa_r+0x64c>)
 8007162:	2200      	movs	r2, #0
 8007164:	f7f9 f8ba 	bl	80002dc <__adddf3>
 8007168:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800716c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007170:	9303      	str	r3, [sp, #12]
 8007172:	2e00      	cmp	r6, #0
 8007174:	d158      	bne.n	8007228 <_dtoa_r+0x4f8>
 8007176:	4b82      	ldr	r3, [pc, #520]	; (8007380 <_dtoa_r+0x650>)
 8007178:	2200      	movs	r2, #0
 800717a:	4640      	mov	r0, r8
 800717c:	4649      	mov	r1, r9
 800717e:	f7f9 f8ab 	bl	80002d8 <__aeabi_dsub>
 8007182:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007186:	4680      	mov	r8, r0
 8007188:	4689      	mov	r9, r1
 800718a:	f7f9 fced 	bl	8000b68 <__aeabi_dcmpgt>
 800718e:	2800      	cmp	r0, #0
 8007190:	f040 8296 	bne.w	80076c0 <_dtoa_r+0x990>
 8007194:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007198:	4640      	mov	r0, r8
 800719a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800719e:	4649      	mov	r1, r9
 80071a0:	f7f9 fcc4 	bl	8000b2c <__aeabi_dcmplt>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	f040 8289 	bne.w	80076bc <_dtoa_r+0x98c>
 80071aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80071ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f2c0 814e 	blt.w	8007452 <_dtoa_r+0x722>
 80071b6:	f1bb 0f0e 	cmp.w	fp, #14
 80071ba:	f300 814a 	bgt.w	8007452 <_dtoa_r+0x722>
 80071be:	4b6b      	ldr	r3, [pc, #428]	; (800736c <_dtoa_r+0x63c>)
 80071c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80071c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f280 80dc 	bge.w	8007388 <_dtoa_r+0x658>
 80071d0:	9b04      	ldr	r3, [sp, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f300 80d8 	bgt.w	8007388 <_dtoa_r+0x658>
 80071d8:	f040 826f 	bne.w	80076ba <_dtoa_r+0x98a>
 80071dc:	4b68      	ldr	r3, [pc, #416]	; (8007380 <_dtoa_r+0x650>)
 80071de:	2200      	movs	r2, #0
 80071e0:	4640      	mov	r0, r8
 80071e2:	4649      	mov	r1, r9
 80071e4:	f7f9 fa30 	bl	8000648 <__aeabi_dmul>
 80071e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071ec:	f7f9 fcb2 	bl	8000b54 <__aeabi_dcmpge>
 80071f0:	9e04      	ldr	r6, [sp, #16]
 80071f2:	4637      	mov	r7, r6
 80071f4:	2800      	cmp	r0, #0
 80071f6:	f040 8245 	bne.w	8007684 <_dtoa_r+0x954>
 80071fa:	9d00      	ldr	r5, [sp, #0]
 80071fc:	2331      	movs	r3, #49	; 0x31
 80071fe:	f805 3b01 	strb.w	r3, [r5], #1
 8007202:	f10b 0b01 	add.w	fp, fp, #1
 8007206:	e241      	b.n	800768c <_dtoa_r+0x95c>
 8007208:	07f2      	lsls	r2, r6, #31
 800720a:	d505      	bpl.n	8007218 <_dtoa_r+0x4e8>
 800720c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007210:	f7f9 fa1a 	bl	8000648 <__aeabi_dmul>
 8007214:	3501      	adds	r5, #1
 8007216:	2301      	movs	r3, #1
 8007218:	1076      	asrs	r6, r6, #1
 800721a:	3708      	adds	r7, #8
 800721c:	e773      	b.n	8007106 <_dtoa_r+0x3d6>
 800721e:	2502      	movs	r5, #2
 8007220:	e775      	b.n	800710e <_dtoa_r+0x3de>
 8007222:	9e04      	ldr	r6, [sp, #16]
 8007224:	465f      	mov	r7, fp
 8007226:	e792      	b.n	800714e <_dtoa_r+0x41e>
 8007228:	9900      	ldr	r1, [sp, #0]
 800722a:	4b50      	ldr	r3, [pc, #320]	; (800736c <_dtoa_r+0x63c>)
 800722c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007230:	4431      	add	r1, r6
 8007232:	9102      	str	r1, [sp, #8]
 8007234:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007236:	eeb0 9a47 	vmov.f32	s18, s14
 800723a:	eef0 9a67 	vmov.f32	s19, s15
 800723e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007242:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007246:	2900      	cmp	r1, #0
 8007248:	d044      	beq.n	80072d4 <_dtoa_r+0x5a4>
 800724a:	494e      	ldr	r1, [pc, #312]	; (8007384 <_dtoa_r+0x654>)
 800724c:	2000      	movs	r0, #0
 800724e:	f7f9 fb25 	bl	800089c <__aeabi_ddiv>
 8007252:	ec53 2b19 	vmov	r2, r3, d9
 8007256:	f7f9 f83f 	bl	80002d8 <__aeabi_dsub>
 800725a:	9d00      	ldr	r5, [sp, #0]
 800725c:	ec41 0b19 	vmov	d9, r0, r1
 8007260:	4649      	mov	r1, r9
 8007262:	4640      	mov	r0, r8
 8007264:	f7f9 fca0 	bl	8000ba8 <__aeabi_d2iz>
 8007268:	4606      	mov	r6, r0
 800726a:	f7f9 f983 	bl	8000574 <__aeabi_i2d>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	4640      	mov	r0, r8
 8007274:	4649      	mov	r1, r9
 8007276:	f7f9 f82f 	bl	80002d8 <__aeabi_dsub>
 800727a:	3630      	adds	r6, #48	; 0x30
 800727c:	f805 6b01 	strb.w	r6, [r5], #1
 8007280:	ec53 2b19 	vmov	r2, r3, d9
 8007284:	4680      	mov	r8, r0
 8007286:	4689      	mov	r9, r1
 8007288:	f7f9 fc50 	bl	8000b2c <__aeabi_dcmplt>
 800728c:	2800      	cmp	r0, #0
 800728e:	d164      	bne.n	800735a <_dtoa_r+0x62a>
 8007290:	4642      	mov	r2, r8
 8007292:	464b      	mov	r3, r9
 8007294:	4937      	ldr	r1, [pc, #220]	; (8007374 <_dtoa_r+0x644>)
 8007296:	2000      	movs	r0, #0
 8007298:	f7f9 f81e 	bl	80002d8 <__aeabi_dsub>
 800729c:	ec53 2b19 	vmov	r2, r3, d9
 80072a0:	f7f9 fc44 	bl	8000b2c <__aeabi_dcmplt>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f040 80b6 	bne.w	8007416 <_dtoa_r+0x6e6>
 80072aa:	9b02      	ldr	r3, [sp, #8]
 80072ac:	429d      	cmp	r5, r3
 80072ae:	f43f af7c 	beq.w	80071aa <_dtoa_r+0x47a>
 80072b2:	4b31      	ldr	r3, [pc, #196]	; (8007378 <_dtoa_r+0x648>)
 80072b4:	ec51 0b19 	vmov	r0, r1, d9
 80072b8:	2200      	movs	r2, #0
 80072ba:	f7f9 f9c5 	bl	8000648 <__aeabi_dmul>
 80072be:	4b2e      	ldr	r3, [pc, #184]	; (8007378 <_dtoa_r+0x648>)
 80072c0:	ec41 0b19 	vmov	d9, r0, r1
 80072c4:	2200      	movs	r2, #0
 80072c6:	4640      	mov	r0, r8
 80072c8:	4649      	mov	r1, r9
 80072ca:	f7f9 f9bd 	bl	8000648 <__aeabi_dmul>
 80072ce:	4680      	mov	r8, r0
 80072d0:	4689      	mov	r9, r1
 80072d2:	e7c5      	b.n	8007260 <_dtoa_r+0x530>
 80072d4:	ec51 0b17 	vmov	r0, r1, d7
 80072d8:	f7f9 f9b6 	bl	8000648 <__aeabi_dmul>
 80072dc:	9b02      	ldr	r3, [sp, #8]
 80072de:	9d00      	ldr	r5, [sp, #0]
 80072e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80072e2:	ec41 0b19 	vmov	d9, r0, r1
 80072e6:	4649      	mov	r1, r9
 80072e8:	4640      	mov	r0, r8
 80072ea:	f7f9 fc5d 	bl	8000ba8 <__aeabi_d2iz>
 80072ee:	4606      	mov	r6, r0
 80072f0:	f7f9 f940 	bl	8000574 <__aeabi_i2d>
 80072f4:	3630      	adds	r6, #48	; 0x30
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	4640      	mov	r0, r8
 80072fc:	4649      	mov	r1, r9
 80072fe:	f7f8 ffeb 	bl	80002d8 <__aeabi_dsub>
 8007302:	f805 6b01 	strb.w	r6, [r5], #1
 8007306:	9b02      	ldr	r3, [sp, #8]
 8007308:	429d      	cmp	r5, r3
 800730a:	4680      	mov	r8, r0
 800730c:	4689      	mov	r9, r1
 800730e:	f04f 0200 	mov.w	r2, #0
 8007312:	d124      	bne.n	800735e <_dtoa_r+0x62e>
 8007314:	4b1b      	ldr	r3, [pc, #108]	; (8007384 <_dtoa_r+0x654>)
 8007316:	ec51 0b19 	vmov	r0, r1, d9
 800731a:	f7f8 ffdf 	bl	80002dc <__adddf3>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4640      	mov	r0, r8
 8007324:	4649      	mov	r1, r9
 8007326:	f7f9 fc1f 	bl	8000b68 <__aeabi_dcmpgt>
 800732a:	2800      	cmp	r0, #0
 800732c:	d173      	bne.n	8007416 <_dtoa_r+0x6e6>
 800732e:	ec53 2b19 	vmov	r2, r3, d9
 8007332:	4914      	ldr	r1, [pc, #80]	; (8007384 <_dtoa_r+0x654>)
 8007334:	2000      	movs	r0, #0
 8007336:	f7f8 ffcf 	bl	80002d8 <__aeabi_dsub>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4640      	mov	r0, r8
 8007340:	4649      	mov	r1, r9
 8007342:	f7f9 fbf3 	bl	8000b2c <__aeabi_dcmplt>
 8007346:	2800      	cmp	r0, #0
 8007348:	f43f af2f 	beq.w	80071aa <_dtoa_r+0x47a>
 800734c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800734e:	1e6b      	subs	r3, r5, #1
 8007350:	930f      	str	r3, [sp, #60]	; 0x3c
 8007352:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007356:	2b30      	cmp	r3, #48	; 0x30
 8007358:	d0f8      	beq.n	800734c <_dtoa_r+0x61c>
 800735a:	46bb      	mov	fp, r7
 800735c:	e04a      	b.n	80073f4 <_dtoa_r+0x6c4>
 800735e:	4b06      	ldr	r3, [pc, #24]	; (8007378 <_dtoa_r+0x648>)
 8007360:	f7f9 f972 	bl	8000648 <__aeabi_dmul>
 8007364:	4680      	mov	r8, r0
 8007366:	4689      	mov	r9, r1
 8007368:	e7bd      	b.n	80072e6 <_dtoa_r+0x5b6>
 800736a:	bf00      	nop
 800736c:	08008ba8 	.word	0x08008ba8
 8007370:	08008b80 	.word	0x08008b80
 8007374:	3ff00000 	.word	0x3ff00000
 8007378:	40240000 	.word	0x40240000
 800737c:	401c0000 	.word	0x401c0000
 8007380:	40140000 	.word	0x40140000
 8007384:	3fe00000 	.word	0x3fe00000
 8007388:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800738c:	9d00      	ldr	r5, [sp, #0]
 800738e:	4642      	mov	r2, r8
 8007390:	464b      	mov	r3, r9
 8007392:	4630      	mov	r0, r6
 8007394:	4639      	mov	r1, r7
 8007396:	f7f9 fa81 	bl	800089c <__aeabi_ddiv>
 800739a:	f7f9 fc05 	bl	8000ba8 <__aeabi_d2iz>
 800739e:	9001      	str	r0, [sp, #4]
 80073a0:	f7f9 f8e8 	bl	8000574 <__aeabi_i2d>
 80073a4:	4642      	mov	r2, r8
 80073a6:	464b      	mov	r3, r9
 80073a8:	f7f9 f94e 	bl	8000648 <__aeabi_dmul>
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	4630      	mov	r0, r6
 80073b2:	4639      	mov	r1, r7
 80073b4:	f7f8 ff90 	bl	80002d8 <__aeabi_dsub>
 80073b8:	9e01      	ldr	r6, [sp, #4]
 80073ba:	9f04      	ldr	r7, [sp, #16]
 80073bc:	3630      	adds	r6, #48	; 0x30
 80073be:	f805 6b01 	strb.w	r6, [r5], #1
 80073c2:	9e00      	ldr	r6, [sp, #0]
 80073c4:	1bae      	subs	r6, r5, r6
 80073c6:	42b7      	cmp	r7, r6
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	d134      	bne.n	8007438 <_dtoa_r+0x708>
 80073ce:	f7f8 ff85 	bl	80002dc <__adddf3>
 80073d2:	4642      	mov	r2, r8
 80073d4:	464b      	mov	r3, r9
 80073d6:	4606      	mov	r6, r0
 80073d8:	460f      	mov	r7, r1
 80073da:	f7f9 fbc5 	bl	8000b68 <__aeabi_dcmpgt>
 80073de:	b9c8      	cbnz	r0, 8007414 <_dtoa_r+0x6e4>
 80073e0:	4642      	mov	r2, r8
 80073e2:	464b      	mov	r3, r9
 80073e4:	4630      	mov	r0, r6
 80073e6:	4639      	mov	r1, r7
 80073e8:	f7f9 fb96 	bl	8000b18 <__aeabi_dcmpeq>
 80073ec:	b110      	cbz	r0, 80073f4 <_dtoa_r+0x6c4>
 80073ee:	9b01      	ldr	r3, [sp, #4]
 80073f0:	07db      	lsls	r3, r3, #31
 80073f2:	d40f      	bmi.n	8007414 <_dtoa_r+0x6e4>
 80073f4:	4651      	mov	r1, sl
 80073f6:	4620      	mov	r0, r4
 80073f8:	f000 fbcc 	bl	8007b94 <_Bfree>
 80073fc:	2300      	movs	r3, #0
 80073fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007400:	702b      	strb	r3, [r5, #0]
 8007402:	f10b 0301 	add.w	r3, fp, #1
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800740a:	2b00      	cmp	r3, #0
 800740c:	f43f ace2 	beq.w	8006dd4 <_dtoa_r+0xa4>
 8007410:	601d      	str	r5, [r3, #0]
 8007412:	e4df      	b.n	8006dd4 <_dtoa_r+0xa4>
 8007414:	465f      	mov	r7, fp
 8007416:	462b      	mov	r3, r5
 8007418:	461d      	mov	r5, r3
 800741a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800741e:	2a39      	cmp	r2, #57	; 0x39
 8007420:	d106      	bne.n	8007430 <_dtoa_r+0x700>
 8007422:	9a00      	ldr	r2, [sp, #0]
 8007424:	429a      	cmp	r2, r3
 8007426:	d1f7      	bne.n	8007418 <_dtoa_r+0x6e8>
 8007428:	9900      	ldr	r1, [sp, #0]
 800742a:	2230      	movs	r2, #48	; 0x30
 800742c:	3701      	adds	r7, #1
 800742e:	700a      	strb	r2, [r1, #0]
 8007430:	781a      	ldrb	r2, [r3, #0]
 8007432:	3201      	adds	r2, #1
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	e790      	b.n	800735a <_dtoa_r+0x62a>
 8007438:	4ba3      	ldr	r3, [pc, #652]	; (80076c8 <_dtoa_r+0x998>)
 800743a:	2200      	movs	r2, #0
 800743c:	f7f9 f904 	bl	8000648 <__aeabi_dmul>
 8007440:	2200      	movs	r2, #0
 8007442:	2300      	movs	r3, #0
 8007444:	4606      	mov	r6, r0
 8007446:	460f      	mov	r7, r1
 8007448:	f7f9 fb66 	bl	8000b18 <__aeabi_dcmpeq>
 800744c:	2800      	cmp	r0, #0
 800744e:	d09e      	beq.n	800738e <_dtoa_r+0x65e>
 8007450:	e7d0      	b.n	80073f4 <_dtoa_r+0x6c4>
 8007452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007454:	2a00      	cmp	r2, #0
 8007456:	f000 80ca 	beq.w	80075ee <_dtoa_r+0x8be>
 800745a:	9a07      	ldr	r2, [sp, #28]
 800745c:	2a01      	cmp	r2, #1
 800745e:	f300 80ad 	bgt.w	80075bc <_dtoa_r+0x88c>
 8007462:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007464:	2a00      	cmp	r2, #0
 8007466:	f000 80a5 	beq.w	80075b4 <_dtoa_r+0x884>
 800746a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800746e:	9e08      	ldr	r6, [sp, #32]
 8007470:	9d05      	ldr	r5, [sp, #20]
 8007472:	9a05      	ldr	r2, [sp, #20]
 8007474:	441a      	add	r2, r3
 8007476:	9205      	str	r2, [sp, #20]
 8007478:	9a06      	ldr	r2, [sp, #24]
 800747a:	2101      	movs	r1, #1
 800747c:	441a      	add	r2, r3
 800747e:	4620      	mov	r0, r4
 8007480:	9206      	str	r2, [sp, #24]
 8007482:	f000 fc3d 	bl	8007d00 <__i2b>
 8007486:	4607      	mov	r7, r0
 8007488:	b165      	cbz	r5, 80074a4 <_dtoa_r+0x774>
 800748a:	9b06      	ldr	r3, [sp, #24]
 800748c:	2b00      	cmp	r3, #0
 800748e:	dd09      	ble.n	80074a4 <_dtoa_r+0x774>
 8007490:	42ab      	cmp	r3, r5
 8007492:	9a05      	ldr	r2, [sp, #20]
 8007494:	bfa8      	it	ge
 8007496:	462b      	movge	r3, r5
 8007498:	1ad2      	subs	r2, r2, r3
 800749a:	9205      	str	r2, [sp, #20]
 800749c:	9a06      	ldr	r2, [sp, #24]
 800749e:	1aed      	subs	r5, r5, r3
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	9306      	str	r3, [sp, #24]
 80074a4:	9b08      	ldr	r3, [sp, #32]
 80074a6:	b1f3      	cbz	r3, 80074e6 <_dtoa_r+0x7b6>
 80074a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 80a3 	beq.w	80075f6 <_dtoa_r+0x8c6>
 80074b0:	2e00      	cmp	r6, #0
 80074b2:	dd10      	ble.n	80074d6 <_dtoa_r+0x7a6>
 80074b4:	4639      	mov	r1, r7
 80074b6:	4632      	mov	r2, r6
 80074b8:	4620      	mov	r0, r4
 80074ba:	f000 fce1 	bl	8007e80 <__pow5mult>
 80074be:	4652      	mov	r2, sl
 80074c0:	4601      	mov	r1, r0
 80074c2:	4607      	mov	r7, r0
 80074c4:	4620      	mov	r0, r4
 80074c6:	f000 fc31 	bl	8007d2c <__multiply>
 80074ca:	4651      	mov	r1, sl
 80074cc:	4680      	mov	r8, r0
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 fb60 	bl	8007b94 <_Bfree>
 80074d4:	46c2      	mov	sl, r8
 80074d6:	9b08      	ldr	r3, [sp, #32]
 80074d8:	1b9a      	subs	r2, r3, r6
 80074da:	d004      	beq.n	80074e6 <_dtoa_r+0x7b6>
 80074dc:	4651      	mov	r1, sl
 80074de:	4620      	mov	r0, r4
 80074e0:	f000 fcce 	bl	8007e80 <__pow5mult>
 80074e4:	4682      	mov	sl, r0
 80074e6:	2101      	movs	r1, #1
 80074e8:	4620      	mov	r0, r4
 80074ea:	f000 fc09 	bl	8007d00 <__i2b>
 80074ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	4606      	mov	r6, r0
 80074f4:	f340 8081 	ble.w	80075fa <_dtoa_r+0x8ca>
 80074f8:	461a      	mov	r2, r3
 80074fa:	4601      	mov	r1, r0
 80074fc:	4620      	mov	r0, r4
 80074fe:	f000 fcbf 	bl	8007e80 <__pow5mult>
 8007502:	9b07      	ldr	r3, [sp, #28]
 8007504:	2b01      	cmp	r3, #1
 8007506:	4606      	mov	r6, r0
 8007508:	dd7a      	ble.n	8007600 <_dtoa_r+0x8d0>
 800750a:	f04f 0800 	mov.w	r8, #0
 800750e:	6933      	ldr	r3, [r6, #16]
 8007510:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007514:	6918      	ldr	r0, [r3, #16]
 8007516:	f000 fba5 	bl	8007c64 <__hi0bits>
 800751a:	f1c0 0020 	rsb	r0, r0, #32
 800751e:	9b06      	ldr	r3, [sp, #24]
 8007520:	4418      	add	r0, r3
 8007522:	f010 001f 	ands.w	r0, r0, #31
 8007526:	f000 8094 	beq.w	8007652 <_dtoa_r+0x922>
 800752a:	f1c0 0320 	rsb	r3, r0, #32
 800752e:	2b04      	cmp	r3, #4
 8007530:	f340 8085 	ble.w	800763e <_dtoa_r+0x90e>
 8007534:	9b05      	ldr	r3, [sp, #20]
 8007536:	f1c0 001c 	rsb	r0, r0, #28
 800753a:	4403      	add	r3, r0
 800753c:	9305      	str	r3, [sp, #20]
 800753e:	9b06      	ldr	r3, [sp, #24]
 8007540:	4403      	add	r3, r0
 8007542:	4405      	add	r5, r0
 8007544:	9306      	str	r3, [sp, #24]
 8007546:	9b05      	ldr	r3, [sp, #20]
 8007548:	2b00      	cmp	r3, #0
 800754a:	dd05      	ble.n	8007558 <_dtoa_r+0x828>
 800754c:	4651      	mov	r1, sl
 800754e:	461a      	mov	r2, r3
 8007550:	4620      	mov	r0, r4
 8007552:	f000 fcef 	bl	8007f34 <__lshift>
 8007556:	4682      	mov	sl, r0
 8007558:	9b06      	ldr	r3, [sp, #24]
 800755a:	2b00      	cmp	r3, #0
 800755c:	dd05      	ble.n	800756a <_dtoa_r+0x83a>
 800755e:	4631      	mov	r1, r6
 8007560:	461a      	mov	r2, r3
 8007562:	4620      	mov	r0, r4
 8007564:	f000 fce6 	bl	8007f34 <__lshift>
 8007568:	4606      	mov	r6, r0
 800756a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800756c:	2b00      	cmp	r3, #0
 800756e:	d072      	beq.n	8007656 <_dtoa_r+0x926>
 8007570:	4631      	mov	r1, r6
 8007572:	4650      	mov	r0, sl
 8007574:	f000 fd4a 	bl	800800c <__mcmp>
 8007578:	2800      	cmp	r0, #0
 800757a:	da6c      	bge.n	8007656 <_dtoa_r+0x926>
 800757c:	2300      	movs	r3, #0
 800757e:	4651      	mov	r1, sl
 8007580:	220a      	movs	r2, #10
 8007582:	4620      	mov	r0, r4
 8007584:	f000 fb28 	bl	8007bd8 <__multadd>
 8007588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800758a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800758e:	4682      	mov	sl, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 81b0 	beq.w	80078f6 <_dtoa_r+0xbc6>
 8007596:	2300      	movs	r3, #0
 8007598:	4639      	mov	r1, r7
 800759a:	220a      	movs	r2, #10
 800759c:	4620      	mov	r0, r4
 800759e:	f000 fb1b 	bl	8007bd8 <__multadd>
 80075a2:	9b01      	ldr	r3, [sp, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	4607      	mov	r7, r0
 80075a8:	f300 8096 	bgt.w	80076d8 <_dtoa_r+0x9a8>
 80075ac:	9b07      	ldr	r3, [sp, #28]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	dc59      	bgt.n	8007666 <_dtoa_r+0x936>
 80075b2:	e091      	b.n	80076d8 <_dtoa_r+0x9a8>
 80075b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80075ba:	e758      	b.n	800746e <_dtoa_r+0x73e>
 80075bc:	9b04      	ldr	r3, [sp, #16]
 80075be:	1e5e      	subs	r6, r3, #1
 80075c0:	9b08      	ldr	r3, [sp, #32]
 80075c2:	42b3      	cmp	r3, r6
 80075c4:	bfbf      	itttt	lt
 80075c6:	9b08      	ldrlt	r3, [sp, #32]
 80075c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80075ca:	9608      	strlt	r6, [sp, #32]
 80075cc:	1af3      	sublt	r3, r6, r3
 80075ce:	bfb4      	ite	lt
 80075d0:	18d2      	addlt	r2, r2, r3
 80075d2:	1b9e      	subge	r6, r3, r6
 80075d4:	9b04      	ldr	r3, [sp, #16]
 80075d6:	bfbc      	itt	lt
 80075d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80075da:	2600      	movlt	r6, #0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	bfb7      	itett	lt
 80075e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80075e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80075e8:	1a9d      	sublt	r5, r3, r2
 80075ea:	2300      	movlt	r3, #0
 80075ec:	e741      	b.n	8007472 <_dtoa_r+0x742>
 80075ee:	9e08      	ldr	r6, [sp, #32]
 80075f0:	9d05      	ldr	r5, [sp, #20]
 80075f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80075f4:	e748      	b.n	8007488 <_dtoa_r+0x758>
 80075f6:	9a08      	ldr	r2, [sp, #32]
 80075f8:	e770      	b.n	80074dc <_dtoa_r+0x7ac>
 80075fa:	9b07      	ldr	r3, [sp, #28]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	dc19      	bgt.n	8007634 <_dtoa_r+0x904>
 8007600:	9b02      	ldr	r3, [sp, #8]
 8007602:	b9bb      	cbnz	r3, 8007634 <_dtoa_r+0x904>
 8007604:	9b03      	ldr	r3, [sp, #12]
 8007606:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800760a:	b99b      	cbnz	r3, 8007634 <_dtoa_r+0x904>
 800760c:	9b03      	ldr	r3, [sp, #12]
 800760e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007612:	0d1b      	lsrs	r3, r3, #20
 8007614:	051b      	lsls	r3, r3, #20
 8007616:	b183      	cbz	r3, 800763a <_dtoa_r+0x90a>
 8007618:	9b05      	ldr	r3, [sp, #20]
 800761a:	3301      	adds	r3, #1
 800761c:	9305      	str	r3, [sp, #20]
 800761e:	9b06      	ldr	r3, [sp, #24]
 8007620:	3301      	adds	r3, #1
 8007622:	9306      	str	r3, [sp, #24]
 8007624:	f04f 0801 	mov.w	r8, #1
 8007628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800762a:	2b00      	cmp	r3, #0
 800762c:	f47f af6f 	bne.w	800750e <_dtoa_r+0x7de>
 8007630:	2001      	movs	r0, #1
 8007632:	e774      	b.n	800751e <_dtoa_r+0x7ee>
 8007634:	f04f 0800 	mov.w	r8, #0
 8007638:	e7f6      	b.n	8007628 <_dtoa_r+0x8f8>
 800763a:	4698      	mov	r8, r3
 800763c:	e7f4      	b.n	8007628 <_dtoa_r+0x8f8>
 800763e:	d082      	beq.n	8007546 <_dtoa_r+0x816>
 8007640:	9a05      	ldr	r2, [sp, #20]
 8007642:	331c      	adds	r3, #28
 8007644:	441a      	add	r2, r3
 8007646:	9205      	str	r2, [sp, #20]
 8007648:	9a06      	ldr	r2, [sp, #24]
 800764a:	441a      	add	r2, r3
 800764c:	441d      	add	r5, r3
 800764e:	9206      	str	r2, [sp, #24]
 8007650:	e779      	b.n	8007546 <_dtoa_r+0x816>
 8007652:	4603      	mov	r3, r0
 8007654:	e7f4      	b.n	8007640 <_dtoa_r+0x910>
 8007656:	9b04      	ldr	r3, [sp, #16]
 8007658:	2b00      	cmp	r3, #0
 800765a:	dc37      	bgt.n	80076cc <_dtoa_r+0x99c>
 800765c:	9b07      	ldr	r3, [sp, #28]
 800765e:	2b02      	cmp	r3, #2
 8007660:	dd34      	ble.n	80076cc <_dtoa_r+0x99c>
 8007662:	9b04      	ldr	r3, [sp, #16]
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	9b01      	ldr	r3, [sp, #4]
 8007668:	b963      	cbnz	r3, 8007684 <_dtoa_r+0x954>
 800766a:	4631      	mov	r1, r6
 800766c:	2205      	movs	r2, #5
 800766e:	4620      	mov	r0, r4
 8007670:	f000 fab2 	bl	8007bd8 <__multadd>
 8007674:	4601      	mov	r1, r0
 8007676:	4606      	mov	r6, r0
 8007678:	4650      	mov	r0, sl
 800767a:	f000 fcc7 	bl	800800c <__mcmp>
 800767e:	2800      	cmp	r0, #0
 8007680:	f73f adbb 	bgt.w	80071fa <_dtoa_r+0x4ca>
 8007684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007686:	9d00      	ldr	r5, [sp, #0]
 8007688:	ea6f 0b03 	mvn.w	fp, r3
 800768c:	f04f 0800 	mov.w	r8, #0
 8007690:	4631      	mov	r1, r6
 8007692:	4620      	mov	r0, r4
 8007694:	f000 fa7e 	bl	8007b94 <_Bfree>
 8007698:	2f00      	cmp	r7, #0
 800769a:	f43f aeab 	beq.w	80073f4 <_dtoa_r+0x6c4>
 800769e:	f1b8 0f00 	cmp.w	r8, #0
 80076a2:	d005      	beq.n	80076b0 <_dtoa_r+0x980>
 80076a4:	45b8      	cmp	r8, r7
 80076a6:	d003      	beq.n	80076b0 <_dtoa_r+0x980>
 80076a8:	4641      	mov	r1, r8
 80076aa:	4620      	mov	r0, r4
 80076ac:	f000 fa72 	bl	8007b94 <_Bfree>
 80076b0:	4639      	mov	r1, r7
 80076b2:	4620      	mov	r0, r4
 80076b4:	f000 fa6e 	bl	8007b94 <_Bfree>
 80076b8:	e69c      	b.n	80073f4 <_dtoa_r+0x6c4>
 80076ba:	2600      	movs	r6, #0
 80076bc:	4637      	mov	r7, r6
 80076be:	e7e1      	b.n	8007684 <_dtoa_r+0x954>
 80076c0:	46bb      	mov	fp, r7
 80076c2:	4637      	mov	r7, r6
 80076c4:	e599      	b.n	80071fa <_dtoa_r+0x4ca>
 80076c6:	bf00      	nop
 80076c8:	40240000 	.word	0x40240000
 80076cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 80c8 	beq.w	8007864 <_dtoa_r+0xb34>
 80076d4:	9b04      	ldr	r3, [sp, #16]
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	2d00      	cmp	r5, #0
 80076da:	dd05      	ble.n	80076e8 <_dtoa_r+0x9b8>
 80076dc:	4639      	mov	r1, r7
 80076de:	462a      	mov	r2, r5
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 fc27 	bl	8007f34 <__lshift>
 80076e6:	4607      	mov	r7, r0
 80076e8:	f1b8 0f00 	cmp.w	r8, #0
 80076ec:	d05b      	beq.n	80077a6 <_dtoa_r+0xa76>
 80076ee:	6879      	ldr	r1, [r7, #4]
 80076f0:	4620      	mov	r0, r4
 80076f2:	f000 fa0f 	bl	8007b14 <_Balloc>
 80076f6:	4605      	mov	r5, r0
 80076f8:	b928      	cbnz	r0, 8007706 <_dtoa_r+0x9d6>
 80076fa:	4b83      	ldr	r3, [pc, #524]	; (8007908 <_dtoa_r+0xbd8>)
 80076fc:	4602      	mov	r2, r0
 80076fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007702:	f7ff bb2e 	b.w	8006d62 <_dtoa_r+0x32>
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	3202      	adds	r2, #2
 800770a:	0092      	lsls	r2, r2, #2
 800770c:	f107 010c 	add.w	r1, r7, #12
 8007710:	300c      	adds	r0, #12
 8007712:	f001 f813 	bl	800873c <memcpy>
 8007716:	2201      	movs	r2, #1
 8007718:	4629      	mov	r1, r5
 800771a:	4620      	mov	r0, r4
 800771c:	f000 fc0a 	bl	8007f34 <__lshift>
 8007720:	9b00      	ldr	r3, [sp, #0]
 8007722:	3301      	adds	r3, #1
 8007724:	9304      	str	r3, [sp, #16]
 8007726:	e9dd 2300 	ldrd	r2, r3, [sp]
 800772a:	4413      	add	r3, r2
 800772c:	9308      	str	r3, [sp, #32]
 800772e:	9b02      	ldr	r3, [sp, #8]
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	46b8      	mov	r8, r7
 8007736:	9306      	str	r3, [sp, #24]
 8007738:	4607      	mov	r7, r0
 800773a:	9b04      	ldr	r3, [sp, #16]
 800773c:	4631      	mov	r1, r6
 800773e:	3b01      	subs	r3, #1
 8007740:	4650      	mov	r0, sl
 8007742:	9301      	str	r3, [sp, #4]
 8007744:	f7ff fa6b 	bl	8006c1e <quorem>
 8007748:	4641      	mov	r1, r8
 800774a:	9002      	str	r0, [sp, #8]
 800774c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007750:	4650      	mov	r0, sl
 8007752:	f000 fc5b 	bl	800800c <__mcmp>
 8007756:	463a      	mov	r2, r7
 8007758:	9005      	str	r0, [sp, #20]
 800775a:	4631      	mov	r1, r6
 800775c:	4620      	mov	r0, r4
 800775e:	f000 fc71 	bl	8008044 <__mdiff>
 8007762:	68c2      	ldr	r2, [r0, #12]
 8007764:	4605      	mov	r5, r0
 8007766:	bb02      	cbnz	r2, 80077aa <_dtoa_r+0xa7a>
 8007768:	4601      	mov	r1, r0
 800776a:	4650      	mov	r0, sl
 800776c:	f000 fc4e 	bl	800800c <__mcmp>
 8007770:	4602      	mov	r2, r0
 8007772:	4629      	mov	r1, r5
 8007774:	4620      	mov	r0, r4
 8007776:	9209      	str	r2, [sp, #36]	; 0x24
 8007778:	f000 fa0c 	bl	8007b94 <_Bfree>
 800777c:	9b07      	ldr	r3, [sp, #28]
 800777e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007780:	9d04      	ldr	r5, [sp, #16]
 8007782:	ea43 0102 	orr.w	r1, r3, r2
 8007786:	9b06      	ldr	r3, [sp, #24]
 8007788:	4319      	orrs	r1, r3
 800778a:	d110      	bne.n	80077ae <_dtoa_r+0xa7e>
 800778c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007790:	d029      	beq.n	80077e6 <_dtoa_r+0xab6>
 8007792:	9b05      	ldr	r3, [sp, #20]
 8007794:	2b00      	cmp	r3, #0
 8007796:	dd02      	ble.n	800779e <_dtoa_r+0xa6e>
 8007798:	9b02      	ldr	r3, [sp, #8]
 800779a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800779e:	9b01      	ldr	r3, [sp, #4]
 80077a0:	f883 9000 	strb.w	r9, [r3]
 80077a4:	e774      	b.n	8007690 <_dtoa_r+0x960>
 80077a6:	4638      	mov	r0, r7
 80077a8:	e7ba      	b.n	8007720 <_dtoa_r+0x9f0>
 80077aa:	2201      	movs	r2, #1
 80077ac:	e7e1      	b.n	8007772 <_dtoa_r+0xa42>
 80077ae:	9b05      	ldr	r3, [sp, #20]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	db04      	blt.n	80077be <_dtoa_r+0xa8e>
 80077b4:	9907      	ldr	r1, [sp, #28]
 80077b6:	430b      	orrs	r3, r1
 80077b8:	9906      	ldr	r1, [sp, #24]
 80077ba:	430b      	orrs	r3, r1
 80077bc:	d120      	bne.n	8007800 <_dtoa_r+0xad0>
 80077be:	2a00      	cmp	r2, #0
 80077c0:	dded      	ble.n	800779e <_dtoa_r+0xa6e>
 80077c2:	4651      	mov	r1, sl
 80077c4:	2201      	movs	r2, #1
 80077c6:	4620      	mov	r0, r4
 80077c8:	f000 fbb4 	bl	8007f34 <__lshift>
 80077cc:	4631      	mov	r1, r6
 80077ce:	4682      	mov	sl, r0
 80077d0:	f000 fc1c 	bl	800800c <__mcmp>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	dc03      	bgt.n	80077e0 <_dtoa_r+0xab0>
 80077d8:	d1e1      	bne.n	800779e <_dtoa_r+0xa6e>
 80077da:	f019 0f01 	tst.w	r9, #1
 80077de:	d0de      	beq.n	800779e <_dtoa_r+0xa6e>
 80077e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80077e4:	d1d8      	bne.n	8007798 <_dtoa_r+0xa68>
 80077e6:	9a01      	ldr	r2, [sp, #4]
 80077e8:	2339      	movs	r3, #57	; 0x39
 80077ea:	7013      	strb	r3, [r2, #0]
 80077ec:	462b      	mov	r3, r5
 80077ee:	461d      	mov	r5, r3
 80077f0:	3b01      	subs	r3, #1
 80077f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80077f6:	2a39      	cmp	r2, #57	; 0x39
 80077f8:	d06c      	beq.n	80078d4 <_dtoa_r+0xba4>
 80077fa:	3201      	adds	r2, #1
 80077fc:	701a      	strb	r2, [r3, #0]
 80077fe:	e747      	b.n	8007690 <_dtoa_r+0x960>
 8007800:	2a00      	cmp	r2, #0
 8007802:	dd07      	ble.n	8007814 <_dtoa_r+0xae4>
 8007804:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007808:	d0ed      	beq.n	80077e6 <_dtoa_r+0xab6>
 800780a:	9a01      	ldr	r2, [sp, #4]
 800780c:	f109 0301 	add.w	r3, r9, #1
 8007810:	7013      	strb	r3, [r2, #0]
 8007812:	e73d      	b.n	8007690 <_dtoa_r+0x960>
 8007814:	9b04      	ldr	r3, [sp, #16]
 8007816:	9a08      	ldr	r2, [sp, #32]
 8007818:	f803 9c01 	strb.w	r9, [r3, #-1]
 800781c:	4293      	cmp	r3, r2
 800781e:	d043      	beq.n	80078a8 <_dtoa_r+0xb78>
 8007820:	4651      	mov	r1, sl
 8007822:	2300      	movs	r3, #0
 8007824:	220a      	movs	r2, #10
 8007826:	4620      	mov	r0, r4
 8007828:	f000 f9d6 	bl	8007bd8 <__multadd>
 800782c:	45b8      	cmp	r8, r7
 800782e:	4682      	mov	sl, r0
 8007830:	f04f 0300 	mov.w	r3, #0
 8007834:	f04f 020a 	mov.w	r2, #10
 8007838:	4641      	mov	r1, r8
 800783a:	4620      	mov	r0, r4
 800783c:	d107      	bne.n	800784e <_dtoa_r+0xb1e>
 800783e:	f000 f9cb 	bl	8007bd8 <__multadd>
 8007842:	4680      	mov	r8, r0
 8007844:	4607      	mov	r7, r0
 8007846:	9b04      	ldr	r3, [sp, #16]
 8007848:	3301      	adds	r3, #1
 800784a:	9304      	str	r3, [sp, #16]
 800784c:	e775      	b.n	800773a <_dtoa_r+0xa0a>
 800784e:	f000 f9c3 	bl	8007bd8 <__multadd>
 8007852:	4639      	mov	r1, r7
 8007854:	4680      	mov	r8, r0
 8007856:	2300      	movs	r3, #0
 8007858:	220a      	movs	r2, #10
 800785a:	4620      	mov	r0, r4
 800785c:	f000 f9bc 	bl	8007bd8 <__multadd>
 8007860:	4607      	mov	r7, r0
 8007862:	e7f0      	b.n	8007846 <_dtoa_r+0xb16>
 8007864:	9b04      	ldr	r3, [sp, #16]
 8007866:	9301      	str	r3, [sp, #4]
 8007868:	9d00      	ldr	r5, [sp, #0]
 800786a:	4631      	mov	r1, r6
 800786c:	4650      	mov	r0, sl
 800786e:	f7ff f9d6 	bl	8006c1e <quorem>
 8007872:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007876:	9b00      	ldr	r3, [sp, #0]
 8007878:	f805 9b01 	strb.w	r9, [r5], #1
 800787c:	1aea      	subs	r2, r5, r3
 800787e:	9b01      	ldr	r3, [sp, #4]
 8007880:	4293      	cmp	r3, r2
 8007882:	dd07      	ble.n	8007894 <_dtoa_r+0xb64>
 8007884:	4651      	mov	r1, sl
 8007886:	2300      	movs	r3, #0
 8007888:	220a      	movs	r2, #10
 800788a:	4620      	mov	r0, r4
 800788c:	f000 f9a4 	bl	8007bd8 <__multadd>
 8007890:	4682      	mov	sl, r0
 8007892:	e7ea      	b.n	800786a <_dtoa_r+0xb3a>
 8007894:	9b01      	ldr	r3, [sp, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	bfc8      	it	gt
 800789a:	461d      	movgt	r5, r3
 800789c:	9b00      	ldr	r3, [sp, #0]
 800789e:	bfd8      	it	le
 80078a0:	2501      	movle	r5, #1
 80078a2:	441d      	add	r5, r3
 80078a4:	f04f 0800 	mov.w	r8, #0
 80078a8:	4651      	mov	r1, sl
 80078aa:	2201      	movs	r2, #1
 80078ac:	4620      	mov	r0, r4
 80078ae:	f000 fb41 	bl	8007f34 <__lshift>
 80078b2:	4631      	mov	r1, r6
 80078b4:	4682      	mov	sl, r0
 80078b6:	f000 fba9 	bl	800800c <__mcmp>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	dc96      	bgt.n	80077ec <_dtoa_r+0xabc>
 80078be:	d102      	bne.n	80078c6 <_dtoa_r+0xb96>
 80078c0:	f019 0f01 	tst.w	r9, #1
 80078c4:	d192      	bne.n	80077ec <_dtoa_r+0xabc>
 80078c6:	462b      	mov	r3, r5
 80078c8:	461d      	mov	r5, r3
 80078ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078ce:	2a30      	cmp	r2, #48	; 0x30
 80078d0:	d0fa      	beq.n	80078c8 <_dtoa_r+0xb98>
 80078d2:	e6dd      	b.n	8007690 <_dtoa_r+0x960>
 80078d4:	9a00      	ldr	r2, [sp, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d189      	bne.n	80077ee <_dtoa_r+0xabe>
 80078da:	f10b 0b01 	add.w	fp, fp, #1
 80078de:	2331      	movs	r3, #49	; 0x31
 80078e0:	e796      	b.n	8007810 <_dtoa_r+0xae0>
 80078e2:	4b0a      	ldr	r3, [pc, #40]	; (800790c <_dtoa_r+0xbdc>)
 80078e4:	f7ff ba99 	b.w	8006e1a <_dtoa_r+0xea>
 80078e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f47f aa6d 	bne.w	8006dca <_dtoa_r+0x9a>
 80078f0:	4b07      	ldr	r3, [pc, #28]	; (8007910 <_dtoa_r+0xbe0>)
 80078f2:	f7ff ba92 	b.w	8006e1a <_dtoa_r+0xea>
 80078f6:	9b01      	ldr	r3, [sp, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	dcb5      	bgt.n	8007868 <_dtoa_r+0xb38>
 80078fc:	9b07      	ldr	r3, [sp, #28]
 80078fe:	2b02      	cmp	r3, #2
 8007900:	f73f aeb1 	bgt.w	8007666 <_dtoa_r+0x936>
 8007904:	e7b0      	b.n	8007868 <_dtoa_r+0xb38>
 8007906:	bf00      	nop
 8007908:	08008b10 	.word	0x08008b10
 800790c:	08008a70 	.word	0x08008a70
 8007910:	08008a94 	.word	0x08008a94

08007914 <_free_r>:
 8007914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007916:	2900      	cmp	r1, #0
 8007918:	d044      	beq.n	80079a4 <_free_r+0x90>
 800791a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800791e:	9001      	str	r0, [sp, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	f1a1 0404 	sub.w	r4, r1, #4
 8007926:	bfb8      	it	lt
 8007928:	18e4      	addlt	r4, r4, r3
 800792a:	f000 f8e7 	bl	8007afc <__malloc_lock>
 800792e:	4a1e      	ldr	r2, [pc, #120]	; (80079a8 <_free_r+0x94>)
 8007930:	9801      	ldr	r0, [sp, #4]
 8007932:	6813      	ldr	r3, [r2, #0]
 8007934:	b933      	cbnz	r3, 8007944 <_free_r+0x30>
 8007936:	6063      	str	r3, [r4, #4]
 8007938:	6014      	str	r4, [r2, #0]
 800793a:	b003      	add	sp, #12
 800793c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007940:	f000 b8e2 	b.w	8007b08 <__malloc_unlock>
 8007944:	42a3      	cmp	r3, r4
 8007946:	d908      	bls.n	800795a <_free_r+0x46>
 8007948:	6825      	ldr	r5, [r4, #0]
 800794a:	1961      	adds	r1, r4, r5
 800794c:	428b      	cmp	r3, r1
 800794e:	bf01      	itttt	eq
 8007950:	6819      	ldreq	r1, [r3, #0]
 8007952:	685b      	ldreq	r3, [r3, #4]
 8007954:	1949      	addeq	r1, r1, r5
 8007956:	6021      	streq	r1, [r4, #0]
 8007958:	e7ed      	b.n	8007936 <_free_r+0x22>
 800795a:	461a      	mov	r2, r3
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	b10b      	cbz	r3, 8007964 <_free_r+0x50>
 8007960:	42a3      	cmp	r3, r4
 8007962:	d9fa      	bls.n	800795a <_free_r+0x46>
 8007964:	6811      	ldr	r1, [r2, #0]
 8007966:	1855      	adds	r5, r2, r1
 8007968:	42a5      	cmp	r5, r4
 800796a:	d10b      	bne.n	8007984 <_free_r+0x70>
 800796c:	6824      	ldr	r4, [r4, #0]
 800796e:	4421      	add	r1, r4
 8007970:	1854      	adds	r4, r2, r1
 8007972:	42a3      	cmp	r3, r4
 8007974:	6011      	str	r1, [r2, #0]
 8007976:	d1e0      	bne.n	800793a <_free_r+0x26>
 8007978:	681c      	ldr	r4, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	6053      	str	r3, [r2, #4]
 800797e:	440c      	add	r4, r1
 8007980:	6014      	str	r4, [r2, #0]
 8007982:	e7da      	b.n	800793a <_free_r+0x26>
 8007984:	d902      	bls.n	800798c <_free_r+0x78>
 8007986:	230c      	movs	r3, #12
 8007988:	6003      	str	r3, [r0, #0]
 800798a:	e7d6      	b.n	800793a <_free_r+0x26>
 800798c:	6825      	ldr	r5, [r4, #0]
 800798e:	1961      	adds	r1, r4, r5
 8007990:	428b      	cmp	r3, r1
 8007992:	bf04      	itt	eq
 8007994:	6819      	ldreq	r1, [r3, #0]
 8007996:	685b      	ldreq	r3, [r3, #4]
 8007998:	6063      	str	r3, [r4, #4]
 800799a:	bf04      	itt	eq
 800799c:	1949      	addeq	r1, r1, r5
 800799e:	6021      	streq	r1, [r4, #0]
 80079a0:	6054      	str	r4, [r2, #4]
 80079a2:	e7ca      	b.n	800793a <_free_r+0x26>
 80079a4:	b003      	add	sp, #12
 80079a6:	bd30      	pop	{r4, r5, pc}
 80079a8:	20000594 	.word	0x20000594

080079ac <malloc>:
 80079ac:	4b02      	ldr	r3, [pc, #8]	; (80079b8 <malloc+0xc>)
 80079ae:	4601      	mov	r1, r0
 80079b0:	6818      	ldr	r0, [r3, #0]
 80079b2:	f000 b823 	b.w	80079fc <_malloc_r>
 80079b6:	bf00      	nop
 80079b8:	20000064 	.word	0x20000064

080079bc <sbrk_aligned>:
 80079bc:	b570      	push	{r4, r5, r6, lr}
 80079be:	4e0e      	ldr	r6, [pc, #56]	; (80079f8 <sbrk_aligned+0x3c>)
 80079c0:	460c      	mov	r4, r1
 80079c2:	6831      	ldr	r1, [r6, #0]
 80079c4:	4605      	mov	r5, r0
 80079c6:	b911      	cbnz	r1, 80079ce <sbrk_aligned+0x12>
 80079c8:	f000 fea8 	bl	800871c <_sbrk_r>
 80079cc:	6030      	str	r0, [r6, #0]
 80079ce:	4621      	mov	r1, r4
 80079d0:	4628      	mov	r0, r5
 80079d2:	f000 fea3 	bl	800871c <_sbrk_r>
 80079d6:	1c43      	adds	r3, r0, #1
 80079d8:	d00a      	beq.n	80079f0 <sbrk_aligned+0x34>
 80079da:	1cc4      	adds	r4, r0, #3
 80079dc:	f024 0403 	bic.w	r4, r4, #3
 80079e0:	42a0      	cmp	r0, r4
 80079e2:	d007      	beq.n	80079f4 <sbrk_aligned+0x38>
 80079e4:	1a21      	subs	r1, r4, r0
 80079e6:	4628      	mov	r0, r5
 80079e8:	f000 fe98 	bl	800871c <_sbrk_r>
 80079ec:	3001      	adds	r0, #1
 80079ee:	d101      	bne.n	80079f4 <sbrk_aligned+0x38>
 80079f0:	f04f 34ff 	mov.w	r4, #4294967295
 80079f4:	4620      	mov	r0, r4
 80079f6:	bd70      	pop	{r4, r5, r6, pc}
 80079f8:	20000598 	.word	0x20000598

080079fc <_malloc_r>:
 80079fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a00:	1ccd      	adds	r5, r1, #3
 8007a02:	f025 0503 	bic.w	r5, r5, #3
 8007a06:	3508      	adds	r5, #8
 8007a08:	2d0c      	cmp	r5, #12
 8007a0a:	bf38      	it	cc
 8007a0c:	250c      	movcc	r5, #12
 8007a0e:	2d00      	cmp	r5, #0
 8007a10:	4607      	mov	r7, r0
 8007a12:	db01      	blt.n	8007a18 <_malloc_r+0x1c>
 8007a14:	42a9      	cmp	r1, r5
 8007a16:	d905      	bls.n	8007a24 <_malloc_r+0x28>
 8007a18:	230c      	movs	r3, #12
 8007a1a:	603b      	str	r3, [r7, #0]
 8007a1c:	2600      	movs	r6, #0
 8007a1e:	4630      	mov	r0, r6
 8007a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007af8 <_malloc_r+0xfc>
 8007a28:	f000 f868 	bl	8007afc <__malloc_lock>
 8007a2c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a30:	461c      	mov	r4, r3
 8007a32:	bb5c      	cbnz	r4, 8007a8c <_malloc_r+0x90>
 8007a34:	4629      	mov	r1, r5
 8007a36:	4638      	mov	r0, r7
 8007a38:	f7ff ffc0 	bl	80079bc <sbrk_aligned>
 8007a3c:	1c43      	adds	r3, r0, #1
 8007a3e:	4604      	mov	r4, r0
 8007a40:	d155      	bne.n	8007aee <_malloc_r+0xf2>
 8007a42:	f8d8 4000 	ldr.w	r4, [r8]
 8007a46:	4626      	mov	r6, r4
 8007a48:	2e00      	cmp	r6, #0
 8007a4a:	d145      	bne.n	8007ad8 <_malloc_r+0xdc>
 8007a4c:	2c00      	cmp	r4, #0
 8007a4e:	d048      	beq.n	8007ae2 <_malloc_r+0xe6>
 8007a50:	6823      	ldr	r3, [r4, #0]
 8007a52:	4631      	mov	r1, r6
 8007a54:	4638      	mov	r0, r7
 8007a56:	eb04 0903 	add.w	r9, r4, r3
 8007a5a:	f000 fe5f 	bl	800871c <_sbrk_r>
 8007a5e:	4581      	cmp	r9, r0
 8007a60:	d13f      	bne.n	8007ae2 <_malloc_r+0xe6>
 8007a62:	6821      	ldr	r1, [r4, #0]
 8007a64:	1a6d      	subs	r5, r5, r1
 8007a66:	4629      	mov	r1, r5
 8007a68:	4638      	mov	r0, r7
 8007a6a:	f7ff ffa7 	bl	80079bc <sbrk_aligned>
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d037      	beq.n	8007ae2 <_malloc_r+0xe6>
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	442b      	add	r3, r5
 8007a76:	6023      	str	r3, [r4, #0]
 8007a78:	f8d8 3000 	ldr.w	r3, [r8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d038      	beq.n	8007af2 <_malloc_r+0xf6>
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	42a2      	cmp	r2, r4
 8007a84:	d12b      	bne.n	8007ade <_malloc_r+0xe2>
 8007a86:	2200      	movs	r2, #0
 8007a88:	605a      	str	r2, [r3, #4]
 8007a8a:	e00f      	b.n	8007aac <_malloc_r+0xb0>
 8007a8c:	6822      	ldr	r2, [r4, #0]
 8007a8e:	1b52      	subs	r2, r2, r5
 8007a90:	d41f      	bmi.n	8007ad2 <_malloc_r+0xd6>
 8007a92:	2a0b      	cmp	r2, #11
 8007a94:	d917      	bls.n	8007ac6 <_malloc_r+0xca>
 8007a96:	1961      	adds	r1, r4, r5
 8007a98:	42a3      	cmp	r3, r4
 8007a9a:	6025      	str	r5, [r4, #0]
 8007a9c:	bf18      	it	ne
 8007a9e:	6059      	strne	r1, [r3, #4]
 8007aa0:	6863      	ldr	r3, [r4, #4]
 8007aa2:	bf08      	it	eq
 8007aa4:	f8c8 1000 	streq.w	r1, [r8]
 8007aa8:	5162      	str	r2, [r4, r5]
 8007aaa:	604b      	str	r3, [r1, #4]
 8007aac:	4638      	mov	r0, r7
 8007aae:	f104 060b 	add.w	r6, r4, #11
 8007ab2:	f000 f829 	bl	8007b08 <__malloc_unlock>
 8007ab6:	f026 0607 	bic.w	r6, r6, #7
 8007aba:	1d23      	adds	r3, r4, #4
 8007abc:	1af2      	subs	r2, r6, r3
 8007abe:	d0ae      	beq.n	8007a1e <_malloc_r+0x22>
 8007ac0:	1b9b      	subs	r3, r3, r6
 8007ac2:	50a3      	str	r3, [r4, r2]
 8007ac4:	e7ab      	b.n	8007a1e <_malloc_r+0x22>
 8007ac6:	42a3      	cmp	r3, r4
 8007ac8:	6862      	ldr	r2, [r4, #4]
 8007aca:	d1dd      	bne.n	8007a88 <_malloc_r+0x8c>
 8007acc:	f8c8 2000 	str.w	r2, [r8]
 8007ad0:	e7ec      	b.n	8007aac <_malloc_r+0xb0>
 8007ad2:	4623      	mov	r3, r4
 8007ad4:	6864      	ldr	r4, [r4, #4]
 8007ad6:	e7ac      	b.n	8007a32 <_malloc_r+0x36>
 8007ad8:	4634      	mov	r4, r6
 8007ada:	6876      	ldr	r6, [r6, #4]
 8007adc:	e7b4      	b.n	8007a48 <_malloc_r+0x4c>
 8007ade:	4613      	mov	r3, r2
 8007ae0:	e7cc      	b.n	8007a7c <_malloc_r+0x80>
 8007ae2:	230c      	movs	r3, #12
 8007ae4:	603b      	str	r3, [r7, #0]
 8007ae6:	4638      	mov	r0, r7
 8007ae8:	f000 f80e 	bl	8007b08 <__malloc_unlock>
 8007aec:	e797      	b.n	8007a1e <_malloc_r+0x22>
 8007aee:	6025      	str	r5, [r4, #0]
 8007af0:	e7dc      	b.n	8007aac <_malloc_r+0xb0>
 8007af2:	605b      	str	r3, [r3, #4]
 8007af4:	deff      	udf	#255	; 0xff
 8007af6:	bf00      	nop
 8007af8:	20000594 	.word	0x20000594

08007afc <__malloc_lock>:
 8007afc:	4801      	ldr	r0, [pc, #4]	; (8007b04 <__malloc_lock+0x8>)
 8007afe:	f7ff b88c 	b.w	8006c1a <__retarget_lock_acquire_recursive>
 8007b02:	bf00      	nop
 8007b04:	20000590 	.word	0x20000590

08007b08 <__malloc_unlock>:
 8007b08:	4801      	ldr	r0, [pc, #4]	; (8007b10 <__malloc_unlock+0x8>)
 8007b0a:	f7ff b887 	b.w	8006c1c <__retarget_lock_release_recursive>
 8007b0e:	bf00      	nop
 8007b10:	20000590 	.word	0x20000590

08007b14 <_Balloc>:
 8007b14:	b570      	push	{r4, r5, r6, lr}
 8007b16:	69c6      	ldr	r6, [r0, #28]
 8007b18:	4604      	mov	r4, r0
 8007b1a:	460d      	mov	r5, r1
 8007b1c:	b976      	cbnz	r6, 8007b3c <_Balloc+0x28>
 8007b1e:	2010      	movs	r0, #16
 8007b20:	f7ff ff44 	bl	80079ac <malloc>
 8007b24:	4602      	mov	r2, r0
 8007b26:	61e0      	str	r0, [r4, #28]
 8007b28:	b920      	cbnz	r0, 8007b34 <_Balloc+0x20>
 8007b2a:	4b18      	ldr	r3, [pc, #96]	; (8007b8c <_Balloc+0x78>)
 8007b2c:	4818      	ldr	r0, [pc, #96]	; (8007b90 <_Balloc+0x7c>)
 8007b2e:	216b      	movs	r1, #107	; 0x6b
 8007b30:	f000 fe12 	bl	8008758 <__assert_func>
 8007b34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b38:	6006      	str	r6, [r0, #0]
 8007b3a:	60c6      	str	r6, [r0, #12]
 8007b3c:	69e6      	ldr	r6, [r4, #28]
 8007b3e:	68f3      	ldr	r3, [r6, #12]
 8007b40:	b183      	cbz	r3, 8007b64 <_Balloc+0x50>
 8007b42:	69e3      	ldr	r3, [r4, #28]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b4a:	b9b8      	cbnz	r0, 8007b7c <_Balloc+0x68>
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	fa01 f605 	lsl.w	r6, r1, r5
 8007b52:	1d72      	adds	r2, r6, #5
 8007b54:	0092      	lsls	r2, r2, #2
 8007b56:	4620      	mov	r0, r4
 8007b58:	f000 fe1c 	bl	8008794 <_calloc_r>
 8007b5c:	b160      	cbz	r0, 8007b78 <_Balloc+0x64>
 8007b5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b62:	e00e      	b.n	8007b82 <_Balloc+0x6e>
 8007b64:	2221      	movs	r2, #33	; 0x21
 8007b66:	2104      	movs	r1, #4
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f000 fe13 	bl	8008794 <_calloc_r>
 8007b6e:	69e3      	ldr	r3, [r4, #28]
 8007b70:	60f0      	str	r0, [r6, #12]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1e4      	bne.n	8007b42 <_Balloc+0x2e>
 8007b78:	2000      	movs	r0, #0
 8007b7a:	bd70      	pop	{r4, r5, r6, pc}
 8007b7c:	6802      	ldr	r2, [r0, #0]
 8007b7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b82:	2300      	movs	r3, #0
 8007b84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b88:	e7f7      	b.n	8007b7a <_Balloc+0x66>
 8007b8a:	bf00      	nop
 8007b8c:	08008aa1 	.word	0x08008aa1
 8007b90:	08008b21 	.word	0x08008b21

08007b94 <_Bfree>:
 8007b94:	b570      	push	{r4, r5, r6, lr}
 8007b96:	69c6      	ldr	r6, [r0, #28]
 8007b98:	4605      	mov	r5, r0
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	b976      	cbnz	r6, 8007bbc <_Bfree+0x28>
 8007b9e:	2010      	movs	r0, #16
 8007ba0:	f7ff ff04 	bl	80079ac <malloc>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	61e8      	str	r0, [r5, #28]
 8007ba8:	b920      	cbnz	r0, 8007bb4 <_Bfree+0x20>
 8007baa:	4b09      	ldr	r3, [pc, #36]	; (8007bd0 <_Bfree+0x3c>)
 8007bac:	4809      	ldr	r0, [pc, #36]	; (8007bd4 <_Bfree+0x40>)
 8007bae:	218f      	movs	r1, #143	; 0x8f
 8007bb0:	f000 fdd2 	bl	8008758 <__assert_func>
 8007bb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bb8:	6006      	str	r6, [r0, #0]
 8007bba:	60c6      	str	r6, [r0, #12]
 8007bbc:	b13c      	cbz	r4, 8007bce <_Bfree+0x3a>
 8007bbe:	69eb      	ldr	r3, [r5, #28]
 8007bc0:	6862      	ldr	r2, [r4, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bc8:	6021      	str	r1, [r4, #0]
 8007bca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	08008aa1 	.word	0x08008aa1
 8007bd4:	08008b21 	.word	0x08008b21

08007bd8 <__multadd>:
 8007bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bdc:	690d      	ldr	r5, [r1, #16]
 8007bde:	4607      	mov	r7, r0
 8007be0:	460c      	mov	r4, r1
 8007be2:	461e      	mov	r6, r3
 8007be4:	f101 0c14 	add.w	ip, r1, #20
 8007be8:	2000      	movs	r0, #0
 8007bea:	f8dc 3000 	ldr.w	r3, [ip]
 8007bee:	b299      	uxth	r1, r3
 8007bf0:	fb02 6101 	mla	r1, r2, r1, r6
 8007bf4:	0c1e      	lsrs	r6, r3, #16
 8007bf6:	0c0b      	lsrs	r3, r1, #16
 8007bf8:	fb02 3306 	mla	r3, r2, r6, r3
 8007bfc:	b289      	uxth	r1, r1
 8007bfe:	3001      	adds	r0, #1
 8007c00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c04:	4285      	cmp	r5, r0
 8007c06:	f84c 1b04 	str.w	r1, [ip], #4
 8007c0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c0e:	dcec      	bgt.n	8007bea <__multadd+0x12>
 8007c10:	b30e      	cbz	r6, 8007c56 <__multadd+0x7e>
 8007c12:	68a3      	ldr	r3, [r4, #8]
 8007c14:	42ab      	cmp	r3, r5
 8007c16:	dc19      	bgt.n	8007c4c <__multadd+0x74>
 8007c18:	6861      	ldr	r1, [r4, #4]
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	3101      	adds	r1, #1
 8007c1e:	f7ff ff79 	bl	8007b14 <_Balloc>
 8007c22:	4680      	mov	r8, r0
 8007c24:	b928      	cbnz	r0, 8007c32 <__multadd+0x5a>
 8007c26:	4602      	mov	r2, r0
 8007c28:	4b0c      	ldr	r3, [pc, #48]	; (8007c5c <__multadd+0x84>)
 8007c2a:	480d      	ldr	r0, [pc, #52]	; (8007c60 <__multadd+0x88>)
 8007c2c:	21ba      	movs	r1, #186	; 0xba
 8007c2e:	f000 fd93 	bl	8008758 <__assert_func>
 8007c32:	6922      	ldr	r2, [r4, #16]
 8007c34:	3202      	adds	r2, #2
 8007c36:	f104 010c 	add.w	r1, r4, #12
 8007c3a:	0092      	lsls	r2, r2, #2
 8007c3c:	300c      	adds	r0, #12
 8007c3e:	f000 fd7d 	bl	800873c <memcpy>
 8007c42:	4621      	mov	r1, r4
 8007c44:	4638      	mov	r0, r7
 8007c46:	f7ff ffa5 	bl	8007b94 <_Bfree>
 8007c4a:	4644      	mov	r4, r8
 8007c4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c50:	3501      	adds	r5, #1
 8007c52:	615e      	str	r6, [r3, #20]
 8007c54:	6125      	str	r5, [r4, #16]
 8007c56:	4620      	mov	r0, r4
 8007c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c5c:	08008b10 	.word	0x08008b10
 8007c60:	08008b21 	.word	0x08008b21

08007c64 <__hi0bits>:
 8007c64:	0c03      	lsrs	r3, r0, #16
 8007c66:	041b      	lsls	r3, r3, #16
 8007c68:	b9d3      	cbnz	r3, 8007ca0 <__hi0bits+0x3c>
 8007c6a:	0400      	lsls	r0, r0, #16
 8007c6c:	2310      	movs	r3, #16
 8007c6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c72:	bf04      	itt	eq
 8007c74:	0200      	lsleq	r0, r0, #8
 8007c76:	3308      	addeq	r3, #8
 8007c78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c7c:	bf04      	itt	eq
 8007c7e:	0100      	lsleq	r0, r0, #4
 8007c80:	3304      	addeq	r3, #4
 8007c82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c86:	bf04      	itt	eq
 8007c88:	0080      	lsleq	r0, r0, #2
 8007c8a:	3302      	addeq	r3, #2
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	db05      	blt.n	8007c9c <__hi0bits+0x38>
 8007c90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c94:	f103 0301 	add.w	r3, r3, #1
 8007c98:	bf08      	it	eq
 8007c9a:	2320      	moveq	r3, #32
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	4770      	bx	lr
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	e7e4      	b.n	8007c6e <__hi0bits+0xa>

08007ca4 <__lo0bits>:
 8007ca4:	6803      	ldr	r3, [r0, #0]
 8007ca6:	f013 0207 	ands.w	r2, r3, #7
 8007caa:	d00c      	beq.n	8007cc6 <__lo0bits+0x22>
 8007cac:	07d9      	lsls	r1, r3, #31
 8007cae:	d422      	bmi.n	8007cf6 <__lo0bits+0x52>
 8007cb0:	079a      	lsls	r2, r3, #30
 8007cb2:	bf49      	itett	mi
 8007cb4:	085b      	lsrmi	r3, r3, #1
 8007cb6:	089b      	lsrpl	r3, r3, #2
 8007cb8:	6003      	strmi	r3, [r0, #0]
 8007cba:	2201      	movmi	r2, #1
 8007cbc:	bf5c      	itt	pl
 8007cbe:	6003      	strpl	r3, [r0, #0]
 8007cc0:	2202      	movpl	r2, #2
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	4770      	bx	lr
 8007cc6:	b299      	uxth	r1, r3
 8007cc8:	b909      	cbnz	r1, 8007cce <__lo0bits+0x2a>
 8007cca:	0c1b      	lsrs	r3, r3, #16
 8007ccc:	2210      	movs	r2, #16
 8007cce:	b2d9      	uxtb	r1, r3
 8007cd0:	b909      	cbnz	r1, 8007cd6 <__lo0bits+0x32>
 8007cd2:	3208      	adds	r2, #8
 8007cd4:	0a1b      	lsrs	r3, r3, #8
 8007cd6:	0719      	lsls	r1, r3, #28
 8007cd8:	bf04      	itt	eq
 8007cda:	091b      	lsreq	r3, r3, #4
 8007cdc:	3204      	addeq	r2, #4
 8007cde:	0799      	lsls	r1, r3, #30
 8007ce0:	bf04      	itt	eq
 8007ce2:	089b      	lsreq	r3, r3, #2
 8007ce4:	3202      	addeq	r2, #2
 8007ce6:	07d9      	lsls	r1, r3, #31
 8007ce8:	d403      	bmi.n	8007cf2 <__lo0bits+0x4e>
 8007cea:	085b      	lsrs	r3, r3, #1
 8007cec:	f102 0201 	add.w	r2, r2, #1
 8007cf0:	d003      	beq.n	8007cfa <__lo0bits+0x56>
 8007cf2:	6003      	str	r3, [r0, #0]
 8007cf4:	e7e5      	b.n	8007cc2 <__lo0bits+0x1e>
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	e7e3      	b.n	8007cc2 <__lo0bits+0x1e>
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	e7e1      	b.n	8007cc2 <__lo0bits+0x1e>
	...

08007d00 <__i2b>:
 8007d00:	b510      	push	{r4, lr}
 8007d02:	460c      	mov	r4, r1
 8007d04:	2101      	movs	r1, #1
 8007d06:	f7ff ff05 	bl	8007b14 <_Balloc>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	b928      	cbnz	r0, 8007d1a <__i2b+0x1a>
 8007d0e:	4b05      	ldr	r3, [pc, #20]	; (8007d24 <__i2b+0x24>)
 8007d10:	4805      	ldr	r0, [pc, #20]	; (8007d28 <__i2b+0x28>)
 8007d12:	f240 1145 	movw	r1, #325	; 0x145
 8007d16:	f000 fd1f 	bl	8008758 <__assert_func>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	6144      	str	r4, [r0, #20]
 8007d1e:	6103      	str	r3, [r0, #16]
 8007d20:	bd10      	pop	{r4, pc}
 8007d22:	bf00      	nop
 8007d24:	08008b10 	.word	0x08008b10
 8007d28:	08008b21 	.word	0x08008b21

08007d2c <__multiply>:
 8007d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d30:	4691      	mov	r9, r2
 8007d32:	690a      	ldr	r2, [r1, #16]
 8007d34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	bfb8      	it	lt
 8007d3c:	460b      	movlt	r3, r1
 8007d3e:	460c      	mov	r4, r1
 8007d40:	bfbc      	itt	lt
 8007d42:	464c      	movlt	r4, r9
 8007d44:	4699      	movlt	r9, r3
 8007d46:	6927      	ldr	r7, [r4, #16]
 8007d48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d4c:	68a3      	ldr	r3, [r4, #8]
 8007d4e:	6861      	ldr	r1, [r4, #4]
 8007d50:	eb07 060a 	add.w	r6, r7, sl
 8007d54:	42b3      	cmp	r3, r6
 8007d56:	b085      	sub	sp, #20
 8007d58:	bfb8      	it	lt
 8007d5a:	3101      	addlt	r1, #1
 8007d5c:	f7ff feda 	bl	8007b14 <_Balloc>
 8007d60:	b930      	cbnz	r0, 8007d70 <__multiply+0x44>
 8007d62:	4602      	mov	r2, r0
 8007d64:	4b44      	ldr	r3, [pc, #272]	; (8007e78 <__multiply+0x14c>)
 8007d66:	4845      	ldr	r0, [pc, #276]	; (8007e7c <__multiply+0x150>)
 8007d68:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007d6c:	f000 fcf4 	bl	8008758 <__assert_func>
 8007d70:	f100 0514 	add.w	r5, r0, #20
 8007d74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d78:	462b      	mov	r3, r5
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	4543      	cmp	r3, r8
 8007d7e:	d321      	bcc.n	8007dc4 <__multiply+0x98>
 8007d80:	f104 0314 	add.w	r3, r4, #20
 8007d84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007d88:	f109 0314 	add.w	r3, r9, #20
 8007d8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007d90:	9202      	str	r2, [sp, #8]
 8007d92:	1b3a      	subs	r2, r7, r4
 8007d94:	3a15      	subs	r2, #21
 8007d96:	f022 0203 	bic.w	r2, r2, #3
 8007d9a:	3204      	adds	r2, #4
 8007d9c:	f104 0115 	add.w	r1, r4, #21
 8007da0:	428f      	cmp	r7, r1
 8007da2:	bf38      	it	cc
 8007da4:	2204      	movcc	r2, #4
 8007da6:	9201      	str	r2, [sp, #4]
 8007da8:	9a02      	ldr	r2, [sp, #8]
 8007daa:	9303      	str	r3, [sp, #12]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d80c      	bhi.n	8007dca <__multiply+0x9e>
 8007db0:	2e00      	cmp	r6, #0
 8007db2:	dd03      	ble.n	8007dbc <__multiply+0x90>
 8007db4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d05b      	beq.n	8007e74 <__multiply+0x148>
 8007dbc:	6106      	str	r6, [r0, #16]
 8007dbe:	b005      	add	sp, #20
 8007dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc4:	f843 2b04 	str.w	r2, [r3], #4
 8007dc8:	e7d8      	b.n	8007d7c <__multiply+0x50>
 8007dca:	f8b3 a000 	ldrh.w	sl, [r3]
 8007dce:	f1ba 0f00 	cmp.w	sl, #0
 8007dd2:	d024      	beq.n	8007e1e <__multiply+0xf2>
 8007dd4:	f104 0e14 	add.w	lr, r4, #20
 8007dd8:	46a9      	mov	r9, r5
 8007dda:	f04f 0c00 	mov.w	ip, #0
 8007dde:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007de2:	f8d9 1000 	ldr.w	r1, [r9]
 8007de6:	fa1f fb82 	uxth.w	fp, r2
 8007dea:	b289      	uxth	r1, r1
 8007dec:	fb0a 110b 	mla	r1, sl, fp, r1
 8007df0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007df4:	f8d9 2000 	ldr.w	r2, [r9]
 8007df8:	4461      	add	r1, ip
 8007dfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007dfe:	fb0a c20b 	mla	r2, sl, fp, ip
 8007e02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e06:	b289      	uxth	r1, r1
 8007e08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e0c:	4577      	cmp	r7, lr
 8007e0e:	f849 1b04 	str.w	r1, [r9], #4
 8007e12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e16:	d8e2      	bhi.n	8007dde <__multiply+0xb2>
 8007e18:	9a01      	ldr	r2, [sp, #4]
 8007e1a:	f845 c002 	str.w	ip, [r5, r2]
 8007e1e:	9a03      	ldr	r2, [sp, #12]
 8007e20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e24:	3304      	adds	r3, #4
 8007e26:	f1b9 0f00 	cmp.w	r9, #0
 8007e2a:	d021      	beq.n	8007e70 <__multiply+0x144>
 8007e2c:	6829      	ldr	r1, [r5, #0]
 8007e2e:	f104 0c14 	add.w	ip, r4, #20
 8007e32:	46ae      	mov	lr, r5
 8007e34:	f04f 0a00 	mov.w	sl, #0
 8007e38:	f8bc b000 	ldrh.w	fp, [ip]
 8007e3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e40:	fb09 220b 	mla	r2, r9, fp, r2
 8007e44:	4452      	add	r2, sl
 8007e46:	b289      	uxth	r1, r1
 8007e48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e4c:	f84e 1b04 	str.w	r1, [lr], #4
 8007e50:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007e54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e58:	f8be 1000 	ldrh.w	r1, [lr]
 8007e5c:	fb09 110a 	mla	r1, r9, sl, r1
 8007e60:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007e64:	4567      	cmp	r7, ip
 8007e66:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e6a:	d8e5      	bhi.n	8007e38 <__multiply+0x10c>
 8007e6c:	9a01      	ldr	r2, [sp, #4]
 8007e6e:	50a9      	str	r1, [r5, r2]
 8007e70:	3504      	adds	r5, #4
 8007e72:	e799      	b.n	8007da8 <__multiply+0x7c>
 8007e74:	3e01      	subs	r6, #1
 8007e76:	e79b      	b.n	8007db0 <__multiply+0x84>
 8007e78:	08008b10 	.word	0x08008b10
 8007e7c:	08008b21 	.word	0x08008b21

08007e80 <__pow5mult>:
 8007e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e84:	4615      	mov	r5, r2
 8007e86:	f012 0203 	ands.w	r2, r2, #3
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	460f      	mov	r7, r1
 8007e8e:	d007      	beq.n	8007ea0 <__pow5mult+0x20>
 8007e90:	4c25      	ldr	r4, [pc, #148]	; (8007f28 <__pow5mult+0xa8>)
 8007e92:	3a01      	subs	r2, #1
 8007e94:	2300      	movs	r3, #0
 8007e96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e9a:	f7ff fe9d 	bl	8007bd8 <__multadd>
 8007e9e:	4607      	mov	r7, r0
 8007ea0:	10ad      	asrs	r5, r5, #2
 8007ea2:	d03d      	beq.n	8007f20 <__pow5mult+0xa0>
 8007ea4:	69f4      	ldr	r4, [r6, #28]
 8007ea6:	b97c      	cbnz	r4, 8007ec8 <__pow5mult+0x48>
 8007ea8:	2010      	movs	r0, #16
 8007eaa:	f7ff fd7f 	bl	80079ac <malloc>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	61f0      	str	r0, [r6, #28]
 8007eb2:	b928      	cbnz	r0, 8007ec0 <__pow5mult+0x40>
 8007eb4:	4b1d      	ldr	r3, [pc, #116]	; (8007f2c <__pow5mult+0xac>)
 8007eb6:	481e      	ldr	r0, [pc, #120]	; (8007f30 <__pow5mult+0xb0>)
 8007eb8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007ebc:	f000 fc4c 	bl	8008758 <__assert_func>
 8007ec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ec4:	6004      	str	r4, [r0, #0]
 8007ec6:	60c4      	str	r4, [r0, #12]
 8007ec8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007ecc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ed0:	b94c      	cbnz	r4, 8007ee6 <__pow5mult+0x66>
 8007ed2:	f240 2171 	movw	r1, #625	; 0x271
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	f7ff ff12 	bl	8007d00 <__i2b>
 8007edc:	2300      	movs	r3, #0
 8007ede:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	6003      	str	r3, [r0, #0]
 8007ee6:	f04f 0900 	mov.w	r9, #0
 8007eea:	07eb      	lsls	r3, r5, #31
 8007eec:	d50a      	bpl.n	8007f04 <__pow5mult+0x84>
 8007eee:	4639      	mov	r1, r7
 8007ef0:	4622      	mov	r2, r4
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f7ff ff1a 	bl	8007d2c <__multiply>
 8007ef8:	4639      	mov	r1, r7
 8007efa:	4680      	mov	r8, r0
 8007efc:	4630      	mov	r0, r6
 8007efe:	f7ff fe49 	bl	8007b94 <_Bfree>
 8007f02:	4647      	mov	r7, r8
 8007f04:	106d      	asrs	r5, r5, #1
 8007f06:	d00b      	beq.n	8007f20 <__pow5mult+0xa0>
 8007f08:	6820      	ldr	r0, [r4, #0]
 8007f0a:	b938      	cbnz	r0, 8007f1c <__pow5mult+0x9c>
 8007f0c:	4622      	mov	r2, r4
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4630      	mov	r0, r6
 8007f12:	f7ff ff0b 	bl	8007d2c <__multiply>
 8007f16:	6020      	str	r0, [r4, #0]
 8007f18:	f8c0 9000 	str.w	r9, [r0]
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	e7e4      	b.n	8007eea <__pow5mult+0x6a>
 8007f20:	4638      	mov	r0, r7
 8007f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f26:	bf00      	nop
 8007f28:	08008c70 	.word	0x08008c70
 8007f2c:	08008aa1 	.word	0x08008aa1
 8007f30:	08008b21 	.word	0x08008b21

08007f34 <__lshift>:
 8007f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f38:	460c      	mov	r4, r1
 8007f3a:	6849      	ldr	r1, [r1, #4]
 8007f3c:	6923      	ldr	r3, [r4, #16]
 8007f3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f42:	68a3      	ldr	r3, [r4, #8]
 8007f44:	4607      	mov	r7, r0
 8007f46:	4691      	mov	r9, r2
 8007f48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f4c:	f108 0601 	add.w	r6, r8, #1
 8007f50:	42b3      	cmp	r3, r6
 8007f52:	db0b      	blt.n	8007f6c <__lshift+0x38>
 8007f54:	4638      	mov	r0, r7
 8007f56:	f7ff fddd 	bl	8007b14 <_Balloc>
 8007f5a:	4605      	mov	r5, r0
 8007f5c:	b948      	cbnz	r0, 8007f72 <__lshift+0x3e>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	4b28      	ldr	r3, [pc, #160]	; (8008004 <__lshift+0xd0>)
 8007f62:	4829      	ldr	r0, [pc, #164]	; (8008008 <__lshift+0xd4>)
 8007f64:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007f68:	f000 fbf6 	bl	8008758 <__assert_func>
 8007f6c:	3101      	adds	r1, #1
 8007f6e:	005b      	lsls	r3, r3, #1
 8007f70:	e7ee      	b.n	8007f50 <__lshift+0x1c>
 8007f72:	2300      	movs	r3, #0
 8007f74:	f100 0114 	add.w	r1, r0, #20
 8007f78:	f100 0210 	add.w	r2, r0, #16
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	4553      	cmp	r3, sl
 8007f80:	db33      	blt.n	8007fea <__lshift+0xb6>
 8007f82:	6920      	ldr	r0, [r4, #16]
 8007f84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f88:	f104 0314 	add.w	r3, r4, #20
 8007f8c:	f019 091f 	ands.w	r9, r9, #31
 8007f90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f98:	d02b      	beq.n	8007ff2 <__lshift+0xbe>
 8007f9a:	f1c9 0e20 	rsb	lr, r9, #32
 8007f9e:	468a      	mov	sl, r1
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	6818      	ldr	r0, [r3, #0]
 8007fa4:	fa00 f009 	lsl.w	r0, r0, r9
 8007fa8:	4310      	orrs	r0, r2
 8007faa:	f84a 0b04 	str.w	r0, [sl], #4
 8007fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fb2:	459c      	cmp	ip, r3
 8007fb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007fb8:	d8f3      	bhi.n	8007fa2 <__lshift+0x6e>
 8007fba:	ebac 0304 	sub.w	r3, ip, r4
 8007fbe:	3b15      	subs	r3, #21
 8007fc0:	f023 0303 	bic.w	r3, r3, #3
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	f104 0015 	add.w	r0, r4, #21
 8007fca:	4584      	cmp	ip, r0
 8007fcc:	bf38      	it	cc
 8007fce:	2304      	movcc	r3, #4
 8007fd0:	50ca      	str	r2, [r1, r3]
 8007fd2:	b10a      	cbz	r2, 8007fd8 <__lshift+0xa4>
 8007fd4:	f108 0602 	add.w	r6, r8, #2
 8007fd8:	3e01      	subs	r6, #1
 8007fda:	4638      	mov	r0, r7
 8007fdc:	612e      	str	r6, [r5, #16]
 8007fde:	4621      	mov	r1, r4
 8007fe0:	f7ff fdd8 	bl	8007b94 <_Bfree>
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fea:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fee:	3301      	adds	r3, #1
 8007ff0:	e7c5      	b.n	8007f7e <__lshift+0x4a>
 8007ff2:	3904      	subs	r1, #4
 8007ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ff8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ffc:	459c      	cmp	ip, r3
 8007ffe:	d8f9      	bhi.n	8007ff4 <__lshift+0xc0>
 8008000:	e7ea      	b.n	8007fd8 <__lshift+0xa4>
 8008002:	bf00      	nop
 8008004:	08008b10 	.word	0x08008b10
 8008008:	08008b21 	.word	0x08008b21

0800800c <__mcmp>:
 800800c:	b530      	push	{r4, r5, lr}
 800800e:	6902      	ldr	r2, [r0, #16]
 8008010:	690c      	ldr	r4, [r1, #16]
 8008012:	1b12      	subs	r2, r2, r4
 8008014:	d10e      	bne.n	8008034 <__mcmp+0x28>
 8008016:	f100 0314 	add.w	r3, r0, #20
 800801a:	3114      	adds	r1, #20
 800801c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008020:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008024:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008028:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800802c:	42a5      	cmp	r5, r4
 800802e:	d003      	beq.n	8008038 <__mcmp+0x2c>
 8008030:	d305      	bcc.n	800803e <__mcmp+0x32>
 8008032:	2201      	movs	r2, #1
 8008034:	4610      	mov	r0, r2
 8008036:	bd30      	pop	{r4, r5, pc}
 8008038:	4283      	cmp	r3, r0
 800803a:	d3f3      	bcc.n	8008024 <__mcmp+0x18>
 800803c:	e7fa      	b.n	8008034 <__mcmp+0x28>
 800803e:	f04f 32ff 	mov.w	r2, #4294967295
 8008042:	e7f7      	b.n	8008034 <__mcmp+0x28>

08008044 <__mdiff>:
 8008044:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008048:	460c      	mov	r4, r1
 800804a:	4606      	mov	r6, r0
 800804c:	4611      	mov	r1, r2
 800804e:	4620      	mov	r0, r4
 8008050:	4690      	mov	r8, r2
 8008052:	f7ff ffdb 	bl	800800c <__mcmp>
 8008056:	1e05      	subs	r5, r0, #0
 8008058:	d110      	bne.n	800807c <__mdiff+0x38>
 800805a:	4629      	mov	r1, r5
 800805c:	4630      	mov	r0, r6
 800805e:	f7ff fd59 	bl	8007b14 <_Balloc>
 8008062:	b930      	cbnz	r0, 8008072 <__mdiff+0x2e>
 8008064:	4b3a      	ldr	r3, [pc, #232]	; (8008150 <__mdiff+0x10c>)
 8008066:	4602      	mov	r2, r0
 8008068:	f240 2137 	movw	r1, #567	; 0x237
 800806c:	4839      	ldr	r0, [pc, #228]	; (8008154 <__mdiff+0x110>)
 800806e:	f000 fb73 	bl	8008758 <__assert_func>
 8008072:	2301      	movs	r3, #1
 8008074:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800807c:	bfa4      	itt	ge
 800807e:	4643      	movge	r3, r8
 8008080:	46a0      	movge	r8, r4
 8008082:	4630      	mov	r0, r6
 8008084:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008088:	bfa6      	itte	ge
 800808a:	461c      	movge	r4, r3
 800808c:	2500      	movge	r5, #0
 800808e:	2501      	movlt	r5, #1
 8008090:	f7ff fd40 	bl	8007b14 <_Balloc>
 8008094:	b920      	cbnz	r0, 80080a0 <__mdiff+0x5c>
 8008096:	4b2e      	ldr	r3, [pc, #184]	; (8008150 <__mdiff+0x10c>)
 8008098:	4602      	mov	r2, r0
 800809a:	f240 2145 	movw	r1, #581	; 0x245
 800809e:	e7e5      	b.n	800806c <__mdiff+0x28>
 80080a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80080a4:	6926      	ldr	r6, [r4, #16]
 80080a6:	60c5      	str	r5, [r0, #12]
 80080a8:	f104 0914 	add.w	r9, r4, #20
 80080ac:	f108 0514 	add.w	r5, r8, #20
 80080b0:	f100 0e14 	add.w	lr, r0, #20
 80080b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80080b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80080bc:	f108 0210 	add.w	r2, r8, #16
 80080c0:	46f2      	mov	sl, lr
 80080c2:	2100      	movs	r1, #0
 80080c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80080c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80080cc:	fa11 f88b 	uxtah	r8, r1, fp
 80080d0:	b299      	uxth	r1, r3
 80080d2:	0c1b      	lsrs	r3, r3, #16
 80080d4:	eba8 0801 	sub.w	r8, r8, r1
 80080d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80080dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80080e0:	fa1f f888 	uxth.w	r8, r8
 80080e4:	1419      	asrs	r1, r3, #16
 80080e6:	454e      	cmp	r6, r9
 80080e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80080ec:	f84a 3b04 	str.w	r3, [sl], #4
 80080f0:	d8e8      	bhi.n	80080c4 <__mdiff+0x80>
 80080f2:	1b33      	subs	r3, r6, r4
 80080f4:	3b15      	subs	r3, #21
 80080f6:	f023 0303 	bic.w	r3, r3, #3
 80080fa:	3304      	adds	r3, #4
 80080fc:	3415      	adds	r4, #21
 80080fe:	42a6      	cmp	r6, r4
 8008100:	bf38      	it	cc
 8008102:	2304      	movcc	r3, #4
 8008104:	441d      	add	r5, r3
 8008106:	4473      	add	r3, lr
 8008108:	469e      	mov	lr, r3
 800810a:	462e      	mov	r6, r5
 800810c:	4566      	cmp	r6, ip
 800810e:	d30e      	bcc.n	800812e <__mdiff+0xea>
 8008110:	f10c 0203 	add.w	r2, ip, #3
 8008114:	1b52      	subs	r2, r2, r5
 8008116:	f022 0203 	bic.w	r2, r2, #3
 800811a:	3d03      	subs	r5, #3
 800811c:	45ac      	cmp	ip, r5
 800811e:	bf38      	it	cc
 8008120:	2200      	movcc	r2, #0
 8008122:	4413      	add	r3, r2
 8008124:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008128:	b17a      	cbz	r2, 800814a <__mdiff+0x106>
 800812a:	6107      	str	r7, [r0, #16]
 800812c:	e7a4      	b.n	8008078 <__mdiff+0x34>
 800812e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008132:	fa11 f288 	uxtah	r2, r1, r8
 8008136:	1414      	asrs	r4, r2, #16
 8008138:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800813c:	b292      	uxth	r2, r2
 800813e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008142:	f84e 2b04 	str.w	r2, [lr], #4
 8008146:	1421      	asrs	r1, r4, #16
 8008148:	e7e0      	b.n	800810c <__mdiff+0xc8>
 800814a:	3f01      	subs	r7, #1
 800814c:	e7ea      	b.n	8008124 <__mdiff+0xe0>
 800814e:	bf00      	nop
 8008150:	08008b10 	.word	0x08008b10
 8008154:	08008b21 	.word	0x08008b21

08008158 <__d2b>:
 8008158:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800815c:	460f      	mov	r7, r1
 800815e:	2101      	movs	r1, #1
 8008160:	ec59 8b10 	vmov	r8, r9, d0
 8008164:	4616      	mov	r6, r2
 8008166:	f7ff fcd5 	bl	8007b14 <_Balloc>
 800816a:	4604      	mov	r4, r0
 800816c:	b930      	cbnz	r0, 800817c <__d2b+0x24>
 800816e:	4602      	mov	r2, r0
 8008170:	4b24      	ldr	r3, [pc, #144]	; (8008204 <__d2b+0xac>)
 8008172:	4825      	ldr	r0, [pc, #148]	; (8008208 <__d2b+0xb0>)
 8008174:	f240 310f 	movw	r1, #783	; 0x30f
 8008178:	f000 faee 	bl	8008758 <__assert_func>
 800817c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008180:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008184:	bb2d      	cbnz	r5, 80081d2 <__d2b+0x7a>
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	f1b8 0300 	subs.w	r3, r8, #0
 800818c:	d026      	beq.n	80081dc <__d2b+0x84>
 800818e:	4668      	mov	r0, sp
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	f7ff fd87 	bl	8007ca4 <__lo0bits>
 8008196:	e9dd 1200 	ldrd	r1, r2, [sp]
 800819a:	b1e8      	cbz	r0, 80081d8 <__d2b+0x80>
 800819c:	f1c0 0320 	rsb	r3, r0, #32
 80081a0:	fa02 f303 	lsl.w	r3, r2, r3
 80081a4:	430b      	orrs	r3, r1
 80081a6:	40c2      	lsrs	r2, r0
 80081a8:	6163      	str	r3, [r4, #20]
 80081aa:	9201      	str	r2, [sp, #4]
 80081ac:	9b01      	ldr	r3, [sp, #4]
 80081ae:	61a3      	str	r3, [r4, #24]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	bf14      	ite	ne
 80081b4:	2202      	movne	r2, #2
 80081b6:	2201      	moveq	r2, #1
 80081b8:	6122      	str	r2, [r4, #16]
 80081ba:	b1bd      	cbz	r5, 80081ec <__d2b+0x94>
 80081bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80081c0:	4405      	add	r5, r0
 80081c2:	603d      	str	r5, [r7, #0]
 80081c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081c8:	6030      	str	r0, [r6, #0]
 80081ca:	4620      	mov	r0, r4
 80081cc:	b003      	add	sp, #12
 80081ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081d6:	e7d6      	b.n	8008186 <__d2b+0x2e>
 80081d8:	6161      	str	r1, [r4, #20]
 80081da:	e7e7      	b.n	80081ac <__d2b+0x54>
 80081dc:	a801      	add	r0, sp, #4
 80081de:	f7ff fd61 	bl	8007ca4 <__lo0bits>
 80081e2:	9b01      	ldr	r3, [sp, #4]
 80081e4:	6163      	str	r3, [r4, #20]
 80081e6:	3020      	adds	r0, #32
 80081e8:	2201      	movs	r2, #1
 80081ea:	e7e5      	b.n	80081b8 <__d2b+0x60>
 80081ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80081f4:	6038      	str	r0, [r7, #0]
 80081f6:	6918      	ldr	r0, [r3, #16]
 80081f8:	f7ff fd34 	bl	8007c64 <__hi0bits>
 80081fc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008200:	e7e2      	b.n	80081c8 <__d2b+0x70>
 8008202:	bf00      	nop
 8008204:	08008b10 	.word	0x08008b10
 8008208:	08008b21 	.word	0x08008b21

0800820c <__sfputc_r>:
 800820c:	6893      	ldr	r3, [r2, #8]
 800820e:	3b01      	subs	r3, #1
 8008210:	2b00      	cmp	r3, #0
 8008212:	b410      	push	{r4}
 8008214:	6093      	str	r3, [r2, #8]
 8008216:	da08      	bge.n	800822a <__sfputc_r+0x1e>
 8008218:	6994      	ldr	r4, [r2, #24]
 800821a:	42a3      	cmp	r3, r4
 800821c:	db01      	blt.n	8008222 <__sfputc_r+0x16>
 800821e:	290a      	cmp	r1, #10
 8008220:	d103      	bne.n	800822a <__sfputc_r+0x1e>
 8008222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008226:	f000 b9e3 	b.w	80085f0 <__swbuf_r>
 800822a:	6813      	ldr	r3, [r2, #0]
 800822c:	1c58      	adds	r0, r3, #1
 800822e:	6010      	str	r0, [r2, #0]
 8008230:	7019      	strb	r1, [r3, #0]
 8008232:	4608      	mov	r0, r1
 8008234:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008238:	4770      	bx	lr

0800823a <__sfputs_r>:
 800823a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823c:	4606      	mov	r6, r0
 800823e:	460f      	mov	r7, r1
 8008240:	4614      	mov	r4, r2
 8008242:	18d5      	adds	r5, r2, r3
 8008244:	42ac      	cmp	r4, r5
 8008246:	d101      	bne.n	800824c <__sfputs_r+0x12>
 8008248:	2000      	movs	r0, #0
 800824a:	e007      	b.n	800825c <__sfputs_r+0x22>
 800824c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008250:	463a      	mov	r2, r7
 8008252:	4630      	mov	r0, r6
 8008254:	f7ff ffda 	bl	800820c <__sfputc_r>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d1f3      	bne.n	8008244 <__sfputs_r+0xa>
 800825c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008260 <_vfiprintf_r>:
 8008260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008264:	460d      	mov	r5, r1
 8008266:	b09d      	sub	sp, #116	; 0x74
 8008268:	4614      	mov	r4, r2
 800826a:	4698      	mov	r8, r3
 800826c:	4606      	mov	r6, r0
 800826e:	b118      	cbz	r0, 8008278 <_vfiprintf_r+0x18>
 8008270:	6a03      	ldr	r3, [r0, #32]
 8008272:	b90b      	cbnz	r3, 8008278 <_vfiprintf_r+0x18>
 8008274:	f7fe fbc8 	bl	8006a08 <__sinit>
 8008278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800827a:	07d9      	lsls	r1, r3, #31
 800827c:	d405      	bmi.n	800828a <_vfiprintf_r+0x2a>
 800827e:	89ab      	ldrh	r3, [r5, #12]
 8008280:	059a      	lsls	r2, r3, #22
 8008282:	d402      	bmi.n	800828a <_vfiprintf_r+0x2a>
 8008284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008286:	f7fe fcc8 	bl	8006c1a <__retarget_lock_acquire_recursive>
 800828a:	89ab      	ldrh	r3, [r5, #12]
 800828c:	071b      	lsls	r3, r3, #28
 800828e:	d501      	bpl.n	8008294 <_vfiprintf_r+0x34>
 8008290:	692b      	ldr	r3, [r5, #16]
 8008292:	b99b      	cbnz	r3, 80082bc <_vfiprintf_r+0x5c>
 8008294:	4629      	mov	r1, r5
 8008296:	4630      	mov	r0, r6
 8008298:	f000 f9e8 	bl	800866c <__swsetup_r>
 800829c:	b170      	cbz	r0, 80082bc <_vfiprintf_r+0x5c>
 800829e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082a0:	07dc      	lsls	r4, r3, #31
 80082a2:	d504      	bpl.n	80082ae <_vfiprintf_r+0x4e>
 80082a4:	f04f 30ff 	mov.w	r0, #4294967295
 80082a8:	b01d      	add	sp, #116	; 0x74
 80082aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ae:	89ab      	ldrh	r3, [r5, #12]
 80082b0:	0598      	lsls	r0, r3, #22
 80082b2:	d4f7      	bmi.n	80082a4 <_vfiprintf_r+0x44>
 80082b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082b6:	f7fe fcb1 	bl	8006c1c <__retarget_lock_release_recursive>
 80082ba:	e7f3      	b.n	80082a4 <_vfiprintf_r+0x44>
 80082bc:	2300      	movs	r3, #0
 80082be:	9309      	str	r3, [sp, #36]	; 0x24
 80082c0:	2320      	movs	r3, #32
 80082c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80082ca:	2330      	movs	r3, #48	; 0x30
 80082cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008480 <_vfiprintf_r+0x220>
 80082d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082d4:	f04f 0901 	mov.w	r9, #1
 80082d8:	4623      	mov	r3, r4
 80082da:	469a      	mov	sl, r3
 80082dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082e0:	b10a      	cbz	r2, 80082e6 <_vfiprintf_r+0x86>
 80082e2:	2a25      	cmp	r2, #37	; 0x25
 80082e4:	d1f9      	bne.n	80082da <_vfiprintf_r+0x7a>
 80082e6:	ebba 0b04 	subs.w	fp, sl, r4
 80082ea:	d00b      	beq.n	8008304 <_vfiprintf_r+0xa4>
 80082ec:	465b      	mov	r3, fp
 80082ee:	4622      	mov	r2, r4
 80082f0:	4629      	mov	r1, r5
 80082f2:	4630      	mov	r0, r6
 80082f4:	f7ff ffa1 	bl	800823a <__sfputs_r>
 80082f8:	3001      	adds	r0, #1
 80082fa:	f000 80a9 	beq.w	8008450 <_vfiprintf_r+0x1f0>
 80082fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008300:	445a      	add	r2, fp
 8008302:	9209      	str	r2, [sp, #36]	; 0x24
 8008304:	f89a 3000 	ldrb.w	r3, [sl]
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 80a1 	beq.w	8008450 <_vfiprintf_r+0x1f0>
 800830e:	2300      	movs	r3, #0
 8008310:	f04f 32ff 	mov.w	r2, #4294967295
 8008314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008318:	f10a 0a01 	add.w	sl, sl, #1
 800831c:	9304      	str	r3, [sp, #16]
 800831e:	9307      	str	r3, [sp, #28]
 8008320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008324:	931a      	str	r3, [sp, #104]	; 0x68
 8008326:	4654      	mov	r4, sl
 8008328:	2205      	movs	r2, #5
 800832a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800832e:	4854      	ldr	r0, [pc, #336]	; (8008480 <_vfiprintf_r+0x220>)
 8008330:	f7f7 ff76 	bl	8000220 <memchr>
 8008334:	9a04      	ldr	r2, [sp, #16]
 8008336:	b9d8      	cbnz	r0, 8008370 <_vfiprintf_r+0x110>
 8008338:	06d1      	lsls	r1, r2, #27
 800833a:	bf44      	itt	mi
 800833c:	2320      	movmi	r3, #32
 800833e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008342:	0713      	lsls	r3, r2, #28
 8008344:	bf44      	itt	mi
 8008346:	232b      	movmi	r3, #43	; 0x2b
 8008348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800834c:	f89a 3000 	ldrb.w	r3, [sl]
 8008350:	2b2a      	cmp	r3, #42	; 0x2a
 8008352:	d015      	beq.n	8008380 <_vfiprintf_r+0x120>
 8008354:	9a07      	ldr	r2, [sp, #28]
 8008356:	4654      	mov	r4, sl
 8008358:	2000      	movs	r0, #0
 800835a:	f04f 0c0a 	mov.w	ip, #10
 800835e:	4621      	mov	r1, r4
 8008360:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008364:	3b30      	subs	r3, #48	; 0x30
 8008366:	2b09      	cmp	r3, #9
 8008368:	d94d      	bls.n	8008406 <_vfiprintf_r+0x1a6>
 800836a:	b1b0      	cbz	r0, 800839a <_vfiprintf_r+0x13a>
 800836c:	9207      	str	r2, [sp, #28]
 800836e:	e014      	b.n	800839a <_vfiprintf_r+0x13a>
 8008370:	eba0 0308 	sub.w	r3, r0, r8
 8008374:	fa09 f303 	lsl.w	r3, r9, r3
 8008378:	4313      	orrs	r3, r2
 800837a:	9304      	str	r3, [sp, #16]
 800837c:	46a2      	mov	sl, r4
 800837e:	e7d2      	b.n	8008326 <_vfiprintf_r+0xc6>
 8008380:	9b03      	ldr	r3, [sp, #12]
 8008382:	1d19      	adds	r1, r3, #4
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	9103      	str	r1, [sp, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	bfbb      	ittet	lt
 800838c:	425b      	neglt	r3, r3
 800838e:	f042 0202 	orrlt.w	r2, r2, #2
 8008392:	9307      	strge	r3, [sp, #28]
 8008394:	9307      	strlt	r3, [sp, #28]
 8008396:	bfb8      	it	lt
 8008398:	9204      	strlt	r2, [sp, #16]
 800839a:	7823      	ldrb	r3, [r4, #0]
 800839c:	2b2e      	cmp	r3, #46	; 0x2e
 800839e:	d10c      	bne.n	80083ba <_vfiprintf_r+0x15a>
 80083a0:	7863      	ldrb	r3, [r4, #1]
 80083a2:	2b2a      	cmp	r3, #42	; 0x2a
 80083a4:	d134      	bne.n	8008410 <_vfiprintf_r+0x1b0>
 80083a6:	9b03      	ldr	r3, [sp, #12]
 80083a8:	1d1a      	adds	r2, r3, #4
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	9203      	str	r2, [sp, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	bfb8      	it	lt
 80083b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80083b6:	3402      	adds	r4, #2
 80083b8:	9305      	str	r3, [sp, #20]
 80083ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008490 <_vfiprintf_r+0x230>
 80083be:	7821      	ldrb	r1, [r4, #0]
 80083c0:	2203      	movs	r2, #3
 80083c2:	4650      	mov	r0, sl
 80083c4:	f7f7 ff2c 	bl	8000220 <memchr>
 80083c8:	b138      	cbz	r0, 80083da <_vfiprintf_r+0x17a>
 80083ca:	9b04      	ldr	r3, [sp, #16]
 80083cc:	eba0 000a 	sub.w	r0, r0, sl
 80083d0:	2240      	movs	r2, #64	; 0x40
 80083d2:	4082      	lsls	r2, r0
 80083d4:	4313      	orrs	r3, r2
 80083d6:	3401      	adds	r4, #1
 80083d8:	9304      	str	r3, [sp, #16]
 80083da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083de:	4829      	ldr	r0, [pc, #164]	; (8008484 <_vfiprintf_r+0x224>)
 80083e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083e4:	2206      	movs	r2, #6
 80083e6:	f7f7 ff1b 	bl	8000220 <memchr>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d03f      	beq.n	800846e <_vfiprintf_r+0x20e>
 80083ee:	4b26      	ldr	r3, [pc, #152]	; (8008488 <_vfiprintf_r+0x228>)
 80083f0:	bb1b      	cbnz	r3, 800843a <_vfiprintf_r+0x1da>
 80083f2:	9b03      	ldr	r3, [sp, #12]
 80083f4:	3307      	adds	r3, #7
 80083f6:	f023 0307 	bic.w	r3, r3, #7
 80083fa:	3308      	adds	r3, #8
 80083fc:	9303      	str	r3, [sp, #12]
 80083fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008400:	443b      	add	r3, r7
 8008402:	9309      	str	r3, [sp, #36]	; 0x24
 8008404:	e768      	b.n	80082d8 <_vfiprintf_r+0x78>
 8008406:	fb0c 3202 	mla	r2, ip, r2, r3
 800840a:	460c      	mov	r4, r1
 800840c:	2001      	movs	r0, #1
 800840e:	e7a6      	b.n	800835e <_vfiprintf_r+0xfe>
 8008410:	2300      	movs	r3, #0
 8008412:	3401      	adds	r4, #1
 8008414:	9305      	str	r3, [sp, #20]
 8008416:	4619      	mov	r1, r3
 8008418:	f04f 0c0a 	mov.w	ip, #10
 800841c:	4620      	mov	r0, r4
 800841e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008422:	3a30      	subs	r2, #48	; 0x30
 8008424:	2a09      	cmp	r2, #9
 8008426:	d903      	bls.n	8008430 <_vfiprintf_r+0x1d0>
 8008428:	2b00      	cmp	r3, #0
 800842a:	d0c6      	beq.n	80083ba <_vfiprintf_r+0x15a>
 800842c:	9105      	str	r1, [sp, #20]
 800842e:	e7c4      	b.n	80083ba <_vfiprintf_r+0x15a>
 8008430:	fb0c 2101 	mla	r1, ip, r1, r2
 8008434:	4604      	mov	r4, r0
 8008436:	2301      	movs	r3, #1
 8008438:	e7f0      	b.n	800841c <_vfiprintf_r+0x1bc>
 800843a:	ab03      	add	r3, sp, #12
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	462a      	mov	r2, r5
 8008440:	4b12      	ldr	r3, [pc, #72]	; (800848c <_vfiprintf_r+0x22c>)
 8008442:	a904      	add	r1, sp, #16
 8008444:	4630      	mov	r0, r6
 8008446:	f7fd fe8d 	bl	8006164 <_printf_float>
 800844a:	4607      	mov	r7, r0
 800844c:	1c78      	adds	r0, r7, #1
 800844e:	d1d6      	bne.n	80083fe <_vfiprintf_r+0x19e>
 8008450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008452:	07d9      	lsls	r1, r3, #31
 8008454:	d405      	bmi.n	8008462 <_vfiprintf_r+0x202>
 8008456:	89ab      	ldrh	r3, [r5, #12]
 8008458:	059a      	lsls	r2, r3, #22
 800845a:	d402      	bmi.n	8008462 <_vfiprintf_r+0x202>
 800845c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800845e:	f7fe fbdd 	bl	8006c1c <__retarget_lock_release_recursive>
 8008462:	89ab      	ldrh	r3, [r5, #12]
 8008464:	065b      	lsls	r3, r3, #25
 8008466:	f53f af1d 	bmi.w	80082a4 <_vfiprintf_r+0x44>
 800846a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800846c:	e71c      	b.n	80082a8 <_vfiprintf_r+0x48>
 800846e:	ab03      	add	r3, sp, #12
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	462a      	mov	r2, r5
 8008474:	4b05      	ldr	r3, [pc, #20]	; (800848c <_vfiprintf_r+0x22c>)
 8008476:	a904      	add	r1, sp, #16
 8008478:	4630      	mov	r0, r6
 800847a:	f7fe f917 	bl	80066ac <_printf_i>
 800847e:	e7e4      	b.n	800844a <_vfiprintf_r+0x1ea>
 8008480:	08008c7c 	.word	0x08008c7c
 8008484:	08008c86 	.word	0x08008c86
 8008488:	08006165 	.word	0x08006165
 800848c:	0800823b 	.word	0x0800823b
 8008490:	08008c82 	.word	0x08008c82

08008494 <__sflush_r>:
 8008494:	898a      	ldrh	r2, [r1, #12]
 8008496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800849a:	4605      	mov	r5, r0
 800849c:	0710      	lsls	r0, r2, #28
 800849e:	460c      	mov	r4, r1
 80084a0:	d458      	bmi.n	8008554 <__sflush_r+0xc0>
 80084a2:	684b      	ldr	r3, [r1, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	dc05      	bgt.n	80084b4 <__sflush_r+0x20>
 80084a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	dc02      	bgt.n	80084b4 <__sflush_r+0x20>
 80084ae:	2000      	movs	r0, #0
 80084b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084b6:	2e00      	cmp	r6, #0
 80084b8:	d0f9      	beq.n	80084ae <__sflush_r+0x1a>
 80084ba:	2300      	movs	r3, #0
 80084bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084c0:	682f      	ldr	r7, [r5, #0]
 80084c2:	6a21      	ldr	r1, [r4, #32]
 80084c4:	602b      	str	r3, [r5, #0]
 80084c6:	d032      	beq.n	800852e <__sflush_r+0x9a>
 80084c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084ca:	89a3      	ldrh	r3, [r4, #12]
 80084cc:	075a      	lsls	r2, r3, #29
 80084ce:	d505      	bpl.n	80084dc <__sflush_r+0x48>
 80084d0:	6863      	ldr	r3, [r4, #4]
 80084d2:	1ac0      	subs	r0, r0, r3
 80084d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084d6:	b10b      	cbz	r3, 80084dc <__sflush_r+0x48>
 80084d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084da:	1ac0      	subs	r0, r0, r3
 80084dc:	2300      	movs	r3, #0
 80084de:	4602      	mov	r2, r0
 80084e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084e2:	6a21      	ldr	r1, [r4, #32]
 80084e4:	4628      	mov	r0, r5
 80084e6:	47b0      	blx	r6
 80084e8:	1c43      	adds	r3, r0, #1
 80084ea:	89a3      	ldrh	r3, [r4, #12]
 80084ec:	d106      	bne.n	80084fc <__sflush_r+0x68>
 80084ee:	6829      	ldr	r1, [r5, #0]
 80084f0:	291d      	cmp	r1, #29
 80084f2:	d82b      	bhi.n	800854c <__sflush_r+0xb8>
 80084f4:	4a29      	ldr	r2, [pc, #164]	; (800859c <__sflush_r+0x108>)
 80084f6:	410a      	asrs	r2, r1
 80084f8:	07d6      	lsls	r6, r2, #31
 80084fa:	d427      	bmi.n	800854c <__sflush_r+0xb8>
 80084fc:	2200      	movs	r2, #0
 80084fe:	6062      	str	r2, [r4, #4]
 8008500:	04d9      	lsls	r1, r3, #19
 8008502:	6922      	ldr	r2, [r4, #16]
 8008504:	6022      	str	r2, [r4, #0]
 8008506:	d504      	bpl.n	8008512 <__sflush_r+0x7e>
 8008508:	1c42      	adds	r2, r0, #1
 800850a:	d101      	bne.n	8008510 <__sflush_r+0x7c>
 800850c:	682b      	ldr	r3, [r5, #0]
 800850e:	b903      	cbnz	r3, 8008512 <__sflush_r+0x7e>
 8008510:	6560      	str	r0, [r4, #84]	; 0x54
 8008512:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008514:	602f      	str	r7, [r5, #0]
 8008516:	2900      	cmp	r1, #0
 8008518:	d0c9      	beq.n	80084ae <__sflush_r+0x1a>
 800851a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800851e:	4299      	cmp	r1, r3
 8008520:	d002      	beq.n	8008528 <__sflush_r+0x94>
 8008522:	4628      	mov	r0, r5
 8008524:	f7ff f9f6 	bl	8007914 <_free_r>
 8008528:	2000      	movs	r0, #0
 800852a:	6360      	str	r0, [r4, #52]	; 0x34
 800852c:	e7c0      	b.n	80084b0 <__sflush_r+0x1c>
 800852e:	2301      	movs	r3, #1
 8008530:	4628      	mov	r0, r5
 8008532:	47b0      	blx	r6
 8008534:	1c41      	adds	r1, r0, #1
 8008536:	d1c8      	bne.n	80084ca <__sflush_r+0x36>
 8008538:	682b      	ldr	r3, [r5, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d0c5      	beq.n	80084ca <__sflush_r+0x36>
 800853e:	2b1d      	cmp	r3, #29
 8008540:	d001      	beq.n	8008546 <__sflush_r+0xb2>
 8008542:	2b16      	cmp	r3, #22
 8008544:	d101      	bne.n	800854a <__sflush_r+0xb6>
 8008546:	602f      	str	r7, [r5, #0]
 8008548:	e7b1      	b.n	80084ae <__sflush_r+0x1a>
 800854a:	89a3      	ldrh	r3, [r4, #12]
 800854c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008550:	81a3      	strh	r3, [r4, #12]
 8008552:	e7ad      	b.n	80084b0 <__sflush_r+0x1c>
 8008554:	690f      	ldr	r7, [r1, #16]
 8008556:	2f00      	cmp	r7, #0
 8008558:	d0a9      	beq.n	80084ae <__sflush_r+0x1a>
 800855a:	0793      	lsls	r3, r2, #30
 800855c:	680e      	ldr	r6, [r1, #0]
 800855e:	bf08      	it	eq
 8008560:	694b      	ldreq	r3, [r1, #20]
 8008562:	600f      	str	r7, [r1, #0]
 8008564:	bf18      	it	ne
 8008566:	2300      	movne	r3, #0
 8008568:	eba6 0807 	sub.w	r8, r6, r7
 800856c:	608b      	str	r3, [r1, #8]
 800856e:	f1b8 0f00 	cmp.w	r8, #0
 8008572:	dd9c      	ble.n	80084ae <__sflush_r+0x1a>
 8008574:	6a21      	ldr	r1, [r4, #32]
 8008576:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008578:	4643      	mov	r3, r8
 800857a:	463a      	mov	r2, r7
 800857c:	4628      	mov	r0, r5
 800857e:	47b0      	blx	r6
 8008580:	2800      	cmp	r0, #0
 8008582:	dc06      	bgt.n	8008592 <__sflush_r+0xfe>
 8008584:	89a3      	ldrh	r3, [r4, #12]
 8008586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800858a:	81a3      	strh	r3, [r4, #12]
 800858c:	f04f 30ff 	mov.w	r0, #4294967295
 8008590:	e78e      	b.n	80084b0 <__sflush_r+0x1c>
 8008592:	4407      	add	r7, r0
 8008594:	eba8 0800 	sub.w	r8, r8, r0
 8008598:	e7e9      	b.n	800856e <__sflush_r+0xda>
 800859a:	bf00      	nop
 800859c:	dfbffffe 	.word	0xdfbffffe

080085a0 <_fflush_r>:
 80085a0:	b538      	push	{r3, r4, r5, lr}
 80085a2:	690b      	ldr	r3, [r1, #16]
 80085a4:	4605      	mov	r5, r0
 80085a6:	460c      	mov	r4, r1
 80085a8:	b913      	cbnz	r3, 80085b0 <_fflush_r+0x10>
 80085aa:	2500      	movs	r5, #0
 80085ac:	4628      	mov	r0, r5
 80085ae:	bd38      	pop	{r3, r4, r5, pc}
 80085b0:	b118      	cbz	r0, 80085ba <_fflush_r+0x1a>
 80085b2:	6a03      	ldr	r3, [r0, #32]
 80085b4:	b90b      	cbnz	r3, 80085ba <_fflush_r+0x1a>
 80085b6:	f7fe fa27 	bl	8006a08 <__sinit>
 80085ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d0f3      	beq.n	80085aa <_fflush_r+0xa>
 80085c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085c4:	07d0      	lsls	r0, r2, #31
 80085c6:	d404      	bmi.n	80085d2 <_fflush_r+0x32>
 80085c8:	0599      	lsls	r1, r3, #22
 80085ca:	d402      	bmi.n	80085d2 <_fflush_r+0x32>
 80085cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085ce:	f7fe fb24 	bl	8006c1a <__retarget_lock_acquire_recursive>
 80085d2:	4628      	mov	r0, r5
 80085d4:	4621      	mov	r1, r4
 80085d6:	f7ff ff5d 	bl	8008494 <__sflush_r>
 80085da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085dc:	07da      	lsls	r2, r3, #31
 80085de:	4605      	mov	r5, r0
 80085e0:	d4e4      	bmi.n	80085ac <_fflush_r+0xc>
 80085e2:	89a3      	ldrh	r3, [r4, #12]
 80085e4:	059b      	lsls	r3, r3, #22
 80085e6:	d4e1      	bmi.n	80085ac <_fflush_r+0xc>
 80085e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085ea:	f7fe fb17 	bl	8006c1c <__retarget_lock_release_recursive>
 80085ee:	e7dd      	b.n	80085ac <_fflush_r+0xc>

080085f0 <__swbuf_r>:
 80085f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f2:	460e      	mov	r6, r1
 80085f4:	4614      	mov	r4, r2
 80085f6:	4605      	mov	r5, r0
 80085f8:	b118      	cbz	r0, 8008602 <__swbuf_r+0x12>
 80085fa:	6a03      	ldr	r3, [r0, #32]
 80085fc:	b90b      	cbnz	r3, 8008602 <__swbuf_r+0x12>
 80085fe:	f7fe fa03 	bl	8006a08 <__sinit>
 8008602:	69a3      	ldr	r3, [r4, #24]
 8008604:	60a3      	str	r3, [r4, #8]
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	071a      	lsls	r2, r3, #28
 800860a:	d525      	bpl.n	8008658 <__swbuf_r+0x68>
 800860c:	6923      	ldr	r3, [r4, #16]
 800860e:	b31b      	cbz	r3, 8008658 <__swbuf_r+0x68>
 8008610:	6823      	ldr	r3, [r4, #0]
 8008612:	6922      	ldr	r2, [r4, #16]
 8008614:	1a98      	subs	r0, r3, r2
 8008616:	6963      	ldr	r3, [r4, #20]
 8008618:	b2f6      	uxtb	r6, r6
 800861a:	4283      	cmp	r3, r0
 800861c:	4637      	mov	r7, r6
 800861e:	dc04      	bgt.n	800862a <__swbuf_r+0x3a>
 8008620:	4621      	mov	r1, r4
 8008622:	4628      	mov	r0, r5
 8008624:	f7ff ffbc 	bl	80085a0 <_fflush_r>
 8008628:	b9e0      	cbnz	r0, 8008664 <__swbuf_r+0x74>
 800862a:	68a3      	ldr	r3, [r4, #8]
 800862c:	3b01      	subs	r3, #1
 800862e:	60a3      	str	r3, [r4, #8]
 8008630:	6823      	ldr	r3, [r4, #0]
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	6022      	str	r2, [r4, #0]
 8008636:	701e      	strb	r6, [r3, #0]
 8008638:	6962      	ldr	r2, [r4, #20]
 800863a:	1c43      	adds	r3, r0, #1
 800863c:	429a      	cmp	r2, r3
 800863e:	d004      	beq.n	800864a <__swbuf_r+0x5a>
 8008640:	89a3      	ldrh	r3, [r4, #12]
 8008642:	07db      	lsls	r3, r3, #31
 8008644:	d506      	bpl.n	8008654 <__swbuf_r+0x64>
 8008646:	2e0a      	cmp	r6, #10
 8008648:	d104      	bne.n	8008654 <__swbuf_r+0x64>
 800864a:	4621      	mov	r1, r4
 800864c:	4628      	mov	r0, r5
 800864e:	f7ff ffa7 	bl	80085a0 <_fflush_r>
 8008652:	b938      	cbnz	r0, 8008664 <__swbuf_r+0x74>
 8008654:	4638      	mov	r0, r7
 8008656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008658:	4621      	mov	r1, r4
 800865a:	4628      	mov	r0, r5
 800865c:	f000 f806 	bl	800866c <__swsetup_r>
 8008660:	2800      	cmp	r0, #0
 8008662:	d0d5      	beq.n	8008610 <__swbuf_r+0x20>
 8008664:	f04f 37ff 	mov.w	r7, #4294967295
 8008668:	e7f4      	b.n	8008654 <__swbuf_r+0x64>
	...

0800866c <__swsetup_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4b2a      	ldr	r3, [pc, #168]	; (8008718 <__swsetup_r+0xac>)
 8008670:	4605      	mov	r5, r0
 8008672:	6818      	ldr	r0, [r3, #0]
 8008674:	460c      	mov	r4, r1
 8008676:	b118      	cbz	r0, 8008680 <__swsetup_r+0x14>
 8008678:	6a03      	ldr	r3, [r0, #32]
 800867a:	b90b      	cbnz	r3, 8008680 <__swsetup_r+0x14>
 800867c:	f7fe f9c4 	bl	8006a08 <__sinit>
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008686:	0718      	lsls	r0, r3, #28
 8008688:	d422      	bmi.n	80086d0 <__swsetup_r+0x64>
 800868a:	06d9      	lsls	r1, r3, #27
 800868c:	d407      	bmi.n	800869e <__swsetup_r+0x32>
 800868e:	2309      	movs	r3, #9
 8008690:	602b      	str	r3, [r5, #0]
 8008692:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008696:	81a3      	strh	r3, [r4, #12]
 8008698:	f04f 30ff 	mov.w	r0, #4294967295
 800869c:	e034      	b.n	8008708 <__swsetup_r+0x9c>
 800869e:	0758      	lsls	r0, r3, #29
 80086a0:	d512      	bpl.n	80086c8 <__swsetup_r+0x5c>
 80086a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086a4:	b141      	cbz	r1, 80086b8 <__swsetup_r+0x4c>
 80086a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086aa:	4299      	cmp	r1, r3
 80086ac:	d002      	beq.n	80086b4 <__swsetup_r+0x48>
 80086ae:	4628      	mov	r0, r5
 80086b0:	f7ff f930 	bl	8007914 <_free_r>
 80086b4:	2300      	movs	r3, #0
 80086b6:	6363      	str	r3, [r4, #52]	; 0x34
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086be:	81a3      	strh	r3, [r4, #12]
 80086c0:	2300      	movs	r3, #0
 80086c2:	6063      	str	r3, [r4, #4]
 80086c4:	6923      	ldr	r3, [r4, #16]
 80086c6:	6023      	str	r3, [r4, #0]
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	f043 0308 	orr.w	r3, r3, #8
 80086ce:	81a3      	strh	r3, [r4, #12]
 80086d0:	6923      	ldr	r3, [r4, #16]
 80086d2:	b94b      	cbnz	r3, 80086e8 <__swsetup_r+0x7c>
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086de:	d003      	beq.n	80086e8 <__swsetup_r+0x7c>
 80086e0:	4621      	mov	r1, r4
 80086e2:	4628      	mov	r0, r5
 80086e4:	f000 f8c4 	bl	8008870 <__smakebuf_r>
 80086e8:	89a0      	ldrh	r0, [r4, #12]
 80086ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086ee:	f010 0301 	ands.w	r3, r0, #1
 80086f2:	d00a      	beq.n	800870a <__swsetup_r+0x9e>
 80086f4:	2300      	movs	r3, #0
 80086f6:	60a3      	str	r3, [r4, #8]
 80086f8:	6963      	ldr	r3, [r4, #20]
 80086fa:	425b      	negs	r3, r3
 80086fc:	61a3      	str	r3, [r4, #24]
 80086fe:	6923      	ldr	r3, [r4, #16]
 8008700:	b943      	cbnz	r3, 8008714 <__swsetup_r+0xa8>
 8008702:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008706:	d1c4      	bne.n	8008692 <__swsetup_r+0x26>
 8008708:	bd38      	pop	{r3, r4, r5, pc}
 800870a:	0781      	lsls	r1, r0, #30
 800870c:	bf58      	it	pl
 800870e:	6963      	ldrpl	r3, [r4, #20]
 8008710:	60a3      	str	r3, [r4, #8]
 8008712:	e7f4      	b.n	80086fe <__swsetup_r+0x92>
 8008714:	2000      	movs	r0, #0
 8008716:	e7f7      	b.n	8008708 <__swsetup_r+0x9c>
 8008718:	20000064 	.word	0x20000064

0800871c <_sbrk_r>:
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	4d06      	ldr	r5, [pc, #24]	; (8008738 <_sbrk_r+0x1c>)
 8008720:	2300      	movs	r3, #0
 8008722:	4604      	mov	r4, r0
 8008724:	4608      	mov	r0, r1
 8008726:	602b      	str	r3, [r5, #0]
 8008728:	f7f9 fa60 	bl	8001bec <_sbrk>
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	d102      	bne.n	8008736 <_sbrk_r+0x1a>
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	b103      	cbz	r3, 8008736 <_sbrk_r+0x1a>
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	2000058c 	.word	0x2000058c

0800873c <memcpy>:
 800873c:	440a      	add	r2, r1
 800873e:	4291      	cmp	r1, r2
 8008740:	f100 33ff 	add.w	r3, r0, #4294967295
 8008744:	d100      	bne.n	8008748 <memcpy+0xc>
 8008746:	4770      	bx	lr
 8008748:	b510      	push	{r4, lr}
 800874a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800874e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008752:	4291      	cmp	r1, r2
 8008754:	d1f9      	bne.n	800874a <memcpy+0xe>
 8008756:	bd10      	pop	{r4, pc}

08008758 <__assert_func>:
 8008758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800875a:	4614      	mov	r4, r2
 800875c:	461a      	mov	r2, r3
 800875e:	4b09      	ldr	r3, [pc, #36]	; (8008784 <__assert_func+0x2c>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4605      	mov	r5, r0
 8008764:	68d8      	ldr	r0, [r3, #12]
 8008766:	b14c      	cbz	r4, 800877c <__assert_func+0x24>
 8008768:	4b07      	ldr	r3, [pc, #28]	; (8008788 <__assert_func+0x30>)
 800876a:	9100      	str	r1, [sp, #0]
 800876c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008770:	4906      	ldr	r1, [pc, #24]	; (800878c <__assert_func+0x34>)
 8008772:	462b      	mov	r3, r5
 8008774:	f000 f844 	bl	8008800 <fiprintf>
 8008778:	f000 f8d8 	bl	800892c <abort>
 800877c:	4b04      	ldr	r3, [pc, #16]	; (8008790 <__assert_func+0x38>)
 800877e:	461c      	mov	r4, r3
 8008780:	e7f3      	b.n	800876a <__assert_func+0x12>
 8008782:	bf00      	nop
 8008784:	20000064 	.word	0x20000064
 8008788:	08008c97 	.word	0x08008c97
 800878c:	08008ca4 	.word	0x08008ca4
 8008790:	08008cd2 	.word	0x08008cd2

08008794 <_calloc_r>:
 8008794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008796:	fba1 2402 	umull	r2, r4, r1, r2
 800879a:	b94c      	cbnz	r4, 80087b0 <_calloc_r+0x1c>
 800879c:	4611      	mov	r1, r2
 800879e:	9201      	str	r2, [sp, #4]
 80087a0:	f7ff f92c 	bl	80079fc <_malloc_r>
 80087a4:	9a01      	ldr	r2, [sp, #4]
 80087a6:	4605      	mov	r5, r0
 80087a8:	b930      	cbnz	r0, 80087b8 <_calloc_r+0x24>
 80087aa:	4628      	mov	r0, r5
 80087ac:	b003      	add	sp, #12
 80087ae:	bd30      	pop	{r4, r5, pc}
 80087b0:	220c      	movs	r2, #12
 80087b2:	6002      	str	r2, [r0, #0]
 80087b4:	2500      	movs	r5, #0
 80087b6:	e7f8      	b.n	80087aa <_calloc_r+0x16>
 80087b8:	4621      	mov	r1, r4
 80087ba:	f7fe f9b0 	bl	8006b1e <memset>
 80087be:	e7f4      	b.n	80087aa <_calloc_r+0x16>

080087c0 <__ascii_mbtowc>:
 80087c0:	b082      	sub	sp, #8
 80087c2:	b901      	cbnz	r1, 80087c6 <__ascii_mbtowc+0x6>
 80087c4:	a901      	add	r1, sp, #4
 80087c6:	b142      	cbz	r2, 80087da <__ascii_mbtowc+0x1a>
 80087c8:	b14b      	cbz	r3, 80087de <__ascii_mbtowc+0x1e>
 80087ca:	7813      	ldrb	r3, [r2, #0]
 80087cc:	600b      	str	r3, [r1, #0]
 80087ce:	7812      	ldrb	r2, [r2, #0]
 80087d0:	1e10      	subs	r0, r2, #0
 80087d2:	bf18      	it	ne
 80087d4:	2001      	movne	r0, #1
 80087d6:	b002      	add	sp, #8
 80087d8:	4770      	bx	lr
 80087da:	4610      	mov	r0, r2
 80087dc:	e7fb      	b.n	80087d6 <__ascii_mbtowc+0x16>
 80087de:	f06f 0001 	mvn.w	r0, #1
 80087e2:	e7f8      	b.n	80087d6 <__ascii_mbtowc+0x16>

080087e4 <__ascii_wctomb>:
 80087e4:	b149      	cbz	r1, 80087fa <__ascii_wctomb+0x16>
 80087e6:	2aff      	cmp	r2, #255	; 0xff
 80087e8:	bf85      	ittet	hi
 80087ea:	238a      	movhi	r3, #138	; 0x8a
 80087ec:	6003      	strhi	r3, [r0, #0]
 80087ee:	700a      	strbls	r2, [r1, #0]
 80087f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80087f4:	bf98      	it	ls
 80087f6:	2001      	movls	r0, #1
 80087f8:	4770      	bx	lr
 80087fa:	4608      	mov	r0, r1
 80087fc:	4770      	bx	lr
	...

08008800 <fiprintf>:
 8008800:	b40e      	push	{r1, r2, r3}
 8008802:	b503      	push	{r0, r1, lr}
 8008804:	4601      	mov	r1, r0
 8008806:	ab03      	add	r3, sp, #12
 8008808:	4805      	ldr	r0, [pc, #20]	; (8008820 <fiprintf+0x20>)
 800880a:	f853 2b04 	ldr.w	r2, [r3], #4
 800880e:	6800      	ldr	r0, [r0, #0]
 8008810:	9301      	str	r3, [sp, #4]
 8008812:	f7ff fd25 	bl	8008260 <_vfiprintf_r>
 8008816:	b002      	add	sp, #8
 8008818:	f85d eb04 	ldr.w	lr, [sp], #4
 800881c:	b003      	add	sp, #12
 800881e:	4770      	bx	lr
 8008820:	20000064 	.word	0x20000064

08008824 <__swhatbuf_r>:
 8008824:	b570      	push	{r4, r5, r6, lr}
 8008826:	460c      	mov	r4, r1
 8008828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800882c:	2900      	cmp	r1, #0
 800882e:	b096      	sub	sp, #88	; 0x58
 8008830:	4615      	mov	r5, r2
 8008832:	461e      	mov	r6, r3
 8008834:	da0d      	bge.n	8008852 <__swhatbuf_r+0x2e>
 8008836:	89a3      	ldrh	r3, [r4, #12]
 8008838:	f013 0f80 	tst.w	r3, #128	; 0x80
 800883c:	f04f 0100 	mov.w	r1, #0
 8008840:	bf0c      	ite	eq
 8008842:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008846:	2340      	movne	r3, #64	; 0x40
 8008848:	2000      	movs	r0, #0
 800884a:	6031      	str	r1, [r6, #0]
 800884c:	602b      	str	r3, [r5, #0]
 800884e:	b016      	add	sp, #88	; 0x58
 8008850:	bd70      	pop	{r4, r5, r6, pc}
 8008852:	466a      	mov	r2, sp
 8008854:	f000 f848 	bl	80088e8 <_fstat_r>
 8008858:	2800      	cmp	r0, #0
 800885a:	dbec      	blt.n	8008836 <__swhatbuf_r+0x12>
 800885c:	9901      	ldr	r1, [sp, #4]
 800885e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008862:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008866:	4259      	negs	r1, r3
 8008868:	4159      	adcs	r1, r3
 800886a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800886e:	e7eb      	b.n	8008848 <__swhatbuf_r+0x24>

08008870 <__smakebuf_r>:
 8008870:	898b      	ldrh	r3, [r1, #12]
 8008872:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008874:	079d      	lsls	r5, r3, #30
 8008876:	4606      	mov	r6, r0
 8008878:	460c      	mov	r4, r1
 800887a:	d507      	bpl.n	800888c <__smakebuf_r+0x1c>
 800887c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008880:	6023      	str	r3, [r4, #0]
 8008882:	6123      	str	r3, [r4, #16]
 8008884:	2301      	movs	r3, #1
 8008886:	6163      	str	r3, [r4, #20]
 8008888:	b002      	add	sp, #8
 800888a:	bd70      	pop	{r4, r5, r6, pc}
 800888c:	ab01      	add	r3, sp, #4
 800888e:	466a      	mov	r2, sp
 8008890:	f7ff ffc8 	bl	8008824 <__swhatbuf_r>
 8008894:	9900      	ldr	r1, [sp, #0]
 8008896:	4605      	mov	r5, r0
 8008898:	4630      	mov	r0, r6
 800889a:	f7ff f8af 	bl	80079fc <_malloc_r>
 800889e:	b948      	cbnz	r0, 80088b4 <__smakebuf_r+0x44>
 80088a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a4:	059a      	lsls	r2, r3, #22
 80088a6:	d4ef      	bmi.n	8008888 <__smakebuf_r+0x18>
 80088a8:	f023 0303 	bic.w	r3, r3, #3
 80088ac:	f043 0302 	orr.w	r3, r3, #2
 80088b0:	81a3      	strh	r3, [r4, #12]
 80088b2:	e7e3      	b.n	800887c <__smakebuf_r+0xc>
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	6020      	str	r0, [r4, #0]
 80088b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088bc:	81a3      	strh	r3, [r4, #12]
 80088be:	9b00      	ldr	r3, [sp, #0]
 80088c0:	6163      	str	r3, [r4, #20]
 80088c2:	9b01      	ldr	r3, [sp, #4]
 80088c4:	6120      	str	r0, [r4, #16]
 80088c6:	b15b      	cbz	r3, 80088e0 <__smakebuf_r+0x70>
 80088c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088cc:	4630      	mov	r0, r6
 80088ce:	f000 f81d 	bl	800890c <_isatty_r>
 80088d2:	b128      	cbz	r0, 80088e0 <__smakebuf_r+0x70>
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	f023 0303 	bic.w	r3, r3, #3
 80088da:	f043 0301 	orr.w	r3, r3, #1
 80088de:	81a3      	strh	r3, [r4, #12]
 80088e0:	89a3      	ldrh	r3, [r4, #12]
 80088e2:	431d      	orrs	r5, r3
 80088e4:	81a5      	strh	r5, [r4, #12]
 80088e6:	e7cf      	b.n	8008888 <__smakebuf_r+0x18>

080088e8 <_fstat_r>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	4d07      	ldr	r5, [pc, #28]	; (8008908 <_fstat_r+0x20>)
 80088ec:	2300      	movs	r3, #0
 80088ee:	4604      	mov	r4, r0
 80088f0:	4608      	mov	r0, r1
 80088f2:	4611      	mov	r1, r2
 80088f4:	602b      	str	r3, [r5, #0]
 80088f6:	f7f9 f950 	bl	8001b9a <_fstat>
 80088fa:	1c43      	adds	r3, r0, #1
 80088fc:	d102      	bne.n	8008904 <_fstat_r+0x1c>
 80088fe:	682b      	ldr	r3, [r5, #0]
 8008900:	b103      	cbz	r3, 8008904 <_fstat_r+0x1c>
 8008902:	6023      	str	r3, [r4, #0]
 8008904:	bd38      	pop	{r3, r4, r5, pc}
 8008906:	bf00      	nop
 8008908:	2000058c 	.word	0x2000058c

0800890c <_isatty_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4d06      	ldr	r5, [pc, #24]	; (8008928 <_isatty_r+0x1c>)
 8008910:	2300      	movs	r3, #0
 8008912:	4604      	mov	r4, r0
 8008914:	4608      	mov	r0, r1
 8008916:	602b      	str	r3, [r5, #0]
 8008918:	f7f9 f94f 	bl	8001bba <_isatty>
 800891c:	1c43      	adds	r3, r0, #1
 800891e:	d102      	bne.n	8008926 <_isatty_r+0x1a>
 8008920:	682b      	ldr	r3, [r5, #0]
 8008922:	b103      	cbz	r3, 8008926 <_isatty_r+0x1a>
 8008924:	6023      	str	r3, [r4, #0]
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	2000058c 	.word	0x2000058c

0800892c <abort>:
 800892c:	b508      	push	{r3, lr}
 800892e:	2006      	movs	r0, #6
 8008930:	f000 f82c 	bl	800898c <raise>
 8008934:	2001      	movs	r0, #1
 8008936:	f7f9 f8fd 	bl	8001b34 <_exit>

0800893a <_raise_r>:
 800893a:	291f      	cmp	r1, #31
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	4604      	mov	r4, r0
 8008940:	460d      	mov	r5, r1
 8008942:	d904      	bls.n	800894e <_raise_r+0x14>
 8008944:	2316      	movs	r3, #22
 8008946:	6003      	str	r3, [r0, #0]
 8008948:	f04f 30ff 	mov.w	r0, #4294967295
 800894c:	bd38      	pop	{r3, r4, r5, pc}
 800894e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008950:	b112      	cbz	r2, 8008958 <_raise_r+0x1e>
 8008952:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008956:	b94b      	cbnz	r3, 800896c <_raise_r+0x32>
 8008958:	4620      	mov	r0, r4
 800895a:	f000 f831 	bl	80089c0 <_getpid_r>
 800895e:	462a      	mov	r2, r5
 8008960:	4601      	mov	r1, r0
 8008962:	4620      	mov	r0, r4
 8008964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008968:	f000 b818 	b.w	800899c <_kill_r>
 800896c:	2b01      	cmp	r3, #1
 800896e:	d00a      	beq.n	8008986 <_raise_r+0x4c>
 8008970:	1c59      	adds	r1, r3, #1
 8008972:	d103      	bne.n	800897c <_raise_r+0x42>
 8008974:	2316      	movs	r3, #22
 8008976:	6003      	str	r3, [r0, #0]
 8008978:	2001      	movs	r0, #1
 800897a:	e7e7      	b.n	800894c <_raise_r+0x12>
 800897c:	2400      	movs	r4, #0
 800897e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008982:	4628      	mov	r0, r5
 8008984:	4798      	blx	r3
 8008986:	2000      	movs	r0, #0
 8008988:	e7e0      	b.n	800894c <_raise_r+0x12>
	...

0800898c <raise>:
 800898c:	4b02      	ldr	r3, [pc, #8]	; (8008998 <raise+0xc>)
 800898e:	4601      	mov	r1, r0
 8008990:	6818      	ldr	r0, [r3, #0]
 8008992:	f7ff bfd2 	b.w	800893a <_raise_r>
 8008996:	bf00      	nop
 8008998:	20000064 	.word	0x20000064

0800899c <_kill_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4d07      	ldr	r5, [pc, #28]	; (80089bc <_kill_r+0x20>)
 80089a0:	2300      	movs	r3, #0
 80089a2:	4604      	mov	r4, r0
 80089a4:	4608      	mov	r0, r1
 80089a6:	4611      	mov	r1, r2
 80089a8:	602b      	str	r3, [r5, #0]
 80089aa:	f7f9 f8b3 	bl	8001b14 <_kill>
 80089ae:	1c43      	adds	r3, r0, #1
 80089b0:	d102      	bne.n	80089b8 <_kill_r+0x1c>
 80089b2:	682b      	ldr	r3, [r5, #0]
 80089b4:	b103      	cbz	r3, 80089b8 <_kill_r+0x1c>
 80089b6:	6023      	str	r3, [r4, #0]
 80089b8:	bd38      	pop	{r3, r4, r5, pc}
 80089ba:	bf00      	nop
 80089bc:	2000058c 	.word	0x2000058c

080089c0 <_getpid_r>:
 80089c0:	f7f9 b8a0 	b.w	8001b04 <_getpid>

080089c4 <_init>:
 80089c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c6:	bf00      	nop
 80089c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ca:	bc08      	pop	{r3}
 80089cc:	469e      	mov	lr, r3
 80089ce:	4770      	bx	lr

080089d0 <_fini>:
 80089d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d2:	bf00      	nop
 80089d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d6:	bc08      	pop	{r3}
 80089d8:	469e      	mov	lr, r3
 80089da:	4770      	bx	lr
