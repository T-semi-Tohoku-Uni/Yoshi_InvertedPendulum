
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c5c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08008e40  08008e40  00018e40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800923c  0800923c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800923c  0800923c  0001923c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009244  08009244  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009244  08009244  00019244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009248  08009248  00019248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800924c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  200001d4  08009420  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  08009420  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001585c  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000296f  00000000  00000000  00035aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  00038418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5d  00000000  00000000  000397a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f899  00000000  00000000  0003a705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001714a  00000000  00000000  00059f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca8d3  00000000  00000000  000710e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006438  00000000  00000000  0013b9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00141df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008e24 	.word	0x08008e24

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08008e24 	.word	0x08008e24

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	230a      	movs	r3, #10
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <_write+0x24>)
 8000f0a:	f004 fca0 	bl	800584e <HAL_UART_Transmit>
	return len;
 8000f0e:	687b      	ldr	r3, [r7, #4]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200003b8 	.word	0x200003b8

08000f1c <read_encoder_value>:


int32_t read_encoder_value(TIM_TypeDef *TIM)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	uint16_t enc_buff = TIM->CNT;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	81fb      	strh	r3, [r7, #14]
	TIM->CNT = 0;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
	return (int16_t)enc_buff;
 8000f30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b092      	sub	sp, #72	; 0x48
 8000f44:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f46:	f000 ff42 	bl	8001dce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4a:	f000 f8cb 	bl	80010e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4e:	f000 fb57 	bl	8001600 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f52:	f000 fb09 	bl	8001568 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f56:	f000 fa0f 	bl	8001378 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f5a:	f000 fa61 	bl	8001420 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000f5e:	f000 f94d 	bl	80011fc <MX_TIM1_Init>
  MX_TIM17_Init();
 8000f62:	f000 fadb 	bl	800151c <MX_TIM17_Init>
  MX_I2C1_Init();
 8000f66:	f000 f909 	bl	800117c <MX_I2C1_Init>
  MX_TIM16_Init();
 8000f6a:	f000 faaf 	bl	80014cc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000f6e:	213c      	movs	r1, #60	; 0x3c
 8000f70:	4854      	ldr	r0, [pc, #336]	; (80010c4 <main+0x184>)
 8000f72:	f003 f945 	bl	8004200 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f76:	213c      	movs	r1, #60	; 0x3c
 8000f78:	4853      	ldr	r0, [pc, #332]	; (80010c8 <main+0x188>)
 8000f7a:	f003 f941 	bl	8004200 <HAL_TIM_Encoder_Start>

  uint8_t Rxbuffer[6];
  float euler[3];
  char eulerheader[3][10] = {"x", "y", "z"};
 8000f7e:	4b53      	ldr	r3, [pc, #332]	; (80010cc <main+0x18c>)
 8000f80:	1d3c      	adds	r4, r7, #4
 8000f82:	461d      	mov	r5, r3
 8000f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f8c:	c407      	stmia	r4!, {r0, r1, r2}
 8000f8e:	8023      	strh	r3, [r4, #0]

  HAL_I2C_Mem_Read(&hi2c1, 0x28 << 1, 0x3A, I2C_MEMADD_SIZE_8BIT, &Rxbuffer, 1, 100);
 8000f90:	2364      	movs	r3, #100	; 0x64
 8000f92:	9302      	str	r3, [sp, #8]
 8000f94:	2301      	movs	r3, #1
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	223a      	movs	r2, #58	; 0x3a
 8000fa2:	2150      	movs	r1, #80	; 0x50
 8000fa4:	484a      	ldr	r0, [pc, #296]	; (80010d0 <main+0x190>)
 8000fa6:	f001 fb01 	bl	80025ac <HAL_I2C_Mem_Read>
	//printf(Rxbuff, "Error");

	HAL_I2C_Mem_Read(&hi2c1, 0x28 << 1, 0x00, I2C_MEMADD_SIZE_8BIT, &Rxbuffer, 1, 100);
 8000faa:	2364      	movs	r3, #100	; 0x64
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2150      	movs	r1, #80	; 0x50
 8000fbe:	4844      	ldr	r0, [pc, #272]	; (80010d0 <main+0x190>)
 8000fc0:	f001 faf4 	bl	80025ac <HAL_I2C_Mem_Read>
	//printf(Rxbuff, "ID");

	HAL_I2C_Mem_Read(&hi2c1, 0x28 << 1, 0x34, I2C_MEMADD_SIZE_8BIT, &Rxbuffer, 1, 100);
 8000fc4:	2364      	movs	r3, #100	; 0x64
 8000fc6:	9302      	str	r3, [sp, #8]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	2234      	movs	r2, #52	; 0x34
 8000fd6:	2150      	movs	r1, #80	; 0x50
 8000fd8:	483d      	ldr	r0, [pc, #244]	; (80010d0 <main+0x190>)
 8000fda:	f001 fae7 	bl	80025ac <HAL_I2C_Mem_Read>
	//printf(Rxbuffer, "Temp");
	HAL_Delay(5000);
 8000fde:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fe2:	f000 ff65 	bl	8001eb0 <HAL_Delay>


	user_tim1_pwm_setvalue(800, 800);
 8000fe6:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000fea:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000fee:	f000 fb5d 	bl	80016ac <user_tim1_pwm_setvalue>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Right:%d\r\n",read_encoder_value(TIM2));
 8000ff2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ff6:	f7ff ff91 	bl	8000f1c <read_encoder_value>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4835      	ldr	r0, [pc, #212]	; (80010d4 <main+0x194>)
 8001000:	f005 ff68 	bl	8006ed4 <iprintf>
	  printf("Left :%d\r\n",read_encoder_value(TIM3));
 8001004:	4834      	ldr	r0, [pc, #208]	; (80010d8 <main+0x198>)
 8001006:	f7ff ff89 	bl	8000f1c <read_encoder_value>
 800100a:	4603      	mov	r3, r0
 800100c:	4619      	mov	r1, r3
 800100e:	4833      	ldr	r0, [pc, #204]	; (80010dc <main+0x19c>)
 8001010:	f005 ff60 	bl	8006ed4 <iprintf>
	  HAL_Delay(200);
 8001014:	20c8      	movs	r0, #200	; 0xc8
 8001016:	f000 ff4b 	bl	8001eb0 <HAL_Delay>

	  HAL_I2C_Mem_Read(&hi2c1, BNO_ADDRESS << 1, 0x1A, I2C_MEMADD_SIZE_8BIT, Rxbuffer, 6, 100);
 800101a:	2364      	movs	r3, #100	; 0x64
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	2306      	movs	r3, #6
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	221a      	movs	r2, #26
 800102c:	2150      	movs	r1, #80	; 0x50
 800102e:	4828      	ldr	r0, [pc, #160]	; (80010d0 <main+0x190>)
 8001030:	f001 fabc 	bl	80025ac <HAL_I2C_Mem_Read>

	  for(uint8_t i=0; i<3; i++){
 8001034:	2300      	movs	r3, #0
 8001036:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800103a:	e03d      	b.n	80010b8 <main+0x178>
		  euler[i] = (float)((Rxbuffer[i*2+1] << 8) | Rxbuffer[i*2])/16;
 800103c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	3301      	adds	r3, #1
 8001044:	3338      	adds	r3, #56	; 0x38
 8001046:	443b      	add	r3, r7
 8001048:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001052:	0052      	lsls	r2, r2, #1
 8001054:	3238      	adds	r2, #56	; 0x38
 8001056:	443a      	add	r2, r7
 8001058:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800105c:	4313      	orrs	r3, r2
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001066:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800106a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800106e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	3338      	adds	r3, #56	; 0x38
 8001076:	443b      	add	r3, r7
 8001078:	3b14      	subs	r3, #20
 800107a:	edc3 7a00 	vstr	s15, [r3]
		  printf("%s:%f", eulerheader[i],euler[i]);
 800107e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001082:	1d39      	adds	r1, r7, #4
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	18cc      	adds	r4, r1, r3
 800108e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	3338      	adds	r3, #56	; 0x38
 8001096:	443b      	add	r3, r7
 8001098:	3b14      	subs	r3, #20
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fa7b 	bl	8000598 <__aeabi_f2d>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4621      	mov	r1, r4
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <main+0x1a0>)
 80010aa:	f005 ff13 	bl	8006ed4 <iprintf>
	  for(uint8_t i=0; i<3; i++){
 80010ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010b2:	3301      	adds	r3, #1
 80010b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80010b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d9bd      	bls.n	800103c <main+0xfc>
	  printf("Right:%d\r\n",read_encoder_value(TIM2));
 80010c0:	e797      	b.n	8000ff2 <main+0xb2>
 80010c2:	bf00      	nop
 80010c4:	20000288 	.word	0x20000288
 80010c8:	200002d4 	.word	0x200002d4
 80010cc:	08008e68 	.word	0x08008e68
 80010d0:	200001f0 	.word	0x200001f0
 80010d4:	08008e48 	.word	0x08008e48
 80010d8:	40000400 	.word	0x40000400
 80010dc:	08008e54 	.word	0x08008e54
 80010e0:	08008e60 	.word	0x08008e60

080010e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b094      	sub	sp, #80	; 0x50
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 0318 	add.w	r3, r7, #24
 80010ee:	2238      	movs	r2, #56	; 0x38
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f005 ff43 	bl	8006f7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001106:	f44f 7000 	mov.w	r0, #512	; 0x200
 800110a:	f001 fe53 	bl	8002db4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001118:	2340      	movs	r3, #64	; 0x40
 800111a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111c:	2302      	movs	r3, #2
 800111e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001120:	2302      	movs	r3, #2
 8001122:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001124:	2301      	movs	r3, #1
 8001126:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001128:	230a      	movs	r3, #10
 800112a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800112c:	2302      	movs	r3, #2
 800112e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001130:	2302      	movs	r3, #2
 8001132:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001134:	2302      	movs	r3, #2
 8001136:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fedd 	bl	8002efc <HAL_RCC_OscConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001148:	f000 fb06 	bl	8001758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114c:	230f      	movs	r3, #15
 800114e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001150:	2303      	movs	r3, #3
 8001152:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2102      	movs	r1, #2
 8001164:	4618      	mov	r0, r3
 8001166:	f002 f9e1 	bl	800352c <HAL_RCC_ClockConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001170:	f000 faf2 	bl	8001758 <Error_Handler>
  }
}
 8001174:	bf00      	nop
 8001176:	3750      	adds	r7, #80	; 0x50
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_I2C1_Init+0x74>)
 8001182:	4a1c      	ldr	r2, [pc, #112]	; (80011f4 <MX_I2C1_Init+0x78>)
 8001184:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_I2C1_Init+0x74>)
 8001188:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <MX_I2C1_Init+0x7c>)
 800118a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_I2C1_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_I2C1_Init+0x74>)
 8001194:	2201      	movs	r2, #1
 8001196:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_I2C1_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_I2C1_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MX_I2C1_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_I2C1_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_I2C1_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b6:	480e      	ldr	r0, [pc, #56]	; (80011f0 <MX_I2C1_Init+0x74>)
 80011b8:	f001 f969 	bl	800248e <HAL_I2C_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011c2:	f000 fac9 	bl	8001758 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011c6:	2100      	movs	r1, #0
 80011c8:	4809      	ldr	r0, [pc, #36]	; (80011f0 <MX_I2C1_Init+0x74>)
 80011ca:	f001 fd5b 	bl	8002c84 <HAL_I2CEx_ConfigAnalogFilter>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011d4:	f000 fac0 	bl	8001758 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011d8:	2100      	movs	r1, #0
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_I2C1_Init+0x74>)
 80011dc:	f001 fd9d 	bl	8002d1a <HAL_I2CEx_ConfigDigitalFilter>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011e6:	f000 fab7 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200001f0 	.word	0x200001f0
 80011f4:	40005400 	.word	0x40005400
 80011f8:	00702991 	.word	0x00702991

080011fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b09c      	sub	sp, #112	; 0x70
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001202:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
 800122c:	615a      	str	r2, [r3, #20]
 800122e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2234      	movs	r2, #52	; 0x34
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f005 fea1 	bl	8006f7e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800123c:	4b4b      	ldr	r3, [pc, #300]	; (800136c <MX_TIM1_Init+0x170>)
 800123e:	4a4c      	ldr	r2, [pc, #304]	; (8001370 <MX_TIM1_Init+0x174>)
 8001240:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001242:	4b4a      	ldr	r3, [pc, #296]	; (800136c <MX_TIM1_Init+0x170>)
 8001244:	2201      	movs	r2, #1
 8001246:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001248:	4b48      	ldr	r3, [pc, #288]	; (800136c <MX_TIM1_Init+0x170>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800124e:	4b47      	ldr	r3, [pc, #284]	; (800136c <MX_TIM1_Init+0x170>)
 8001250:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001254:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001256:	4b45      	ldr	r3, [pc, #276]	; (800136c <MX_TIM1_Init+0x170>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800125c:	4b43      	ldr	r3, [pc, #268]	; (800136c <MX_TIM1_Init+0x170>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b42      	ldr	r3, [pc, #264]	; (800136c <MX_TIM1_Init+0x170>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001268:	4840      	ldr	r0, [pc, #256]	; (800136c <MX_TIM1_Init+0x170>)
 800126a:	f002 fd6b 	bl	8003d44 <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001274:	f000 fa70 	bl	8001758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001282:	4619      	mov	r1, r3
 8001284:	4839      	ldr	r0, [pc, #228]	; (800136c <MX_TIM1_Init+0x170>)
 8001286:	f003 fadd 	bl	8004844 <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001290:	f000 fa62 	bl	8001758 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001294:	4835      	ldr	r0, [pc, #212]	; (800136c <MX_TIM1_Init+0x170>)
 8001296:	f002 fdac 	bl	8003df2 <HAL_TIM_PWM_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012a0:	f000 fa5a 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012b4:	4619      	mov	r1, r3
 80012b6:	482d      	ldr	r0, [pc, #180]	; (800136c <MX_TIM1_Init+0x170>)
 80012b8:	f004 f8ec 	bl	8005494 <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012c2:	f000 fa49 	bl	8001758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 80012c6:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <MX_TIM1_Init+0x178>)
 80012c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ce:	2300      	movs	r3, #0
 80012d0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012d2:	2300      	movs	r3, #0
 80012d4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012e6:	2200      	movs	r2, #0
 80012e8:	4619      	mov	r1, r3
 80012ea:	4820      	ldr	r0, [pc, #128]	; (800136c <MX_TIM1_Init+0x170>)
 80012ec:	f003 f996 	bl	800461c <HAL_TIM_PWM_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80012f6:	f000 fa2f 	bl	8001758 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012fe:	2204      	movs	r2, #4
 8001300:	4619      	mov	r1, r3
 8001302:	481a      	ldr	r0, [pc, #104]	; (800136c <MX_TIM1_Init+0x170>)
 8001304:	f003 f98a 	bl	800461c <HAL_TIM_PWM_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800130e:	f000 fa23 	bl	8001758 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001326:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001338:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001342:	2300      	movs	r3, #0
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4619      	mov	r1, r3
 800134e:	4807      	ldr	r0, [pc, #28]	; (800136c <MX_TIM1_Init+0x170>)
 8001350:	f004 f922 	bl	8005598 <HAL_TIMEx_ConfigBreakDeadTime>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800135a:	f000 f9fd 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800135e:	4803      	ldr	r0, [pc, #12]	; (800136c <MX_TIM1_Init+0x170>)
 8001360:	f000 fb72 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 8001364:	bf00      	nop
 8001366:	3770      	adds	r7, #112	; 0x70
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2000023c 	.word	0x2000023c
 8001370:	40012c00 	.word	0x40012c00
 8001374:	00010060 	.word	0x00010060

08001378 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	2224      	movs	r2, #36	; 0x24
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f005 fdf9 	bl	8006f7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	463b      	mov	r3, r7
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001396:	4b21      	ldr	r3, [pc, #132]	; (800141c <MX_TIM2_Init+0xa4>)
 8001398:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800139c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800139e:	4b1f      	ldr	r3, [pc, #124]	; (800141c <MX_TIM2_Init+0xa4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <MX_TIM2_Init+0xa4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <MX_TIM2_Init+0xa4>)
 80013ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <MX_TIM2_Init+0xa4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_TIM2_Init+0xa4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013be:	2303      	movs	r3, #3
 80013c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013c6:	2301      	movs	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013d6:	2301      	movs	r3, #1
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	4619      	mov	r1, r3
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <MX_TIM2_Init+0xa4>)
 80013ea:	f002 fe63 	bl	80040b4 <HAL_TIM_Encoder_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80013f4:	f000 f9b0 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_TIM2_Init+0xa4>)
 8001406:	f004 f845 	bl	8005494 <HAL_TIMEx_MasterConfigSynchronization>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001410:	f000 f9a2 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	3730      	adds	r7, #48	; 0x30
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000288 	.word	0x20000288

08001420 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	; 0x30
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	2224      	movs	r2, #36	; 0x24
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f005 fda5 	bl	8006f7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001434:	463b      	mov	r3, r7
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <MX_TIM3_Init+0xa4>)
 8001440:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <MX_TIM3_Init+0xa8>)
 8001442:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <MX_TIM3_Init+0xa4>)
 8001446:	2200      	movs	r2, #0
 8001448:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <MX_TIM3_Init+0xa4>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <MX_TIM3_Init+0xa4>)
 8001452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001456:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_TIM3_Init+0xa4>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <MX_TIM3_Init+0xa4>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001464:	2303      	movs	r3, #3
 8001466:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800146c:	2301      	movs	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800147c:	2301      	movs	r3, #1
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	4619      	mov	r1, r3
 800148e:	480d      	ldr	r0, [pc, #52]	; (80014c4 <MX_TIM3_Init+0xa4>)
 8001490:	f002 fe10 	bl	80040b4 <HAL_TIM_Encoder_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800149a:	f000 f95d 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <MX_TIM3_Init+0xa4>)
 80014ac:	f003 fff2 	bl	8005494 <HAL_TIMEx_MasterConfigSynchronization>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80014b6:	f000 f94f 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	3730      	adds	r7, #48	; 0x30
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200002d4 	.word	0x200002d4
 80014c8:	40000400 	.word	0x40000400

080014cc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <MX_TIM16_Init+0x48>)
 80014d2:	4a11      	ldr	r2, [pc, #68]	; (8001518 <MX_TIM16_Init+0x4c>)
 80014d4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 799;
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_TIM16_Init+0x48>)
 80014d8:	f240 321f 	movw	r2, #799	; 0x31f
 80014dc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <MX_TIM16_Init+0x48>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_TIM16_Init+0x48>)
 80014e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014ea:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_TIM16_Init+0x48>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_TIM16_Init+0x48>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_TIM16_Init+0x48>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_TIM16_Init+0x48>)
 8001500:	f002 fc20 	bl	8003d44 <HAL_TIM_Base_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800150a:	f000 f925 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000320 	.word	0x20000320
 8001518:	40014400 	.word	0x40014400

0800151c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_TIM17_Init+0x44>)
 8001522:	4a10      	ldr	r2, [pc, #64]	; (8001564 <MX_TIM17_Init+0x48>)
 8001524:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 79;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_TIM17_Init+0x44>)
 8001528:	224f      	movs	r2, #79	; 0x4f
 800152a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_TIM17_Init+0x44>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <MX_TIM17_Init+0x44>)
 8001534:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001538:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_TIM17_Init+0x44>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <MX_TIM17_Init+0x44>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_TIM17_Init+0x44>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <MX_TIM17_Init+0x44>)
 800154e:	f002 fbf9 	bl	8003d44 <HAL_TIM_Base_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001558:	f000 f8fe 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000036c 	.word	0x2000036c
 8001564:	40014800 	.word	0x40014800

08001568 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <MX_USART2_UART_Init+0x90>)
 800156e:	4a23      	ldr	r2, [pc, #140]	; (80015fc <MX_USART2_UART_Init+0x94>)
 8001570:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <MX_USART2_UART_Init+0x90>)
 8001574:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001578:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <MX_USART2_UART_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <MX_USART2_UART_Init+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <MX_USART2_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_USART2_UART_Init+0x90>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <MX_USART2_UART_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <MX_USART2_UART_Init+0x90>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <MX_USART2_UART_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_USART2_UART_Init+0x90>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <MX_USART2_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b0:	4811      	ldr	r0, [pc, #68]	; (80015f8 <MX_USART2_UART_Init+0x90>)
 80015b2:	f004 f8fc 	bl	80057ae <HAL_UART_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015bc:	f000 f8cc 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c0:	2100      	movs	r1, #0
 80015c2:	480d      	ldr	r0, [pc, #52]	; (80015f8 <MX_USART2_UART_Init+0x90>)
 80015c4:	f004 fe94 	bl	80062f0 <HAL_UARTEx_SetTxFifoThreshold>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015ce:	f000 f8c3 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d2:	2100      	movs	r1, #0
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <MX_USART2_UART_Init+0x90>)
 80015d6:	f004 fec9 	bl	800636c <HAL_UARTEx_SetRxFifoThreshold>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015e0:	f000 f8ba 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015e4:	4804      	ldr	r0, [pc, #16]	; (80015f8 <MX_USART2_UART_Init+0x90>)
 80015e6:	f004 fe4a 	bl	800627e <HAL_UARTEx_DisableFifoMode>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015f0:	f000 f8b2 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200003b8 	.word	0x200003b8
 80015fc:	40004400 	.word	0x40004400

08001600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <MX_GPIO_Init+0xa4>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	4a22      	ldr	r2, [pc, #136]	; (80016a4 <MX_GPIO_Init+0xa4>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <MX_GPIO_Init+0xa4>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <MX_GPIO_Init+0xa4>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <MX_GPIO_Init+0xa4>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_GPIO_Init+0xa4>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800164c:	4816      	ldr	r0, [pc, #88]	; (80016a8 <MX_GPIO_Init+0xa8>)
 800164e:	f000 fee3 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001656:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800165a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4619      	mov	r1, r3
 8001666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166a:	f000 fd53 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800166e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001674:	2301      	movs	r3, #1
 8001676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	4619      	mov	r1, r3
 8001686:	4808      	ldr	r0, [pc, #32]	; (80016a8 <MX_GPIO_Init+0xa8>)
 8001688:	f000 fd44 	bl	8002114 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2100      	movs	r1, #0
 8001690:	2017      	movs	r0, #23
 8001692:	f000 fd0a 	bl	80020aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001696:	2017      	movs	r0, #23
 8001698:	f000 fd21 	bl	80020de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800169c:	bf00      	nop
 800169e:	3720      	adds	r7, #32
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000
 80016a8:	48000400 	.word	0x48000400

080016ac <user_tim1_pwm_setvalue>:

/* USER CODE BEGIN 4 */
void user_tim1_pwm_setvalue(int16_t value1, int16_t value2)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	460a      	mov	r2, r1
 80016b6:	80fb      	strh	r3, [r7, #6]
 80016b8:	4613      	mov	r3, r2
 80016ba:	80bb      	strh	r3, [r7, #4]
	value2 = (value2>1000)?1000:value2;

	value1 = (value1<-1000)?-1000:value1;
	value2 = (value2<-1000)?-1000:value2;
*/
	value1 = value1 + 1000;
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	80fb      	strh	r3, [r7, #6]
	value2 = value2 + 1000;
 80016c6:	88bb      	ldrh	r3, [r7, #4]
 80016c8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	80bb      	strh	r3, [r7, #4]


	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <user_tim1_pwm_setvalue+0xa4>)
 80016d2:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value1;
 80016d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d8:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	2200      	movs	r2, #0
 80016f4:	4619      	mov	r1, r3
 80016f6:	4817      	ldr	r0, [pc, #92]	; (8001754 <user_tim1_pwm_setvalue+0xa8>)
 80016f8:	f002 ff90 	bl	800461c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016fc:	2100      	movs	r1, #0
 80016fe:	4815      	ldr	r0, [pc, #84]	; (8001754 <user_tim1_pwm_setvalue+0xa8>)
 8001700:	f002 fbd8 	bl	8003eb4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001704:	2100      	movs	r1, #0
 8001706:	4813      	ldr	r0, [pc, #76]	; (8001754 <user_tim1_pwm_setvalue+0xa8>)
 8001708:	f003 fe10 	bl	800532c <HAL_TIMEx_PWMN_Start>

	sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 800170c:	4b10      	ldr	r3, [pc, #64]	; (8001750 <user_tim1_pwm_setvalue+0xa4>)
 800170e:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value2;
 8001710:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001714:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	2204      	movs	r2, #4
 8001730:	4619      	mov	r1, r3
 8001732:	4808      	ldr	r0, [pc, #32]	; (8001754 <user_tim1_pwm_setvalue+0xa8>)
 8001734:	f002 ff72 	bl	800461c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001738:	2104      	movs	r1, #4
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <user_tim1_pwm_setvalue+0xa8>)
 800173c:	f002 fbba 	bl	8003eb4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001740:	2104      	movs	r1, #4
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <user_tim1_pwm_setvalue+0xa8>)
 8001744:	f003 fdf2 	bl	800532c <HAL_TIMEx_PWMN_Start>
}
 8001748:	bf00      	nop
 800174a:	3728      	adds	r7, #40	; 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	00010060 	.word	0x00010060
 8001754:	2000023c 	.word	0x2000023c

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001760:	e7fe      	b.n	8001760 <Error_Handler+0x8>
	...

08001764 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <HAL_MspInit+0x44>)
 800176c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176e:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <HAL_MspInit+0x44>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6613      	str	r3, [r2, #96]	; 0x60
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <HAL_MspInit+0x44>)
 8001778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_MspInit+0x44>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	4a08      	ldr	r2, [pc, #32]	; (80017a8 <HAL_MspInit+0x44>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178c:	6593      	str	r3, [r2, #88]	; 0x58
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_MspInit+0x44>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000

080017ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b09c      	sub	sp, #112	; 0x70
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017c4:	f107 0318 	add.w	r3, r7, #24
 80017c8:	2244      	movs	r2, #68	; 0x44
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f005 fbd6 	bl	8006f7e <memset>
  if(hi2c->Instance==I2C1)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a2d      	ldr	r2, [pc, #180]	; (800188c <HAL_I2C_MspInit+0xe0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d153      	bne.n	8001884 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017dc:	2340      	movs	r3, #64	; 0x40
 80017de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017e4:	f107 0318 	add.w	r3, r7, #24
 80017e8:	4618      	mov	r0, r3
 80017ea:	f002 f8bb 	bl	8003964 <HAL_RCCEx_PeriphCLKConfig>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017f4:	f7ff ffb0 	bl	8001758 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f8:	4b25      	ldr	r3, [pc, #148]	; (8001890 <HAL_I2C_MspInit+0xe4>)
 80017fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fc:	4a24      	ldr	r2, [pc, #144]	; (8001890 <HAL_I2C_MspInit+0xe4>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001804:	4b22      	ldr	r3, [pc, #136]	; (8001890 <HAL_I2C_MspInit+0xe4>)
 8001806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001810:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <HAL_I2C_MspInit+0xe4>)
 8001812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001814:	4a1e      	ldr	r2, [pc, #120]	; (8001890 <HAL_I2C_MspInit+0xe4>)
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181c:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <HAL_I2C_MspInit+0xe4>)
 800181e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001828:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800182c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800182e:	2312      	movs	r3, #18
 8001830:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800183a:	2304      	movs	r3, #4
 800183c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001842:	4619      	mov	r1, r3
 8001844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001848:	f000 fc64 	bl	8002114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001850:	2312      	movs	r3, #18
 8001852:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800185c:	2304      	movs	r3, #4
 800185e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001860:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001864:	4619      	mov	r1, r3
 8001866:	480b      	ldr	r0, [pc, #44]	; (8001894 <HAL_I2C_MspInit+0xe8>)
 8001868:	f000 fc54 	bl	8002114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <HAL_I2C_MspInit+0xe4>)
 800186e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001870:	4a07      	ldr	r2, [pc, #28]	; (8001890 <HAL_I2C_MspInit+0xe4>)
 8001872:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001876:	6593      	str	r3, [r2, #88]	; 0x58
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_I2C_MspInit+0xe4>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001884:	bf00      	nop
 8001886:	3770      	adds	r7, #112	; 0x70
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40005400 	.word	0x40005400
 8001890:	40021000 	.word	0x40021000
 8001894:	48000400 	.word	0x48000400

08001898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a2b      	ldr	r2, [pc, #172]	; (8001954 <HAL_TIM_Base_MspInit+0xbc>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d11c      	bne.n	80018e4 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018aa:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <HAL_TIM_Base_MspInit+0xc0>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ae:	4a2a      	ldr	r2, [pc, #168]	; (8001958 <HAL_TIM_Base_MspInit+0xc0>)
 80018b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018b4:	6613      	str	r3, [r2, #96]	; 0x60
 80018b6:	4b28      	ldr	r3, [pc, #160]	; (8001958 <HAL_TIM_Base_MspInit+0xc0>)
 80018b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	2019      	movs	r0, #25
 80018c8:	f000 fbef 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80018cc:	2019      	movs	r0, #25
 80018ce:	f000 fc06 	bl	80020de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	201a      	movs	r0, #26
 80018d8:	f000 fbe7 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80018dc:	201a      	movs	r0, #26
 80018de:	f000 fbfe 	bl	80020de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80018e2:	e032      	b.n	800194a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM16)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a1c      	ldr	r2, [pc, #112]	; (800195c <HAL_TIM_Base_MspInit+0xc4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d114      	bne.n	8001918 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80018ee:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <HAL_TIM_Base_MspInit+0xc0>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f2:	4a19      	ldr	r2, [pc, #100]	; (8001958 <HAL_TIM_Base_MspInit+0xc0>)
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	6613      	str	r3, [r2, #96]	; 0x60
 80018fa:	4b17      	ldr	r3, [pc, #92]	; (8001958 <HAL_TIM_Base_MspInit+0xc0>)
 80018fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	2019      	movs	r0, #25
 800190c:	f000 fbcd 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001910:	2019      	movs	r0, #25
 8001912:	f000 fbe4 	bl	80020de <HAL_NVIC_EnableIRQ>
}
 8001916:	e018      	b.n	800194a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM17)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a10      	ldr	r2, [pc, #64]	; (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d113      	bne.n	800194a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_TIM_Base_MspInit+0xc0>)
 8001924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001926:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <HAL_TIM_Base_MspInit+0xc0>)
 8001928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800192c:	6613      	str	r3, [r2, #96]	; 0x60
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_TIM_Base_MspInit+0xc0>)
 8001930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	201a      	movs	r0, #26
 8001940:	f000 fbb3 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001944:	201a      	movs	r0, #26
 8001946:	f000 fbca 	bl	80020de <HAL_NVIC_EnableIRQ>
}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40012c00 	.word	0x40012c00
 8001958:	40021000 	.word	0x40021000
 800195c:	40014400 	.word	0x40014400
 8001960:	40014800 	.word	0x40014800

08001964 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	; 0x30
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001984:	d129      	bne.n	80019da <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001986:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	4a2d      	ldr	r2, [pc, #180]	; (8001a40 <HAL_TIM_Encoder_MspInit+0xdc>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6593      	str	r3, [r2, #88]	; 0x58
 8001992:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	61bb      	str	r3, [r7, #24]
 800199c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	4a27      	ldr	r2, [pc, #156]	; (8001a40 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019aa:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019b6:	2303      	movs	r3, #3
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019c6:	2301      	movs	r3, #1
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d4:	f000 fb9e 	bl	8002114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019d8:	e02d      	b.n	8001a36 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM3)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a19      	ldr	r2, [pc, #100]	; (8001a44 <HAL_TIM_Encoder_MspInit+0xe0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d128      	bne.n	8001a36 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e8:	4a15      	ldr	r2, [pc, #84]	; (8001a40 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019ea:	f043 0302 	orr.w	r3, r3, #2
 80019ee:	6593      	str	r3, [r2, #88]	; 0x58
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a00:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a08:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001a14:	2350      	movs	r3, #80	; 0x50
 8001a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a24:	2302      	movs	r3, #2
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a32:	f000 fb6f 	bl	8002114 <HAL_GPIO_Init>
}
 8001a36:	bf00      	nop
 8001a38:	3730      	adds	r7, #48	; 0x30
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40000400 	.word	0x40000400

08001a48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <HAL_TIM_MspPostInit+0x68>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d11d      	bne.n	8001aa6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_TIM_MspPostInit+0x6c>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	4a11      	ldr	r2, [pc, #68]	; (8001ab4 <HAL_TIM_MspPostInit+0x6c>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_TIM_MspPostInit+0x6c>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001a82:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001a86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a94:	2306      	movs	r3, #6
 8001a96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa2:	f000 fb37 	bl	8002114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001aa6:	bf00      	nop
 8001aa8:	3720      	adds	r7, #32
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40012c00 	.word	0x40012c00
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b09a      	sub	sp, #104	; 0x68
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	2244      	movs	r2, #68	; 0x44
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f005 fa50 	bl	8006f7e <memset>
  if(huart->Instance==USART2)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <HAL_UART_MspInit+0xa8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d136      	bne.n	8001b56 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 ff35 	bl	8003964 <HAL_RCCEx_PeriphCLKConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b00:	f7ff fe2a 	bl	8001758 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b04:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_UART_MspInit+0xac>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	4a16      	ldr	r2, [pc, #88]	; (8001b64 <HAL_UART_MspInit+0xac>)
 8001b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_UART_MspInit+0xac>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_UART_MspInit+0xac>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b20:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <HAL_UART_MspInit+0xac>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_UART_MspInit+0xac>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001b34:	230c      	movs	r3, #12
 8001b36:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b44:	2307      	movs	r3, #7
 8001b46:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b52:	f000 fadf 	bl	8002114 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b56:	bf00      	nop
 8001b58:	3768      	adds	r7, #104	; 0x68
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40004400 	.word	0x40004400
 8001b64:	40021000 	.word	0x40021000

08001b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <NMI_Handler+0x4>

08001b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <HardFault_Handler+0x4>

08001b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <MemManage_Handler+0x4>

08001b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <BusFault_Handler+0x4>

08001b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <UsageFault_Handler+0x4>

08001b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb4:	f000 f95e 	bl	8001e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001bc0:	2080      	movs	r0, #128	; 0x80
 8001bc2:	f000 fc41 	bl	8002448 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bd0:	4803      	ldr	r0, [pc, #12]	; (8001be0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001bd2:	f002 fba3 	bl	800431c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001bd6:	4803      	ldr	r0, [pc, #12]	; (8001be4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001bd8:	f002 fba0 	bl	800431c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	2000023c 	.word	0x2000023c
 8001be4:	20000320 	.word	0x20000320

08001be8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bec:	4803      	ldr	r0, [pc, #12]	; (8001bfc <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001bee:	f002 fb95 	bl	800431c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001bf2:	4803      	ldr	r0, [pc, #12]	; (8001c00 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001bf4:	f002 fb92 	bl	800431c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	2000023c 	.word	0x2000023c
 8001c00:	2000036c 	.word	0x2000036c

08001c04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return 1;
 8001c08:	2301      	movs	r3, #1
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <_kill>:

int _kill(int pid, int sig)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c1e:	f005 fa01 	bl	8007024 <__errno>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2216      	movs	r2, #22
 8001c26:	601a      	str	r2, [r3, #0]
  return -1;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_exit>:

void _exit (int status)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ffe7 	bl	8001c14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c46:	e7fe      	b.n	8001c46 <_exit+0x12>

08001c48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e00a      	b.n	8001c70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c5a:	f3af 8000 	nop.w
 8001c5e:	4601      	mov	r1, r0
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60ba      	str	r2, [r7, #8]
 8001c66:	b2ca      	uxtb	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dbf0      	blt.n	8001c5a <_read+0x12>
  }

  return len;
 8001c78:	687b      	ldr	r3, [r7, #4]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001caa:	605a      	str	r2, [r3, #4]
  return 0;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <_isatty>:

int _isatty(int file)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <_sbrk+0x5c>)
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <_sbrk+0x60>)
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <_sbrk+0x64>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <_sbrk+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d207      	bcs.n	8001d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d1c:	f005 f982 	bl	8007024 <__errno>
 8001d20:	4603      	mov	r3, r0
 8001d22:	220c      	movs	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2a:	e009      	b.n	8001d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <_sbrk+0x64>)
 8001d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20008000 	.word	0x20008000
 8001d4c:	00000400 	.word	0x00000400
 8001d50:	20000448 	.word	0x20000448
 8001d54:	200005a0 	.word	0x200005a0

08001d58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <SystemInit+0x20>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <SystemInit+0x20>)
 8001d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d7c:	480d      	ldr	r0, [pc, #52]	; (8001db4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d80:	480d      	ldr	r0, [pc, #52]	; (8001db8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d82:	490e      	ldr	r1, [pc, #56]	; (8001dbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d84:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <LoopForever+0xe>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d88:	e002      	b.n	8001d90 <LoopCopyDataInit>

08001d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8e:	3304      	adds	r3, #4

08001d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d94:	d3f9      	bcc.n	8001d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d96:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d98:	4c0b      	ldr	r4, [pc, #44]	; (8001dc8 <LoopForever+0x16>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d9c:	e001      	b.n	8001da2 <LoopFillZerobss>

08001d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da0:	3204      	adds	r2, #4

08001da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da4:	d3fb      	bcc.n	8001d9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001da6:	f7ff ffd7 	bl	8001d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001daa:	f005 f941 	bl	8007030 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dae:	f7ff f8c7 	bl	8000f40 <main>

08001db2 <LoopForever>:

LoopForever:
    b LoopForever
 8001db2:	e7fe      	b.n	8001db2 <LoopForever>
  ldr   r0, =_estack
 8001db4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dbc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001dc0:	0800924c 	.word	0x0800924c
  ldr r2, =_sbss
 8001dc4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001dc8:	2000059c 	.word	0x2000059c

08001dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dcc:	e7fe      	b.n	8001dcc <ADC1_2_IRQHandler>

08001dce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd8:	2003      	movs	r0, #3
 8001dda:	f000 f95b 	bl	8002094 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dde:	2001      	movs	r0, #1
 8001de0:	f000 f80e 	bl	8001e00 <HAL_InitTick>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d002      	beq.n	8001df0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	71fb      	strb	r3, [r7, #7]
 8001dee:	e001      	b.n	8001df4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001df0:	f7ff fcb8 	bl	8001764 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001df4:	79fb      	ldrb	r3, [r7, #7]

}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e0c:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <HAL_InitTick+0x68>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d022      	beq.n	8001e5a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e14:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_InitTick+0x6c>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <HAL_InitTick+0x68>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e20:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 f966 	bl	80020fa <HAL_SYSTICK_Config>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10f      	bne.n	8001e54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b0f      	cmp	r3, #15
 8001e38:	d809      	bhi.n	8001e4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e42:	f000 f932 	bl	80020aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <HAL_InitTick+0x70>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e007      	b.n	8001e5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	e004      	b.n	8001e5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	e001      	b.n	8001e5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000008 	.word	0x20000008
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000004 	.word	0x20000004

08001e74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_IncTick+0x1c>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_IncTick+0x20>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4413      	add	r3, r2
 8001e82:	4a03      	ldr	r2, [pc, #12]	; (8001e90 <HAL_IncTick+0x1c>)
 8001e84:	6013      	str	r3, [r2, #0]
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	2000044c 	.word	0x2000044c
 8001e94:	20000008 	.word	0x20000008

08001e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_GetTick+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	2000044c 	.word	0x2000044c

08001eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff ffee 	bl	8001e98 <HAL_GetTick>
 8001ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec8:	d004      	beq.n	8001ed4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_Delay+0x40>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ed4:	bf00      	nop
 8001ed6:	f7ff ffdf 	bl	8001e98 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d8f7      	bhi.n	8001ed6 <HAL_Delay+0x26>
  {
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000008 	.word	0x20000008

08001ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f10:	4013      	ands	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f26:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	60d3      	str	r3, [r2, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <__NVIC_GetPriorityGrouping+0x18>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0a1b      	lsrs	r3, r3, #8
 8001f46:	f003 0307 	and.w	r3, r3, #7
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	db0b      	blt.n	8001f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	f003 021f 	and.w	r2, r3, #31
 8001f70:	4907      	ldr	r1, [pc, #28]	; (8001f90 <__NVIC_EnableIRQ+0x38>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	2001      	movs	r0, #1
 8001f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000e100 	.word	0xe000e100

08001f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6039      	str	r1, [r7, #0]
 8001f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	db0a      	blt.n	8001fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	490c      	ldr	r1, [pc, #48]	; (8001fe0 <__NVIC_SetPriority+0x4c>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	0112      	lsls	r2, r2, #4
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fbc:	e00a      	b.n	8001fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4908      	ldr	r1, [pc, #32]	; (8001fe4 <__NVIC_SetPriority+0x50>)
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	3b04      	subs	r3, #4
 8001fcc:	0112      	lsls	r2, r2, #4
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	761a      	strb	r2, [r3, #24]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000e100 	.word	0xe000e100
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	; 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f1c3 0307 	rsb	r3, r3, #7
 8002002:	2b04      	cmp	r3, #4
 8002004:	bf28      	it	cs
 8002006:	2304      	movcs	r3, #4
 8002008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3304      	adds	r3, #4
 800200e:	2b06      	cmp	r3, #6
 8002010:	d902      	bls.n	8002018 <NVIC_EncodePriority+0x30>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3b03      	subs	r3, #3
 8002016:	e000      	b.n	800201a <NVIC_EncodePriority+0x32>
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	f04f 32ff 	mov.w	r2, #4294967295
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43da      	mvns	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	401a      	ands	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002030:	f04f 31ff 	mov.w	r1, #4294967295
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	43d9      	mvns	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	4313      	orrs	r3, r2
         );
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	; 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002060:	d301      	bcc.n	8002066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002062:	2301      	movs	r3, #1
 8002064:	e00f      	b.n	8002086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <SysTick_Config+0x40>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206e:	210f      	movs	r1, #15
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	f7ff ff8e 	bl	8001f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <SysTick_Config+0x40>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207e:	4b04      	ldr	r3, [pc, #16]	; (8002090 <SysTick_Config+0x40>)
 8002080:	2207      	movs	r2, #7
 8002082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	e000e010 	.word	0xe000e010

08002094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff29 	bl	8001ef4 <__NVIC_SetPriorityGrouping>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020b8:	f7ff ff40 	bl	8001f3c <__NVIC_GetPriorityGrouping>
 80020bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	6978      	ldr	r0, [r7, #20]
 80020c4:	f7ff ff90 	bl	8001fe8 <NVIC_EncodePriority>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff5f 	bl	8001f94 <__NVIC_SetPriority>
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff33 	bl	8001f58 <__NVIC_EnableIRQ>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ffa4 	bl	8002050 <SysTick_Config>
 8002108:	4603      	mov	r3, r0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002122:	e15a      	b.n	80023da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	2101      	movs	r1, #1
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	fa01 f303 	lsl.w	r3, r1, r3
 8002130:	4013      	ands	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 814c 	beq.w	80023d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d005      	beq.n	8002154 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002150:	2b02      	cmp	r3, #2
 8002152:	d130      	bne.n	80021b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4013      	ands	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800218a:	2201      	movs	r2, #1
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	f003 0201 	and.w	r2, r3, #1
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d017      	beq.n	80021f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2203      	movs	r2, #3
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d123      	bne.n	8002246 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	08da      	lsrs	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3208      	adds	r2, #8
 8002206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	220f      	movs	r2, #15
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	08da      	lsrs	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3208      	adds	r2, #8
 8002240:	6939      	ldr	r1, [r7, #16]
 8002242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	2203      	movs	r2, #3
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0203 	and.w	r2, r3, #3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 80a6 	beq.w	80023d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002288:	4b5b      	ldr	r3, [pc, #364]	; (80023f8 <HAL_GPIO_Init+0x2e4>)
 800228a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228c:	4a5a      	ldr	r2, [pc, #360]	; (80023f8 <HAL_GPIO_Init+0x2e4>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6613      	str	r3, [r2, #96]	; 0x60
 8002294:	4b58      	ldr	r3, [pc, #352]	; (80023f8 <HAL_GPIO_Init+0x2e4>)
 8002296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022a0:	4a56      	ldr	r2, [pc, #344]	; (80023fc <HAL_GPIO_Init+0x2e8>)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	089b      	lsrs	r3, r3, #2
 80022a6:	3302      	adds	r3, #2
 80022a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	220f      	movs	r2, #15
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022ca:	d01f      	beq.n	800230c <HAL_GPIO_Init+0x1f8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a4c      	ldr	r2, [pc, #304]	; (8002400 <HAL_GPIO_Init+0x2ec>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d019      	beq.n	8002308 <HAL_GPIO_Init+0x1f4>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a4b      	ldr	r2, [pc, #300]	; (8002404 <HAL_GPIO_Init+0x2f0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d013      	beq.n	8002304 <HAL_GPIO_Init+0x1f0>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a4a      	ldr	r2, [pc, #296]	; (8002408 <HAL_GPIO_Init+0x2f4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00d      	beq.n	8002300 <HAL_GPIO_Init+0x1ec>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a49      	ldr	r2, [pc, #292]	; (800240c <HAL_GPIO_Init+0x2f8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d007      	beq.n	80022fc <HAL_GPIO_Init+0x1e8>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a48      	ldr	r2, [pc, #288]	; (8002410 <HAL_GPIO_Init+0x2fc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d101      	bne.n	80022f8 <HAL_GPIO_Init+0x1e4>
 80022f4:	2305      	movs	r3, #5
 80022f6:	e00a      	b.n	800230e <HAL_GPIO_Init+0x1fa>
 80022f8:	2306      	movs	r3, #6
 80022fa:	e008      	b.n	800230e <HAL_GPIO_Init+0x1fa>
 80022fc:	2304      	movs	r3, #4
 80022fe:	e006      	b.n	800230e <HAL_GPIO_Init+0x1fa>
 8002300:	2303      	movs	r3, #3
 8002302:	e004      	b.n	800230e <HAL_GPIO_Init+0x1fa>
 8002304:	2302      	movs	r3, #2
 8002306:	e002      	b.n	800230e <HAL_GPIO_Init+0x1fa>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <HAL_GPIO_Init+0x1fa>
 800230c:	2300      	movs	r3, #0
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	f002 0203 	and.w	r2, r2, #3
 8002314:	0092      	lsls	r2, r2, #2
 8002316:	4093      	lsls	r3, r2
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800231e:	4937      	ldr	r1, [pc, #220]	; (80023fc <HAL_GPIO_Init+0x2e8>)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	089b      	lsrs	r3, r3, #2
 8002324:	3302      	adds	r3, #2
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800232c:	4b39      	ldr	r3, [pc, #228]	; (8002414 <HAL_GPIO_Init+0x300>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	43db      	mvns	r3, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002350:	4a30      	ldr	r2, [pc, #192]	; (8002414 <HAL_GPIO_Init+0x300>)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002356:	4b2f      	ldr	r3, [pc, #188]	; (8002414 <HAL_GPIO_Init+0x300>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	43db      	mvns	r3, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4013      	ands	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800237a:	4a26      	ldr	r2, [pc, #152]	; (8002414 <HAL_GPIO_Init+0x300>)
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002380:	4b24      	ldr	r3, [pc, #144]	; (8002414 <HAL_GPIO_Init+0x300>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	43db      	mvns	r3, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023a4:	4a1b      	ldr	r2, [pc, #108]	; (8002414 <HAL_GPIO_Init+0x300>)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023aa:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <HAL_GPIO_Init+0x300>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023ce:	4a11      	ldr	r2, [pc, #68]	; (8002414 <HAL_GPIO_Init+0x300>)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3301      	adds	r3, #1
 80023d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f47f ae9d 	bne.w	8002124 <HAL_GPIO_Init+0x10>
  }
}
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
 80023ee:	371c      	adds	r7, #28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40010000 	.word	0x40010000
 8002400:	48000400 	.word	0x48000400
 8002404:	48000800 	.word	0x48000800
 8002408:	48000c00 	.word	0x48000c00
 800240c:	48001000 	.word	0x48001000
 8002410:	48001400 	.word	0x48001400
 8002414:	40010400 	.word	0x40010400

08002418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
 8002424:	4613      	mov	r3, r2
 8002426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002428:	787b      	ldrb	r3, [r7, #1]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002434:	e002      	b.n	800243c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002436:	887a      	ldrh	r2, [r7, #2]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	4013      	ands	r3, r2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d006      	beq.n	800246c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800245e:	4a05      	ldr	r2, [pc, #20]	; (8002474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002464:	88fb      	ldrh	r3, [r7, #6]
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f806 	bl	8002478 <HAL_GPIO_EXTI_Callback>
  }
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40010400 	.word	0x40010400

08002478 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e081      	b.n	80025a4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d106      	bne.n	80024ba <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff f979 	bl	80017ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2224      	movs	r2, #36	; 0x24
 80024be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0201 	bic.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d107      	bne.n	8002508 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	e006      	b.n	8002516 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002514:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d104      	bne.n	8002528 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002526:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800253a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800254a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69d9      	ldr	r1, [r3, #28]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1a      	ldr	r2, [r3, #32]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0201 	orr.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	4608      	mov	r0, r1
 80025b6:	4611      	mov	r1, r2
 80025b8:	461a      	mov	r2, r3
 80025ba:	4603      	mov	r3, r0
 80025bc:	817b      	strh	r3, [r7, #10]
 80025be:	460b      	mov	r3, r1
 80025c0:	813b      	strh	r3, [r7, #8]
 80025c2:	4613      	mov	r3, r2
 80025c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	f040 80fd 	bne.w	80027ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <HAL_I2C_Mem_Read+0x34>
 80025da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0f1      	b.n	80027d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_I2C_Mem_Read+0x4e>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e0ea      	b.n	80027d0 <HAL_I2C_Mem_Read+0x224>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002602:	f7ff fc49 	bl	8001e98 <HAL_GetTick>
 8002606:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	2319      	movs	r3, #25
 800260e:	2201      	movs	r2, #1
 8002610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f95b 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0d5      	b.n	80027d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2222      	movs	r2, #34	; 0x22
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2240      	movs	r2, #64	; 0x40
 8002630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a3a      	ldr	r2, [r7, #32]
 800263e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002644:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800264c:	88f8      	ldrh	r0, [r7, #6]
 800264e:	893a      	ldrh	r2, [r7, #8]
 8002650:	8979      	ldrh	r1, [r7, #10]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	4603      	mov	r3, r0
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f8bf 	bl	80027e0 <I2C_RequestMemoryRead>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0ad      	b.n	80027d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002678:	b29b      	uxth	r3, r3
 800267a:	2bff      	cmp	r3, #255	; 0xff
 800267c:	d90e      	bls.n	800269c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	22ff      	movs	r2, #255	; 0xff
 8002682:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002688:	b2da      	uxtb	r2, r3
 800268a:	8979      	ldrh	r1, [r7, #10]
 800268c:	4b52      	ldr	r3, [pc, #328]	; (80027d8 <HAL_I2C_Mem_Read+0x22c>)
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 fac3 	bl	8002c20 <I2C_TransferConfig>
 800269a:	e00f      	b.n	80026bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	8979      	ldrh	r1, [r7, #10]
 80026ae:	4b4a      	ldr	r3, [pc, #296]	; (80027d8 <HAL_I2C_Mem_Read+0x22c>)
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 fab2 	bl	8002c20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c2:	2200      	movs	r2, #0
 80026c4:	2104      	movs	r1, #4
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f902 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e07c      	b.n	80027d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d034      	beq.n	800277c <HAL_I2C_Mem_Read+0x1d0>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002716:	2b00      	cmp	r3, #0
 8002718:	d130      	bne.n	800277c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002720:	2200      	movs	r2, #0
 8002722:	2180      	movs	r1, #128	; 0x80
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f8d3 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e04d      	b.n	80027d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	2bff      	cmp	r3, #255	; 0xff
 800273c:	d90e      	bls.n	800275c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	22ff      	movs	r2, #255	; 0xff
 8002742:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	b2da      	uxtb	r2, r3
 800274a:	8979      	ldrh	r1, [r7, #10]
 800274c:	2300      	movs	r3, #0
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fa63 	bl	8002c20 <I2C_TransferConfig>
 800275a:	e00f      	b.n	800277c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276a:	b2da      	uxtb	r2, r3
 800276c:	8979      	ldrh	r1, [r7, #10]
 800276e:	2300      	movs	r3, #0
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 fa52 	bl	8002c20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d19a      	bne.n	80026bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f920 	bl	80029d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e01a      	b.n	80027d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2220      	movs	r2, #32
 80027a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_I2C_Mem_Read+0x230>)
 80027ae:	400b      	ands	r3, r1
 80027b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	e000      	b.n	80027d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80027ce:	2302      	movs	r3, #2
  }
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	80002400 	.word	0x80002400
 80027dc:	fe00e800 	.word	0xfe00e800

080027e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	4608      	mov	r0, r1
 80027ea:	4611      	mov	r1, r2
 80027ec:	461a      	mov	r2, r3
 80027ee:	4603      	mov	r3, r0
 80027f0:	817b      	strh	r3, [r7, #10]
 80027f2:	460b      	mov	r3, r1
 80027f4:	813b      	strh	r3, [r7, #8]
 80027f6:	4613      	mov	r3, r2
 80027f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	8979      	ldrh	r1, [r7, #10]
 8002800:	4b20      	ldr	r3, [pc, #128]	; (8002884 <I2C_RequestMemoryRead+0xa4>)
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	2300      	movs	r3, #0
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 fa0a 	bl	8002c20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	69b9      	ldr	r1, [r7, #24]
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f89d 	bl	8002950 <I2C_WaitOnTXISFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e02c      	b.n	800287a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d105      	bne.n	8002832 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002826:	893b      	ldrh	r3, [r7, #8]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	629a      	str	r2, [r3, #40]	; 0x28
 8002830:	e015      	b.n	800285e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002832:	893b      	ldrh	r3, [r7, #8]
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	b29b      	uxth	r3, r3
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	69b9      	ldr	r1, [r7, #24]
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f883 	bl	8002950 <I2C_WaitOnTXISFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e012      	b.n	800287a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002854:	893b      	ldrh	r3, [r7, #8]
 8002856:	b2da      	uxtb	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	2200      	movs	r2, #0
 8002866:	2140      	movs	r1, #64	; 0x40
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f831 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	80002000 	.word	0x80002000

08002888 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b02      	cmp	r3, #2
 800289c:	d103      	bne.n	80028a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2200      	movs	r2, #0
 80028a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d007      	beq.n	80028c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699a      	ldr	r2, [r3, #24]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0201 	orr.w	r2, r2, #1
 80028c2:	619a      	str	r2, [r3, #24]
  }
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	4613      	mov	r3, r2
 80028de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e0:	e022      	b.n	8002928 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d01e      	beq.n	8002928 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ea:	f7ff fad5 	bl	8001e98 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d302      	bcc.n	8002900 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d113      	bne.n	8002928 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	f043 0220 	orr.w	r2, r3, #32
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e00f      	b.n	8002948 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	4013      	ands	r3, r2
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	429a      	cmp	r2, r3
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	429a      	cmp	r2, r3
 8002944:	d0cd      	beq.n	80028e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800295c:	e02c      	b.n	80029b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f870 	bl	8002a48 <I2C_IsErrorOccurred>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e02a      	b.n	80029c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d01e      	beq.n	80029b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297a:	f7ff fa8d 	bl	8001e98 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	429a      	cmp	r2, r3
 8002988:	d302      	bcc.n	8002990 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d113      	bne.n	80029b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002994:	f043 0220 	orr.w	r2, r3, #32
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e007      	b.n	80029c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d1cb      	bne.n	800295e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029dc:	e028      	b.n	8002a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f830 	bl	8002a48 <I2C_IsErrorOccurred>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e026      	b.n	8002a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f2:	f7ff fa51 	bl	8001e98 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d302      	bcc.n	8002a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d113      	bne.n	8002a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0c:	f043 0220 	orr.w	r2, r3, #32
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e007      	b.n	8002a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d1cf      	bne.n	80029de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d075      	beq.n	8002b60 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2210      	movs	r2, #16
 8002a7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a7c:	e056      	b.n	8002b2c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a84:	d052      	beq.n	8002b2c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a86:	f7ff fa07 	bl	8001e98 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <I2C_IsErrorOccurred+0x54>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d147      	bne.n	8002b2c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002aae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002abe:	d12e      	bne.n	8002b1e <I2C_IsErrorOccurred+0xd6>
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ac6:	d02a      	beq.n	8002b1e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d027      	beq.n	8002b1e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002adc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ade:	f7ff f9db 	bl	8001e98 <HAL_GetTick>
 8002ae2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ae4:	e01b      	b.n	8002b1e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ae6:	f7ff f9d7 	bl	8001e98 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b19      	cmp	r3, #25
 8002af2:	d914      	bls.n	8002b1e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af8:	f043 0220 	orr.w	r2, r3, #32
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d1dc      	bne.n	8002ae6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d003      	beq.n	8002b42 <I2C_IsErrorOccurred+0xfa>
 8002b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d09d      	beq.n	8002a7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d103      	bne.n	8002b52 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00b      	beq.n	8002bac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	f043 0308 	orr.w	r3, r3, #8
 8002b9a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ba4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d01c      	beq.n	8002c10 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f7ff fe56 	bl	8002888 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6859      	ldr	r1, [r3, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <I2C_IsErrorOccurred+0x1d4>)
 8002be8:	400b      	ands	r3, r1
 8002bea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3728      	adds	r7, #40	; 0x28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	fe00e800 	.word	0xfe00e800

08002c20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	817b      	strh	r3, [r7, #10]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c32:	897b      	ldrh	r3, [r7, #10]
 8002c34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c38:	7a7b      	ldrb	r3, [r7, #9]
 8002c3a:	041b      	lsls	r3, r3, #16
 8002c3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c40:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c4e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	0d5b      	lsrs	r3, r3, #21
 8002c5a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <I2C_TransferConfig+0x60>)
 8002c60:	430b      	orrs	r3, r1
 8002c62:	43db      	mvns	r3, r3
 8002c64:	ea02 0103 	and.w	r1, r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	03ff63ff 	.word	0x03ff63ff

08002c84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d138      	bne.n	8002d0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e032      	b.n	8002d0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2224      	movs	r2, #36	; 0x24
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6819      	ldr	r1, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e000      	b.n	8002d0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d0c:	2302      	movs	r3, #2
  }
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d139      	bne.n	8002da4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e033      	b.n	8002da6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2224      	movs	r2, #36	; 0x24
 8002d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e000      	b.n	8002da6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002da4:	2302      	movs	r3, #2
  }
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d141      	bne.n	8002e46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dc2:	4b4b      	ldr	r3, [pc, #300]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dce:	d131      	bne.n	8002e34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dd0:	4b47      	ldr	r3, [pc, #284]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd6:	4a46      	ldr	r2, [pc, #280]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ddc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002de0:	4b43      	ldr	r3, [pc, #268]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002de8:	4a41      	ldr	r2, [pc, #260]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002df0:	4b40      	ldr	r3, [pc, #256]	; (8002ef4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2232      	movs	r2, #50	; 0x32
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
 8002dfa:	4a3f      	ldr	r2, [pc, #252]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	0c9b      	lsrs	r3, r3, #18
 8002e02:	3301      	adds	r3, #1
 8002e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e06:	e002      	b.n	8002e0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e0e:	4b38      	ldr	r3, [pc, #224]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1a:	d102      	bne.n	8002e22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f2      	bne.n	8002e08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e22:	4b33      	ldr	r3, [pc, #204]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e2e:	d158      	bne.n	8002ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e057      	b.n	8002ee4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e34:	4b2e      	ldr	r3, [pc, #184]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e3a:	4a2d      	ldr	r2, [pc, #180]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e44:	e04d      	b.n	8002ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e4c:	d141      	bne.n	8002ed2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e4e:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5a:	d131      	bne.n	8002ec0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e5c:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e62:	4a23      	ldr	r2, [pc, #140]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e6c:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e74:	4a1e      	ldr	r2, [pc, #120]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2232      	movs	r2, #50	; 0x32
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	0c9b      	lsrs	r3, r3, #18
 8002e8e:	3301      	adds	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e92:	e002      	b.n	8002e9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea6:	d102      	bne.n	8002eae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f2      	bne.n	8002e94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eba:	d112      	bne.n	8002ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e011      	b.n	8002ee4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ec6:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ecc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ed0:	e007      	b.n	8002ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ed2:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002eda:	4a05      	ldr	r2, [pc, #20]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002edc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ee0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	431bde83 	.word	0x431bde83

08002efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e306      	b.n	800351c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d075      	beq.n	8003006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f1a:	4b97      	ldr	r3, [pc, #604]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f24:	4b94      	ldr	r3, [pc, #592]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	2b0c      	cmp	r3, #12
 8002f32:	d102      	bne.n	8002f3a <HAL_RCC_OscConfig+0x3e>
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d002      	beq.n	8002f40 <HAL_RCC_OscConfig+0x44>
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d10b      	bne.n	8002f58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f40:	4b8d      	ldr	r3, [pc, #564]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d05b      	beq.n	8003004 <HAL_RCC_OscConfig+0x108>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d157      	bne.n	8003004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e2e1      	b.n	800351c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f60:	d106      	bne.n	8002f70 <HAL_RCC_OscConfig+0x74>
 8002f62:	4b85      	ldr	r3, [pc, #532]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a84      	ldr	r2, [pc, #528]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	e01d      	b.n	8002fac <HAL_RCC_OscConfig+0xb0>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x98>
 8002f7a:	4b7f      	ldr	r3, [pc, #508]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a7e      	ldr	r2, [pc, #504]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8002f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b7c      	ldr	r3, [pc, #496]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a7b      	ldr	r2, [pc, #492]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e00b      	b.n	8002fac <HAL_RCC_OscConfig+0xb0>
 8002f94:	4b78      	ldr	r3, [pc, #480]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a77      	ldr	r2, [pc, #476]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8002f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b75      	ldr	r3, [pc, #468]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a74      	ldr	r2, [pc, #464]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8002fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d013      	beq.n	8002fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fe ff70 	bl	8001e98 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fbc:	f7fe ff6c 	bl	8001e98 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	; 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e2a6      	b.n	800351c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fce:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0xc0>
 8002fda:	e014      	b.n	8003006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe ff5c 	bl	8001e98 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fe ff58 	bl	8001e98 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e292      	b.n	800351c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ff6:	4b60      	ldr	r3, [pc, #384]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0xe8>
 8003002:	e000      	b.n	8003006 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d075      	beq.n	80030fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003012:	4b59      	ldr	r3, [pc, #356]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800301c:	4b56      	ldr	r3, [pc, #344]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	2b0c      	cmp	r3, #12
 800302a:	d102      	bne.n	8003032 <HAL_RCC_OscConfig+0x136>
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d002      	beq.n	8003038 <HAL_RCC_OscConfig+0x13c>
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2b04      	cmp	r3, #4
 8003036:	d11f      	bne.n	8003078 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003038:	4b4f      	ldr	r3, [pc, #316]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_RCC_OscConfig+0x154>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e265      	b.n	800351c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003050:	4b49      	ldr	r3, [pc, #292]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	061b      	lsls	r3, r3, #24
 800305e:	4946      	ldr	r1, [pc, #280]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003064:	4b45      	ldr	r3, [pc, #276]	; (800317c <HAL_RCC_OscConfig+0x280>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fe fec9 	bl	8001e00 <HAL_InitTick>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d043      	beq.n	80030fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e251      	b.n	800351c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d023      	beq.n	80030c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003080:	4b3d      	ldr	r3, [pc, #244]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a3c      	ldr	r2, [pc, #240]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8003086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7fe ff04 	bl	8001e98 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003094:	f7fe ff00 	bl	8001e98 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e23a      	b.n	800351c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030a6:	4b34      	ldr	r3, [pc, #208]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b2:	4b31      	ldr	r3, [pc, #196]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	061b      	lsls	r3, r3, #24
 80030c0:	492d      	ldr	r1, [pc, #180]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]
 80030c6:	e01a      	b.n	80030fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a2a      	ldr	r2, [pc, #168]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 80030ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7fe fee0 	bl	8001e98 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030dc:	f7fe fedc 	bl	8001e98 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e216      	b.n	800351c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030ee:	4b22      	ldr	r3, [pc, #136]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x1e0>
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d041      	beq.n	800318e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d01c      	beq.n	800314c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003112:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8003114:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003118:	4a17      	ldr	r2, [pc, #92]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003122:	f7fe feb9 	bl	8001e98 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312a:	f7fe feb5 	bl	8001e98 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e1ef      	b.n	800351c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800313c:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 800313e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0ef      	beq.n	800312a <HAL_RCC_OscConfig+0x22e>
 800314a:	e020      	b.n	800318e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314c:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 800314e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003152:	4a09      	ldr	r2, [pc, #36]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fe fe9c 	bl	8001e98 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003162:	e00d      	b.n	8003180 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003164:	f7fe fe98 	bl	8001e98 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d906      	bls.n	8003180 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e1d2      	b.n	800351c <HAL_RCC_OscConfig+0x620>
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
 800317c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003180:	4b8c      	ldr	r3, [pc, #560]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 8003182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1ea      	bne.n	8003164 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 80a6 	beq.w	80032e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800319c:	2300      	movs	r3, #0
 800319e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031a0:	4b84      	ldr	r3, [pc, #528]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 80031a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_OscConfig+0x2b4>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <HAL_RCC_OscConfig+0x2b6>
 80031b0:	2300      	movs	r3, #0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b6:	4b7f      	ldr	r3, [pc, #508]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	4a7e      	ldr	r2, [pc, #504]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 80031bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c0:	6593      	str	r3, [r2, #88]	; 0x58
 80031c2:	4b7c      	ldr	r3, [pc, #496]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031ce:	2301      	movs	r3, #1
 80031d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d2:	4b79      	ldr	r3, [pc, #484]	; (80033b8 <HAL_RCC_OscConfig+0x4bc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d118      	bne.n	8003210 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031de:	4b76      	ldr	r3, [pc, #472]	; (80033b8 <HAL_RCC_OscConfig+0x4bc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a75      	ldr	r2, [pc, #468]	; (80033b8 <HAL_RCC_OscConfig+0x4bc>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ea:	f7fe fe55 	bl	8001e98 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f2:	f7fe fe51 	bl	8001e98 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e18b      	b.n	800351c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003204:	4b6c      	ldr	r3, [pc, #432]	; (80033b8 <HAL_RCC_OscConfig+0x4bc>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d108      	bne.n	800322a <HAL_RCC_OscConfig+0x32e>
 8003218:	4b66      	ldr	r3, [pc, #408]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	4a65      	ldr	r2, [pc, #404]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003228:	e024      	b.n	8003274 <HAL_RCC_OscConfig+0x378>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b05      	cmp	r3, #5
 8003230:	d110      	bne.n	8003254 <HAL_RCC_OscConfig+0x358>
 8003232:	4b60      	ldr	r3, [pc, #384]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003238:	4a5e      	ldr	r2, [pc, #376]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 800323a:	f043 0304 	orr.w	r3, r3, #4
 800323e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003242:	4b5c      	ldr	r3, [pc, #368]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003248:	4a5a      	ldr	r2, [pc, #360]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003252:	e00f      	b.n	8003274 <HAL_RCC_OscConfig+0x378>
 8003254:	4b57      	ldr	r3, [pc, #348]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 8003256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325a:	4a56      	ldr	r2, [pc, #344]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003264:	4b53      	ldr	r3, [pc, #332]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	4a52      	ldr	r2, [pc, #328]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 800326c:	f023 0304 	bic.w	r3, r3, #4
 8003270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d016      	beq.n	80032aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327c:	f7fe fe0c 	bl	8001e98 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003282:	e00a      	b.n	800329a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003284:	f7fe fe08 	bl	8001e98 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e140      	b.n	800351c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800329a:	4b46      	ldr	r3, [pc, #280]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 800329c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ed      	beq.n	8003284 <HAL_RCC_OscConfig+0x388>
 80032a8:	e015      	b.n	80032d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032aa:	f7fe fdf5 	bl	8001e98 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032b0:	e00a      	b.n	80032c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b2:	f7fe fdf1 	bl	8001e98 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e129      	b.n	800351c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032c8:	4b3a      	ldr	r3, [pc, #232]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1ed      	bne.n	80032b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032d6:	7ffb      	ldrb	r3, [r7, #31]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d105      	bne.n	80032e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032dc:	4b35      	ldr	r3, [pc, #212]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 80032de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e0:	4a34      	ldr	r2, [pc, #208]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 80032e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d03c      	beq.n	800336e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01c      	beq.n	8003336 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032fc:	4b2d      	ldr	r3, [pc, #180]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 80032fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003302:	4a2c      	ldr	r2, [pc, #176]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7fe fdc4 	bl	8001e98 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003314:	f7fe fdc0 	bl	8001e98 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e0fa      	b.n	800351c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003326:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 8003328:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0ef      	beq.n	8003314 <HAL_RCC_OscConfig+0x418>
 8003334:	e01b      	b.n	800336e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003336:	4b1f      	ldr	r3, [pc, #124]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 8003338:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800333c:	4a1d      	ldr	r2, [pc, #116]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003346:	f7fe fda7 	bl	8001e98 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800334e:	f7fe fda3 	bl	8001e98 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e0dd      	b.n	800351c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003360:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 8003362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1ef      	bne.n	800334e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80d1 	beq.w	800351a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003378:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b0c      	cmp	r3, #12
 8003382:	f000 808b 	beq.w	800349c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d15e      	bne.n	800344c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338e:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a08      	ldr	r2, [pc, #32]	; (80033b4 <HAL_RCC_OscConfig+0x4b8>)
 8003394:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339a:	f7fe fd7d 	bl	8001e98 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a0:	e00c      	b.n	80033bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a2:	f7fe fd79 	bl	8001e98 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d905      	bls.n	80033bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e0b3      	b.n	800351c <HAL_RCC_OscConfig+0x620>
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033bc:	4b59      	ldr	r3, [pc, #356]	; (8003524 <HAL_RCC_OscConfig+0x628>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ec      	bne.n	80033a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033c8:	4b56      	ldr	r3, [pc, #344]	; (8003524 <HAL_RCC_OscConfig+0x628>)
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	4b56      	ldr	r3, [pc, #344]	; (8003528 <HAL_RCC_OscConfig+0x62c>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6a11      	ldr	r1, [r2, #32]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033d8:	3a01      	subs	r2, #1
 80033da:	0112      	lsls	r2, r2, #4
 80033dc:	4311      	orrs	r1, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80033e2:	0212      	lsls	r2, r2, #8
 80033e4:	4311      	orrs	r1, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033ea:	0852      	lsrs	r2, r2, #1
 80033ec:	3a01      	subs	r2, #1
 80033ee:	0552      	lsls	r2, r2, #21
 80033f0:	4311      	orrs	r1, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033f6:	0852      	lsrs	r2, r2, #1
 80033f8:	3a01      	subs	r2, #1
 80033fa:	0652      	lsls	r2, r2, #25
 80033fc:	4311      	orrs	r1, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003402:	06d2      	lsls	r2, r2, #27
 8003404:	430a      	orrs	r2, r1
 8003406:	4947      	ldr	r1, [pc, #284]	; (8003524 <HAL_RCC_OscConfig+0x628>)
 8003408:	4313      	orrs	r3, r2
 800340a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800340c:	4b45      	ldr	r3, [pc, #276]	; (8003524 <HAL_RCC_OscConfig+0x628>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a44      	ldr	r2, [pc, #272]	; (8003524 <HAL_RCC_OscConfig+0x628>)
 8003412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003416:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003418:	4b42      	ldr	r3, [pc, #264]	; (8003524 <HAL_RCC_OscConfig+0x628>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4a41      	ldr	r2, [pc, #260]	; (8003524 <HAL_RCC_OscConfig+0x628>)
 800341e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003422:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fe fd38 	bl	8001e98 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342c:	f7fe fd34 	bl	8001e98 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e06e      	b.n	800351c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800343e:	4b39      	ldr	r3, [pc, #228]	; (8003524 <HAL_RCC_OscConfig+0x628>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x530>
 800344a:	e066      	b.n	800351a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344c:	4b35      	ldr	r3, [pc, #212]	; (8003524 <HAL_RCC_OscConfig+0x628>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a34      	ldr	r2, [pc, #208]	; (8003524 <HAL_RCC_OscConfig+0x628>)
 8003452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003456:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003458:	4b32      	ldr	r3, [pc, #200]	; (8003524 <HAL_RCC_OscConfig+0x628>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4a31      	ldr	r2, [pc, #196]	; (8003524 <HAL_RCC_OscConfig+0x628>)
 800345e:	f023 0303 	bic.w	r3, r3, #3
 8003462:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003464:	4b2f      	ldr	r3, [pc, #188]	; (8003524 <HAL_RCC_OscConfig+0x628>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4a2e      	ldr	r2, [pc, #184]	; (8003524 <HAL_RCC_OscConfig+0x628>)
 800346a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800346e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003472:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fe fd10 	bl	8001e98 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347c:	f7fe fd0c 	bl	8001e98 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e046      	b.n	800351c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800348e:	4b25      	ldr	r3, [pc, #148]	; (8003524 <HAL_RCC_OscConfig+0x628>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x580>
 800349a:	e03e      	b.n	800351a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e039      	b.n	800351c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80034a8:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <HAL_RCC_OscConfig+0x628>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f003 0203 	and.w	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d12c      	bne.n	8003516 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	3b01      	subs	r3, #1
 80034c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d123      	bne.n	8003516 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034da:	429a      	cmp	r2, r3
 80034dc:	d11b      	bne.n	8003516 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d113      	bne.n	8003516 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f8:	085b      	lsrs	r3, r3, #1
 80034fa:	3b01      	subs	r3, #1
 80034fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034fe:	429a      	cmp	r2, r3
 8003500:	d109      	bne.n	8003516 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350c:	085b      	lsrs	r3, r3, #1
 800350e:	3b01      	subs	r3, #1
 8003510:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d001      	beq.n	800351a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3720      	adds	r7, #32
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000
 8003528:	019f800c 	.word	0x019f800c

0800352c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e11e      	b.n	8003782 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b91      	ldr	r3, [pc, #580]	; (800378c <HAL_RCC_ClockConfig+0x260>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d910      	bls.n	8003574 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b8e      	ldr	r3, [pc, #568]	; (800378c <HAL_RCC_ClockConfig+0x260>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 020f 	bic.w	r2, r3, #15
 800355a:	498c      	ldr	r1, [pc, #560]	; (800378c <HAL_RCC_ClockConfig+0x260>)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b8a      	ldr	r3, [pc, #552]	; (800378c <HAL_RCC_ClockConfig+0x260>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e106      	b.n	8003782 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d073      	beq.n	8003668 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b03      	cmp	r3, #3
 8003586:	d129      	bne.n	80035dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003588:	4b81      	ldr	r3, [pc, #516]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0f4      	b.n	8003782 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003598:	f000 f99e 	bl	80038d8 <RCC_GetSysClockFreqFromPLLSource>
 800359c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4a7c      	ldr	r2, [pc, #496]	; (8003794 <HAL_RCC_ClockConfig+0x268>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d93f      	bls.n	8003626 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035a6:	4b7a      	ldr	r3, [pc, #488]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d033      	beq.n	8003626 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d12f      	bne.n	8003626 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035c6:	4b72      	ldr	r3, [pc, #456]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ce:	4a70      	ldr	r2, [pc, #448]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 80035d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035d6:	2380      	movs	r3, #128	; 0x80
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e024      	b.n	8003626 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d107      	bne.n	80035f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e4:	4b6a      	ldr	r3, [pc, #424]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0c6      	b.n	8003782 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035f4:	4b66      	ldr	r3, [pc, #408]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0be      	b.n	8003782 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003604:	f000 f8ce 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8003608:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4a61      	ldr	r2, [pc, #388]	; (8003794 <HAL_RCC_ClockConfig+0x268>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d909      	bls.n	8003626 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003612:	4b5f      	ldr	r3, [pc, #380]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800361a:	4a5d      	ldr	r2, [pc, #372]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 800361c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003620:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003626:	4b5a      	ldr	r3, [pc, #360]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f023 0203 	bic.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4957      	ldr	r1, [pc, #348]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003634:	4313      	orrs	r3, r2
 8003636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003638:	f7fe fc2e 	bl	8001e98 <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	e00a      	b.n	8003656 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003640:	f7fe fc2a 	bl	8001e98 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	; 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e095      	b.n	8003782 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	4b4e      	ldr	r3, [pc, #312]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 020c 	and.w	r2, r3, #12
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	429a      	cmp	r2, r3
 8003666:	d1eb      	bne.n	8003640 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d023      	beq.n	80036bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003680:	4b43      	ldr	r3, [pc, #268]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4a42      	ldr	r2, [pc, #264]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003686:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800368a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d007      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003698:	4b3d      	ldr	r3, [pc, #244]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036a0:	4a3b      	ldr	r2, [pc, #236]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 80036a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a8:	4b39      	ldr	r3, [pc, #228]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	4936      	ldr	r1, [pc, #216]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
 80036ba:	e008      	b.n	80036ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b80      	cmp	r3, #128	; 0x80
 80036c0:	d105      	bne.n	80036ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036c2:	4b33      	ldr	r3, [pc, #204]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	4a32      	ldr	r2, [pc, #200]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 80036c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036ce:	4b2f      	ldr	r3, [pc, #188]	; (800378c <HAL_RCC_ClockConfig+0x260>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d21d      	bcs.n	8003718 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036dc:	4b2b      	ldr	r3, [pc, #172]	; (800378c <HAL_RCC_ClockConfig+0x260>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f023 020f 	bic.w	r2, r3, #15
 80036e4:	4929      	ldr	r1, [pc, #164]	; (800378c <HAL_RCC_ClockConfig+0x260>)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036ec:	f7fe fbd4 	bl	8001e98 <HAL_GetTick>
 80036f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f2:	e00a      	b.n	800370a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f4:	f7fe fbd0 	bl	8001e98 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e03b      	b.n	8003782 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800370a:	4b20      	ldr	r3, [pc, #128]	; (800378c <HAL_RCC_ClockConfig+0x260>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d1ed      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003724:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4917      	ldr	r1, [pc, #92]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003742:	4b13      	ldr	r3, [pc, #76]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	490f      	ldr	r1, [pc, #60]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003756:	f000 f825 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 800375a:	4602      	mov	r2, r0
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <HAL_RCC_ClockConfig+0x264>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	490c      	ldr	r1, [pc, #48]	; (8003798 <HAL_RCC_ClockConfig+0x26c>)
 8003768:	5ccb      	ldrb	r3, [r1, r3]
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	fa22 f303 	lsr.w	r3, r2, r3
 8003772:	4a0a      	ldr	r2, [pc, #40]	; (800379c <HAL_RCC_ClockConfig+0x270>)
 8003774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003776:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <HAL_RCC_ClockConfig+0x274>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe fb40 	bl	8001e00 <HAL_InitTick>
 8003780:	4603      	mov	r3, r0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40022000 	.word	0x40022000
 8003790:	40021000 	.word	0x40021000
 8003794:	04c4b400 	.word	0x04c4b400
 8003798:	08008e88 	.word	0x08008e88
 800379c:	20000000 	.word	0x20000000
 80037a0:	20000004 	.word	0x20000004

080037a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80037aa:	4b2c      	ldr	r3, [pc, #176]	; (800385c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d102      	bne.n	80037bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037b6:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	e047      	b.n	800384c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037bc:	4b27      	ldr	r3, [pc, #156]	; (800385c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 030c 	and.w	r3, r3, #12
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d102      	bne.n	80037ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037c8:	4b26      	ldr	r3, [pc, #152]	; (8003864 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	e03e      	b.n	800384c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80037ce:	4b23      	ldr	r3, [pc, #140]	; (800385c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b0c      	cmp	r3, #12
 80037d8:	d136      	bne.n	8003848 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037e4:	4b1d      	ldr	r3, [pc, #116]	; (800385c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	3301      	adds	r3, #1
 80037f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d10c      	bne.n	8003812 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037f8:	4a1a      	ldr	r2, [pc, #104]	; (8003864 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003800:	4a16      	ldr	r2, [pc, #88]	; (800385c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003802:	68d2      	ldr	r2, [r2, #12]
 8003804:	0a12      	lsrs	r2, r2, #8
 8003806:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	617b      	str	r3, [r7, #20]
      break;
 8003810:	e00c      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003812:	4a13      	ldr	r2, [pc, #76]	; (8003860 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	fbb2 f3f3 	udiv	r3, r2, r3
 800381a:	4a10      	ldr	r2, [pc, #64]	; (800385c <HAL_RCC_GetSysClockFreq+0xb8>)
 800381c:	68d2      	ldr	r2, [r2, #12]
 800381e:	0a12      	lsrs	r2, r2, #8
 8003820:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003824:	fb02 f303 	mul.w	r3, r2, r3
 8003828:	617b      	str	r3, [r7, #20]
      break;
 800382a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_RCC_GetSysClockFreq+0xb8>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	0e5b      	lsrs	r3, r3, #25
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	3301      	adds	r3, #1
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	fbb2 f3f3 	udiv	r3, r2, r3
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	e001      	b.n	800384c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800384c:	693b      	ldr	r3, [r7, #16]
}
 800384e:	4618      	mov	r0, r3
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40021000 	.word	0x40021000
 8003860:	00f42400 	.word	0x00f42400
 8003864:	007a1200 	.word	0x007a1200

08003868 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800386c:	4b03      	ldr	r3, [pc, #12]	; (800387c <HAL_RCC_GetHCLKFreq+0x14>)
 800386e:	681b      	ldr	r3, [r3, #0]
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20000000 	.word	0x20000000

08003880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003884:	f7ff fff0 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4904      	ldr	r1, [pc, #16]	; (80038a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40021000 	.word	0x40021000
 80038a8:	08008e98 	.word	0x08008e98

080038ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038b0:	f7ff ffda 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	0adb      	lsrs	r3, r3, #11
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4904      	ldr	r1, [pc, #16]	; (80038d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40021000 	.word	0x40021000
 80038d4:	08008e98 	.word	0x08008e98

080038d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038de:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038e8:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	3301      	adds	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d10c      	bne.n	8003916 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038fc:	4a17      	ldr	r2, [pc, #92]	; (800395c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	4a14      	ldr	r2, [pc, #80]	; (8003958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003906:	68d2      	ldr	r2, [r2, #12]
 8003908:	0a12      	lsrs	r2, r2, #8
 800390a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800390e:	fb02 f303 	mul.w	r3, r2, r3
 8003912:	617b      	str	r3, [r7, #20]
    break;
 8003914:	e00c      	b.n	8003930 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003916:	4a12      	ldr	r2, [pc, #72]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	fbb2 f3f3 	udiv	r3, r2, r3
 800391e:	4a0e      	ldr	r2, [pc, #56]	; (8003958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003920:	68d2      	ldr	r2, [r2, #12]
 8003922:	0a12      	lsrs	r2, r2, #8
 8003924:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003928:	fb02 f303 	mul.w	r3, r2, r3
 800392c:	617b      	str	r3, [r7, #20]
    break;
 800392e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	0e5b      	lsrs	r3, r3, #25
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	3301      	adds	r3, #1
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800394a:	687b      	ldr	r3, [r7, #4]
}
 800394c:	4618      	mov	r0, r3
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	40021000 	.word	0x40021000
 800395c:	007a1200 	.word	0x007a1200
 8003960:	00f42400 	.word	0x00f42400

08003964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800396c:	2300      	movs	r3, #0
 800396e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003970:	2300      	movs	r3, #0
 8003972:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 8098 	beq.w	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003982:	2300      	movs	r3, #0
 8003984:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003986:	4b43      	ldr	r3, [pc, #268]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10d      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003992:	4b40      	ldr	r3, [pc, #256]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	4a3f      	ldr	r2, [pc, #252]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399c:	6593      	str	r3, [r2, #88]	; 0x58
 800399e:	4b3d      	ldr	r3, [pc, #244]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039aa:	2301      	movs	r3, #1
 80039ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ae:	4b3a      	ldr	r3, [pc, #232]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a39      	ldr	r2, [pc, #228]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039ba:	f7fe fa6d 	bl	8001e98 <HAL_GetTick>
 80039be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039c0:	e009      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c2:	f7fe fa69 	bl	8001e98 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d902      	bls.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	74fb      	strb	r3, [r7, #19]
        break;
 80039d4:	e005      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039d6:	4b30      	ldr	r3, [pc, #192]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0ef      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80039e2:	7cfb      	ldrb	r3, [r7, #19]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d159      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039e8:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d01e      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d019      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a04:	4b23      	ldr	r3, [pc, #140]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a10:	4b20      	ldr	r3, [pc, #128]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a16:	4a1f      	ldr	r2, [pc, #124]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a20:	4b1c      	ldr	r3, [pc, #112]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a26:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a30:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d016      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a42:	f7fe fa29 	bl	8001e98 <HAL_GetTick>
 8003a46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a48:	e00b      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4a:	f7fe fa25 	bl	8001e98 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d902      	bls.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	74fb      	strb	r3, [r7, #19]
            break;
 8003a60:	e006      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a62:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0ec      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003a70:	7cfb      	ldrb	r3, [r7, #19]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10b      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a76:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	4903      	ldr	r1, [pc, #12]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a8e:	7cfb      	ldrb	r3, [r7, #19]
 8003a90:	74bb      	strb	r3, [r7, #18]
 8003a92:	e005      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003a94:	40021000 	.word	0x40021000
 8003a98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9c:	7cfb      	ldrb	r3, [r7, #19]
 8003a9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aa0:	7c7b      	ldrb	r3, [r7, #17]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d105      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa6:	4ba6      	ldr	r3, [pc, #664]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aaa:	4aa5      	ldr	r2, [pc, #660]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003abe:	4ba0      	ldr	r3, [pc, #640]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac4:	f023 0203 	bic.w	r2, r3, #3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	499c      	ldr	r1, [pc, #624]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ae0:	4b97      	ldr	r3, [pc, #604]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae6:	f023 020c 	bic.w	r2, r3, #12
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	4994      	ldr	r1, [pc, #592]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b02:	4b8f      	ldr	r3, [pc, #572]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	498b      	ldr	r1, [pc, #556]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b24:	4b86      	ldr	r3, [pc, #536]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	4983      	ldr	r1, [pc, #524]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b46:	4b7e      	ldr	r3, [pc, #504]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	497a      	ldr	r1, [pc, #488]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b68:	4b75      	ldr	r3, [pc, #468]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	4972      	ldr	r1, [pc, #456]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b8a:	4b6d      	ldr	r3, [pc, #436]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	4969      	ldr	r1, [pc, #420]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bac:	4b64      	ldr	r3, [pc, #400]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	4961      	ldr	r1, [pc, #388]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bce:	4b5c      	ldr	r3, [pc, #368]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	4958      	ldr	r1, [pc, #352]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d015      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bf0:	4b53      	ldr	r3, [pc, #332]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	4950      	ldr	r1, [pc, #320]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c0e:	d105      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c10:	4b4b      	ldr	r3, [pc, #300]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4a4a      	ldr	r2, [pc, #296]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d015      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c28:	4b45      	ldr	r3, [pc, #276]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	4942      	ldr	r1, [pc, #264]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c46:	d105      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c48:	4b3d      	ldr	r3, [pc, #244]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4a3c      	ldr	r2, [pc, #240]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c52:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d015      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c60:	4b37      	ldr	r3, [pc, #220]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	4934      	ldr	r1, [pc, #208]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c7e:	d105      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c80:	4b2f      	ldr	r3, [pc, #188]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4a2e      	ldr	r2, [pc, #184]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d015      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c98:	4b29      	ldr	r3, [pc, #164]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca6:	4926      	ldr	r1, [pc, #152]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cb6:	d105      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cb8:	4b21      	ldr	r3, [pc, #132]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4a20      	ldr	r2, [pc, #128]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cc2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d015      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	4918      	ldr	r1, [pc, #96]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cee:	d105      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cf0:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4a12      	ldr	r2, [pc, #72]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cfa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d015      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d08:	4b0d      	ldr	r3, [pc, #52]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d16:	490a      	ldr	r1, [pc, #40]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d26:	d105      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	4a04      	ldr	r2, [pc, #16]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d34:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40021000 	.word	0x40021000

08003d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e049      	b.n	8003dea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fd fd94 	bl	8001898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	4619      	mov	r1, r3
 8003d82:	4610      	mov	r0, r2
 8003d84:	f000 fe8a 	bl	8004a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e049      	b.n	8003e98 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d106      	bne.n	8003e1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f841 	bl	8003ea0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2202      	movs	r2, #2
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4610      	mov	r0, r2
 8003e32:	f000 fe33 	bl	8004a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d109      	bne.n	8003ed8 <HAL_TIM_PWM_Start+0x24>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	bf14      	ite	ne
 8003ed0:	2301      	movne	r3, #1
 8003ed2:	2300      	moveq	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	e03c      	b.n	8003f52 <HAL_TIM_PWM_Start+0x9e>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d109      	bne.n	8003ef2 <HAL_TIM_PWM_Start+0x3e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	bf14      	ite	ne
 8003eea:	2301      	movne	r3, #1
 8003eec:	2300      	moveq	r3, #0
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	e02f      	b.n	8003f52 <HAL_TIM_PWM_Start+0x9e>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d109      	bne.n	8003f0c <HAL_TIM_PWM_Start+0x58>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	bf14      	ite	ne
 8003f04:	2301      	movne	r3, #1
 8003f06:	2300      	moveq	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	e022      	b.n	8003f52 <HAL_TIM_PWM_Start+0x9e>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b0c      	cmp	r3, #12
 8003f10:	d109      	bne.n	8003f26 <HAL_TIM_PWM_Start+0x72>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	bf14      	ite	ne
 8003f1e:	2301      	movne	r3, #1
 8003f20:	2300      	moveq	r3, #0
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	e015      	b.n	8003f52 <HAL_TIM_PWM_Start+0x9e>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d109      	bne.n	8003f40 <HAL_TIM_PWM_Start+0x8c>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	bf14      	ite	ne
 8003f38:	2301      	movne	r3, #1
 8003f3a:	2300      	moveq	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	e008      	b.n	8003f52 <HAL_TIM_PWM_Start+0x9e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	bf14      	ite	ne
 8003f4c:	2301      	movne	r3, #1
 8003f4e:	2300      	moveq	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e097      	b.n	800408a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d104      	bne.n	8003f6a <HAL_TIM_PWM_Start+0xb6>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f68:	e023      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xfe>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d104      	bne.n	8003f7a <HAL_TIM_PWM_Start+0xc6>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f78:	e01b      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xfe>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d104      	bne.n	8003f8a <HAL_TIM_PWM_Start+0xd6>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f88:	e013      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xfe>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b0c      	cmp	r3, #12
 8003f8e:	d104      	bne.n	8003f9a <HAL_TIM_PWM_Start+0xe6>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f98:	e00b      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xfe>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b10      	cmp	r3, #16
 8003f9e:	d104      	bne.n	8003faa <HAL_TIM_PWM_Start+0xf6>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa8:	e003      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xfe>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2202      	movs	r2, #2
 8003fae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	6839      	ldr	r1, [r7, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f001 f990 	bl	80052e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a33      	ldr	r2, [pc, #204]	; (8004094 <HAL_TIM_PWM_Start+0x1e0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0x13e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a32      	ldr	r2, [pc, #200]	; (8004098 <HAL_TIM_PWM_Start+0x1e4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00e      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0x13e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a30      	ldr	r2, [pc, #192]	; (800409c <HAL_TIM_PWM_Start+0x1e8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d009      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0x13e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a2f      	ldr	r2, [pc, #188]	; (80040a0 <HAL_TIM_PWM_Start+0x1ec>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d004      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0x13e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a2d      	ldr	r2, [pc, #180]	; (80040a4 <HAL_TIM_PWM_Start+0x1f0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d101      	bne.n	8003ff6 <HAL_TIM_PWM_Start+0x142>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <HAL_TIM_PWM_Start+0x144>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800400a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a20      	ldr	r2, [pc, #128]	; (8004094 <HAL_TIM_PWM_Start+0x1e0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d018      	beq.n	8004048 <HAL_TIM_PWM_Start+0x194>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401e:	d013      	beq.n	8004048 <HAL_TIM_PWM_Start+0x194>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a20      	ldr	r2, [pc, #128]	; (80040a8 <HAL_TIM_PWM_Start+0x1f4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00e      	beq.n	8004048 <HAL_TIM_PWM_Start+0x194>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1f      	ldr	r2, [pc, #124]	; (80040ac <HAL_TIM_PWM_Start+0x1f8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d009      	beq.n	8004048 <HAL_TIM_PWM_Start+0x194>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a17      	ldr	r2, [pc, #92]	; (8004098 <HAL_TIM_PWM_Start+0x1e4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <HAL_TIM_PWM_Start+0x194>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a16      	ldr	r2, [pc, #88]	; (800409c <HAL_TIM_PWM_Start+0x1e8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d115      	bne.n	8004074 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	4b18      	ldr	r3, [pc, #96]	; (80040b0 <HAL_TIM_PWM_Start+0x1fc>)
 8004050:	4013      	ands	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b06      	cmp	r3, #6
 8004058:	d015      	beq.n	8004086 <HAL_TIM_PWM_Start+0x1d2>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004060:	d011      	beq.n	8004086 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0201 	orr.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004072:	e008      	b.n	8004086 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	e000      	b.n	8004088 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004086:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40012c00 	.word	0x40012c00
 8004098:	40013400 	.word	0x40013400
 800409c:	40014000 	.word	0x40014000
 80040a0:	40014400 	.word	0x40014400
 80040a4:	40014800 	.word	0x40014800
 80040a8:	40000400 	.word	0x40000400
 80040ac:	40000800 	.word	0x40000800
 80040b0:	00010007 	.word	0x00010007

080040b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e097      	b.n	80041f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d106      	bne.n	80040e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7fd fc41 	bl	8001964 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2202      	movs	r2, #2
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80040f8:	f023 0307 	bic.w	r3, r3, #7
 80040fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3304      	adds	r3, #4
 8004106:	4619      	mov	r1, r3
 8004108:	4610      	mov	r0, r2
 800410a:	f000 fcc7 	bl	8004a9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004136:	f023 0303 	bic.w	r3, r3, #3
 800413a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	021b      	lsls	r3, r3, #8
 8004146:	4313      	orrs	r3, r2
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004154:	f023 030c 	bic.w	r3, r3, #12
 8004158:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004160:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004164:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	4313      	orrs	r3, r2
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	011a      	lsls	r2, r3, #4
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	031b      	lsls	r3, r3, #12
 8004184:	4313      	orrs	r3, r2
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004192:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800419a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	4313      	orrs	r3, r2
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004210:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004218:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004220:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004228:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d110      	bne.n	8004252 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d102      	bne.n	800423c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004236:	7b7b      	ldrb	r3, [r7, #13]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d001      	beq.n	8004240 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e069      	b.n	8004314 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004250:	e031      	b.n	80042b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b04      	cmp	r3, #4
 8004256:	d110      	bne.n	800427a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004258:	7bbb      	ldrb	r3, [r7, #14]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d102      	bne.n	8004264 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800425e:	7b3b      	ldrb	r3, [r7, #12]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d001      	beq.n	8004268 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e055      	b.n	8004314 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004278:	e01d      	b.n	80042b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d108      	bne.n	8004292 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004280:	7bbb      	ldrb	r3, [r7, #14]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d105      	bne.n	8004292 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004286:	7b7b      	ldrb	r3, [r7, #13]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d102      	bne.n	8004292 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800428c:	7b3b      	ldrb	r3, [r7, #12]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d001      	beq.n	8004296 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e03e      	b.n	8004314 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2202      	movs	r2, #2
 800429a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2202      	movs	r2, #2
 80042a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2202      	movs	r2, #2
 80042aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2202      	movs	r2, #2
 80042b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_TIM_Encoder_Start+0xc4>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d008      	beq.n	80042d4 <HAL_TIM_Encoder_Start+0xd4>
 80042c2:	e00f      	b.n	80042e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2201      	movs	r2, #1
 80042ca:	2100      	movs	r1, #0
 80042cc:	4618      	mov	r0, r3
 80042ce:	f001 f807 	bl	80052e0 <TIM_CCxChannelCmd>
      break;
 80042d2:	e016      	b.n	8004302 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2201      	movs	r2, #1
 80042da:	2104      	movs	r1, #4
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 ffff 	bl	80052e0 <TIM_CCxChannelCmd>
      break;
 80042e2:	e00e      	b.n	8004302 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2201      	movs	r2, #1
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fff7 	bl	80052e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2201      	movs	r2, #1
 80042f8:	2104      	movs	r1, #4
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fff0 	bl	80052e0 <TIM_CCxChannelCmd>
      break;
 8004300:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b02      	cmp	r3, #2
 8004330:	d122      	bne.n	8004378 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b02      	cmp	r3, #2
 800433e:	d11b      	bne.n	8004378 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0202 	mvn.w	r2, #2
 8004348:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fb7e 	bl	8004a60 <HAL_TIM_IC_CaptureCallback>
 8004364:	e005      	b.n	8004372 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fb70 	bl	8004a4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fb81 	bl	8004a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b04      	cmp	r3, #4
 8004384:	d122      	bne.n	80043cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b04      	cmp	r3, #4
 8004392:	d11b      	bne.n	80043cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0204 	mvn.w	r2, #4
 800439c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fb54 	bl	8004a60 <HAL_TIM_IC_CaptureCallback>
 80043b8:	e005      	b.n	80043c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fb46 	bl	8004a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fb57 	bl	8004a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d122      	bne.n	8004420 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0308 	and.w	r3, r3, #8
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d11b      	bne.n	8004420 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0208 	mvn.w	r2, #8
 80043f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2204      	movs	r2, #4
 80043f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fb2a 	bl	8004a60 <HAL_TIM_IC_CaptureCallback>
 800440c:	e005      	b.n	800441a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fb1c 	bl	8004a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fb2d 	bl	8004a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0310 	and.w	r3, r3, #16
 800442a:	2b10      	cmp	r3, #16
 800442c:	d122      	bne.n	8004474 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b10      	cmp	r3, #16
 800443a:	d11b      	bne.n	8004474 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0210 	mvn.w	r2, #16
 8004444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2208      	movs	r2, #8
 800444a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fb00 	bl	8004a60 <HAL_TIM_IC_CaptureCallback>
 8004460:	e005      	b.n	800446e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 faf2 	bl	8004a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fb03 	bl	8004a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b01      	cmp	r3, #1
 8004480:	d10e      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b01      	cmp	r3, #1
 800448e:	d107      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0201 	mvn.w	r2, #1
 8004498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 facc 	bl	8004a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044aa:	2b80      	cmp	r3, #128	; 0x80
 80044ac:	d10e      	bne.n	80044cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b8:	2b80      	cmp	r3, #128	; 0x80
 80044ba:	d107      	bne.n	80044cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f001 f910 	bl	80056ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044da:	d10e      	bne.n	80044fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e6:	2b80      	cmp	r3, #128	; 0x80
 80044e8:	d107      	bne.n	80044fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f001 f903 	bl	8005700 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004504:	2b40      	cmp	r3, #64	; 0x40
 8004506:	d10e      	bne.n	8004526 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d107      	bne.n	8004526 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800451e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fab1 	bl	8004a88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f003 0320 	and.w	r3, r3, #32
 8004530:	2b20      	cmp	r3, #32
 8004532:	d10e      	bne.n	8004552 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b20      	cmp	r3, #32
 8004540:	d107      	bne.n	8004552 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f06f 0220 	mvn.w	r2, #32
 800454a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f001 f8c3 	bl	80056d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800455c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004560:	d10f      	bne.n	8004582 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800456c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004570:	d107      	bne.n	8004582 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800457a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f001 f8c9 	bl	8005714 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800458c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004590:	d10f      	bne.n	80045b2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800459c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045a0:	d107      	bne.n	80045b2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80045aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f001 f8bb 	bl	8005728 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045c0:	d10f      	bne.n	80045e2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045d0:	d107      	bne.n	80045e2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80045da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f001 f8ad 	bl	800573c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045f0:	d10f      	bne.n	8004612 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004600:	d107      	bne.n	8004612 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800460a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f001 f89f 	bl	8005750 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004636:	2302      	movs	r3, #2
 8004638:	e0ff      	b.n	800483a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b14      	cmp	r3, #20
 8004646:	f200 80f0 	bhi.w	800482a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800464a:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	080046a5 	.word	0x080046a5
 8004654:	0800482b 	.word	0x0800482b
 8004658:	0800482b 	.word	0x0800482b
 800465c:	0800482b 	.word	0x0800482b
 8004660:	080046e5 	.word	0x080046e5
 8004664:	0800482b 	.word	0x0800482b
 8004668:	0800482b 	.word	0x0800482b
 800466c:	0800482b 	.word	0x0800482b
 8004670:	08004727 	.word	0x08004727
 8004674:	0800482b 	.word	0x0800482b
 8004678:	0800482b 	.word	0x0800482b
 800467c:	0800482b 	.word	0x0800482b
 8004680:	08004767 	.word	0x08004767
 8004684:	0800482b 	.word	0x0800482b
 8004688:	0800482b 	.word	0x0800482b
 800468c:	0800482b 	.word	0x0800482b
 8004690:	080047a9 	.word	0x080047a9
 8004694:	0800482b 	.word	0x0800482b
 8004698:	0800482b 	.word	0x0800482b
 800469c:	0800482b 	.word	0x0800482b
 80046a0:	080047e9 	.word	0x080047e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fa86 	bl	8004bbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0208 	orr.w	r2, r2, #8
 80046be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0204 	bic.w	r2, r2, #4
 80046ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6999      	ldr	r1, [r3, #24]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	619a      	str	r2, [r3, #24]
      break;
 80046e2:	e0a5      	b.n	8004830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 faf6 	bl	8004cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6999      	ldr	r1, [r3, #24]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	021a      	lsls	r2, r3, #8
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	619a      	str	r2, [r3, #24]
      break;
 8004724:	e084      	b.n	8004830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fb5f 	bl	8004df0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69da      	ldr	r2, [r3, #28]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0208 	orr.w	r2, r2, #8
 8004740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0204 	bic.w	r2, r2, #4
 8004750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69d9      	ldr	r1, [r3, #28]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	61da      	str	r2, [r3, #28]
      break;
 8004764:	e064      	b.n	8004830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fbc7 	bl	8004f00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69d9      	ldr	r1, [r3, #28]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	021a      	lsls	r2, r3, #8
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	61da      	str	r2, [r3, #28]
      break;
 80047a6:	e043      	b.n	8004830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fc30 	bl	8005014 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0208 	orr.w	r2, r2, #8
 80047c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0204 	bic.w	r2, r2, #4
 80047d2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80047e6:	e023      	b.n	8004830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fc74 	bl	80050dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004802:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004812:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	021a      	lsls	r2, r3, #8
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004828:	e002      	b.n	8004830 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	75fb      	strb	r3, [r7, #23]
      break;
 800482e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004838:	7dfb      	ldrb	r3, [r7, #23]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop

08004844 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_TIM_ConfigClockSource+0x1c>
 800485c:	2302      	movs	r3, #2
 800485e:	e0de      	b.n	8004a1e <HAL_TIM_ConfigClockSource+0x1da>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800487e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800488a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a63      	ldr	r2, [pc, #396]	; (8004a28 <HAL_TIM_ConfigClockSource+0x1e4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	f000 80a9 	beq.w	80049f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80048a0:	4a61      	ldr	r2, [pc, #388]	; (8004a28 <HAL_TIM_ConfigClockSource+0x1e4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	f200 80ae 	bhi.w	8004a04 <HAL_TIM_ConfigClockSource+0x1c0>
 80048a8:	4a60      	ldr	r2, [pc, #384]	; (8004a2c <HAL_TIM_ConfigClockSource+0x1e8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	f000 80a1 	beq.w	80049f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80048b0:	4a5e      	ldr	r2, [pc, #376]	; (8004a2c <HAL_TIM_ConfigClockSource+0x1e8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	f200 80a6 	bhi.w	8004a04 <HAL_TIM_ConfigClockSource+0x1c0>
 80048b8:	4a5d      	ldr	r2, [pc, #372]	; (8004a30 <HAL_TIM_ConfigClockSource+0x1ec>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	f000 8099 	beq.w	80049f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80048c0:	4a5b      	ldr	r2, [pc, #364]	; (8004a30 <HAL_TIM_ConfigClockSource+0x1ec>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	f200 809e 	bhi.w	8004a04 <HAL_TIM_ConfigClockSource+0x1c0>
 80048c8:	4a5a      	ldr	r2, [pc, #360]	; (8004a34 <HAL_TIM_ConfigClockSource+0x1f0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	f000 8091 	beq.w	80049f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80048d0:	4a58      	ldr	r2, [pc, #352]	; (8004a34 <HAL_TIM_ConfigClockSource+0x1f0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	f200 8096 	bhi.w	8004a04 <HAL_TIM_ConfigClockSource+0x1c0>
 80048d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80048dc:	f000 8089 	beq.w	80049f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80048e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80048e4:	f200 808e 	bhi.w	8004a04 <HAL_TIM_ConfigClockSource+0x1c0>
 80048e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ec:	d03e      	beq.n	800496c <HAL_TIM_ConfigClockSource+0x128>
 80048ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f2:	f200 8087 	bhi.w	8004a04 <HAL_TIM_ConfigClockSource+0x1c0>
 80048f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048fa:	f000 8086 	beq.w	8004a0a <HAL_TIM_ConfigClockSource+0x1c6>
 80048fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004902:	d87f      	bhi.n	8004a04 <HAL_TIM_ConfigClockSource+0x1c0>
 8004904:	2b70      	cmp	r3, #112	; 0x70
 8004906:	d01a      	beq.n	800493e <HAL_TIM_ConfigClockSource+0xfa>
 8004908:	2b70      	cmp	r3, #112	; 0x70
 800490a:	d87b      	bhi.n	8004a04 <HAL_TIM_ConfigClockSource+0x1c0>
 800490c:	2b60      	cmp	r3, #96	; 0x60
 800490e:	d050      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0x16e>
 8004910:	2b60      	cmp	r3, #96	; 0x60
 8004912:	d877      	bhi.n	8004a04 <HAL_TIM_ConfigClockSource+0x1c0>
 8004914:	2b50      	cmp	r3, #80	; 0x50
 8004916:	d03c      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0x14e>
 8004918:	2b50      	cmp	r3, #80	; 0x50
 800491a:	d873      	bhi.n	8004a04 <HAL_TIM_ConfigClockSource+0x1c0>
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d058      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x18e>
 8004920:	2b40      	cmp	r3, #64	; 0x40
 8004922:	d86f      	bhi.n	8004a04 <HAL_TIM_ConfigClockSource+0x1c0>
 8004924:	2b30      	cmp	r3, #48	; 0x30
 8004926:	d064      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004928:	2b30      	cmp	r3, #48	; 0x30
 800492a:	d86b      	bhi.n	8004a04 <HAL_TIM_ConfigClockSource+0x1c0>
 800492c:	2b20      	cmp	r3, #32
 800492e:	d060      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004930:	2b20      	cmp	r3, #32
 8004932:	d867      	bhi.n	8004a04 <HAL_TIM_ConfigClockSource+0x1c0>
 8004934:	2b00      	cmp	r3, #0
 8004936:	d05c      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004938:	2b10      	cmp	r3, #16
 800493a:	d05a      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x1ae>
 800493c:	e062      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	6899      	ldr	r1, [r3, #8]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f000 fca7 	bl	80052a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004960:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	609a      	str	r2, [r3, #8]
      break;
 800496a:	e04f      	b.n	8004a0c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	6899      	ldr	r1, [r3, #8]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f000 fc90 	bl	80052a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800498e:	609a      	str	r2, [r3, #8]
      break;
 8004990:	e03c      	b.n	8004a0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6818      	ldr	r0, [r3, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	6859      	ldr	r1, [r3, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	461a      	mov	r2, r3
 80049a0:	f000 fc02 	bl	80051a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2150      	movs	r1, #80	; 0x50
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fc5b 	bl	8005266 <TIM_ITRx_SetConfig>
      break;
 80049b0:	e02c      	b.n	8004a0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6818      	ldr	r0, [r3, #0]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	6859      	ldr	r1, [r3, #4]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	461a      	mov	r2, r3
 80049c0:	f000 fc21 	bl	8005206 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2160      	movs	r1, #96	; 0x60
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fc4b 	bl	8005266 <TIM_ITRx_SetConfig>
      break;
 80049d0:	e01c      	b.n	8004a0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6859      	ldr	r1, [r3, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	461a      	mov	r2, r3
 80049e0:	f000 fbe2 	bl	80051a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2140      	movs	r1, #64	; 0x40
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fc3b 	bl	8005266 <TIM_ITRx_SetConfig>
      break;
 80049f0:	e00c      	b.n	8004a0c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4619      	mov	r1, r3
 80049fc:	4610      	mov	r0, r2
 80049fe:	f000 fc32 	bl	8005266 <TIM_ITRx_SetConfig>
      break;
 8004a02:	e003      	b.n	8004a0c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
      break;
 8004a08:	e000      	b.n	8004a0c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004a0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	00100070 	.word	0x00100070
 8004a2c:	00100040 	.word	0x00100040
 8004a30:	00100030 	.word	0x00100030
 8004a34:	00100020 	.word	0x00100020

08004a38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a3c      	ldr	r2, [pc, #240]	; (8004ba0 <TIM_Base_SetConfig+0x104>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00f      	beq.n	8004ad4 <TIM_Base_SetConfig+0x38>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aba:	d00b      	beq.n	8004ad4 <TIM_Base_SetConfig+0x38>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a39      	ldr	r2, [pc, #228]	; (8004ba4 <TIM_Base_SetConfig+0x108>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d007      	beq.n	8004ad4 <TIM_Base_SetConfig+0x38>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a38      	ldr	r2, [pc, #224]	; (8004ba8 <TIM_Base_SetConfig+0x10c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d003      	beq.n	8004ad4 <TIM_Base_SetConfig+0x38>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a37      	ldr	r2, [pc, #220]	; (8004bac <TIM_Base_SetConfig+0x110>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d108      	bne.n	8004ae6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a2d      	ldr	r2, [pc, #180]	; (8004ba0 <TIM_Base_SetConfig+0x104>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d01b      	beq.n	8004b26 <TIM_Base_SetConfig+0x8a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af4:	d017      	beq.n	8004b26 <TIM_Base_SetConfig+0x8a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a2a      	ldr	r2, [pc, #168]	; (8004ba4 <TIM_Base_SetConfig+0x108>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d013      	beq.n	8004b26 <TIM_Base_SetConfig+0x8a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a29      	ldr	r2, [pc, #164]	; (8004ba8 <TIM_Base_SetConfig+0x10c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00f      	beq.n	8004b26 <TIM_Base_SetConfig+0x8a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a28      	ldr	r2, [pc, #160]	; (8004bac <TIM_Base_SetConfig+0x110>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00b      	beq.n	8004b26 <TIM_Base_SetConfig+0x8a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a27      	ldr	r2, [pc, #156]	; (8004bb0 <TIM_Base_SetConfig+0x114>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d007      	beq.n	8004b26 <TIM_Base_SetConfig+0x8a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a26      	ldr	r2, [pc, #152]	; (8004bb4 <TIM_Base_SetConfig+0x118>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d003      	beq.n	8004b26 <TIM_Base_SetConfig+0x8a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a25      	ldr	r2, [pc, #148]	; (8004bb8 <TIM_Base_SetConfig+0x11c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d108      	bne.n	8004b38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a10      	ldr	r2, [pc, #64]	; (8004ba0 <TIM_Base_SetConfig+0x104>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00f      	beq.n	8004b84 <TIM_Base_SetConfig+0xe8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a11      	ldr	r2, [pc, #68]	; (8004bac <TIM_Base_SetConfig+0x110>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00b      	beq.n	8004b84 <TIM_Base_SetConfig+0xe8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a10      	ldr	r2, [pc, #64]	; (8004bb0 <TIM_Base_SetConfig+0x114>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d007      	beq.n	8004b84 <TIM_Base_SetConfig+0xe8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a0f      	ldr	r2, [pc, #60]	; (8004bb4 <TIM_Base_SetConfig+0x118>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_Base_SetConfig+0xe8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a0e      	ldr	r2, [pc, #56]	; (8004bb8 <TIM_Base_SetConfig+0x11c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d103      	bne.n	8004b8c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	615a      	str	r2, [r3, #20]
}
 8004b92:	bf00      	nop
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40012c00 	.word	0x40012c00
 8004ba4:	40000400 	.word	0x40000400
 8004ba8:	40000800 	.word	0x40000800
 8004bac:	40013400 	.word	0x40013400
 8004bb0:	40014000 	.word	0x40014000
 8004bb4:	40014400 	.word	0x40014400
 8004bb8:	40014800 	.word	0x40014800

08004bbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	f023 0201 	bic.w	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0303 	bic.w	r3, r3, #3
 8004bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f023 0302 	bic.w	r3, r3, #2
 8004c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a2c      	ldr	r2, [pc, #176]	; (8004cc8 <TIM_OC1_SetConfig+0x10c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00f      	beq.n	8004c3c <TIM_OC1_SetConfig+0x80>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a2b      	ldr	r2, [pc, #172]	; (8004ccc <TIM_OC1_SetConfig+0x110>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00b      	beq.n	8004c3c <TIM_OC1_SetConfig+0x80>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a2a      	ldr	r2, [pc, #168]	; (8004cd0 <TIM_OC1_SetConfig+0x114>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d007      	beq.n	8004c3c <TIM_OC1_SetConfig+0x80>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a29      	ldr	r2, [pc, #164]	; (8004cd4 <TIM_OC1_SetConfig+0x118>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d003      	beq.n	8004c3c <TIM_OC1_SetConfig+0x80>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <TIM_OC1_SetConfig+0x11c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d10c      	bne.n	8004c56 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f023 0308 	bic.w	r3, r3, #8
 8004c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f023 0304 	bic.w	r3, r3, #4
 8004c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a1b      	ldr	r2, [pc, #108]	; (8004cc8 <TIM_OC1_SetConfig+0x10c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00f      	beq.n	8004c7e <TIM_OC1_SetConfig+0xc2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a1a      	ldr	r2, [pc, #104]	; (8004ccc <TIM_OC1_SetConfig+0x110>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00b      	beq.n	8004c7e <TIM_OC1_SetConfig+0xc2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a19      	ldr	r2, [pc, #100]	; (8004cd0 <TIM_OC1_SetConfig+0x114>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d007      	beq.n	8004c7e <TIM_OC1_SetConfig+0xc2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a18      	ldr	r2, [pc, #96]	; (8004cd4 <TIM_OC1_SetConfig+0x118>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d003      	beq.n	8004c7e <TIM_OC1_SetConfig+0xc2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a17      	ldr	r2, [pc, #92]	; (8004cd8 <TIM_OC1_SetConfig+0x11c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d111      	bne.n	8004ca2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	621a      	str	r2, [r3, #32]
}
 8004cbc:	bf00      	nop
 8004cbe:	371c      	adds	r7, #28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40013400 	.word	0x40013400
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40014400 	.word	0x40014400
 8004cd8:	40014800 	.word	0x40014800

08004cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	f023 0210 	bic.w	r2, r3, #16
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f023 0320 	bic.w	r3, r3, #32
 8004d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a28      	ldr	r2, [pc, #160]	; (8004ddc <TIM_OC2_SetConfig+0x100>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <TIM_OC2_SetConfig+0x6c>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a27      	ldr	r2, [pc, #156]	; (8004de0 <TIM_OC2_SetConfig+0x104>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d10d      	bne.n	8004d64 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a1d      	ldr	r2, [pc, #116]	; (8004ddc <TIM_OC2_SetConfig+0x100>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00f      	beq.n	8004d8c <TIM_OC2_SetConfig+0xb0>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a1c      	ldr	r2, [pc, #112]	; (8004de0 <TIM_OC2_SetConfig+0x104>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00b      	beq.n	8004d8c <TIM_OC2_SetConfig+0xb0>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a1b      	ldr	r2, [pc, #108]	; (8004de4 <TIM_OC2_SetConfig+0x108>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d007      	beq.n	8004d8c <TIM_OC2_SetConfig+0xb0>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a1a      	ldr	r2, [pc, #104]	; (8004de8 <TIM_OC2_SetConfig+0x10c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d003      	beq.n	8004d8c <TIM_OC2_SetConfig+0xb0>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a19      	ldr	r2, [pc, #100]	; (8004dec <TIM_OC2_SetConfig+0x110>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d113      	bne.n	8004db4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	621a      	str	r2, [r3, #32]
}
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40012c00 	.word	0x40012c00
 8004de0:	40013400 	.word	0x40013400
 8004de4:	40014000 	.word	0x40014000
 8004de8:	40014400 	.word	0x40014400
 8004dec:	40014800 	.word	0x40014800

08004df0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0303 	bic.w	r3, r3, #3
 8004e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a27      	ldr	r2, [pc, #156]	; (8004eec <TIM_OC3_SetConfig+0xfc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d003      	beq.n	8004e5a <TIM_OC3_SetConfig+0x6a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a26      	ldr	r2, [pc, #152]	; (8004ef0 <TIM_OC3_SetConfig+0x100>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d10d      	bne.n	8004e76 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a1c      	ldr	r2, [pc, #112]	; (8004eec <TIM_OC3_SetConfig+0xfc>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00f      	beq.n	8004e9e <TIM_OC3_SetConfig+0xae>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a1b      	ldr	r2, [pc, #108]	; (8004ef0 <TIM_OC3_SetConfig+0x100>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00b      	beq.n	8004e9e <TIM_OC3_SetConfig+0xae>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a1a      	ldr	r2, [pc, #104]	; (8004ef4 <TIM_OC3_SetConfig+0x104>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d007      	beq.n	8004e9e <TIM_OC3_SetConfig+0xae>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a19      	ldr	r2, [pc, #100]	; (8004ef8 <TIM_OC3_SetConfig+0x108>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d003      	beq.n	8004e9e <TIM_OC3_SetConfig+0xae>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a18      	ldr	r2, [pc, #96]	; (8004efc <TIM_OC3_SetConfig+0x10c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d113      	bne.n	8004ec6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	621a      	str	r2, [r3, #32]
}
 8004ee0:	bf00      	nop
 8004ee2:	371c      	adds	r7, #28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	40012c00 	.word	0x40012c00
 8004ef0:	40013400 	.word	0x40013400
 8004ef4:	40014000 	.word	0x40014000
 8004ef8:	40014400 	.word	0x40014400
 8004efc:	40014800 	.word	0x40014800

08004f00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	021b      	lsls	r3, r3, #8
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	031b      	lsls	r3, r3, #12
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a28      	ldr	r2, [pc, #160]	; (8005000 <TIM_OC4_SetConfig+0x100>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d003      	beq.n	8004f6c <TIM_OC4_SetConfig+0x6c>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a27      	ldr	r2, [pc, #156]	; (8005004 <TIM_OC4_SetConfig+0x104>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d10d      	bne.n	8004f88 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	031b      	lsls	r3, r3, #12
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <TIM_OC4_SetConfig+0x100>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00f      	beq.n	8004fb0 <TIM_OC4_SetConfig+0xb0>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <TIM_OC4_SetConfig+0x104>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00b      	beq.n	8004fb0 <TIM_OC4_SetConfig+0xb0>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a1b      	ldr	r2, [pc, #108]	; (8005008 <TIM_OC4_SetConfig+0x108>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d007      	beq.n	8004fb0 <TIM_OC4_SetConfig+0xb0>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a1a      	ldr	r2, [pc, #104]	; (800500c <TIM_OC4_SetConfig+0x10c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_OC4_SetConfig+0xb0>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a19      	ldr	r2, [pc, #100]	; (8005010 <TIM_OC4_SetConfig+0x110>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d113      	bne.n	8004fd8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fb6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fbe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	019b      	lsls	r3, r3, #6
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	019b      	lsls	r3, r3, #6
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	621a      	str	r2, [r3, #32]
}
 8004ff2:	bf00      	nop
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40012c00 	.word	0x40012c00
 8005004:	40013400 	.word	0x40013400
 8005008:	40014000 	.word	0x40014000
 800500c:	40014400 	.word	0x40014400
 8005010:	40014800 	.word	0x40014800

08005014 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005058:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	041b      	lsls	r3, r3, #16
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	4313      	orrs	r3, r2
 8005064:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a17      	ldr	r2, [pc, #92]	; (80050c8 <TIM_OC5_SetConfig+0xb4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00f      	beq.n	800508e <TIM_OC5_SetConfig+0x7a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a16      	ldr	r2, [pc, #88]	; (80050cc <TIM_OC5_SetConfig+0xb8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00b      	beq.n	800508e <TIM_OC5_SetConfig+0x7a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a15      	ldr	r2, [pc, #84]	; (80050d0 <TIM_OC5_SetConfig+0xbc>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d007      	beq.n	800508e <TIM_OC5_SetConfig+0x7a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a14      	ldr	r2, [pc, #80]	; (80050d4 <TIM_OC5_SetConfig+0xc0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d003      	beq.n	800508e <TIM_OC5_SetConfig+0x7a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a13      	ldr	r2, [pc, #76]	; (80050d8 <TIM_OC5_SetConfig+0xc4>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d109      	bne.n	80050a2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005094:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	621a      	str	r2, [r3, #32]
}
 80050bc:	bf00      	nop
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40012c00 	.word	0x40012c00
 80050cc:	40013400 	.word	0x40013400
 80050d0:	40014000 	.word	0x40014000
 80050d4:	40014400 	.word	0x40014400
 80050d8:	40014800 	.word	0x40014800

080050dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800510a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005122:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	051b      	lsls	r3, r3, #20
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a18      	ldr	r2, [pc, #96]	; (8005194 <TIM_OC6_SetConfig+0xb8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00f      	beq.n	8005158 <TIM_OC6_SetConfig+0x7c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a17      	ldr	r2, [pc, #92]	; (8005198 <TIM_OC6_SetConfig+0xbc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00b      	beq.n	8005158 <TIM_OC6_SetConfig+0x7c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a16      	ldr	r2, [pc, #88]	; (800519c <TIM_OC6_SetConfig+0xc0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d007      	beq.n	8005158 <TIM_OC6_SetConfig+0x7c>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a15      	ldr	r2, [pc, #84]	; (80051a0 <TIM_OC6_SetConfig+0xc4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d003      	beq.n	8005158 <TIM_OC6_SetConfig+0x7c>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a14      	ldr	r2, [pc, #80]	; (80051a4 <TIM_OC6_SetConfig+0xc8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d109      	bne.n	800516c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800515e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	029b      	lsls	r3, r3, #10
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40012c00 	.word	0x40012c00
 8005198:	40013400 	.word	0x40013400
 800519c:	40014000 	.word	0x40014000
 80051a0:	40014400 	.word	0x40014400
 80051a4:	40014800 	.word	0x40014800

080051a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	f023 0201 	bic.w	r2, r3, #1
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f023 030a 	bic.w	r3, r3, #10
 80051e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	621a      	str	r2, [r3, #32]
}
 80051fa:	bf00      	nop
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005206:	b480      	push	{r7}
 8005208:	b087      	sub	sp, #28
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	f023 0210 	bic.w	r2, r3, #16
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005230:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	031b      	lsls	r3, r3, #12
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005242:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	621a      	str	r2, [r3, #32]
}
 800525a:	bf00      	nop
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800527c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	f043 0307 	orr.w	r3, r3, #7
 800528c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	609a      	str	r2, [r3, #8]
}
 8005294:	bf00      	nop
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	021a      	lsls	r2, r3, #8
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	609a      	str	r2, [r3, #8]
}
 80052d4:	bf00      	nop
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 031f 	and.w	r3, r3, #31
 80052f2:	2201      	movs	r2, #1
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a1a      	ldr	r2, [r3, #32]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	43db      	mvns	r3, r3
 8005302:	401a      	ands	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a1a      	ldr	r2, [r3, #32]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	fa01 f303 	lsl.w	r3, r1, r3
 8005318:	431a      	orrs	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	621a      	str	r2, [r3, #32]
}
 800531e:	bf00      	nop
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
	...

0800532c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d109      	bne.n	8005350 <HAL_TIMEx_PWMN_Start+0x24>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	bf14      	ite	ne
 8005348:	2301      	movne	r3, #1
 800534a:	2300      	moveq	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	e022      	b.n	8005396 <HAL_TIMEx_PWMN_Start+0x6a>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b04      	cmp	r3, #4
 8005354:	d109      	bne.n	800536a <HAL_TIMEx_PWMN_Start+0x3e>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b01      	cmp	r3, #1
 8005360:	bf14      	ite	ne
 8005362:	2301      	movne	r3, #1
 8005364:	2300      	moveq	r3, #0
 8005366:	b2db      	uxtb	r3, r3
 8005368:	e015      	b.n	8005396 <HAL_TIMEx_PWMN_Start+0x6a>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d109      	bne.n	8005384 <HAL_TIMEx_PWMN_Start+0x58>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	bf14      	ite	ne
 800537c:	2301      	movne	r3, #1
 800537e:	2300      	moveq	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	e008      	b.n	8005396 <HAL_TIMEx_PWMN_Start+0x6a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b01      	cmp	r3, #1
 800538e:	bf14      	ite	ne
 8005390:	2301      	movne	r3, #1
 8005392:	2300      	moveq	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e069      	b.n	8005472 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d104      	bne.n	80053ae <HAL_TIMEx_PWMN_Start+0x82>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053ac:	e013      	b.n	80053d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d104      	bne.n	80053be <HAL_TIMEx_PWMN_Start+0x92>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053bc:	e00b      	b.n	80053d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d104      	bne.n	80053ce <HAL_TIMEx_PWMN_Start+0xa2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053cc:	e003      	b.n	80053d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2202      	movs	r2, #2
 80053d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2204      	movs	r2, #4
 80053dc:	6839      	ldr	r1, [r7, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 f9c0 	bl	8005764 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a20      	ldr	r2, [pc, #128]	; (800547c <HAL_TIMEx_PWMN_Start+0x150>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d018      	beq.n	8005430 <HAL_TIMEx_PWMN_Start+0x104>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005406:	d013      	beq.n	8005430 <HAL_TIMEx_PWMN_Start+0x104>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a1c      	ldr	r2, [pc, #112]	; (8005480 <HAL_TIMEx_PWMN_Start+0x154>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00e      	beq.n	8005430 <HAL_TIMEx_PWMN_Start+0x104>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a1b      	ldr	r2, [pc, #108]	; (8005484 <HAL_TIMEx_PWMN_Start+0x158>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d009      	beq.n	8005430 <HAL_TIMEx_PWMN_Start+0x104>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a19      	ldr	r2, [pc, #100]	; (8005488 <HAL_TIMEx_PWMN_Start+0x15c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d004      	beq.n	8005430 <HAL_TIMEx_PWMN_Start+0x104>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a18      	ldr	r2, [pc, #96]	; (800548c <HAL_TIMEx_PWMN_Start+0x160>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d115      	bne.n	800545c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	4b16      	ldr	r3, [pc, #88]	; (8005490 <HAL_TIMEx_PWMN_Start+0x164>)
 8005438:	4013      	ands	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b06      	cmp	r3, #6
 8005440:	d015      	beq.n	800546e <HAL_TIMEx_PWMN_Start+0x142>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005448:	d011      	beq.n	800546e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0201 	orr.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545a:	e008      	b.n	800546e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	e000      	b.n	8005470 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40012c00 	.word	0x40012c00
 8005480:	40000400 	.word	0x40000400
 8005484:	40000800 	.word	0x40000800
 8005488:	40013400 	.word	0x40013400
 800548c:	40014000 	.word	0x40014000
 8005490:	00010007 	.word	0x00010007

08005494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e065      	b.n	8005578 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a2c      	ldr	r2, [pc, #176]	; (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d004      	beq.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a2b      	ldr	r2, [pc, #172]	; (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d108      	bne.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80054f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1b      	ldr	r2, [pc, #108]	; (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d018      	beq.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005522:	d013      	beq.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a18      	ldr	r2, [pc, #96]	; (800558c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00e      	beq.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a17      	ldr	r2, [pc, #92]	; (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d009      	beq.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a12      	ldr	r2, [pc, #72]	; (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d004      	beq.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a13      	ldr	r2, [pc, #76]	; (8005594 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d10c      	bne.n	8005566 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005552:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	4313      	orrs	r3, r2
 800555c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	40012c00 	.word	0x40012c00
 8005588:	40013400 	.word	0x40013400
 800558c:	40000400 	.word	0x40000400
 8005590:	40000800 	.word	0x40000800
 8005594:	40014000 	.word	0x40014000

08005598 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e087      	b.n	80056c4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	4313      	orrs	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	041b      	lsls	r3, r3, #16
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a27      	ldr	r2, [pc, #156]	; (80056d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d004      	beq.n	8005642 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a25      	ldr	r2, [pc, #148]	; (80056d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d106      	bne.n	8005650 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	4313      	orrs	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a1e      	ldr	r2, [pc, #120]	; (80056d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d004      	beq.n	8005664 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a1d      	ldr	r2, [pc, #116]	; (80056d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d126      	bne.n	80056b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	051b      	lsls	r3, r3, #20
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a0e      	ldr	r2, [pc, #56]	; (80056d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d004      	beq.n	80056a4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a0d      	ldr	r2, [pc, #52]	; (80056d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d106      	bne.n	80056b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	40012c00 	.word	0x40012c00
 80056d4:	40013400 	.word	0x40013400

080056d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	2204      	movs	r2, #4
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a1a      	ldr	r2, [r3, #32]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	43db      	mvns	r3, r3
 8005786:	401a      	ands	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a1a      	ldr	r2, [r3, #32]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f003 031f 	and.w	r3, r3, #31
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	fa01 f303 	lsl.w	r3, r1, r3
 800579c:	431a      	orrs	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	621a      	str	r2, [r3, #32]
}
 80057a2:	bf00      	nop
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e042      	b.n	8005846 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fc f970 	bl	8001ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2224      	movs	r2, #36	; 0x24
 80057dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0201 	bic.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f8c3 	bl	800597c <UART_SetConfig>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e022      	b.n	8005846 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fb83 	bl	8005f14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800581c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800582c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0201 	orr.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fc0a 	bl	8006058 <UART_CheckIdleState>
 8005844:	4603      	mov	r3, r0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b08a      	sub	sp, #40	; 0x28
 8005852:	af02      	add	r7, sp, #8
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	603b      	str	r3, [r7, #0]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005864:	2b20      	cmp	r3, #32
 8005866:	f040 8083 	bne.w	8005970 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <HAL_UART_Transmit+0x28>
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e07b      	b.n	8005972 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_UART_Transmit+0x3a>
 8005884:	2302      	movs	r3, #2
 8005886:	e074      	b.n	8005972 <HAL_UART_Transmit+0x124>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2221      	movs	r2, #33	; 0x21
 800589c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058a0:	f7fc fafa 	bl	8001e98 <HAL_GetTick>
 80058a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	88fa      	ldrh	r2, [r7, #6]
 80058aa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	88fa      	ldrh	r2, [r7, #6]
 80058b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058be:	d108      	bne.n	80058d2 <HAL_UART_Transmit+0x84>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d104      	bne.n	80058d2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80058c8:	2300      	movs	r3, #0
 80058ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	e003      	b.n	80058da <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058d6:	2300      	movs	r3, #0
 80058d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80058e2:	e02c      	b.n	800593e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2200      	movs	r2, #0
 80058ec:	2180      	movs	r1, #128	; 0x80
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fbfd 	bl	80060ee <UART_WaitOnFlagUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e039      	b.n	8005972 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10b      	bne.n	800591c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	461a      	mov	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005912:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	3302      	adds	r3, #2
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	e007      	b.n	800592c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	781a      	ldrb	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	3301      	adds	r3, #1
 800592a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005932:	b29b      	uxth	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1cc      	bne.n	80058e4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2200      	movs	r2, #0
 8005952:	2140      	movs	r1, #64	; 0x40
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 fbca 	bl	80060ee <UART_WaitOnFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e006      	b.n	8005972 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2220      	movs	r2, #32
 8005968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	e000      	b.n	8005972 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005970:	2302      	movs	r3, #2
  }
}
 8005972:	4618      	mov	r0, r3
 8005974:	3720      	adds	r7, #32
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
	...

0800597c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800597c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005980:	b08c      	sub	sp, #48	; 0x30
 8005982:	af00      	add	r7, sp, #0
 8005984:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	431a      	orrs	r2, r3
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	431a      	orrs	r2, r3
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4bab      	ldr	r3, [pc, #684]	; (8005c58 <UART_SetConfig+0x2dc>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059b4:	430b      	orrs	r3, r1
 80059b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4aa0      	ldr	r2, [pc, #640]	; (8005c5c <UART_SetConfig+0x2e0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d004      	beq.n	80059e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059e4:	4313      	orrs	r3, r2
 80059e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80059f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	6812      	ldr	r2, [r2, #0]
 80059fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059fc:	430b      	orrs	r3, r1
 80059fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a06:	f023 010f 	bic.w	r1, r3, #15
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a91      	ldr	r2, [pc, #580]	; (8005c60 <UART_SetConfig+0x2e4>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d125      	bne.n	8005a6c <UART_SetConfig+0xf0>
 8005a20:	4b90      	ldr	r3, [pc, #576]	; (8005c64 <UART_SetConfig+0x2e8>)
 8005a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d81a      	bhi.n	8005a64 <UART_SetConfig+0xe8>
 8005a2e:	a201      	add	r2, pc, #4	; (adr r2, 8005a34 <UART_SetConfig+0xb8>)
 8005a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a34:	08005a45 	.word	0x08005a45
 8005a38:	08005a55 	.word	0x08005a55
 8005a3c:	08005a4d 	.word	0x08005a4d
 8005a40:	08005a5d 	.word	0x08005a5d
 8005a44:	2301      	movs	r3, #1
 8005a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a4a:	e0d6      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a52:	e0d2      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005a54:	2304      	movs	r3, #4
 8005a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a5a:	e0ce      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005a5c:	2308      	movs	r3, #8
 8005a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a62:	e0ca      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005a64:	2310      	movs	r3, #16
 8005a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a6a:	e0c6      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a7d      	ldr	r2, [pc, #500]	; (8005c68 <UART_SetConfig+0x2ec>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d138      	bne.n	8005ae8 <UART_SetConfig+0x16c>
 8005a76:	4b7b      	ldr	r3, [pc, #492]	; (8005c64 <UART_SetConfig+0x2e8>)
 8005a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7c:	f003 030c 	and.w	r3, r3, #12
 8005a80:	2b0c      	cmp	r3, #12
 8005a82:	d82d      	bhi.n	8005ae0 <UART_SetConfig+0x164>
 8005a84:	a201      	add	r2, pc, #4	; (adr r2, 8005a8c <UART_SetConfig+0x110>)
 8005a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8a:	bf00      	nop
 8005a8c:	08005ac1 	.word	0x08005ac1
 8005a90:	08005ae1 	.word	0x08005ae1
 8005a94:	08005ae1 	.word	0x08005ae1
 8005a98:	08005ae1 	.word	0x08005ae1
 8005a9c:	08005ad1 	.word	0x08005ad1
 8005aa0:	08005ae1 	.word	0x08005ae1
 8005aa4:	08005ae1 	.word	0x08005ae1
 8005aa8:	08005ae1 	.word	0x08005ae1
 8005aac:	08005ac9 	.word	0x08005ac9
 8005ab0:	08005ae1 	.word	0x08005ae1
 8005ab4:	08005ae1 	.word	0x08005ae1
 8005ab8:	08005ae1 	.word	0x08005ae1
 8005abc:	08005ad9 	.word	0x08005ad9
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ac6:	e098      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ace:	e094      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ad6:	e090      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005ad8:	2308      	movs	r3, #8
 8005ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ade:	e08c      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005ae0:	2310      	movs	r3, #16
 8005ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ae6:	e088      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a5f      	ldr	r2, [pc, #380]	; (8005c6c <UART_SetConfig+0x2f0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d125      	bne.n	8005b3e <UART_SetConfig+0x1c2>
 8005af2:	4b5c      	ldr	r3, [pc, #368]	; (8005c64 <UART_SetConfig+0x2e8>)
 8005af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005afc:	2b30      	cmp	r3, #48	; 0x30
 8005afe:	d016      	beq.n	8005b2e <UART_SetConfig+0x1b2>
 8005b00:	2b30      	cmp	r3, #48	; 0x30
 8005b02:	d818      	bhi.n	8005b36 <UART_SetConfig+0x1ba>
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	d00a      	beq.n	8005b1e <UART_SetConfig+0x1a2>
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d814      	bhi.n	8005b36 <UART_SetConfig+0x1ba>
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <UART_SetConfig+0x19a>
 8005b10:	2b10      	cmp	r3, #16
 8005b12:	d008      	beq.n	8005b26 <UART_SetConfig+0x1aa>
 8005b14:	e00f      	b.n	8005b36 <UART_SetConfig+0x1ba>
 8005b16:	2300      	movs	r3, #0
 8005b18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b1c:	e06d      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b24:	e069      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005b26:	2304      	movs	r3, #4
 8005b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b2c:	e065      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005b2e:	2308      	movs	r3, #8
 8005b30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b34:	e061      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005b36:	2310      	movs	r3, #16
 8005b38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b3c:	e05d      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a4b      	ldr	r2, [pc, #300]	; (8005c70 <UART_SetConfig+0x2f4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d125      	bne.n	8005b94 <UART_SetConfig+0x218>
 8005b48:	4b46      	ldr	r3, [pc, #280]	; (8005c64 <UART_SetConfig+0x2e8>)
 8005b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b52:	2bc0      	cmp	r3, #192	; 0xc0
 8005b54:	d016      	beq.n	8005b84 <UART_SetConfig+0x208>
 8005b56:	2bc0      	cmp	r3, #192	; 0xc0
 8005b58:	d818      	bhi.n	8005b8c <UART_SetConfig+0x210>
 8005b5a:	2b80      	cmp	r3, #128	; 0x80
 8005b5c:	d00a      	beq.n	8005b74 <UART_SetConfig+0x1f8>
 8005b5e:	2b80      	cmp	r3, #128	; 0x80
 8005b60:	d814      	bhi.n	8005b8c <UART_SetConfig+0x210>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <UART_SetConfig+0x1f0>
 8005b66:	2b40      	cmp	r3, #64	; 0x40
 8005b68:	d008      	beq.n	8005b7c <UART_SetConfig+0x200>
 8005b6a:	e00f      	b.n	8005b8c <UART_SetConfig+0x210>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b72:	e042      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005b74:	2302      	movs	r3, #2
 8005b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b7a:	e03e      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005b7c:	2304      	movs	r3, #4
 8005b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b82:	e03a      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005b84:	2308      	movs	r3, #8
 8005b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b8a:	e036      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005b8c:	2310      	movs	r3, #16
 8005b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b92:	e032      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a30      	ldr	r2, [pc, #192]	; (8005c5c <UART_SetConfig+0x2e0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d12a      	bne.n	8005bf4 <UART_SetConfig+0x278>
 8005b9e:	4b31      	ldr	r3, [pc, #196]	; (8005c64 <UART_SetConfig+0x2e8>)
 8005ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ba8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bac:	d01a      	beq.n	8005be4 <UART_SetConfig+0x268>
 8005bae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bb2:	d81b      	bhi.n	8005bec <UART_SetConfig+0x270>
 8005bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb8:	d00c      	beq.n	8005bd4 <UART_SetConfig+0x258>
 8005bba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bbe:	d815      	bhi.n	8005bec <UART_SetConfig+0x270>
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <UART_SetConfig+0x250>
 8005bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc8:	d008      	beq.n	8005bdc <UART_SetConfig+0x260>
 8005bca:	e00f      	b.n	8005bec <UART_SetConfig+0x270>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bd2:	e012      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bda:	e00e      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005bdc:	2304      	movs	r3, #4
 8005bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005be2:	e00a      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005be4:	2308      	movs	r3, #8
 8005be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bea:	e006      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005bec:	2310      	movs	r3, #16
 8005bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bf2:	e002      	b.n	8005bfa <UART_SetConfig+0x27e>
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a17      	ldr	r2, [pc, #92]	; (8005c5c <UART_SetConfig+0x2e0>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	f040 80a8 	bne.w	8005d56 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d834      	bhi.n	8005c78 <UART_SetConfig+0x2fc>
 8005c0e:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <UART_SetConfig+0x298>)
 8005c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c14:	08005c39 	.word	0x08005c39
 8005c18:	08005c79 	.word	0x08005c79
 8005c1c:	08005c41 	.word	0x08005c41
 8005c20:	08005c79 	.word	0x08005c79
 8005c24:	08005c47 	.word	0x08005c47
 8005c28:	08005c79 	.word	0x08005c79
 8005c2c:	08005c79 	.word	0x08005c79
 8005c30:	08005c79 	.word	0x08005c79
 8005c34:	08005c4f 	.word	0x08005c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c38:	f7fd fe22 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 8005c3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c3e:	e021      	b.n	8005c84 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c40:	4b0c      	ldr	r3, [pc, #48]	; (8005c74 <UART_SetConfig+0x2f8>)
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c44:	e01e      	b.n	8005c84 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c46:	f7fd fdad 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8005c4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c4c:	e01a      	b.n	8005c84 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c54:	e016      	b.n	8005c84 <UART_SetConfig+0x308>
 8005c56:	bf00      	nop
 8005c58:	cfff69f3 	.word	0xcfff69f3
 8005c5c:	40008000 	.word	0x40008000
 8005c60:	40013800 	.word	0x40013800
 8005c64:	40021000 	.word	0x40021000
 8005c68:	40004400 	.word	0x40004400
 8005c6c:	40004800 	.word	0x40004800
 8005c70:	40004c00 	.word	0x40004c00
 8005c74:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c82:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 812a 	beq.w	8005ee0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	4a9e      	ldr	r2, [pc, #632]	; (8005f0c <UART_SetConfig+0x590>)
 8005c92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c96:	461a      	mov	r2, r3
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c9e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	4413      	add	r3, r2
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d305      	bcc.n	8005cbc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d903      	bls.n	8005cc4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005cc2:	e10d      	b.n	8005ee0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	60bb      	str	r3, [r7, #8]
 8005cca:	60fa      	str	r2, [r7, #12]
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	4a8e      	ldr	r2, [pc, #568]	; (8005f0c <UART_SetConfig+0x590>)
 8005cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2200      	movs	r2, #0
 8005cda:	603b      	str	r3, [r7, #0]
 8005cdc:	607a      	str	r2, [r7, #4]
 8005cde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ce2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ce6:	f7fa ff87 	bl	8000bf8 <__aeabi_uldivmod>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	4610      	mov	r0, r2
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	f04f 0200 	mov.w	r2, #0
 8005cf6:	f04f 0300 	mov.w	r3, #0
 8005cfa:	020b      	lsls	r3, r1, #8
 8005cfc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d00:	0202      	lsls	r2, r0, #8
 8005d02:	6979      	ldr	r1, [r7, #20]
 8005d04:	6849      	ldr	r1, [r1, #4]
 8005d06:	0849      	lsrs	r1, r1, #1
 8005d08:	2000      	movs	r0, #0
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	4605      	mov	r5, r0
 8005d0e:	eb12 0804 	adds.w	r8, r2, r4
 8005d12:	eb43 0905 	adc.w	r9, r3, r5
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	469a      	mov	sl, r3
 8005d1e:	4693      	mov	fp, r2
 8005d20:	4652      	mov	r2, sl
 8005d22:	465b      	mov	r3, fp
 8005d24:	4640      	mov	r0, r8
 8005d26:	4649      	mov	r1, r9
 8005d28:	f7fa ff66 	bl	8000bf8 <__aeabi_uldivmod>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4613      	mov	r3, r2
 8005d32:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d3a:	d308      	bcc.n	8005d4e <UART_SetConfig+0x3d2>
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d42:	d204      	bcs.n	8005d4e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6a3a      	ldr	r2, [r7, #32]
 8005d4a:	60da      	str	r2, [r3, #12]
 8005d4c:	e0c8      	b.n	8005ee0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d54:	e0c4      	b.n	8005ee0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d5e:	d167      	bne.n	8005e30 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005d60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d828      	bhi.n	8005dba <UART_SetConfig+0x43e>
 8005d68:	a201      	add	r2, pc, #4	; (adr r2, 8005d70 <UART_SetConfig+0x3f4>)
 8005d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6e:	bf00      	nop
 8005d70:	08005d95 	.word	0x08005d95
 8005d74:	08005d9d 	.word	0x08005d9d
 8005d78:	08005da5 	.word	0x08005da5
 8005d7c:	08005dbb 	.word	0x08005dbb
 8005d80:	08005dab 	.word	0x08005dab
 8005d84:	08005dbb 	.word	0x08005dbb
 8005d88:	08005dbb 	.word	0x08005dbb
 8005d8c:	08005dbb 	.word	0x08005dbb
 8005d90:	08005db3 	.word	0x08005db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d94:	f7fd fd74 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 8005d98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d9a:	e014      	b.n	8005dc6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d9c:	f7fd fd86 	bl	80038ac <HAL_RCC_GetPCLK2Freq>
 8005da0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005da2:	e010      	b.n	8005dc6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da4:	4b5a      	ldr	r3, [pc, #360]	; (8005f10 <UART_SetConfig+0x594>)
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005da8:	e00d      	b.n	8005dc6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005daa:	f7fd fcfb 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8005dae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005db0:	e009      	b.n	8005dc6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005db8:	e005      	b.n	8005dc6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005dc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 8089 	beq.w	8005ee0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	4a4e      	ldr	r2, [pc, #312]	; (8005f0c <UART_SetConfig+0x590>)
 8005dd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005de0:	005a      	lsls	r2, r3, #1
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	085b      	lsrs	r3, r3, #1
 8005de8:	441a      	add	r2, r3
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	2b0f      	cmp	r3, #15
 8005df8:	d916      	bls.n	8005e28 <UART_SetConfig+0x4ac>
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e00:	d212      	bcs.n	8005e28 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f023 030f 	bic.w	r3, r3, #15
 8005e0a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	8bfb      	ldrh	r3, [r7, #30]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	8bfa      	ldrh	r2, [r7, #30]
 8005e24:	60da      	str	r2, [r3, #12]
 8005e26:	e05b      	b.n	8005ee0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e2e:	e057      	b.n	8005ee0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d828      	bhi.n	8005e8a <UART_SetConfig+0x50e>
 8005e38:	a201      	add	r2, pc, #4	; (adr r2, 8005e40 <UART_SetConfig+0x4c4>)
 8005e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3e:	bf00      	nop
 8005e40:	08005e65 	.word	0x08005e65
 8005e44:	08005e6d 	.word	0x08005e6d
 8005e48:	08005e75 	.word	0x08005e75
 8005e4c:	08005e8b 	.word	0x08005e8b
 8005e50:	08005e7b 	.word	0x08005e7b
 8005e54:	08005e8b 	.word	0x08005e8b
 8005e58:	08005e8b 	.word	0x08005e8b
 8005e5c:	08005e8b 	.word	0x08005e8b
 8005e60:	08005e83 	.word	0x08005e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e64:	f7fd fd0c 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 8005e68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e6a:	e014      	b.n	8005e96 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e6c:	f7fd fd1e 	bl	80038ac <HAL_RCC_GetPCLK2Freq>
 8005e70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e72:	e010      	b.n	8005e96 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e74:	4b26      	ldr	r3, [pc, #152]	; (8005f10 <UART_SetConfig+0x594>)
 8005e76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e78:	e00d      	b.n	8005e96 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e7a:	f7fd fc93 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8005e7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e80:	e009      	b.n	8005e96 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e88:	e005      	b.n	8005e96 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e94:	bf00      	nop
    }

    if (pclk != 0U)
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d021      	beq.n	8005ee0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	4a1a      	ldr	r2, [pc, #104]	; (8005f0c <UART_SetConfig+0x590>)
 8005ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	fbb3 f2f2 	udiv	r2, r3, r2
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	085b      	lsrs	r3, r3, #1
 8005eb4:	441a      	add	r2, r3
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	2b0f      	cmp	r3, #15
 8005ec4:	d909      	bls.n	8005eda <UART_SetConfig+0x55e>
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ecc:	d205      	bcs.n	8005eda <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	60da      	str	r2, [r3, #12]
 8005ed8:	e002      	b.n	8005ee0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005efc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3730      	adds	r7, #48	; 0x30
 8005f04:	46bd      	mov	sp, r7
 8005f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f0a:	bf00      	nop
 8005f0c:	08008ea0 	.word	0x08008ea0
 8005f10:	00f42400 	.word	0x00f42400

08005f14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa8:	f003 0310 	and.w	r3, r3, #16
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01a      	beq.n	800602a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006012:	d10a      	bne.n	800602a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	605a      	str	r2, [r3, #4]
  }
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af02      	add	r7, sp, #8
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006068:	f7fb ff16 	bl	8001e98 <HAL_GetTick>
 800606c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b08      	cmp	r3, #8
 800607a:	d10e      	bne.n	800609a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800607c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f82f 	bl	80060ee <UART_WaitOnFlagUntilTimeout>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e025      	b.n	80060e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	d10e      	bne.n	80060c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f819 	bl	80060ee <UART_WaitOnFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e00f      	b.n	80060e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b09c      	sub	sp, #112	; 0x70
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	603b      	str	r3, [r7, #0]
 80060fa:	4613      	mov	r3, r2
 80060fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060fe:	e0a9      	b.n	8006254 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006106:	f000 80a5 	beq.w	8006254 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610a:	f7fb fec5 	bl	8001e98 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006116:	429a      	cmp	r2, r3
 8006118:	d302      	bcc.n	8006120 <UART_WaitOnFlagUntilTimeout+0x32>
 800611a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800611c:	2b00      	cmp	r3, #0
 800611e:	d140      	bne.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800612e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006130:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006134:	667b      	str	r3, [r7, #100]	; 0x64
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800613e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006140:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006144:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800614c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e6      	bne.n	8006120 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3308      	adds	r3, #8
 8006158:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	f023 0301 	bic.w	r3, r3, #1
 8006168:	663b      	str	r3, [r7, #96]	; 0x60
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3308      	adds	r3, #8
 8006170:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006172:	64ba      	str	r2, [r7, #72]	; 0x48
 8006174:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006178:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e5      	bne.n	8006152 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2220      	movs	r2, #32
 800618a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2220      	movs	r2, #32
 8006192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e069      	b.n	8006276 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d051      	beq.n	8006254 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061be:	d149      	bne.n	8006254 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	e853 3f00 	ldrex	r3, [r3]
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	461a      	mov	r2, r3
 80061e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e8:	637b      	str	r3, [r7, #52]	; 0x34
 80061ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061f0:	e841 2300 	strex	r3, r2, [r1]
 80061f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1e6      	bne.n	80061ca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3308      	adds	r3, #8
 8006202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	e853 3f00 	ldrex	r3, [r3]
 800620a:	613b      	str	r3, [r7, #16]
   return(result);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f023 0301 	bic.w	r3, r3, #1
 8006212:	66bb      	str	r3, [r7, #104]	; 0x68
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3308      	adds	r3, #8
 800621a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800621c:	623a      	str	r2, [r7, #32]
 800621e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006220:	69f9      	ldr	r1, [r7, #28]
 8006222:	6a3a      	ldr	r2, [r7, #32]
 8006224:	e841 2300 	strex	r3, r2, [r1]
 8006228:	61bb      	str	r3, [r7, #24]
   return(result);
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e5      	bne.n	80061fc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2220      	movs	r2, #32
 8006244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e010      	b.n	8006276 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	69da      	ldr	r2, [r3, #28]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	4013      	ands	r3, r2
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	429a      	cmp	r2, r3
 8006262:	bf0c      	ite	eq
 8006264:	2301      	moveq	r3, #1
 8006266:	2300      	movne	r3, #0
 8006268:	b2db      	uxtb	r3, r3
 800626a:	461a      	mov	r2, r3
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	429a      	cmp	r2, r3
 8006270:	f43f af46 	beq.w	8006100 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3770      	adds	r7, #112	; 0x70
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800627e:	b480      	push	{r7}
 8006280:	b085      	sub	sp, #20
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800628c:	2b01      	cmp	r3, #1
 800628e:	d101      	bne.n	8006294 <HAL_UARTEx_DisableFifoMode+0x16>
 8006290:	2302      	movs	r3, #2
 8006292:	e027      	b.n	80062e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2224      	movs	r2, #36	; 0x24
 80062a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0201 	bic.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2220      	movs	r2, #32
 80062d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006304:	2302      	movs	r3, #2
 8006306:	e02d      	b.n	8006364 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2224      	movs	r2, #36	; 0x24
 8006314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0201 	bic.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f84f 	bl	80063e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2220      	movs	r2, #32
 8006356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006380:	2302      	movs	r3, #2
 8006382:	e02d      	b.n	80063e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2224      	movs	r2, #36	; 0x24
 8006390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0201 	bic.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f811 	bl	80063e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d108      	bne.n	800640a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006408:	e031      	b.n	800646e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800640a:	2308      	movs	r3, #8
 800640c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800640e:	2308      	movs	r3, #8
 8006410:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	0e5b      	lsrs	r3, r3, #25
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	0f5b      	lsrs	r3, r3, #29
 800642a:	b2db      	uxtb	r3, r3
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	7b3a      	ldrb	r2, [r7, #12]
 8006436:	4911      	ldr	r1, [pc, #68]	; (800647c <UARTEx_SetNbDataToProcess+0x94>)
 8006438:	5c8a      	ldrb	r2, [r1, r2]
 800643a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800643e:	7b3a      	ldrb	r2, [r7, #12]
 8006440:	490f      	ldr	r1, [pc, #60]	; (8006480 <UARTEx_SetNbDataToProcess+0x98>)
 8006442:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006444:	fb93 f3f2 	sdiv	r3, r3, r2
 8006448:	b29a      	uxth	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	7b7a      	ldrb	r2, [r7, #13]
 8006454:	4909      	ldr	r1, [pc, #36]	; (800647c <UARTEx_SetNbDataToProcess+0x94>)
 8006456:	5c8a      	ldrb	r2, [r1, r2]
 8006458:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800645c:	7b7a      	ldrb	r2, [r7, #13]
 800645e:	4908      	ldr	r1, [pc, #32]	; (8006480 <UARTEx_SetNbDataToProcess+0x98>)
 8006460:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006462:	fb93 f3f2 	sdiv	r3, r3, r2
 8006466:	b29a      	uxth	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800646e:	bf00      	nop
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	08008eb8 	.word	0x08008eb8
 8006480:	08008ec0 	.word	0x08008ec0

08006484 <__cvt>:
 8006484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006488:	ec55 4b10 	vmov	r4, r5, d0
 800648c:	2d00      	cmp	r5, #0
 800648e:	460e      	mov	r6, r1
 8006490:	4619      	mov	r1, r3
 8006492:	462b      	mov	r3, r5
 8006494:	bfbb      	ittet	lt
 8006496:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800649a:	461d      	movlt	r5, r3
 800649c:	2300      	movge	r3, #0
 800649e:	232d      	movlt	r3, #45	; 0x2d
 80064a0:	700b      	strb	r3, [r1, #0]
 80064a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80064a8:	4691      	mov	r9, r2
 80064aa:	f023 0820 	bic.w	r8, r3, #32
 80064ae:	bfbc      	itt	lt
 80064b0:	4622      	movlt	r2, r4
 80064b2:	4614      	movlt	r4, r2
 80064b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064b8:	d005      	beq.n	80064c6 <__cvt+0x42>
 80064ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80064be:	d100      	bne.n	80064c2 <__cvt+0x3e>
 80064c0:	3601      	adds	r6, #1
 80064c2:	2102      	movs	r1, #2
 80064c4:	e000      	b.n	80064c8 <__cvt+0x44>
 80064c6:	2103      	movs	r1, #3
 80064c8:	ab03      	add	r3, sp, #12
 80064ca:	9301      	str	r3, [sp, #4]
 80064cc:	ab02      	add	r3, sp, #8
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	ec45 4b10 	vmov	d0, r4, r5
 80064d4:	4653      	mov	r3, sl
 80064d6:	4632      	mov	r2, r6
 80064d8:	f000 fe5a 	bl	8007190 <_dtoa_r>
 80064dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80064e0:	4607      	mov	r7, r0
 80064e2:	d102      	bne.n	80064ea <__cvt+0x66>
 80064e4:	f019 0f01 	tst.w	r9, #1
 80064e8:	d022      	beq.n	8006530 <__cvt+0xac>
 80064ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064ee:	eb07 0906 	add.w	r9, r7, r6
 80064f2:	d110      	bne.n	8006516 <__cvt+0x92>
 80064f4:	783b      	ldrb	r3, [r7, #0]
 80064f6:	2b30      	cmp	r3, #48	; 0x30
 80064f8:	d10a      	bne.n	8006510 <__cvt+0x8c>
 80064fa:	2200      	movs	r2, #0
 80064fc:	2300      	movs	r3, #0
 80064fe:	4620      	mov	r0, r4
 8006500:	4629      	mov	r1, r5
 8006502:	f7fa fb09 	bl	8000b18 <__aeabi_dcmpeq>
 8006506:	b918      	cbnz	r0, 8006510 <__cvt+0x8c>
 8006508:	f1c6 0601 	rsb	r6, r6, #1
 800650c:	f8ca 6000 	str.w	r6, [sl]
 8006510:	f8da 3000 	ldr.w	r3, [sl]
 8006514:	4499      	add	r9, r3
 8006516:	2200      	movs	r2, #0
 8006518:	2300      	movs	r3, #0
 800651a:	4620      	mov	r0, r4
 800651c:	4629      	mov	r1, r5
 800651e:	f7fa fafb 	bl	8000b18 <__aeabi_dcmpeq>
 8006522:	b108      	cbz	r0, 8006528 <__cvt+0xa4>
 8006524:	f8cd 900c 	str.w	r9, [sp, #12]
 8006528:	2230      	movs	r2, #48	; 0x30
 800652a:	9b03      	ldr	r3, [sp, #12]
 800652c:	454b      	cmp	r3, r9
 800652e:	d307      	bcc.n	8006540 <__cvt+0xbc>
 8006530:	9b03      	ldr	r3, [sp, #12]
 8006532:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006534:	1bdb      	subs	r3, r3, r7
 8006536:	4638      	mov	r0, r7
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	b004      	add	sp, #16
 800653c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006540:	1c59      	adds	r1, r3, #1
 8006542:	9103      	str	r1, [sp, #12]
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	e7f0      	b.n	800652a <__cvt+0xa6>

08006548 <__exponent>:
 8006548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800654a:	4603      	mov	r3, r0
 800654c:	2900      	cmp	r1, #0
 800654e:	bfb8      	it	lt
 8006550:	4249      	neglt	r1, r1
 8006552:	f803 2b02 	strb.w	r2, [r3], #2
 8006556:	bfb4      	ite	lt
 8006558:	222d      	movlt	r2, #45	; 0x2d
 800655a:	222b      	movge	r2, #43	; 0x2b
 800655c:	2909      	cmp	r1, #9
 800655e:	7042      	strb	r2, [r0, #1]
 8006560:	dd2a      	ble.n	80065b8 <__exponent+0x70>
 8006562:	f10d 0207 	add.w	r2, sp, #7
 8006566:	4617      	mov	r7, r2
 8006568:	260a      	movs	r6, #10
 800656a:	4694      	mov	ip, r2
 800656c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006570:	fb06 1415 	mls	r4, r6, r5, r1
 8006574:	3430      	adds	r4, #48	; 0x30
 8006576:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800657a:	460c      	mov	r4, r1
 800657c:	2c63      	cmp	r4, #99	; 0x63
 800657e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006582:	4629      	mov	r1, r5
 8006584:	dcf1      	bgt.n	800656a <__exponent+0x22>
 8006586:	3130      	adds	r1, #48	; 0x30
 8006588:	f1ac 0402 	sub.w	r4, ip, #2
 800658c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006590:	1c41      	adds	r1, r0, #1
 8006592:	4622      	mov	r2, r4
 8006594:	42ba      	cmp	r2, r7
 8006596:	d30a      	bcc.n	80065ae <__exponent+0x66>
 8006598:	f10d 0209 	add.w	r2, sp, #9
 800659c:	eba2 020c 	sub.w	r2, r2, ip
 80065a0:	42bc      	cmp	r4, r7
 80065a2:	bf88      	it	hi
 80065a4:	2200      	movhi	r2, #0
 80065a6:	4413      	add	r3, r2
 80065a8:	1a18      	subs	r0, r3, r0
 80065aa:	b003      	add	sp, #12
 80065ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ae:	f812 5b01 	ldrb.w	r5, [r2], #1
 80065b2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80065b6:	e7ed      	b.n	8006594 <__exponent+0x4c>
 80065b8:	2330      	movs	r3, #48	; 0x30
 80065ba:	3130      	adds	r1, #48	; 0x30
 80065bc:	7083      	strb	r3, [r0, #2]
 80065be:	70c1      	strb	r1, [r0, #3]
 80065c0:	1d03      	adds	r3, r0, #4
 80065c2:	e7f1      	b.n	80065a8 <__exponent+0x60>

080065c4 <_printf_float>:
 80065c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c8:	ed2d 8b02 	vpush	{d8}
 80065cc:	b08d      	sub	sp, #52	; 0x34
 80065ce:	460c      	mov	r4, r1
 80065d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80065d4:	4616      	mov	r6, r2
 80065d6:	461f      	mov	r7, r3
 80065d8:	4605      	mov	r5, r0
 80065da:	f000 fcd9 	bl	8006f90 <_localeconv_r>
 80065de:	f8d0 a000 	ldr.w	sl, [r0]
 80065e2:	4650      	mov	r0, sl
 80065e4:	f7f9 fe6c 	bl	80002c0 <strlen>
 80065e8:	2300      	movs	r3, #0
 80065ea:	930a      	str	r3, [sp, #40]	; 0x28
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	9305      	str	r3, [sp, #20]
 80065f0:	f8d8 3000 	ldr.w	r3, [r8]
 80065f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80065f8:	3307      	adds	r3, #7
 80065fa:	f023 0307 	bic.w	r3, r3, #7
 80065fe:	f103 0208 	add.w	r2, r3, #8
 8006602:	f8c8 2000 	str.w	r2, [r8]
 8006606:	e9d3 8900 	ldrd	r8, r9, [r3]
 800660a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800660e:	9307      	str	r3, [sp, #28]
 8006610:	f8cd 8018 	str.w	r8, [sp, #24]
 8006614:	ee08 0a10 	vmov	s16, r0
 8006618:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800661c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006620:	4b9e      	ldr	r3, [pc, #632]	; (800689c <_printf_float+0x2d8>)
 8006622:	f04f 32ff 	mov.w	r2, #4294967295
 8006626:	f7fa faa9 	bl	8000b7c <__aeabi_dcmpun>
 800662a:	bb88      	cbnz	r0, 8006690 <_printf_float+0xcc>
 800662c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006630:	4b9a      	ldr	r3, [pc, #616]	; (800689c <_printf_float+0x2d8>)
 8006632:	f04f 32ff 	mov.w	r2, #4294967295
 8006636:	f7fa fa83 	bl	8000b40 <__aeabi_dcmple>
 800663a:	bb48      	cbnz	r0, 8006690 <_printf_float+0xcc>
 800663c:	2200      	movs	r2, #0
 800663e:	2300      	movs	r3, #0
 8006640:	4640      	mov	r0, r8
 8006642:	4649      	mov	r1, r9
 8006644:	f7fa fa72 	bl	8000b2c <__aeabi_dcmplt>
 8006648:	b110      	cbz	r0, 8006650 <_printf_float+0x8c>
 800664a:	232d      	movs	r3, #45	; 0x2d
 800664c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006650:	4a93      	ldr	r2, [pc, #588]	; (80068a0 <_printf_float+0x2dc>)
 8006652:	4b94      	ldr	r3, [pc, #592]	; (80068a4 <_printf_float+0x2e0>)
 8006654:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006658:	bf94      	ite	ls
 800665a:	4690      	movls	r8, r2
 800665c:	4698      	movhi	r8, r3
 800665e:	2303      	movs	r3, #3
 8006660:	6123      	str	r3, [r4, #16]
 8006662:	9b05      	ldr	r3, [sp, #20]
 8006664:	f023 0304 	bic.w	r3, r3, #4
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	f04f 0900 	mov.w	r9, #0
 800666e:	9700      	str	r7, [sp, #0]
 8006670:	4633      	mov	r3, r6
 8006672:	aa0b      	add	r2, sp, #44	; 0x2c
 8006674:	4621      	mov	r1, r4
 8006676:	4628      	mov	r0, r5
 8006678:	f000 f9da 	bl	8006a30 <_printf_common>
 800667c:	3001      	adds	r0, #1
 800667e:	f040 8090 	bne.w	80067a2 <_printf_float+0x1de>
 8006682:	f04f 30ff 	mov.w	r0, #4294967295
 8006686:	b00d      	add	sp, #52	; 0x34
 8006688:	ecbd 8b02 	vpop	{d8}
 800668c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006690:	4642      	mov	r2, r8
 8006692:	464b      	mov	r3, r9
 8006694:	4640      	mov	r0, r8
 8006696:	4649      	mov	r1, r9
 8006698:	f7fa fa70 	bl	8000b7c <__aeabi_dcmpun>
 800669c:	b140      	cbz	r0, 80066b0 <_printf_float+0xec>
 800669e:	464b      	mov	r3, r9
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	bfbc      	itt	lt
 80066a4:	232d      	movlt	r3, #45	; 0x2d
 80066a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80066aa:	4a7f      	ldr	r2, [pc, #508]	; (80068a8 <_printf_float+0x2e4>)
 80066ac:	4b7f      	ldr	r3, [pc, #508]	; (80068ac <_printf_float+0x2e8>)
 80066ae:	e7d1      	b.n	8006654 <_printf_float+0x90>
 80066b0:	6863      	ldr	r3, [r4, #4]
 80066b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80066b6:	9206      	str	r2, [sp, #24]
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	d13f      	bne.n	800673c <_printf_float+0x178>
 80066bc:	2306      	movs	r3, #6
 80066be:	6063      	str	r3, [r4, #4]
 80066c0:	9b05      	ldr	r3, [sp, #20]
 80066c2:	6861      	ldr	r1, [r4, #4]
 80066c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80066c8:	2300      	movs	r3, #0
 80066ca:	9303      	str	r3, [sp, #12]
 80066cc:	ab0a      	add	r3, sp, #40	; 0x28
 80066ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80066d2:	ab09      	add	r3, sp, #36	; 0x24
 80066d4:	ec49 8b10 	vmov	d0, r8, r9
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	6022      	str	r2, [r4, #0]
 80066dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80066e0:	4628      	mov	r0, r5
 80066e2:	f7ff fecf 	bl	8006484 <__cvt>
 80066e6:	9b06      	ldr	r3, [sp, #24]
 80066e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066ea:	2b47      	cmp	r3, #71	; 0x47
 80066ec:	4680      	mov	r8, r0
 80066ee:	d108      	bne.n	8006702 <_printf_float+0x13e>
 80066f0:	1cc8      	adds	r0, r1, #3
 80066f2:	db02      	blt.n	80066fa <_printf_float+0x136>
 80066f4:	6863      	ldr	r3, [r4, #4]
 80066f6:	4299      	cmp	r1, r3
 80066f8:	dd41      	ble.n	800677e <_printf_float+0x1ba>
 80066fa:	f1ab 0302 	sub.w	r3, fp, #2
 80066fe:	fa5f fb83 	uxtb.w	fp, r3
 8006702:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006706:	d820      	bhi.n	800674a <_printf_float+0x186>
 8006708:	3901      	subs	r1, #1
 800670a:	465a      	mov	r2, fp
 800670c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006710:	9109      	str	r1, [sp, #36]	; 0x24
 8006712:	f7ff ff19 	bl	8006548 <__exponent>
 8006716:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006718:	1813      	adds	r3, r2, r0
 800671a:	2a01      	cmp	r2, #1
 800671c:	4681      	mov	r9, r0
 800671e:	6123      	str	r3, [r4, #16]
 8006720:	dc02      	bgt.n	8006728 <_printf_float+0x164>
 8006722:	6822      	ldr	r2, [r4, #0]
 8006724:	07d2      	lsls	r2, r2, #31
 8006726:	d501      	bpl.n	800672c <_printf_float+0x168>
 8006728:	3301      	adds	r3, #1
 800672a:	6123      	str	r3, [r4, #16]
 800672c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006730:	2b00      	cmp	r3, #0
 8006732:	d09c      	beq.n	800666e <_printf_float+0xaa>
 8006734:	232d      	movs	r3, #45	; 0x2d
 8006736:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800673a:	e798      	b.n	800666e <_printf_float+0xaa>
 800673c:	9a06      	ldr	r2, [sp, #24]
 800673e:	2a47      	cmp	r2, #71	; 0x47
 8006740:	d1be      	bne.n	80066c0 <_printf_float+0xfc>
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1bc      	bne.n	80066c0 <_printf_float+0xfc>
 8006746:	2301      	movs	r3, #1
 8006748:	e7b9      	b.n	80066be <_printf_float+0xfa>
 800674a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800674e:	d118      	bne.n	8006782 <_printf_float+0x1be>
 8006750:	2900      	cmp	r1, #0
 8006752:	6863      	ldr	r3, [r4, #4]
 8006754:	dd0b      	ble.n	800676e <_printf_float+0x1aa>
 8006756:	6121      	str	r1, [r4, #16]
 8006758:	b913      	cbnz	r3, 8006760 <_printf_float+0x19c>
 800675a:	6822      	ldr	r2, [r4, #0]
 800675c:	07d0      	lsls	r0, r2, #31
 800675e:	d502      	bpl.n	8006766 <_printf_float+0x1a2>
 8006760:	3301      	adds	r3, #1
 8006762:	440b      	add	r3, r1
 8006764:	6123      	str	r3, [r4, #16]
 8006766:	65a1      	str	r1, [r4, #88]	; 0x58
 8006768:	f04f 0900 	mov.w	r9, #0
 800676c:	e7de      	b.n	800672c <_printf_float+0x168>
 800676e:	b913      	cbnz	r3, 8006776 <_printf_float+0x1b2>
 8006770:	6822      	ldr	r2, [r4, #0]
 8006772:	07d2      	lsls	r2, r2, #31
 8006774:	d501      	bpl.n	800677a <_printf_float+0x1b6>
 8006776:	3302      	adds	r3, #2
 8006778:	e7f4      	b.n	8006764 <_printf_float+0x1a0>
 800677a:	2301      	movs	r3, #1
 800677c:	e7f2      	b.n	8006764 <_printf_float+0x1a0>
 800677e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006784:	4299      	cmp	r1, r3
 8006786:	db05      	blt.n	8006794 <_printf_float+0x1d0>
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	6121      	str	r1, [r4, #16]
 800678c:	07d8      	lsls	r0, r3, #31
 800678e:	d5ea      	bpl.n	8006766 <_printf_float+0x1a2>
 8006790:	1c4b      	adds	r3, r1, #1
 8006792:	e7e7      	b.n	8006764 <_printf_float+0x1a0>
 8006794:	2900      	cmp	r1, #0
 8006796:	bfd4      	ite	le
 8006798:	f1c1 0202 	rsble	r2, r1, #2
 800679c:	2201      	movgt	r2, #1
 800679e:	4413      	add	r3, r2
 80067a0:	e7e0      	b.n	8006764 <_printf_float+0x1a0>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	055a      	lsls	r2, r3, #21
 80067a6:	d407      	bmi.n	80067b8 <_printf_float+0x1f4>
 80067a8:	6923      	ldr	r3, [r4, #16]
 80067aa:	4642      	mov	r2, r8
 80067ac:	4631      	mov	r1, r6
 80067ae:	4628      	mov	r0, r5
 80067b0:	47b8      	blx	r7
 80067b2:	3001      	adds	r0, #1
 80067b4:	d12c      	bne.n	8006810 <_printf_float+0x24c>
 80067b6:	e764      	b.n	8006682 <_printf_float+0xbe>
 80067b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067bc:	f240 80e0 	bls.w	8006980 <_printf_float+0x3bc>
 80067c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067c4:	2200      	movs	r2, #0
 80067c6:	2300      	movs	r3, #0
 80067c8:	f7fa f9a6 	bl	8000b18 <__aeabi_dcmpeq>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d034      	beq.n	800683a <_printf_float+0x276>
 80067d0:	4a37      	ldr	r2, [pc, #220]	; (80068b0 <_printf_float+0x2ec>)
 80067d2:	2301      	movs	r3, #1
 80067d4:	4631      	mov	r1, r6
 80067d6:	4628      	mov	r0, r5
 80067d8:	47b8      	blx	r7
 80067da:	3001      	adds	r0, #1
 80067dc:	f43f af51 	beq.w	8006682 <_printf_float+0xbe>
 80067e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067e4:	429a      	cmp	r2, r3
 80067e6:	db02      	blt.n	80067ee <_printf_float+0x22a>
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	07d8      	lsls	r0, r3, #31
 80067ec:	d510      	bpl.n	8006810 <_printf_float+0x24c>
 80067ee:	ee18 3a10 	vmov	r3, s16
 80067f2:	4652      	mov	r2, sl
 80067f4:	4631      	mov	r1, r6
 80067f6:	4628      	mov	r0, r5
 80067f8:	47b8      	blx	r7
 80067fa:	3001      	adds	r0, #1
 80067fc:	f43f af41 	beq.w	8006682 <_printf_float+0xbe>
 8006800:	f04f 0800 	mov.w	r8, #0
 8006804:	f104 091a 	add.w	r9, r4, #26
 8006808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800680a:	3b01      	subs	r3, #1
 800680c:	4543      	cmp	r3, r8
 800680e:	dc09      	bgt.n	8006824 <_printf_float+0x260>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	079b      	lsls	r3, r3, #30
 8006814:	f100 8107 	bmi.w	8006a26 <_printf_float+0x462>
 8006818:	68e0      	ldr	r0, [r4, #12]
 800681a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800681c:	4298      	cmp	r0, r3
 800681e:	bfb8      	it	lt
 8006820:	4618      	movlt	r0, r3
 8006822:	e730      	b.n	8006686 <_printf_float+0xc2>
 8006824:	2301      	movs	r3, #1
 8006826:	464a      	mov	r2, r9
 8006828:	4631      	mov	r1, r6
 800682a:	4628      	mov	r0, r5
 800682c:	47b8      	blx	r7
 800682e:	3001      	adds	r0, #1
 8006830:	f43f af27 	beq.w	8006682 <_printf_float+0xbe>
 8006834:	f108 0801 	add.w	r8, r8, #1
 8006838:	e7e6      	b.n	8006808 <_printf_float+0x244>
 800683a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800683c:	2b00      	cmp	r3, #0
 800683e:	dc39      	bgt.n	80068b4 <_printf_float+0x2f0>
 8006840:	4a1b      	ldr	r2, [pc, #108]	; (80068b0 <_printf_float+0x2ec>)
 8006842:	2301      	movs	r3, #1
 8006844:	4631      	mov	r1, r6
 8006846:	4628      	mov	r0, r5
 8006848:	47b8      	blx	r7
 800684a:	3001      	adds	r0, #1
 800684c:	f43f af19 	beq.w	8006682 <_printf_float+0xbe>
 8006850:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006854:	4313      	orrs	r3, r2
 8006856:	d102      	bne.n	800685e <_printf_float+0x29a>
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	07d9      	lsls	r1, r3, #31
 800685c:	d5d8      	bpl.n	8006810 <_printf_float+0x24c>
 800685e:	ee18 3a10 	vmov	r3, s16
 8006862:	4652      	mov	r2, sl
 8006864:	4631      	mov	r1, r6
 8006866:	4628      	mov	r0, r5
 8006868:	47b8      	blx	r7
 800686a:	3001      	adds	r0, #1
 800686c:	f43f af09 	beq.w	8006682 <_printf_float+0xbe>
 8006870:	f04f 0900 	mov.w	r9, #0
 8006874:	f104 0a1a 	add.w	sl, r4, #26
 8006878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800687a:	425b      	negs	r3, r3
 800687c:	454b      	cmp	r3, r9
 800687e:	dc01      	bgt.n	8006884 <_printf_float+0x2c0>
 8006880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006882:	e792      	b.n	80067aa <_printf_float+0x1e6>
 8006884:	2301      	movs	r3, #1
 8006886:	4652      	mov	r2, sl
 8006888:	4631      	mov	r1, r6
 800688a:	4628      	mov	r0, r5
 800688c:	47b8      	blx	r7
 800688e:	3001      	adds	r0, #1
 8006890:	f43f aef7 	beq.w	8006682 <_printf_float+0xbe>
 8006894:	f109 0901 	add.w	r9, r9, #1
 8006898:	e7ee      	b.n	8006878 <_printf_float+0x2b4>
 800689a:	bf00      	nop
 800689c:	7fefffff 	.word	0x7fefffff
 80068a0:	08008ec8 	.word	0x08008ec8
 80068a4:	08008ecc 	.word	0x08008ecc
 80068a8:	08008ed0 	.word	0x08008ed0
 80068ac:	08008ed4 	.word	0x08008ed4
 80068b0:	08008ed8 	.word	0x08008ed8
 80068b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068b8:	429a      	cmp	r2, r3
 80068ba:	bfa8      	it	ge
 80068bc:	461a      	movge	r2, r3
 80068be:	2a00      	cmp	r2, #0
 80068c0:	4691      	mov	r9, r2
 80068c2:	dc37      	bgt.n	8006934 <_printf_float+0x370>
 80068c4:	f04f 0b00 	mov.w	fp, #0
 80068c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068cc:	f104 021a 	add.w	r2, r4, #26
 80068d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068d2:	9305      	str	r3, [sp, #20]
 80068d4:	eba3 0309 	sub.w	r3, r3, r9
 80068d8:	455b      	cmp	r3, fp
 80068da:	dc33      	bgt.n	8006944 <_printf_float+0x380>
 80068dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068e0:	429a      	cmp	r2, r3
 80068e2:	db3b      	blt.n	800695c <_printf_float+0x398>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	07da      	lsls	r2, r3, #31
 80068e8:	d438      	bmi.n	800695c <_printf_float+0x398>
 80068ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80068ee:	eba2 0903 	sub.w	r9, r2, r3
 80068f2:	9b05      	ldr	r3, [sp, #20]
 80068f4:	1ad2      	subs	r2, r2, r3
 80068f6:	4591      	cmp	r9, r2
 80068f8:	bfa8      	it	ge
 80068fa:	4691      	movge	r9, r2
 80068fc:	f1b9 0f00 	cmp.w	r9, #0
 8006900:	dc35      	bgt.n	800696e <_printf_float+0x3aa>
 8006902:	f04f 0800 	mov.w	r8, #0
 8006906:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800690a:	f104 0a1a 	add.w	sl, r4, #26
 800690e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006912:	1a9b      	subs	r3, r3, r2
 8006914:	eba3 0309 	sub.w	r3, r3, r9
 8006918:	4543      	cmp	r3, r8
 800691a:	f77f af79 	ble.w	8006810 <_printf_float+0x24c>
 800691e:	2301      	movs	r3, #1
 8006920:	4652      	mov	r2, sl
 8006922:	4631      	mov	r1, r6
 8006924:	4628      	mov	r0, r5
 8006926:	47b8      	blx	r7
 8006928:	3001      	adds	r0, #1
 800692a:	f43f aeaa 	beq.w	8006682 <_printf_float+0xbe>
 800692e:	f108 0801 	add.w	r8, r8, #1
 8006932:	e7ec      	b.n	800690e <_printf_float+0x34a>
 8006934:	4613      	mov	r3, r2
 8006936:	4631      	mov	r1, r6
 8006938:	4642      	mov	r2, r8
 800693a:	4628      	mov	r0, r5
 800693c:	47b8      	blx	r7
 800693e:	3001      	adds	r0, #1
 8006940:	d1c0      	bne.n	80068c4 <_printf_float+0x300>
 8006942:	e69e      	b.n	8006682 <_printf_float+0xbe>
 8006944:	2301      	movs	r3, #1
 8006946:	4631      	mov	r1, r6
 8006948:	4628      	mov	r0, r5
 800694a:	9205      	str	r2, [sp, #20]
 800694c:	47b8      	blx	r7
 800694e:	3001      	adds	r0, #1
 8006950:	f43f ae97 	beq.w	8006682 <_printf_float+0xbe>
 8006954:	9a05      	ldr	r2, [sp, #20]
 8006956:	f10b 0b01 	add.w	fp, fp, #1
 800695a:	e7b9      	b.n	80068d0 <_printf_float+0x30c>
 800695c:	ee18 3a10 	vmov	r3, s16
 8006960:	4652      	mov	r2, sl
 8006962:	4631      	mov	r1, r6
 8006964:	4628      	mov	r0, r5
 8006966:	47b8      	blx	r7
 8006968:	3001      	adds	r0, #1
 800696a:	d1be      	bne.n	80068ea <_printf_float+0x326>
 800696c:	e689      	b.n	8006682 <_printf_float+0xbe>
 800696e:	9a05      	ldr	r2, [sp, #20]
 8006970:	464b      	mov	r3, r9
 8006972:	4442      	add	r2, r8
 8006974:	4631      	mov	r1, r6
 8006976:	4628      	mov	r0, r5
 8006978:	47b8      	blx	r7
 800697a:	3001      	adds	r0, #1
 800697c:	d1c1      	bne.n	8006902 <_printf_float+0x33e>
 800697e:	e680      	b.n	8006682 <_printf_float+0xbe>
 8006980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006982:	2a01      	cmp	r2, #1
 8006984:	dc01      	bgt.n	800698a <_printf_float+0x3c6>
 8006986:	07db      	lsls	r3, r3, #31
 8006988:	d53a      	bpl.n	8006a00 <_printf_float+0x43c>
 800698a:	2301      	movs	r3, #1
 800698c:	4642      	mov	r2, r8
 800698e:	4631      	mov	r1, r6
 8006990:	4628      	mov	r0, r5
 8006992:	47b8      	blx	r7
 8006994:	3001      	adds	r0, #1
 8006996:	f43f ae74 	beq.w	8006682 <_printf_float+0xbe>
 800699a:	ee18 3a10 	vmov	r3, s16
 800699e:	4652      	mov	r2, sl
 80069a0:	4631      	mov	r1, r6
 80069a2:	4628      	mov	r0, r5
 80069a4:	47b8      	blx	r7
 80069a6:	3001      	adds	r0, #1
 80069a8:	f43f ae6b 	beq.w	8006682 <_printf_float+0xbe>
 80069ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069b0:	2200      	movs	r2, #0
 80069b2:	2300      	movs	r3, #0
 80069b4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80069b8:	f7fa f8ae 	bl	8000b18 <__aeabi_dcmpeq>
 80069bc:	b9d8      	cbnz	r0, 80069f6 <_printf_float+0x432>
 80069be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80069c2:	f108 0201 	add.w	r2, r8, #1
 80069c6:	4631      	mov	r1, r6
 80069c8:	4628      	mov	r0, r5
 80069ca:	47b8      	blx	r7
 80069cc:	3001      	adds	r0, #1
 80069ce:	d10e      	bne.n	80069ee <_printf_float+0x42a>
 80069d0:	e657      	b.n	8006682 <_printf_float+0xbe>
 80069d2:	2301      	movs	r3, #1
 80069d4:	4652      	mov	r2, sl
 80069d6:	4631      	mov	r1, r6
 80069d8:	4628      	mov	r0, r5
 80069da:	47b8      	blx	r7
 80069dc:	3001      	adds	r0, #1
 80069de:	f43f ae50 	beq.w	8006682 <_printf_float+0xbe>
 80069e2:	f108 0801 	add.w	r8, r8, #1
 80069e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e8:	3b01      	subs	r3, #1
 80069ea:	4543      	cmp	r3, r8
 80069ec:	dcf1      	bgt.n	80069d2 <_printf_float+0x40e>
 80069ee:	464b      	mov	r3, r9
 80069f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069f4:	e6da      	b.n	80067ac <_printf_float+0x1e8>
 80069f6:	f04f 0800 	mov.w	r8, #0
 80069fa:	f104 0a1a 	add.w	sl, r4, #26
 80069fe:	e7f2      	b.n	80069e6 <_printf_float+0x422>
 8006a00:	2301      	movs	r3, #1
 8006a02:	4642      	mov	r2, r8
 8006a04:	e7df      	b.n	80069c6 <_printf_float+0x402>
 8006a06:	2301      	movs	r3, #1
 8006a08:	464a      	mov	r2, r9
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	47b8      	blx	r7
 8006a10:	3001      	adds	r0, #1
 8006a12:	f43f ae36 	beq.w	8006682 <_printf_float+0xbe>
 8006a16:	f108 0801 	add.w	r8, r8, #1
 8006a1a:	68e3      	ldr	r3, [r4, #12]
 8006a1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a1e:	1a5b      	subs	r3, r3, r1
 8006a20:	4543      	cmp	r3, r8
 8006a22:	dcf0      	bgt.n	8006a06 <_printf_float+0x442>
 8006a24:	e6f8      	b.n	8006818 <_printf_float+0x254>
 8006a26:	f04f 0800 	mov.w	r8, #0
 8006a2a:	f104 0919 	add.w	r9, r4, #25
 8006a2e:	e7f4      	b.n	8006a1a <_printf_float+0x456>

08006a30 <_printf_common>:
 8006a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a34:	4616      	mov	r6, r2
 8006a36:	4699      	mov	r9, r3
 8006a38:	688a      	ldr	r2, [r1, #8]
 8006a3a:	690b      	ldr	r3, [r1, #16]
 8006a3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a40:	4293      	cmp	r3, r2
 8006a42:	bfb8      	it	lt
 8006a44:	4613      	movlt	r3, r2
 8006a46:	6033      	str	r3, [r6, #0]
 8006a48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a4c:	4607      	mov	r7, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	b10a      	cbz	r2, 8006a56 <_printf_common+0x26>
 8006a52:	3301      	adds	r3, #1
 8006a54:	6033      	str	r3, [r6, #0]
 8006a56:	6823      	ldr	r3, [r4, #0]
 8006a58:	0699      	lsls	r1, r3, #26
 8006a5a:	bf42      	ittt	mi
 8006a5c:	6833      	ldrmi	r3, [r6, #0]
 8006a5e:	3302      	addmi	r3, #2
 8006a60:	6033      	strmi	r3, [r6, #0]
 8006a62:	6825      	ldr	r5, [r4, #0]
 8006a64:	f015 0506 	ands.w	r5, r5, #6
 8006a68:	d106      	bne.n	8006a78 <_printf_common+0x48>
 8006a6a:	f104 0a19 	add.w	sl, r4, #25
 8006a6e:	68e3      	ldr	r3, [r4, #12]
 8006a70:	6832      	ldr	r2, [r6, #0]
 8006a72:	1a9b      	subs	r3, r3, r2
 8006a74:	42ab      	cmp	r3, r5
 8006a76:	dc26      	bgt.n	8006ac6 <_printf_common+0x96>
 8006a78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a7c:	1e13      	subs	r3, r2, #0
 8006a7e:	6822      	ldr	r2, [r4, #0]
 8006a80:	bf18      	it	ne
 8006a82:	2301      	movne	r3, #1
 8006a84:	0692      	lsls	r2, r2, #26
 8006a86:	d42b      	bmi.n	8006ae0 <_printf_common+0xb0>
 8006a88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	4638      	mov	r0, r7
 8006a90:	47c0      	blx	r8
 8006a92:	3001      	adds	r0, #1
 8006a94:	d01e      	beq.n	8006ad4 <_printf_common+0xa4>
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	6922      	ldr	r2, [r4, #16]
 8006a9a:	f003 0306 	and.w	r3, r3, #6
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	bf02      	ittt	eq
 8006aa2:	68e5      	ldreq	r5, [r4, #12]
 8006aa4:	6833      	ldreq	r3, [r6, #0]
 8006aa6:	1aed      	subeq	r5, r5, r3
 8006aa8:	68a3      	ldr	r3, [r4, #8]
 8006aaa:	bf0c      	ite	eq
 8006aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ab0:	2500      	movne	r5, #0
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	bfc4      	itt	gt
 8006ab6:	1a9b      	subgt	r3, r3, r2
 8006ab8:	18ed      	addgt	r5, r5, r3
 8006aba:	2600      	movs	r6, #0
 8006abc:	341a      	adds	r4, #26
 8006abe:	42b5      	cmp	r5, r6
 8006ac0:	d11a      	bne.n	8006af8 <_printf_common+0xc8>
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	e008      	b.n	8006ad8 <_printf_common+0xa8>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	4652      	mov	r2, sl
 8006aca:	4649      	mov	r1, r9
 8006acc:	4638      	mov	r0, r7
 8006ace:	47c0      	blx	r8
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	d103      	bne.n	8006adc <_printf_common+0xac>
 8006ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006adc:	3501      	adds	r5, #1
 8006ade:	e7c6      	b.n	8006a6e <_printf_common+0x3e>
 8006ae0:	18e1      	adds	r1, r4, r3
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	2030      	movs	r0, #48	; 0x30
 8006ae6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006aea:	4422      	add	r2, r4
 8006aec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006af0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006af4:	3302      	adds	r3, #2
 8006af6:	e7c7      	b.n	8006a88 <_printf_common+0x58>
 8006af8:	2301      	movs	r3, #1
 8006afa:	4622      	mov	r2, r4
 8006afc:	4649      	mov	r1, r9
 8006afe:	4638      	mov	r0, r7
 8006b00:	47c0      	blx	r8
 8006b02:	3001      	adds	r0, #1
 8006b04:	d0e6      	beq.n	8006ad4 <_printf_common+0xa4>
 8006b06:	3601      	adds	r6, #1
 8006b08:	e7d9      	b.n	8006abe <_printf_common+0x8e>
	...

08006b0c <_printf_i>:
 8006b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b10:	7e0f      	ldrb	r7, [r1, #24]
 8006b12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b14:	2f78      	cmp	r7, #120	; 0x78
 8006b16:	4691      	mov	r9, r2
 8006b18:	4680      	mov	r8, r0
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	469a      	mov	sl, r3
 8006b1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b22:	d807      	bhi.n	8006b34 <_printf_i+0x28>
 8006b24:	2f62      	cmp	r7, #98	; 0x62
 8006b26:	d80a      	bhi.n	8006b3e <_printf_i+0x32>
 8006b28:	2f00      	cmp	r7, #0
 8006b2a:	f000 80d4 	beq.w	8006cd6 <_printf_i+0x1ca>
 8006b2e:	2f58      	cmp	r7, #88	; 0x58
 8006b30:	f000 80c0 	beq.w	8006cb4 <_printf_i+0x1a8>
 8006b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b3c:	e03a      	b.n	8006bb4 <_printf_i+0xa8>
 8006b3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b42:	2b15      	cmp	r3, #21
 8006b44:	d8f6      	bhi.n	8006b34 <_printf_i+0x28>
 8006b46:	a101      	add	r1, pc, #4	; (adr r1, 8006b4c <_printf_i+0x40>)
 8006b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b4c:	08006ba5 	.word	0x08006ba5
 8006b50:	08006bb9 	.word	0x08006bb9
 8006b54:	08006b35 	.word	0x08006b35
 8006b58:	08006b35 	.word	0x08006b35
 8006b5c:	08006b35 	.word	0x08006b35
 8006b60:	08006b35 	.word	0x08006b35
 8006b64:	08006bb9 	.word	0x08006bb9
 8006b68:	08006b35 	.word	0x08006b35
 8006b6c:	08006b35 	.word	0x08006b35
 8006b70:	08006b35 	.word	0x08006b35
 8006b74:	08006b35 	.word	0x08006b35
 8006b78:	08006cbd 	.word	0x08006cbd
 8006b7c:	08006be5 	.word	0x08006be5
 8006b80:	08006c77 	.word	0x08006c77
 8006b84:	08006b35 	.word	0x08006b35
 8006b88:	08006b35 	.word	0x08006b35
 8006b8c:	08006cdf 	.word	0x08006cdf
 8006b90:	08006b35 	.word	0x08006b35
 8006b94:	08006be5 	.word	0x08006be5
 8006b98:	08006b35 	.word	0x08006b35
 8006b9c:	08006b35 	.word	0x08006b35
 8006ba0:	08006c7f 	.word	0x08006c7f
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	1d1a      	adds	r2, r3, #4
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	602a      	str	r2, [r5, #0]
 8006bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e09f      	b.n	8006cf8 <_printf_i+0x1ec>
 8006bb8:	6820      	ldr	r0, [r4, #0]
 8006bba:	682b      	ldr	r3, [r5, #0]
 8006bbc:	0607      	lsls	r7, r0, #24
 8006bbe:	f103 0104 	add.w	r1, r3, #4
 8006bc2:	6029      	str	r1, [r5, #0]
 8006bc4:	d501      	bpl.n	8006bca <_printf_i+0xbe>
 8006bc6:	681e      	ldr	r6, [r3, #0]
 8006bc8:	e003      	b.n	8006bd2 <_printf_i+0xc6>
 8006bca:	0646      	lsls	r6, r0, #25
 8006bcc:	d5fb      	bpl.n	8006bc6 <_printf_i+0xba>
 8006bce:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006bd2:	2e00      	cmp	r6, #0
 8006bd4:	da03      	bge.n	8006bde <_printf_i+0xd2>
 8006bd6:	232d      	movs	r3, #45	; 0x2d
 8006bd8:	4276      	negs	r6, r6
 8006bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bde:	485a      	ldr	r0, [pc, #360]	; (8006d48 <_printf_i+0x23c>)
 8006be0:	230a      	movs	r3, #10
 8006be2:	e012      	b.n	8006c0a <_printf_i+0xfe>
 8006be4:	682b      	ldr	r3, [r5, #0]
 8006be6:	6820      	ldr	r0, [r4, #0]
 8006be8:	1d19      	adds	r1, r3, #4
 8006bea:	6029      	str	r1, [r5, #0]
 8006bec:	0605      	lsls	r5, r0, #24
 8006bee:	d501      	bpl.n	8006bf4 <_printf_i+0xe8>
 8006bf0:	681e      	ldr	r6, [r3, #0]
 8006bf2:	e002      	b.n	8006bfa <_printf_i+0xee>
 8006bf4:	0641      	lsls	r1, r0, #25
 8006bf6:	d5fb      	bpl.n	8006bf0 <_printf_i+0xe4>
 8006bf8:	881e      	ldrh	r6, [r3, #0]
 8006bfa:	4853      	ldr	r0, [pc, #332]	; (8006d48 <_printf_i+0x23c>)
 8006bfc:	2f6f      	cmp	r7, #111	; 0x6f
 8006bfe:	bf0c      	ite	eq
 8006c00:	2308      	moveq	r3, #8
 8006c02:	230a      	movne	r3, #10
 8006c04:	2100      	movs	r1, #0
 8006c06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c0a:	6865      	ldr	r5, [r4, #4]
 8006c0c:	60a5      	str	r5, [r4, #8]
 8006c0e:	2d00      	cmp	r5, #0
 8006c10:	bfa2      	ittt	ge
 8006c12:	6821      	ldrge	r1, [r4, #0]
 8006c14:	f021 0104 	bicge.w	r1, r1, #4
 8006c18:	6021      	strge	r1, [r4, #0]
 8006c1a:	b90e      	cbnz	r6, 8006c20 <_printf_i+0x114>
 8006c1c:	2d00      	cmp	r5, #0
 8006c1e:	d04b      	beq.n	8006cb8 <_printf_i+0x1ac>
 8006c20:	4615      	mov	r5, r2
 8006c22:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c26:	fb03 6711 	mls	r7, r3, r1, r6
 8006c2a:	5dc7      	ldrb	r7, [r0, r7]
 8006c2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c30:	4637      	mov	r7, r6
 8006c32:	42bb      	cmp	r3, r7
 8006c34:	460e      	mov	r6, r1
 8006c36:	d9f4      	bls.n	8006c22 <_printf_i+0x116>
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	d10b      	bne.n	8006c54 <_printf_i+0x148>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	07de      	lsls	r6, r3, #31
 8006c40:	d508      	bpl.n	8006c54 <_printf_i+0x148>
 8006c42:	6923      	ldr	r3, [r4, #16]
 8006c44:	6861      	ldr	r1, [r4, #4]
 8006c46:	4299      	cmp	r1, r3
 8006c48:	bfde      	ittt	le
 8006c4a:	2330      	movle	r3, #48	; 0x30
 8006c4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c54:	1b52      	subs	r2, r2, r5
 8006c56:	6122      	str	r2, [r4, #16]
 8006c58:	f8cd a000 	str.w	sl, [sp]
 8006c5c:	464b      	mov	r3, r9
 8006c5e:	aa03      	add	r2, sp, #12
 8006c60:	4621      	mov	r1, r4
 8006c62:	4640      	mov	r0, r8
 8006c64:	f7ff fee4 	bl	8006a30 <_printf_common>
 8006c68:	3001      	adds	r0, #1
 8006c6a:	d14a      	bne.n	8006d02 <_printf_i+0x1f6>
 8006c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c70:	b004      	add	sp, #16
 8006c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	f043 0320 	orr.w	r3, r3, #32
 8006c7c:	6023      	str	r3, [r4, #0]
 8006c7e:	4833      	ldr	r0, [pc, #204]	; (8006d4c <_printf_i+0x240>)
 8006c80:	2778      	movs	r7, #120	; 0x78
 8006c82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	6829      	ldr	r1, [r5, #0]
 8006c8a:	061f      	lsls	r7, r3, #24
 8006c8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c90:	d402      	bmi.n	8006c98 <_printf_i+0x18c>
 8006c92:	065f      	lsls	r7, r3, #25
 8006c94:	bf48      	it	mi
 8006c96:	b2b6      	uxthmi	r6, r6
 8006c98:	07df      	lsls	r7, r3, #31
 8006c9a:	bf48      	it	mi
 8006c9c:	f043 0320 	orrmi.w	r3, r3, #32
 8006ca0:	6029      	str	r1, [r5, #0]
 8006ca2:	bf48      	it	mi
 8006ca4:	6023      	strmi	r3, [r4, #0]
 8006ca6:	b91e      	cbnz	r6, 8006cb0 <_printf_i+0x1a4>
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	f023 0320 	bic.w	r3, r3, #32
 8006cae:	6023      	str	r3, [r4, #0]
 8006cb0:	2310      	movs	r3, #16
 8006cb2:	e7a7      	b.n	8006c04 <_printf_i+0xf8>
 8006cb4:	4824      	ldr	r0, [pc, #144]	; (8006d48 <_printf_i+0x23c>)
 8006cb6:	e7e4      	b.n	8006c82 <_printf_i+0x176>
 8006cb8:	4615      	mov	r5, r2
 8006cba:	e7bd      	b.n	8006c38 <_printf_i+0x12c>
 8006cbc:	682b      	ldr	r3, [r5, #0]
 8006cbe:	6826      	ldr	r6, [r4, #0]
 8006cc0:	6961      	ldr	r1, [r4, #20]
 8006cc2:	1d18      	adds	r0, r3, #4
 8006cc4:	6028      	str	r0, [r5, #0]
 8006cc6:	0635      	lsls	r5, r6, #24
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	d501      	bpl.n	8006cd0 <_printf_i+0x1c4>
 8006ccc:	6019      	str	r1, [r3, #0]
 8006cce:	e002      	b.n	8006cd6 <_printf_i+0x1ca>
 8006cd0:	0670      	lsls	r0, r6, #25
 8006cd2:	d5fb      	bpl.n	8006ccc <_printf_i+0x1c0>
 8006cd4:	8019      	strh	r1, [r3, #0]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	6123      	str	r3, [r4, #16]
 8006cda:	4615      	mov	r5, r2
 8006cdc:	e7bc      	b.n	8006c58 <_printf_i+0x14c>
 8006cde:	682b      	ldr	r3, [r5, #0]
 8006ce0:	1d1a      	adds	r2, r3, #4
 8006ce2:	602a      	str	r2, [r5, #0]
 8006ce4:	681d      	ldr	r5, [r3, #0]
 8006ce6:	6862      	ldr	r2, [r4, #4]
 8006ce8:	2100      	movs	r1, #0
 8006cea:	4628      	mov	r0, r5
 8006cec:	f7f9 fa98 	bl	8000220 <memchr>
 8006cf0:	b108      	cbz	r0, 8006cf6 <_printf_i+0x1ea>
 8006cf2:	1b40      	subs	r0, r0, r5
 8006cf4:	6060      	str	r0, [r4, #4]
 8006cf6:	6863      	ldr	r3, [r4, #4]
 8006cf8:	6123      	str	r3, [r4, #16]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d00:	e7aa      	b.n	8006c58 <_printf_i+0x14c>
 8006d02:	6923      	ldr	r3, [r4, #16]
 8006d04:	462a      	mov	r2, r5
 8006d06:	4649      	mov	r1, r9
 8006d08:	4640      	mov	r0, r8
 8006d0a:	47d0      	blx	sl
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	d0ad      	beq.n	8006c6c <_printf_i+0x160>
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	079b      	lsls	r3, r3, #30
 8006d14:	d413      	bmi.n	8006d3e <_printf_i+0x232>
 8006d16:	68e0      	ldr	r0, [r4, #12]
 8006d18:	9b03      	ldr	r3, [sp, #12]
 8006d1a:	4298      	cmp	r0, r3
 8006d1c:	bfb8      	it	lt
 8006d1e:	4618      	movlt	r0, r3
 8006d20:	e7a6      	b.n	8006c70 <_printf_i+0x164>
 8006d22:	2301      	movs	r3, #1
 8006d24:	4632      	mov	r2, r6
 8006d26:	4649      	mov	r1, r9
 8006d28:	4640      	mov	r0, r8
 8006d2a:	47d0      	blx	sl
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d09d      	beq.n	8006c6c <_printf_i+0x160>
 8006d30:	3501      	adds	r5, #1
 8006d32:	68e3      	ldr	r3, [r4, #12]
 8006d34:	9903      	ldr	r1, [sp, #12]
 8006d36:	1a5b      	subs	r3, r3, r1
 8006d38:	42ab      	cmp	r3, r5
 8006d3a:	dcf2      	bgt.n	8006d22 <_printf_i+0x216>
 8006d3c:	e7eb      	b.n	8006d16 <_printf_i+0x20a>
 8006d3e:	2500      	movs	r5, #0
 8006d40:	f104 0619 	add.w	r6, r4, #25
 8006d44:	e7f5      	b.n	8006d32 <_printf_i+0x226>
 8006d46:	bf00      	nop
 8006d48:	08008eda 	.word	0x08008eda
 8006d4c:	08008eeb 	.word	0x08008eeb

08006d50 <std>:
 8006d50:	2300      	movs	r3, #0
 8006d52:	b510      	push	{r4, lr}
 8006d54:	4604      	mov	r4, r0
 8006d56:	e9c0 3300 	strd	r3, r3, [r0]
 8006d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d5e:	6083      	str	r3, [r0, #8]
 8006d60:	8181      	strh	r1, [r0, #12]
 8006d62:	6643      	str	r3, [r0, #100]	; 0x64
 8006d64:	81c2      	strh	r2, [r0, #14]
 8006d66:	6183      	str	r3, [r0, #24]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	2208      	movs	r2, #8
 8006d6c:	305c      	adds	r0, #92	; 0x5c
 8006d6e:	f000 f906 	bl	8006f7e <memset>
 8006d72:	4b0d      	ldr	r3, [pc, #52]	; (8006da8 <std+0x58>)
 8006d74:	6263      	str	r3, [r4, #36]	; 0x24
 8006d76:	4b0d      	ldr	r3, [pc, #52]	; (8006dac <std+0x5c>)
 8006d78:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d7a:	4b0d      	ldr	r3, [pc, #52]	; (8006db0 <std+0x60>)
 8006d7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d7e:	4b0d      	ldr	r3, [pc, #52]	; (8006db4 <std+0x64>)
 8006d80:	6323      	str	r3, [r4, #48]	; 0x30
 8006d82:	4b0d      	ldr	r3, [pc, #52]	; (8006db8 <std+0x68>)
 8006d84:	6224      	str	r4, [r4, #32]
 8006d86:	429c      	cmp	r4, r3
 8006d88:	d006      	beq.n	8006d98 <std+0x48>
 8006d8a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006d8e:	4294      	cmp	r4, r2
 8006d90:	d002      	beq.n	8006d98 <std+0x48>
 8006d92:	33d0      	adds	r3, #208	; 0xd0
 8006d94:	429c      	cmp	r4, r3
 8006d96:	d105      	bne.n	8006da4 <std+0x54>
 8006d98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da0:	f000 b96a 	b.w	8007078 <__retarget_lock_init_recursive>
 8006da4:	bd10      	pop	{r4, pc}
 8006da6:	bf00      	nop
 8006da8:	08006ef9 	.word	0x08006ef9
 8006dac:	08006f1b 	.word	0x08006f1b
 8006db0:	08006f53 	.word	0x08006f53
 8006db4:	08006f77 	.word	0x08006f77
 8006db8:	20000450 	.word	0x20000450

08006dbc <stdio_exit_handler>:
 8006dbc:	4a02      	ldr	r2, [pc, #8]	; (8006dc8 <stdio_exit_handler+0xc>)
 8006dbe:	4903      	ldr	r1, [pc, #12]	; (8006dcc <stdio_exit_handler+0x10>)
 8006dc0:	4803      	ldr	r0, [pc, #12]	; (8006dd0 <stdio_exit_handler+0x14>)
 8006dc2:	f000 b869 	b.w	8006e98 <_fwalk_sglue>
 8006dc6:	bf00      	nop
 8006dc8:	2000000c 	.word	0x2000000c
 8006dcc:	08008a01 	.word	0x08008a01
 8006dd0:	20000018 	.word	0x20000018

08006dd4 <cleanup_stdio>:
 8006dd4:	6841      	ldr	r1, [r0, #4]
 8006dd6:	4b0c      	ldr	r3, [pc, #48]	; (8006e08 <cleanup_stdio+0x34>)
 8006dd8:	4299      	cmp	r1, r3
 8006dda:	b510      	push	{r4, lr}
 8006ddc:	4604      	mov	r4, r0
 8006dde:	d001      	beq.n	8006de4 <cleanup_stdio+0x10>
 8006de0:	f001 fe0e 	bl	8008a00 <_fflush_r>
 8006de4:	68a1      	ldr	r1, [r4, #8]
 8006de6:	4b09      	ldr	r3, [pc, #36]	; (8006e0c <cleanup_stdio+0x38>)
 8006de8:	4299      	cmp	r1, r3
 8006dea:	d002      	beq.n	8006df2 <cleanup_stdio+0x1e>
 8006dec:	4620      	mov	r0, r4
 8006dee:	f001 fe07 	bl	8008a00 <_fflush_r>
 8006df2:	68e1      	ldr	r1, [r4, #12]
 8006df4:	4b06      	ldr	r3, [pc, #24]	; (8006e10 <cleanup_stdio+0x3c>)
 8006df6:	4299      	cmp	r1, r3
 8006df8:	d004      	beq.n	8006e04 <cleanup_stdio+0x30>
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e00:	f001 bdfe 	b.w	8008a00 <_fflush_r>
 8006e04:	bd10      	pop	{r4, pc}
 8006e06:	bf00      	nop
 8006e08:	20000450 	.word	0x20000450
 8006e0c:	200004b8 	.word	0x200004b8
 8006e10:	20000520 	.word	0x20000520

08006e14 <global_stdio_init.part.0>:
 8006e14:	b510      	push	{r4, lr}
 8006e16:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <global_stdio_init.part.0+0x30>)
 8006e18:	4c0b      	ldr	r4, [pc, #44]	; (8006e48 <global_stdio_init.part.0+0x34>)
 8006e1a:	4a0c      	ldr	r2, [pc, #48]	; (8006e4c <global_stdio_init.part.0+0x38>)
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	4620      	mov	r0, r4
 8006e20:	2200      	movs	r2, #0
 8006e22:	2104      	movs	r1, #4
 8006e24:	f7ff ff94 	bl	8006d50 <std>
 8006e28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	2109      	movs	r1, #9
 8006e30:	f7ff ff8e 	bl	8006d50 <std>
 8006e34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e38:	2202      	movs	r2, #2
 8006e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e3e:	2112      	movs	r1, #18
 8006e40:	f7ff bf86 	b.w	8006d50 <std>
 8006e44:	20000588 	.word	0x20000588
 8006e48:	20000450 	.word	0x20000450
 8006e4c:	08006dbd 	.word	0x08006dbd

08006e50 <__sfp_lock_acquire>:
 8006e50:	4801      	ldr	r0, [pc, #4]	; (8006e58 <__sfp_lock_acquire+0x8>)
 8006e52:	f000 b912 	b.w	800707a <__retarget_lock_acquire_recursive>
 8006e56:	bf00      	nop
 8006e58:	20000591 	.word	0x20000591

08006e5c <__sfp_lock_release>:
 8006e5c:	4801      	ldr	r0, [pc, #4]	; (8006e64 <__sfp_lock_release+0x8>)
 8006e5e:	f000 b90d 	b.w	800707c <__retarget_lock_release_recursive>
 8006e62:	bf00      	nop
 8006e64:	20000591 	.word	0x20000591

08006e68 <__sinit>:
 8006e68:	b510      	push	{r4, lr}
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	f7ff fff0 	bl	8006e50 <__sfp_lock_acquire>
 8006e70:	6a23      	ldr	r3, [r4, #32]
 8006e72:	b11b      	cbz	r3, 8006e7c <__sinit+0x14>
 8006e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e78:	f7ff bff0 	b.w	8006e5c <__sfp_lock_release>
 8006e7c:	4b04      	ldr	r3, [pc, #16]	; (8006e90 <__sinit+0x28>)
 8006e7e:	6223      	str	r3, [r4, #32]
 8006e80:	4b04      	ldr	r3, [pc, #16]	; (8006e94 <__sinit+0x2c>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1f5      	bne.n	8006e74 <__sinit+0xc>
 8006e88:	f7ff ffc4 	bl	8006e14 <global_stdio_init.part.0>
 8006e8c:	e7f2      	b.n	8006e74 <__sinit+0xc>
 8006e8e:	bf00      	nop
 8006e90:	08006dd5 	.word	0x08006dd5
 8006e94:	20000588 	.word	0x20000588

08006e98 <_fwalk_sglue>:
 8006e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e9c:	4607      	mov	r7, r0
 8006e9e:	4688      	mov	r8, r1
 8006ea0:	4614      	mov	r4, r2
 8006ea2:	2600      	movs	r6, #0
 8006ea4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ea8:	f1b9 0901 	subs.w	r9, r9, #1
 8006eac:	d505      	bpl.n	8006eba <_fwalk_sglue+0x22>
 8006eae:	6824      	ldr	r4, [r4, #0]
 8006eb0:	2c00      	cmp	r4, #0
 8006eb2:	d1f7      	bne.n	8006ea4 <_fwalk_sglue+0xc>
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eba:	89ab      	ldrh	r3, [r5, #12]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d907      	bls.n	8006ed0 <_fwalk_sglue+0x38>
 8006ec0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	d003      	beq.n	8006ed0 <_fwalk_sglue+0x38>
 8006ec8:	4629      	mov	r1, r5
 8006eca:	4638      	mov	r0, r7
 8006ecc:	47c0      	blx	r8
 8006ece:	4306      	orrs	r6, r0
 8006ed0:	3568      	adds	r5, #104	; 0x68
 8006ed2:	e7e9      	b.n	8006ea8 <_fwalk_sglue+0x10>

08006ed4 <iprintf>:
 8006ed4:	b40f      	push	{r0, r1, r2, r3}
 8006ed6:	b507      	push	{r0, r1, r2, lr}
 8006ed8:	4906      	ldr	r1, [pc, #24]	; (8006ef4 <iprintf+0x20>)
 8006eda:	ab04      	add	r3, sp, #16
 8006edc:	6808      	ldr	r0, [r1, #0]
 8006ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ee2:	6881      	ldr	r1, [r0, #8]
 8006ee4:	9301      	str	r3, [sp, #4]
 8006ee6:	f001 fbeb 	bl	80086c0 <_vfiprintf_r>
 8006eea:	b003      	add	sp, #12
 8006eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ef0:	b004      	add	sp, #16
 8006ef2:	4770      	bx	lr
 8006ef4:	20000064 	.word	0x20000064

08006ef8 <__sread>:
 8006ef8:	b510      	push	{r4, lr}
 8006efa:	460c      	mov	r4, r1
 8006efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f00:	f000 f86c 	bl	8006fdc <_read_r>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	bfab      	itete	ge
 8006f08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f0c:	181b      	addge	r3, r3, r0
 8006f0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f12:	bfac      	ite	ge
 8006f14:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f16:	81a3      	strhlt	r3, [r4, #12]
 8006f18:	bd10      	pop	{r4, pc}

08006f1a <__swrite>:
 8006f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f1e:	461f      	mov	r7, r3
 8006f20:	898b      	ldrh	r3, [r1, #12]
 8006f22:	05db      	lsls	r3, r3, #23
 8006f24:	4605      	mov	r5, r0
 8006f26:	460c      	mov	r4, r1
 8006f28:	4616      	mov	r6, r2
 8006f2a:	d505      	bpl.n	8006f38 <__swrite+0x1e>
 8006f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f30:	2302      	movs	r3, #2
 8006f32:	2200      	movs	r2, #0
 8006f34:	f000 f840 	bl	8006fb8 <_lseek_r>
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f42:	81a3      	strh	r3, [r4, #12]
 8006f44:	4632      	mov	r2, r6
 8006f46:	463b      	mov	r3, r7
 8006f48:	4628      	mov	r0, r5
 8006f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f4e:	f000 b857 	b.w	8007000 <_write_r>

08006f52 <__sseek>:
 8006f52:	b510      	push	{r4, lr}
 8006f54:	460c      	mov	r4, r1
 8006f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f5a:	f000 f82d 	bl	8006fb8 <_lseek_r>
 8006f5e:	1c43      	adds	r3, r0, #1
 8006f60:	89a3      	ldrh	r3, [r4, #12]
 8006f62:	bf15      	itete	ne
 8006f64:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f6e:	81a3      	strheq	r3, [r4, #12]
 8006f70:	bf18      	it	ne
 8006f72:	81a3      	strhne	r3, [r4, #12]
 8006f74:	bd10      	pop	{r4, pc}

08006f76 <__sclose>:
 8006f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7a:	f000 b80d 	b.w	8006f98 <_close_r>

08006f7e <memset>:
 8006f7e:	4402      	add	r2, r0
 8006f80:	4603      	mov	r3, r0
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d100      	bne.n	8006f88 <memset+0xa>
 8006f86:	4770      	bx	lr
 8006f88:	f803 1b01 	strb.w	r1, [r3], #1
 8006f8c:	e7f9      	b.n	8006f82 <memset+0x4>
	...

08006f90 <_localeconv_r>:
 8006f90:	4800      	ldr	r0, [pc, #0]	; (8006f94 <_localeconv_r+0x4>)
 8006f92:	4770      	bx	lr
 8006f94:	20000158 	.word	0x20000158

08006f98 <_close_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4d06      	ldr	r5, [pc, #24]	; (8006fb4 <_close_r+0x1c>)
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	4608      	mov	r0, r1
 8006fa2:	602b      	str	r3, [r5, #0]
 8006fa4:	f7fa fe6d 	bl	8001c82 <_close>
 8006fa8:	1c43      	adds	r3, r0, #1
 8006faa:	d102      	bne.n	8006fb2 <_close_r+0x1a>
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	b103      	cbz	r3, 8006fb2 <_close_r+0x1a>
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	bd38      	pop	{r3, r4, r5, pc}
 8006fb4:	2000058c 	.word	0x2000058c

08006fb8 <_lseek_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	4d07      	ldr	r5, [pc, #28]	; (8006fd8 <_lseek_r+0x20>)
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	4608      	mov	r0, r1
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	602a      	str	r2, [r5, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f7fa fe82 	bl	8001cd0 <_lseek>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d102      	bne.n	8006fd6 <_lseek_r+0x1e>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	b103      	cbz	r3, 8006fd6 <_lseek_r+0x1e>
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	2000058c 	.word	0x2000058c

08006fdc <_read_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4d07      	ldr	r5, [pc, #28]	; (8006ffc <_read_r+0x20>)
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	4608      	mov	r0, r1
 8006fe4:	4611      	mov	r1, r2
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	602a      	str	r2, [r5, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	f7fa fe2c 	bl	8001c48 <_read>
 8006ff0:	1c43      	adds	r3, r0, #1
 8006ff2:	d102      	bne.n	8006ffa <_read_r+0x1e>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	b103      	cbz	r3, 8006ffa <_read_r+0x1e>
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	2000058c 	.word	0x2000058c

08007000 <_write_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d07      	ldr	r5, [pc, #28]	; (8007020 <_write_r+0x20>)
 8007004:	4604      	mov	r4, r0
 8007006:	4608      	mov	r0, r1
 8007008:	4611      	mov	r1, r2
 800700a:	2200      	movs	r2, #0
 800700c:	602a      	str	r2, [r5, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	f7f9 ff70 	bl	8000ef4 <_write>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d102      	bne.n	800701e <_write_r+0x1e>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	b103      	cbz	r3, 800701e <_write_r+0x1e>
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	2000058c 	.word	0x2000058c

08007024 <__errno>:
 8007024:	4b01      	ldr	r3, [pc, #4]	; (800702c <__errno+0x8>)
 8007026:	6818      	ldr	r0, [r3, #0]
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	20000064 	.word	0x20000064

08007030 <__libc_init_array>:
 8007030:	b570      	push	{r4, r5, r6, lr}
 8007032:	4d0d      	ldr	r5, [pc, #52]	; (8007068 <__libc_init_array+0x38>)
 8007034:	4c0d      	ldr	r4, [pc, #52]	; (800706c <__libc_init_array+0x3c>)
 8007036:	1b64      	subs	r4, r4, r5
 8007038:	10a4      	asrs	r4, r4, #2
 800703a:	2600      	movs	r6, #0
 800703c:	42a6      	cmp	r6, r4
 800703e:	d109      	bne.n	8007054 <__libc_init_array+0x24>
 8007040:	4d0b      	ldr	r5, [pc, #44]	; (8007070 <__libc_init_array+0x40>)
 8007042:	4c0c      	ldr	r4, [pc, #48]	; (8007074 <__libc_init_array+0x44>)
 8007044:	f001 feee 	bl	8008e24 <_init>
 8007048:	1b64      	subs	r4, r4, r5
 800704a:	10a4      	asrs	r4, r4, #2
 800704c:	2600      	movs	r6, #0
 800704e:	42a6      	cmp	r6, r4
 8007050:	d105      	bne.n	800705e <__libc_init_array+0x2e>
 8007052:	bd70      	pop	{r4, r5, r6, pc}
 8007054:	f855 3b04 	ldr.w	r3, [r5], #4
 8007058:	4798      	blx	r3
 800705a:	3601      	adds	r6, #1
 800705c:	e7ee      	b.n	800703c <__libc_init_array+0xc>
 800705e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007062:	4798      	blx	r3
 8007064:	3601      	adds	r6, #1
 8007066:	e7f2      	b.n	800704e <__libc_init_array+0x1e>
 8007068:	08009244 	.word	0x08009244
 800706c:	08009244 	.word	0x08009244
 8007070:	08009244 	.word	0x08009244
 8007074:	08009248 	.word	0x08009248

08007078 <__retarget_lock_init_recursive>:
 8007078:	4770      	bx	lr

0800707a <__retarget_lock_acquire_recursive>:
 800707a:	4770      	bx	lr

0800707c <__retarget_lock_release_recursive>:
 800707c:	4770      	bx	lr

0800707e <quorem>:
 800707e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007082:	6903      	ldr	r3, [r0, #16]
 8007084:	690c      	ldr	r4, [r1, #16]
 8007086:	42a3      	cmp	r3, r4
 8007088:	4607      	mov	r7, r0
 800708a:	db7e      	blt.n	800718a <quorem+0x10c>
 800708c:	3c01      	subs	r4, #1
 800708e:	f101 0814 	add.w	r8, r1, #20
 8007092:	f100 0514 	add.w	r5, r0, #20
 8007096:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800709a:	9301      	str	r3, [sp, #4]
 800709c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070a4:	3301      	adds	r3, #1
 80070a6:	429a      	cmp	r2, r3
 80070a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80070ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80070b4:	d331      	bcc.n	800711a <quorem+0x9c>
 80070b6:	f04f 0e00 	mov.w	lr, #0
 80070ba:	4640      	mov	r0, r8
 80070bc:	46ac      	mov	ip, r5
 80070be:	46f2      	mov	sl, lr
 80070c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80070c4:	b293      	uxth	r3, r2
 80070c6:	fb06 e303 	mla	r3, r6, r3, lr
 80070ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070ce:	0c1a      	lsrs	r2, r3, #16
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	ebaa 0303 	sub.w	r3, sl, r3
 80070d6:	f8dc a000 	ldr.w	sl, [ip]
 80070da:	fa13 f38a 	uxtah	r3, r3, sl
 80070de:	fb06 220e 	mla	r2, r6, lr, r2
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	9b00      	ldr	r3, [sp, #0]
 80070e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070ea:	b292      	uxth	r2, r2
 80070ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80070f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070f4:	f8bd 3000 	ldrh.w	r3, [sp]
 80070f8:	4581      	cmp	r9, r0
 80070fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070fe:	f84c 3b04 	str.w	r3, [ip], #4
 8007102:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007106:	d2db      	bcs.n	80070c0 <quorem+0x42>
 8007108:	f855 300b 	ldr.w	r3, [r5, fp]
 800710c:	b92b      	cbnz	r3, 800711a <quorem+0x9c>
 800710e:	9b01      	ldr	r3, [sp, #4]
 8007110:	3b04      	subs	r3, #4
 8007112:	429d      	cmp	r5, r3
 8007114:	461a      	mov	r2, r3
 8007116:	d32c      	bcc.n	8007172 <quorem+0xf4>
 8007118:	613c      	str	r4, [r7, #16]
 800711a:	4638      	mov	r0, r7
 800711c:	f001 f9a6 	bl	800846c <__mcmp>
 8007120:	2800      	cmp	r0, #0
 8007122:	db22      	blt.n	800716a <quorem+0xec>
 8007124:	3601      	adds	r6, #1
 8007126:	4629      	mov	r1, r5
 8007128:	2000      	movs	r0, #0
 800712a:	f858 2b04 	ldr.w	r2, [r8], #4
 800712e:	f8d1 c000 	ldr.w	ip, [r1]
 8007132:	b293      	uxth	r3, r2
 8007134:	1ac3      	subs	r3, r0, r3
 8007136:	0c12      	lsrs	r2, r2, #16
 8007138:	fa13 f38c 	uxtah	r3, r3, ip
 800713c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007140:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007144:	b29b      	uxth	r3, r3
 8007146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800714a:	45c1      	cmp	r9, r8
 800714c:	f841 3b04 	str.w	r3, [r1], #4
 8007150:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007154:	d2e9      	bcs.n	800712a <quorem+0xac>
 8007156:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800715a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800715e:	b922      	cbnz	r2, 800716a <quorem+0xec>
 8007160:	3b04      	subs	r3, #4
 8007162:	429d      	cmp	r5, r3
 8007164:	461a      	mov	r2, r3
 8007166:	d30a      	bcc.n	800717e <quorem+0x100>
 8007168:	613c      	str	r4, [r7, #16]
 800716a:	4630      	mov	r0, r6
 800716c:	b003      	add	sp, #12
 800716e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007172:	6812      	ldr	r2, [r2, #0]
 8007174:	3b04      	subs	r3, #4
 8007176:	2a00      	cmp	r2, #0
 8007178:	d1ce      	bne.n	8007118 <quorem+0x9a>
 800717a:	3c01      	subs	r4, #1
 800717c:	e7c9      	b.n	8007112 <quorem+0x94>
 800717e:	6812      	ldr	r2, [r2, #0]
 8007180:	3b04      	subs	r3, #4
 8007182:	2a00      	cmp	r2, #0
 8007184:	d1f0      	bne.n	8007168 <quorem+0xea>
 8007186:	3c01      	subs	r4, #1
 8007188:	e7eb      	b.n	8007162 <quorem+0xe4>
 800718a:	2000      	movs	r0, #0
 800718c:	e7ee      	b.n	800716c <quorem+0xee>
	...

08007190 <_dtoa_r>:
 8007190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007194:	ed2d 8b04 	vpush	{d8-d9}
 8007198:	69c5      	ldr	r5, [r0, #28]
 800719a:	b093      	sub	sp, #76	; 0x4c
 800719c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80071a0:	ec57 6b10 	vmov	r6, r7, d0
 80071a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80071a8:	9107      	str	r1, [sp, #28]
 80071aa:	4604      	mov	r4, r0
 80071ac:	920a      	str	r2, [sp, #40]	; 0x28
 80071ae:	930d      	str	r3, [sp, #52]	; 0x34
 80071b0:	b975      	cbnz	r5, 80071d0 <_dtoa_r+0x40>
 80071b2:	2010      	movs	r0, #16
 80071b4:	f000 fe2a 	bl	8007e0c <malloc>
 80071b8:	4602      	mov	r2, r0
 80071ba:	61e0      	str	r0, [r4, #28]
 80071bc:	b920      	cbnz	r0, 80071c8 <_dtoa_r+0x38>
 80071be:	4bae      	ldr	r3, [pc, #696]	; (8007478 <_dtoa_r+0x2e8>)
 80071c0:	21ef      	movs	r1, #239	; 0xef
 80071c2:	48ae      	ldr	r0, [pc, #696]	; (800747c <_dtoa_r+0x2ec>)
 80071c4:	f001 fcf8 	bl	8008bb8 <__assert_func>
 80071c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071cc:	6005      	str	r5, [r0, #0]
 80071ce:	60c5      	str	r5, [r0, #12]
 80071d0:	69e3      	ldr	r3, [r4, #28]
 80071d2:	6819      	ldr	r1, [r3, #0]
 80071d4:	b151      	cbz	r1, 80071ec <_dtoa_r+0x5c>
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	604a      	str	r2, [r1, #4]
 80071da:	2301      	movs	r3, #1
 80071dc:	4093      	lsls	r3, r2
 80071de:	608b      	str	r3, [r1, #8]
 80071e0:	4620      	mov	r0, r4
 80071e2:	f000 ff07 	bl	8007ff4 <_Bfree>
 80071e6:	69e3      	ldr	r3, [r4, #28]
 80071e8:	2200      	movs	r2, #0
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	1e3b      	subs	r3, r7, #0
 80071ee:	bfbb      	ittet	lt
 80071f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80071f4:	9303      	strlt	r3, [sp, #12]
 80071f6:	2300      	movge	r3, #0
 80071f8:	2201      	movlt	r2, #1
 80071fa:	bfac      	ite	ge
 80071fc:	f8c8 3000 	strge.w	r3, [r8]
 8007200:	f8c8 2000 	strlt.w	r2, [r8]
 8007204:	4b9e      	ldr	r3, [pc, #632]	; (8007480 <_dtoa_r+0x2f0>)
 8007206:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800720a:	ea33 0308 	bics.w	r3, r3, r8
 800720e:	d11b      	bne.n	8007248 <_dtoa_r+0xb8>
 8007210:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007212:	f242 730f 	movw	r3, #9999	; 0x270f
 8007216:	6013      	str	r3, [r2, #0]
 8007218:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800721c:	4333      	orrs	r3, r6
 800721e:	f000 8593 	beq.w	8007d48 <_dtoa_r+0xbb8>
 8007222:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007224:	b963      	cbnz	r3, 8007240 <_dtoa_r+0xb0>
 8007226:	4b97      	ldr	r3, [pc, #604]	; (8007484 <_dtoa_r+0x2f4>)
 8007228:	e027      	b.n	800727a <_dtoa_r+0xea>
 800722a:	4b97      	ldr	r3, [pc, #604]	; (8007488 <_dtoa_r+0x2f8>)
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	3308      	adds	r3, #8
 8007230:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	9800      	ldr	r0, [sp, #0]
 8007236:	b013      	add	sp, #76	; 0x4c
 8007238:	ecbd 8b04 	vpop	{d8-d9}
 800723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007240:	4b90      	ldr	r3, [pc, #576]	; (8007484 <_dtoa_r+0x2f4>)
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	3303      	adds	r3, #3
 8007246:	e7f3      	b.n	8007230 <_dtoa_r+0xa0>
 8007248:	ed9d 7b02 	vldr	d7, [sp, #8]
 800724c:	2200      	movs	r2, #0
 800724e:	ec51 0b17 	vmov	r0, r1, d7
 8007252:	eeb0 8a47 	vmov.f32	s16, s14
 8007256:	eef0 8a67 	vmov.f32	s17, s15
 800725a:	2300      	movs	r3, #0
 800725c:	f7f9 fc5c 	bl	8000b18 <__aeabi_dcmpeq>
 8007260:	4681      	mov	r9, r0
 8007262:	b160      	cbz	r0, 800727e <_dtoa_r+0xee>
 8007264:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007266:	2301      	movs	r3, #1
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 8568 	beq.w	8007d42 <_dtoa_r+0xbb2>
 8007272:	4b86      	ldr	r3, [pc, #536]	; (800748c <_dtoa_r+0x2fc>)
 8007274:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	3b01      	subs	r3, #1
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	e7da      	b.n	8007234 <_dtoa_r+0xa4>
 800727e:	aa10      	add	r2, sp, #64	; 0x40
 8007280:	a911      	add	r1, sp, #68	; 0x44
 8007282:	4620      	mov	r0, r4
 8007284:	eeb0 0a48 	vmov.f32	s0, s16
 8007288:	eef0 0a68 	vmov.f32	s1, s17
 800728c:	f001 f994 	bl	80085b8 <__d2b>
 8007290:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007294:	4682      	mov	sl, r0
 8007296:	2d00      	cmp	r5, #0
 8007298:	d07f      	beq.n	800739a <_dtoa_r+0x20a>
 800729a:	ee18 3a90 	vmov	r3, s17
 800729e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80072a6:	ec51 0b18 	vmov	r0, r1, d8
 80072aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80072ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80072b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80072b6:	4619      	mov	r1, r3
 80072b8:	2200      	movs	r2, #0
 80072ba:	4b75      	ldr	r3, [pc, #468]	; (8007490 <_dtoa_r+0x300>)
 80072bc:	f7f9 f80c 	bl	80002d8 <__aeabi_dsub>
 80072c0:	a367      	add	r3, pc, #412	; (adr r3, 8007460 <_dtoa_r+0x2d0>)
 80072c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c6:	f7f9 f9bf 	bl	8000648 <__aeabi_dmul>
 80072ca:	a367      	add	r3, pc, #412	; (adr r3, 8007468 <_dtoa_r+0x2d8>)
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f7f9 f804 	bl	80002dc <__adddf3>
 80072d4:	4606      	mov	r6, r0
 80072d6:	4628      	mov	r0, r5
 80072d8:	460f      	mov	r7, r1
 80072da:	f7f9 f94b 	bl	8000574 <__aeabi_i2d>
 80072de:	a364      	add	r3, pc, #400	; (adr r3, 8007470 <_dtoa_r+0x2e0>)
 80072e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e4:	f7f9 f9b0 	bl	8000648 <__aeabi_dmul>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4630      	mov	r0, r6
 80072ee:	4639      	mov	r1, r7
 80072f0:	f7f8 fff4 	bl	80002dc <__adddf3>
 80072f4:	4606      	mov	r6, r0
 80072f6:	460f      	mov	r7, r1
 80072f8:	f7f9 fc56 	bl	8000ba8 <__aeabi_d2iz>
 80072fc:	2200      	movs	r2, #0
 80072fe:	4683      	mov	fp, r0
 8007300:	2300      	movs	r3, #0
 8007302:	4630      	mov	r0, r6
 8007304:	4639      	mov	r1, r7
 8007306:	f7f9 fc11 	bl	8000b2c <__aeabi_dcmplt>
 800730a:	b148      	cbz	r0, 8007320 <_dtoa_r+0x190>
 800730c:	4658      	mov	r0, fp
 800730e:	f7f9 f931 	bl	8000574 <__aeabi_i2d>
 8007312:	4632      	mov	r2, r6
 8007314:	463b      	mov	r3, r7
 8007316:	f7f9 fbff 	bl	8000b18 <__aeabi_dcmpeq>
 800731a:	b908      	cbnz	r0, 8007320 <_dtoa_r+0x190>
 800731c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007320:	f1bb 0f16 	cmp.w	fp, #22
 8007324:	d857      	bhi.n	80073d6 <_dtoa_r+0x246>
 8007326:	4b5b      	ldr	r3, [pc, #364]	; (8007494 <_dtoa_r+0x304>)
 8007328:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800732c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007330:	ec51 0b18 	vmov	r0, r1, d8
 8007334:	f7f9 fbfa 	bl	8000b2c <__aeabi_dcmplt>
 8007338:	2800      	cmp	r0, #0
 800733a:	d04e      	beq.n	80073da <_dtoa_r+0x24a>
 800733c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007340:	2300      	movs	r3, #0
 8007342:	930c      	str	r3, [sp, #48]	; 0x30
 8007344:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007346:	1b5b      	subs	r3, r3, r5
 8007348:	1e5a      	subs	r2, r3, #1
 800734a:	bf45      	ittet	mi
 800734c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007350:	9305      	strmi	r3, [sp, #20]
 8007352:	2300      	movpl	r3, #0
 8007354:	2300      	movmi	r3, #0
 8007356:	9206      	str	r2, [sp, #24]
 8007358:	bf54      	ite	pl
 800735a:	9305      	strpl	r3, [sp, #20]
 800735c:	9306      	strmi	r3, [sp, #24]
 800735e:	f1bb 0f00 	cmp.w	fp, #0
 8007362:	db3c      	blt.n	80073de <_dtoa_r+0x24e>
 8007364:	9b06      	ldr	r3, [sp, #24]
 8007366:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800736a:	445b      	add	r3, fp
 800736c:	9306      	str	r3, [sp, #24]
 800736e:	2300      	movs	r3, #0
 8007370:	9308      	str	r3, [sp, #32]
 8007372:	9b07      	ldr	r3, [sp, #28]
 8007374:	2b09      	cmp	r3, #9
 8007376:	d868      	bhi.n	800744a <_dtoa_r+0x2ba>
 8007378:	2b05      	cmp	r3, #5
 800737a:	bfc4      	itt	gt
 800737c:	3b04      	subgt	r3, #4
 800737e:	9307      	strgt	r3, [sp, #28]
 8007380:	9b07      	ldr	r3, [sp, #28]
 8007382:	f1a3 0302 	sub.w	r3, r3, #2
 8007386:	bfcc      	ite	gt
 8007388:	2500      	movgt	r5, #0
 800738a:	2501      	movle	r5, #1
 800738c:	2b03      	cmp	r3, #3
 800738e:	f200 8085 	bhi.w	800749c <_dtoa_r+0x30c>
 8007392:	e8df f003 	tbb	[pc, r3]
 8007396:	3b2e      	.short	0x3b2e
 8007398:	5839      	.short	0x5839
 800739a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800739e:	441d      	add	r5, r3
 80073a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80073a4:	2b20      	cmp	r3, #32
 80073a6:	bfc1      	itttt	gt
 80073a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80073ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80073b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80073b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80073b8:	bfd6      	itet	le
 80073ba:	f1c3 0320 	rsble	r3, r3, #32
 80073be:	ea48 0003 	orrgt.w	r0, r8, r3
 80073c2:	fa06 f003 	lslle.w	r0, r6, r3
 80073c6:	f7f9 f8c5 	bl	8000554 <__aeabi_ui2d>
 80073ca:	2201      	movs	r2, #1
 80073cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80073d0:	3d01      	subs	r5, #1
 80073d2:	920e      	str	r2, [sp, #56]	; 0x38
 80073d4:	e76f      	b.n	80072b6 <_dtoa_r+0x126>
 80073d6:	2301      	movs	r3, #1
 80073d8:	e7b3      	b.n	8007342 <_dtoa_r+0x1b2>
 80073da:	900c      	str	r0, [sp, #48]	; 0x30
 80073dc:	e7b2      	b.n	8007344 <_dtoa_r+0x1b4>
 80073de:	9b05      	ldr	r3, [sp, #20]
 80073e0:	eba3 030b 	sub.w	r3, r3, fp
 80073e4:	9305      	str	r3, [sp, #20]
 80073e6:	f1cb 0300 	rsb	r3, fp, #0
 80073ea:	9308      	str	r3, [sp, #32]
 80073ec:	2300      	movs	r3, #0
 80073ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80073f0:	e7bf      	b.n	8007372 <_dtoa_r+0x1e2>
 80073f2:	2300      	movs	r3, #0
 80073f4:	9309      	str	r3, [sp, #36]	; 0x24
 80073f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	dc52      	bgt.n	80074a2 <_dtoa_r+0x312>
 80073fc:	2301      	movs	r3, #1
 80073fe:	9301      	str	r3, [sp, #4]
 8007400:	9304      	str	r3, [sp, #16]
 8007402:	461a      	mov	r2, r3
 8007404:	920a      	str	r2, [sp, #40]	; 0x28
 8007406:	e00b      	b.n	8007420 <_dtoa_r+0x290>
 8007408:	2301      	movs	r3, #1
 800740a:	e7f3      	b.n	80073f4 <_dtoa_r+0x264>
 800740c:	2300      	movs	r3, #0
 800740e:	9309      	str	r3, [sp, #36]	; 0x24
 8007410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007412:	445b      	add	r3, fp
 8007414:	9301      	str	r3, [sp, #4]
 8007416:	3301      	adds	r3, #1
 8007418:	2b01      	cmp	r3, #1
 800741a:	9304      	str	r3, [sp, #16]
 800741c:	bfb8      	it	lt
 800741e:	2301      	movlt	r3, #1
 8007420:	69e0      	ldr	r0, [r4, #28]
 8007422:	2100      	movs	r1, #0
 8007424:	2204      	movs	r2, #4
 8007426:	f102 0614 	add.w	r6, r2, #20
 800742a:	429e      	cmp	r6, r3
 800742c:	d93d      	bls.n	80074aa <_dtoa_r+0x31a>
 800742e:	6041      	str	r1, [r0, #4]
 8007430:	4620      	mov	r0, r4
 8007432:	f000 fd9f 	bl	8007f74 <_Balloc>
 8007436:	9000      	str	r0, [sp, #0]
 8007438:	2800      	cmp	r0, #0
 800743a:	d139      	bne.n	80074b0 <_dtoa_r+0x320>
 800743c:	4b16      	ldr	r3, [pc, #88]	; (8007498 <_dtoa_r+0x308>)
 800743e:	4602      	mov	r2, r0
 8007440:	f240 11af 	movw	r1, #431	; 0x1af
 8007444:	e6bd      	b.n	80071c2 <_dtoa_r+0x32>
 8007446:	2301      	movs	r3, #1
 8007448:	e7e1      	b.n	800740e <_dtoa_r+0x27e>
 800744a:	2501      	movs	r5, #1
 800744c:	2300      	movs	r3, #0
 800744e:	9307      	str	r3, [sp, #28]
 8007450:	9509      	str	r5, [sp, #36]	; 0x24
 8007452:	f04f 33ff 	mov.w	r3, #4294967295
 8007456:	9301      	str	r3, [sp, #4]
 8007458:	9304      	str	r3, [sp, #16]
 800745a:	2200      	movs	r2, #0
 800745c:	2312      	movs	r3, #18
 800745e:	e7d1      	b.n	8007404 <_dtoa_r+0x274>
 8007460:	636f4361 	.word	0x636f4361
 8007464:	3fd287a7 	.word	0x3fd287a7
 8007468:	8b60c8b3 	.word	0x8b60c8b3
 800746c:	3fc68a28 	.word	0x3fc68a28
 8007470:	509f79fb 	.word	0x509f79fb
 8007474:	3fd34413 	.word	0x3fd34413
 8007478:	08008f09 	.word	0x08008f09
 800747c:	08008f20 	.word	0x08008f20
 8007480:	7ff00000 	.word	0x7ff00000
 8007484:	08008f05 	.word	0x08008f05
 8007488:	08008efc 	.word	0x08008efc
 800748c:	08008ed9 	.word	0x08008ed9
 8007490:	3ff80000 	.word	0x3ff80000
 8007494:	08009010 	.word	0x08009010
 8007498:	08008f78 	.word	0x08008f78
 800749c:	2301      	movs	r3, #1
 800749e:	9309      	str	r3, [sp, #36]	; 0x24
 80074a0:	e7d7      	b.n	8007452 <_dtoa_r+0x2c2>
 80074a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a4:	9301      	str	r3, [sp, #4]
 80074a6:	9304      	str	r3, [sp, #16]
 80074a8:	e7ba      	b.n	8007420 <_dtoa_r+0x290>
 80074aa:	3101      	adds	r1, #1
 80074ac:	0052      	lsls	r2, r2, #1
 80074ae:	e7ba      	b.n	8007426 <_dtoa_r+0x296>
 80074b0:	69e3      	ldr	r3, [r4, #28]
 80074b2:	9a00      	ldr	r2, [sp, #0]
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	9b04      	ldr	r3, [sp, #16]
 80074b8:	2b0e      	cmp	r3, #14
 80074ba:	f200 80a8 	bhi.w	800760e <_dtoa_r+0x47e>
 80074be:	2d00      	cmp	r5, #0
 80074c0:	f000 80a5 	beq.w	800760e <_dtoa_r+0x47e>
 80074c4:	f1bb 0f00 	cmp.w	fp, #0
 80074c8:	dd38      	ble.n	800753c <_dtoa_r+0x3ac>
 80074ca:	4bc0      	ldr	r3, [pc, #768]	; (80077cc <_dtoa_r+0x63c>)
 80074cc:	f00b 020f 	and.w	r2, fp, #15
 80074d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80074d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80074dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80074e0:	d019      	beq.n	8007516 <_dtoa_r+0x386>
 80074e2:	4bbb      	ldr	r3, [pc, #748]	; (80077d0 <_dtoa_r+0x640>)
 80074e4:	ec51 0b18 	vmov	r0, r1, d8
 80074e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074ec:	f7f9 f9d6 	bl	800089c <__aeabi_ddiv>
 80074f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074f4:	f008 080f 	and.w	r8, r8, #15
 80074f8:	2503      	movs	r5, #3
 80074fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80077d0 <_dtoa_r+0x640>
 80074fe:	f1b8 0f00 	cmp.w	r8, #0
 8007502:	d10a      	bne.n	800751a <_dtoa_r+0x38a>
 8007504:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007508:	4632      	mov	r2, r6
 800750a:	463b      	mov	r3, r7
 800750c:	f7f9 f9c6 	bl	800089c <__aeabi_ddiv>
 8007510:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007514:	e02b      	b.n	800756e <_dtoa_r+0x3de>
 8007516:	2502      	movs	r5, #2
 8007518:	e7ef      	b.n	80074fa <_dtoa_r+0x36a>
 800751a:	f018 0f01 	tst.w	r8, #1
 800751e:	d008      	beq.n	8007532 <_dtoa_r+0x3a2>
 8007520:	4630      	mov	r0, r6
 8007522:	4639      	mov	r1, r7
 8007524:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007528:	f7f9 f88e 	bl	8000648 <__aeabi_dmul>
 800752c:	3501      	adds	r5, #1
 800752e:	4606      	mov	r6, r0
 8007530:	460f      	mov	r7, r1
 8007532:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007536:	f109 0908 	add.w	r9, r9, #8
 800753a:	e7e0      	b.n	80074fe <_dtoa_r+0x36e>
 800753c:	f000 809f 	beq.w	800767e <_dtoa_r+0x4ee>
 8007540:	f1cb 0600 	rsb	r6, fp, #0
 8007544:	4ba1      	ldr	r3, [pc, #644]	; (80077cc <_dtoa_r+0x63c>)
 8007546:	4fa2      	ldr	r7, [pc, #648]	; (80077d0 <_dtoa_r+0x640>)
 8007548:	f006 020f 	and.w	r2, r6, #15
 800754c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	ec51 0b18 	vmov	r0, r1, d8
 8007558:	f7f9 f876 	bl	8000648 <__aeabi_dmul>
 800755c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007560:	1136      	asrs	r6, r6, #4
 8007562:	2300      	movs	r3, #0
 8007564:	2502      	movs	r5, #2
 8007566:	2e00      	cmp	r6, #0
 8007568:	d17e      	bne.n	8007668 <_dtoa_r+0x4d8>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1d0      	bne.n	8007510 <_dtoa_r+0x380>
 800756e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007570:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 8084 	beq.w	8007682 <_dtoa_r+0x4f2>
 800757a:	4b96      	ldr	r3, [pc, #600]	; (80077d4 <_dtoa_r+0x644>)
 800757c:	2200      	movs	r2, #0
 800757e:	4640      	mov	r0, r8
 8007580:	4649      	mov	r1, r9
 8007582:	f7f9 fad3 	bl	8000b2c <__aeabi_dcmplt>
 8007586:	2800      	cmp	r0, #0
 8007588:	d07b      	beq.n	8007682 <_dtoa_r+0x4f2>
 800758a:	9b04      	ldr	r3, [sp, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d078      	beq.n	8007682 <_dtoa_r+0x4f2>
 8007590:	9b01      	ldr	r3, [sp, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	dd39      	ble.n	800760a <_dtoa_r+0x47a>
 8007596:	4b90      	ldr	r3, [pc, #576]	; (80077d8 <_dtoa_r+0x648>)
 8007598:	2200      	movs	r2, #0
 800759a:	4640      	mov	r0, r8
 800759c:	4649      	mov	r1, r9
 800759e:	f7f9 f853 	bl	8000648 <__aeabi_dmul>
 80075a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075a6:	9e01      	ldr	r6, [sp, #4]
 80075a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80075ac:	3501      	adds	r5, #1
 80075ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80075b2:	4628      	mov	r0, r5
 80075b4:	f7f8 ffde 	bl	8000574 <__aeabi_i2d>
 80075b8:	4642      	mov	r2, r8
 80075ba:	464b      	mov	r3, r9
 80075bc:	f7f9 f844 	bl	8000648 <__aeabi_dmul>
 80075c0:	4b86      	ldr	r3, [pc, #536]	; (80077dc <_dtoa_r+0x64c>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	f7f8 fe8a 	bl	80002dc <__adddf3>
 80075c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80075cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075d0:	9303      	str	r3, [sp, #12]
 80075d2:	2e00      	cmp	r6, #0
 80075d4:	d158      	bne.n	8007688 <_dtoa_r+0x4f8>
 80075d6:	4b82      	ldr	r3, [pc, #520]	; (80077e0 <_dtoa_r+0x650>)
 80075d8:	2200      	movs	r2, #0
 80075da:	4640      	mov	r0, r8
 80075dc:	4649      	mov	r1, r9
 80075de:	f7f8 fe7b 	bl	80002d8 <__aeabi_dsub>
 80075e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075e6:	4680      	mov	r8, r0
 80075e8:	4689      	mov	r9, r1
 80075ea:	f7f9 fabd 	bl	8000b68 <__aeabi_dcmpgt>
 80075ee:	2800      	cmp	r0, #0
 80075f0:	f040 8296 	bne.w	8007b20 <_dtoa_r+0x990>
 80075f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80075f8:	4640      	mov	r0, r8
 80075fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075fe:	4649      	mov	r1, r9
 8007600:	f7f9 fa94 	bl	8000b2c <__aeabi_dcmplt>
 8007604:	2800      	cmp	r0, #0
 8007606:	f040 8289 	bne.w	8007b1c <_dtoa_r+0x98c>
 800760a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800760e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007610:	2b00      	cmp	r3, #0
 8007612:	f2c0 814e 	blt.w	80078b2 <_dtoa_r+0x722>
 8007616:	f1bb 0f0e 	cmp.w	fp, #14
 800761a:	f300 814a 	bgt.w	80078b2 <_dtoa_r+0x722>
 800761e:	4b6b      	ldr	r3, [pc, #428]	; (80077cc <_dtoa_r+0x63c>)
 8007620:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007624:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800762a:	2b00      	cmp	r3, #0
 800762c:	f280 80dc 	bge.w	80077e8 <_dtoa_r+0x658>
 8007630:	9b04      	ldr	r3, [sp, #16]
 8007632:	2b00      	cmp	r3, #0
 8007634:	f300 80d8 	bgt.w	80077e8 <_dtoa_r+0x658>
 8007638:	f040 826f 	bne.w	8007b1a <_dtoa_r+0x98a>
 800763c:	4b68      	ldr	r3, [pc, #416]	; (80077e0 <_dtoa_r+0x650>)
 800763e:	2200      	movs	r2, #0
 8007640:	4640      	mov	r0, r8
 8007642:	4649      	mov	r1, r9
 8007644:	f7f9 f800 	bl	8000648 <__aeabi_dmul>
 8007648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800764c:	f7f9 fa82 	bl	8000b54 <__aeabi_dcmpge>
 8007650:	9e04      	ldr	r6, [sp, #16]
 8007652:	4637      	mov	r7, r6
 8007654:	2800      	cmp	r0, #0
 8007656:	f040 8245 	bne.w	8007ae4 <_dtoa_r+0x954>
 800765a:	9d00      	ldr	r5, [sp, #0]
 800765c:	2331      	movs	r3, #49	; 0x31
 800765e:	f805 3b01 	strb.w	r3, [r5], #1
 8007662:	f10b 0b01 	add.w	fp, fp, #1
 8007666:	e241      	b.n	8007aec <_dtoa_r+0x95c>
 8007668:	07f2      	lsls	r2, r6, #31
 800766a:	d505      	bpl.n	8007678 <_dtoa_r+0x4e8>
 800766c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007670:	f7f8 ffea 	bl	8000648 <__aeabi_dmul>
 8007674:	3501      	adds	r5, #1
 8007676:	2301      	movs	r3, #1
 8007678:	1076      	asrs	r6, r6, #1
 800767a:	3708      	adds	r7, #8
 800767c:	e773      	b.n	8007566 <_dtoa_r+0x3d6>
 800767e:	2502      	movs	r5, #2
 8007680:	e775      	b.n	800756e <_dtoa_r+0x3de>
 8007682:	9e04      	ldr	r6, [sp, #16]
 8007684:	465f      	mov	r7, fp
 8007686:	e792      	b.n	80075ae <_dtoa_r+0x41e>
 8007688:	9900      	ldr	r1, [sp, #0]
 800768a:	4b50      	ldr	r3, [pc, #320]	; (80077cc <_dtoa_r+0x63c>)
 800768c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007690:	4431      	add	r1, r6
 8007692:	9102      	str	r1, [sp, #8]
 8007694:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007696:	eeb0 9a47 	vmov.f32	s18, s14
 800769a:	eef0 9a67 	vmov.f32	s19, s15
 800769e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80076a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076a6:	2900      	cmp	r1, #0
 80076a8:	d044      	beq.n	8007734 <_dtoa_r+0x5a4>
 80076aa:	494e      	ldr	r1, [pc, #312]	; (80077e4 <_dtoa_r+0x654>)
 80076ac:	2000      	movs	r0, #0
 80076ae:	f7f9 f8f5 	bl	800089c <__aeabi_ddiv>
 80076b2:	ec53 2b19 	vmov	r2, r3, d9
 80076b6:	f7f8 fe0f 	bl	80002d8 <__aeabi_dsub>
 80076ba:	9d00      	ldr	r5, [sp, #0]
 80076bc:	ec41 0b19 	vmov	d9, r0, r1
 80076c0:	4649      	mov	r1, r9
 80076c2:	4640      	mov	r0, r8
 80076c4:	f7f9 fa70 	bl	8000ba8 <__aeabi_d2iz>
 80076c8:	4606      	mov	r6, r0
 80076ca:	f7f8 ff53 	bl	8000574 <__aeabi_i2d>
 80076ce:	4602      	mov	r2, r0
 80076d0:	460b      	mov	r3, r1
 80076d2:	4640      	mov	r0, r8
 80076d4:	4649      	mov	r1, r9
 80076d6:	f7f8 fdff 	bl	80002d8 <__aeabi_dsub>
 80076da:	3630      	adds	r6, #48	; 0x30
 80076dc:	f805 6b01 	strb.w	r6, [r5], #1
 80076e0:	ec53 2b19 	vmov	r2, r3, d9
 80076e4:	4680      	mov	r8, r0
 80076e6:	4689      	mov	r9, r1
 80076e8:	f7f9 fa20 	bl	8000b2c <__aeabi_dcmplt>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d164      	bne.n	80077ba <_dtoa_r+0x62a>
 80076f0:	4642      	mov	r2, r8
 80076f2:	464b      	mov	r3, r9
 80076f4:	4937      	ldr	r1, [pc, #220]	; (80077d4 <_dtoa_r+0x644>)
 80076f6:	2000      	movs	r0, #0
 80076f8:	f7f8 fdee 	bl	80002d8 <__aeabi_dsub>
 80076fc:	ec53 2b19 	vmov	r2, r3, d9
 8007700:	f7f9 fa14 	bl	8000b2c <__aeabi_dcmplt>
 8007704:	2800      	cmp	r0, #0
 8007706:	f040 80b6 	bne.w	8007876 <_dtoa_r+0x6e6>
 800770a:	9b02      	ldr	r3, [sp, #8]
 800770c:	429d      	cmp	r5, r3
 800770e:	f43f af7c 	beq.w	800760a <_dtoa_r+0x47a>
 8007712:	4b31      	ldr	r3, [pc, #196]	; (80077d8 <_dtoa_r+0x648>)
 8007714:	ec51 0b19 	vmov	r0, r1, d9
 8007718:	2200      	movs	r2, #0
 800771a:	f7f8 ff95 	bl	8000648 <__aeabi_dmul>
 800771e:	4b2e      	ldr	r3, [pc, #184]	; (80077d8 <_dtoa_r+0x648>)
 8007720:	ec41 0b19 	vmov	d9, r0, r1
 8007724:	2200      	movs	r2, #0
 8007726:	4640      	mov	r0, r8
 8007728:	4649      	mov	r1, r9
 800772a:	f7f8 ff8d 	bl	8000648 <__aeabi_dmul>
 800772e:	4680      	mov	r8, r0
 8007730:	4689      	mov	r9, r1
 8007732:	e7c5      	b.n	80076c0 <_dtoa_r+0x530>
 8007734:	ec51 0b17 	vmov	r0, r1, d7
 8007738:	f7f8 ff86 	bl	8000648 <__aeabi_dmul>
 800773c:	9b02      	ldr	r3, [sp, #8]
 800773e:	9d00      	ldr	r5, [sp, #0]
 8007740:	930f      	str	r3, [sp, #60]	; 0x3c
 8007742:	ec41 0b19 	vmov	d9, r0, r1
 8007746:	4649      	mov	r1, r9
 8007748:	4640      	mov	r0, r8
 800774a:	f7f9 fa2d 	bl	8000ba8 <__aeabi_d2iz>
 800774e:	4606      	mov	r6, r0
 8007750:	f7f8 ff10 	bl	8000574 <__aeabi_i2d>
 8007754:	3630      	adds	r6, #48	; 0x30
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4640      	mov	r0, r8
 800775c:	4649      	mov	r1, r9
 800775e:	f7f8 fdbb 	bl	80002d8 <__aeabi_dsub>
 8007762:	f805 6b01 	strb.w	r6, [r5], #1
 8007766:	9b02      	ldr	r3, [sp, #8]
 8007768:	429d      	cmp	r5, r3
 800776a:	4680      	mov	r8, r0
 800776c:	4689      	mov	r9, r1
 800776e:	f04f 0200 	mov.w	r2, #0
 8007772:	d124      	bne.n	80077be <_dtoa_r+0x62e>
 8007774:	4b1b      	ldr	r3, [pc, #108]	; (80077e4 <_dtoa_r+0x654>)
 8007776:	ec51 0b19 	vmov	r0, r1, d9
 800777a:	f7f8 fdaf 	bl	80002dc <__adddf3>
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	4640      	mov	r0, r8
 8007784:	4649      	mov	r1, r9
 8007786:	f7f9 f9ef 	bl	8000b68 <__aeabi_dcmpgt>
 800778a:	2800      	cmp	r0, #0
 800778c:	d173      	bne.n	8007876 <_dtoa_r+0x6e6>
 800778e:	ec53 2b19 	vmov	r2, r3, d9
 8007792:	4914      	ldr	r1, [pc, #80]	; (80077e4 <_dtoa_r+0x654>)
 8007794:	2000      	movs	r0, #0
 8007796:	f7f8 fd9f 	bl	80002d8 <__aeabi_dsub>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	4640      	mov	r0, r8
 80077a0:	4649      	mov	r1, r9
 80077a2:	f7f9 f9c3 	bl	8000b2c <__aeabi_dcmplt>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	f43f af2f 	beq.w	800760a <_dtoa_r+0x47a>
 80077ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80077ae:	1e6b      	subs	r3, r5, #1
 80077b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80077b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80077b6:	2b30      	cmp	r3, #48	; 0x30
 80077b8:	d0f8      	beq.n	80077ac <_dtoa_r+0x61c>
 80077ba:	46bb      	mov	fp, r7
 80077bc:	e04a      	b.n	8007854 <_dtoa_r+0x6c4>
 80077be:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <_dtoa_r+0x648>)
 80077c0:	f7f8 ff42 	bl	8000648 <__aeabi_dmul>
 80077c4:	4680      	mov	r8, r0
 80077c6:	4689      	mov	r9, r1
 80077c8:	e7bd      	b.n	8007746 <_dtoa_r+0x5b6>
 80077ca:	bf00      	nop
 80077cc:	08009010 	.word	0x08009010
 80077d0:	08008fe8 	.word	0x08008fe8
 80077d4:	3ff00000 	.word	0x3ff00000
 80077d8:	40240000 	.word	0x40240000
 80077dc:	401c0000 	.word	0x401c0000
 80077e0:	40140000 	.word	0x40140000
 80077e4:	3fe00000 	.word	0x3fe00000
 80077e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80077ec:	9d00      	ldr	r5, [sp, #0]
 80077ee:	4642      	mov	r2, r8
 80077f0:	464b      	mov	r3, r9
 80077f2:	4630      	mov	r0, r6
 80077f4:	4639      	mov	r1, r7
 80077f6:	f7f9 f851 	bl	800089c <__aeabi_ddiv>
 80077fa:	f7f9 f9d5 	bl	8000ba8 <__aeabi_d2iz>
 80077fe:	9001      	str	r0, [sp, #4]
 8007800:	f7f8 feb8 	bl	8000574 <__aeabi_i2d>
 8007804:	4642      	mov	r2, r8
 8007806:	464b      	mov	r3, r9
 8007808:	f7f8 ff1e 	bl	8000648 <__aeabi_dmul>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4630      	mov	r0, r6
 8007812:	4639      	mov	r1, r7
 8007814:	f7f8 fd60 	bl	80002d8 <__aeabi_dsub>
 8007818:	9e01      	ldr	r6, [sp, #4]
 800781a:	9f04      	ldr	r7, [sp, #16]
 800781c:	3630      	adds	r6, #48	; 0x30
 800781e:	f805 6b01 	strb.w	r6, [r5], #1
 8007822:	9e00      	ldr	r6, [sp, #0]
 8007824:	1bae      	subs	r6, r5, r6
 8007826:	42b7      	cmp	r7, r6
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	d134      	bne.n	8007898 <_dtoa_r+0x708>
 800782e:	f7f8 fd55 	bl	80002dc <__adddf3>
 8007832:	4642      	mov	r2, r8
 8007834:	464b      	mov	r3, r9
 8007836:	4606      	mov	r6, r0
 8007838:	460f      	mov	r7, r1
 800783a:	f7f9 f995 	bl	8000b68 <__aeabi_dcmpgt>
 800783e:	b9c8      	cbnz	r0, 8007874 <_dtoa_r+0x6e4>
 8007840:	4642      	mov	r2, r8
 8007842:	464b      	mov	r3, r9
 8007844:	4630      	mov	r0, r6
 8007846:	4639      	mov	r1, r7
 8007848:	f7f9 f966 	bl	8000b18 <__aeabi_dcmpeq>
 800784c:	b110      	cbz	r0, 8007854 <_dtoa_r+0x6c4>
 800784e:	9b01      	ldr	r3, [sp, #4]
 8007850:	07db      	lsls	r3, r3, #31
 8007852:	d40f      	bmi.n	8007874 <_dtoa_r+0x6e4>
 8007854:	4651      	mov	r1, sl
 8007856:	4620      	mov	r0, r4
 8007858:	f000 fbcc 	bl	8007ff4 <_Bfree>
 800785c:	2300      	movs	r3, #0
 800785e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007860:	702b      	strb	r3, [r5, #0]
 8007862:	f10b 0301 	add.w	r3, fp, #1
 8007866:	6013      	str	r3, [r2, #0]
 8007868:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800786a:	2b00      	cmp	r3, #0
 800786c:	f43f ace2 	beq.w	8007234 <_dtoa_r+0xa4>
 8007870:	601d      	str	r5, [r3, #0]
 8007872:	e4df      	b.n	8007234 <_dtoa_r+0xa4>
 8007874:	465f      	mov	r7, fp
 8007876:	462b      	mov	r3, r5
 8007878:	461d      	mov	r5, r3
 800787a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800787e:	2a39      	cmp	r2, #57	; 0x39
 8007880:	d106      	bne.n	8007890 <_dtoa_r+0x700>
 8007882:	9a00      	ldr	r2, [sp, #0]
 8007884:	429a      	cmp	r2, r3
 8007886:	d1f7      	bne.n	8007878 <_dtoa_r+0x6e8>
 8007888:	9900      	ldr	r1, [sp, #0]
 800788a:	2230      	movs	r2, #48	; 0x30
 800788c:	3701      	adds	r7, #1
 800788e:	700a      	strb	r2, [r1, #0]
 8007890:	781a      	ldrb	r2, [r3, #0]
 8007892:	3201      	adds	r2, #1
 8007894:	701a      	strb	r2, [r3, #0]
 8007896:	e790      	b.n	80077ba <_dtoa_r+0x62a>
 8007898:	4ba3      	ldr	r3, [pc, #652]	; (8007b28 <_dtoa_r+0x998>)
 800789a:	2200      	movs	r2, #0
 800789c:	f7f8 fed4 	bl	8000648 <__aeabi_dmul>
 80078a0:	2200      	movs	r2, #0
 80078a2:	2300      	movs	r3, #0
 80078a4:	4606      	mov	r6, r0
 80078a6:	460f      	mov	r7, r1
 80078a8:	f7f9 f936 	bl	8000b18 <__aeabi_dcmpeq>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	d09e      	beq.n	80077ee <_dtoa_r+0x65e>
 80078b0:	e7d0      	b.n	8007854 <_dtoa_r+0x6c4>
 80078b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078b4:	2a00      	cmp	r2, #0
 80078b6:	f000 80ca 	beq.w	8007a4e <_dtoa_r+0x8be>
 80078ba:	9a07      	ldr	r2, [sp, #28]
 80078bc:	2a01      	cmp	r2, #1
 80078be:	f300 80ad 	bgt.w	8007a1c <_dtoa_r+0x88c>
 80078c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078c4:	2a00      	cmp	r2, #0
 80078c6:	f000 80a5 	beq.w	8007a14 <_dtoa_r+0x884>
 80078ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80078ce:	9e08      	ldr	r6, [sp, #32]
 80078d0:	9d05      	ldr	r5, [sp, #20]
 80078d2:	9a05      	ldr	r2, [sp, #20]
 80078d4:	441a      	add	r2, r3
 80078d6:	9205      	str	r2, [sp, #20]
 80078d8:	9a06      	ldr	r2, [sp, #24]
 80078da:	2101      	movs	r1, #1
 80078dc:	441a      	add	r2, r3
 80078de:	4620      	mov	r0, r4
 80078e0:	9206      	str	r2, [sp, #24]
 80078e2:	f000 fc3d 	bl	8008160 <__i2b>
 80078e6:	4607      	mov	r7, r0
 80078e8:	b165      	cbz	r5, 8007904 <_dtoa_r+0x774>
 80078ea:	9b06      	ldr	r3, [sp, #24]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	dd09      	ble.n	8007904 <_dtoa_r+0x774>
 80078f0:	42ab      	cmp	r3, r5
 80078f2:	9a05      	ldr	r2, [sp, #20]
 80078f4:	bfa8      	it	ge
 80078f6:	462b      	movge	r3, r5
 80078f8:	1ad2      	subs	r2, r2, r3
 80078fa:	9205      	str	r2, [sp, #20]
 80078fc:	9a06      	ldr	r2, [sp, #24]
 80078fe:	1aed      	subs	r5, r5, r3
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	9306      	str	r3, [sp, #24]
 8007904:	9b08      	ldr	r3, [sp, #32]
 8007906:	b1f3      	cbz	r3, 8007946 <_dtoa_r+0x7b6>
 8007908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 80a3 	beq.w	8007a56 <_dtoa_r+0x8c6>
 8007910:	2e00      	cmp	r6, #0
 8007912:	dd10      	ble.n	8007936 <_dtoa_r+0x7a6>
 8007914:	4639      	mov	r1, r7
 8007916:	4632      	mov	r2, r6
 8007918:	4620      	mov	r0, r4
 800791a:	f000 fce1 	bl	80082e0 <__pow5mult>
 800791e:	4652      	mov	r2, sl
 8007920:	4601      	mov	r1, r0
 8007922:	4607      	mov	r7, r0
 8007924:	4620      	mov	r0, r4
 8007926:	f000 fc31 	bl	800818c <__multiply>
 800792a:	4651      	mov	r1, sl
 800792c:	4680      	mov	r8, r0
 800792e:	4620      	mov	r0, r4
 8007930:	f000 fb60 	bl	8007ff4 <_Bfree>
 8007934:	46c2      	mov	sl, r8
 8007936:	9b08      	ldr	r3, [sp, #32]
 8007938:	1b9a      	subs	r2, r3, r6
 800793a:	d004      	beq.n	8007946 <_dtoa_r+0x7b6>
 800793c:	4651      	mov	r1, sl
 800793e:	4620      	mov	r0, r4
 8007940:	f000 fcce 	bl	80082e0 <__pow5mult>
 8007944:	4682      	mov	sl, r0
 8007946:	2101      	movs	r1, #1
 8007948:	4620      	mov	r0, r4
 800794a:	f000 fc09 	bl	8008160 <__i2b>
 800794e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007950:	2b00      	cmp	r3, #0
 8007952:	4606      	mov	r6, r0
 8007954:	f340 8081 	ble.w	8007a5a <_dtoa_r+0x8ca>
 8007958:	461a      	mov	r2, r3
 800795a:	4601      	mov	r1, r0
 800795c:	4620      	mov	r0, r4
 800795e:	f000 fcbf 	bl	80082e0 <__pow5mult>
 8007962:	9b07      	ldr	r3, [sp, #28]
 8007964:	2b01      	cmp	r3, #1
 8007966:	4606      	mov	r6, r0
 8007968:	dd7a      	ble.n	8007a60 <_dtoa_r+0x8d0>
 800796a:	f04f 0800 	mov.w	r8, #0
 800796e:	6933      	ldr	r3, [r6, #16]
 8007970:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007974:	6918      	ldr	r0, [r3, #16]
 8007976:	f000 fba5 	bl	80080c4 <__hi0bits>
 800797a:	f1c0 0020 	rsb	r0, r0, #32
 800797e:	9b06      	ldr	r3, [sp, #24]
 8007980:	4418      	add	r0, r3
 8007982:	f010 001f 	ands.w	r0, r0, #31
 8007986:	f000 8094 	beq.w	8007ab2 <_dtoa_r+0x922>
 800798a:	f1c0 0320 	rsb	r3, r0, #32
 800798e:	2b04      	cmp	r3, #4
 8007990:	f340 8085 	ble.w	8007a9e <_dtoa_r+0x90e>
 8007994:	9b05      	ldr	r3, [sp, #20]
 8007996:	f1c0 001c 	rsb	r0, r0, #28
 800799a:	4403      	add	r3, r0
 800799c:	9305      	str	r3, [sp, #20]
 800799e:	9b06      	ldr	r3, [sp, #24]
 80079a0:	4403      	add	r3, r0
 80079a2:	4405      	add	r5, r0
 80079a4:	9306      	str	r3, [sp, #24]
 80079a6:	9b05      	ldr	r3, [sp, #20]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	dd05      	ble.n	80079b8 <_dtoa_r+0x828>
 80079ac:	4651      	mov	r1, sl
 80079ae:	461a      	mov	r2, r3
 80079b0:	4620      	mov	r0, r4
 80079b2:	f000 fcef 	bl	8008394 <__lshift>
 80079b6:	4682      	mov	sl, r0
 80079b8:	9b06      	ldr	r3, [sp, #24]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	dd05      	ble.n	80079ca <_dtoa_r+0x83a>
 80079be:	4631      	mov	r1, r6
 80079c0:	461a      	mov	r2, r3
 80079c2:	4620      	mov	r0, r4
 80079c4:	f000 fce6 	bl	8008394 <__lshift>
 80079c8:	4606      	mov	r6, r0
 80079ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d072      	beq.n	8007ab6 <_dtoa_r+0x926>
 80079d0:	4631      	mov	r1, r6
 80079d2:	4650      	mov	r0, sl
 80079d4:	f000 fd4a 	bl	800846c <__mcmp>
 80079d8:	2800      	cmp	r0, #0
 80079da:	da6c      	bge.n	8007ab6 <_dtoa_r+0x926>
 80079dc:	2300      	movs	r3, #0
 80079de:	4651      	mov	r1, sl
 80079e0:	220a      	movs	r2, #10
 80079e2:	4620      	mov	r0, r4
 80079e4:	f000 fb28 	bl	8008038 <__multadd>
 80079e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079ee:	4682      	mov	sl, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 81b0 	beq.w	8007d56 <_dtoa_r+0xbc6>
 80079f6:	2300      	movs	r3, #0
 80079f8:	4639      	mov	r1, r7
 80079fa:	220a      	movs	r2, #10
 80079fc:	4620      	mov	r0, r4
 80079fe:	f000 fb1b 	bl	8008038 <__multadd>
 8007a02:	9b01      	ldr	r3, [sp, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	4607      	mov	r7, r0
 8007a08:	f300 8096 	bgt.w	8007b38 <_dtoa_r+0x9a8>
 8007a0c:	9b07      	ldr	r3, [sp, #28]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	dc59      	bgt.n	8007ac6 <_dtoa_r+0x936>
 8007a12:	e091      	b.n	8007b38 <_dtoa_r+0x9a8>
 8007a14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a1a:	e758      	b.n	80078ce <_dtoa_r+0x73e>
 8007a1c:	9b04      	ldr	r3, [sp, #16]
 8007a1e:	1e5e      	subs	r6, r3, #1
 8007a20:	9b08      	ldr	r3, [sp, #32]
 8007a22:	42b3      	cmp	r3, r6
 8007a24:	bfbf      	itttt	lt
 8007a26:	9b08      	ldrlt	r3, [sp, #32]
 8007a28:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007a2a:	9608      	strlt	r6, [sp, #32]
 8007a2c:	1af3      	sublt	r3, r6, r3
 8007a2e:	bfb4      	ite	lt
 8007a30:	18d2      	addlt	r2, r2, r3
 8007a32:	1b9e      	subge	r6, r3, r6
 8007a34:	9b04      	ldr	r3, [sp, #16]
 8007a36:	bfbc      	itt	lt
 8007a38:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007a3a:	2600      	movlt	r6, #0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	bfb7      	itett	lt
 8007a40:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007a44:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007a48:	1a9d      	sublt	r5, r3, r2
 8007a4a:	2300      	movlt	r3, #0
 8007a4c:	e741      	b.n	80078d2 <_dtoa_r+0x742>
 8007a4e:	9e08      	ldr	r6, [sp, #32]
 8007a50:	9d05      	ldr	r5, [sp, #20]
 8007a52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007a54:	e748      	b.n	80078e8 <_dtoa_r+0x758>
 8007a56:	9a08      	ldr	r2, [sp, #32]
 8007a58:	e770      	b.n	800793c <_dtoa_r+0x7ac>
 8007a5a:	9b07      	ldr	r3, [sp, #28]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	dc19      	bgt.n	8007a94 <_dtoa_r+0x904>
 8007a60:	9b02      	ldr	r3, [sp, #8]
 8007a62:	b9bb      	cbnz	r3, 8007a94 <_dtoa_r+0x904>
 8007a64:	9b03      	ldr	r3, [sp, #12]
 8007a66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a6a:	b99b      	cbnz	r3, 8007a94 <_dtoa_r+0x904>
 8007a6c:	9b03      	ldr	r3, [sp, #12]
 8007a6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a72:	0d1b      	lsrs	r3, r3, #20
 8007a74:	051b      	lsls	r3, r3, #20
 8007a76:	b183      	cbz	r3, 8007a9a <_dtoa_r+0x90a>
 8007a78:	9b05      	ldr	r3, [sp, #20]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	9305      	str	r3, [sp, #20]
 8007a7e:	9b06      	ldr	r3, [sp, #24]
 8007a80:	3301      	adds	r3, #1
 8007a82:	9306      	str	r3, [sp, #24]
 8007a84:	f04f 0801 	mov.w	r8, #1
 8007a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f47f af6f 	bne.w	800796e <_dtoa_r+0x7de>
 8007a90:	2001      	movs	r0, #1
 8007a92:	e774      	b.n	800797e <_dtoa_r+0x7ee>
 8007a94:	f04f 0800 	mov.w	r8, #0
 8007a98:	e7f6      	b.n	8007a88 <_dtoa_r+0x8f8>
 8007a9a:	4698      	mov	r8, r3
 8007a9c:	e7f4      	b.n	8007a88 <_dtoa_r+0x8f8>
 8007a9e:	d082      	beq.n	80079a6 <_dtoa_r+0x816>
 8007aa0:	9a05      	ldr	r2, [sp, #20]
 8007aa2:	331c      	adds	r3, #28
 8007aa4:	441a      	add	r2, r3
 8007aa6:	9205      	str	r2, [sp, #20]
 8007aa8:	9a06      	ldr	r2, [sp, #24]
 8007aaa:	441a      	add	r2, r3
 8007aac:	441d      	add	r5, r3
 8007aae:	9206      	str	r2, [sp, #24]
 8007ab0:	e779      	b.n	80079a6 <_dtoa_r+0x816>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	e7f4      	b.n	8007aa0 <_dtoa_r+0x910>
 8007ab6:	9b04      	ldr	r3, [sp, #16]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	dc37      	bgt.n	8007b2c <_dtoa_r+0x99c>
 8007abc:	9b07      	ldr	r3, [sp, #28]
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	dd34      	ble.n	8007b2c <_dtoa_r+0x99c>
 8007ac2:	9b04      	ldr	r3, [sp, #16]
 8007ac4:	9301      	str	r3, [sp, #4]
 8007ac6:	9b01      	ldr	r3, [sp, #4]
 8007ac8:	b963      	cbnz	r3, 8007ae4 <_dtoa_r+0x954>
 8007aca:	4631      	mov	r1, r6
 8007acc:	2205      	movs	r2, #5
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f000 fab2 	bl	8008038 <__multadd>
 8007ad4:	4601      	mov	r1, r0
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	4650      	mov	r0, sl
 8007ada:	f000 fcc7 	bl	800846c <__mcmp>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	f73f adbb 	bgt.w	800765a <_dtoa_r+0x4ca>
 8007ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae6:	9d00      	ldr	r5, [sp, #0]
 8007ae8:	ea6f 0b03 	mvn.w	fp, r3
 8007aec:	f04f 0800 	mov.w	r8, #0
 8007af0:	4631      	mov	r1, r6
 8007af2:	4620      	mov	r0, r4
 8007af4:	f000 fa7e 	bl	8007ff4 <_Bfree>
 8007af8:	2f00      	cmp	r7, #0
 8007afa:	f43f aeab 	beq.w	8007854 <_dtoa_r+0x6c4>
 8007afe:	f1b8 0f00 	cmp.w	r8, #0
 8007b02:	d005      	beq.n	8007b10 <_dtoa_r+0x980>
 8007b04:	45b8      	cmp	r8, r7
 8007b06:	d003      	beq.n	8007b10 <_dtoa_r+0x980>
 8007b08:	4641      	mov	r1, r8
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f000 fa72 	bl	8007ff4 <_Bfree>
 8007b10:	4639      	mov	r1, r7
 8007b12:	4620      	mov	r0, r4
 8007b14:	f000 fa6e 	bl	8007ff4 <_Bfree>
 8007b18:	e69c      	b.n	8007854 <_dtoa_r+0x6c4>
 8007b1a:	2600      	movs	r6, #0
 8007b1c:	4637      	mov	r7, r6
 8007b1e:	e7e1      	b.n	8007ae4 <_dtoa_r+0x954>
 8007b20:	46bb      	mov	fp, r7
 8007b22:	4637      	mov	r7, r6
 8007b24:	e599      	b.n	800765a <_dtoa_r+0x4ca>
 8007b26:	bf00      	nop
 8007b28:	40240000 	.word	0x40240000
 8007b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 80c8 	beq.w	8007cc4 <_dtoa_r+0xb34>
 8007b34:	9b04      	ldr	r3, [sp, #16]
 8007b36:	9301      	str	r3, [sp, #4]
 8007b38:	2d00      	cmp	r5, #0
 8007b3a:	dd05      	ble.n	8007b48 <_dtoa_r+0x9b8>
 8007b3c:	4639      	mov	r1, r7
 8007b3e:	462a      	mov	r2, r5
 8007b40:	4620      	mov	r0, r4
 8007b42:	f000 fc27 	bl	8008394 <__lshift>
 8007b46:	4607      	mov	r7, r0
 8007b48:	f1b8 0f00 	cmp.w	r8, #0
 8007b4c:	d05b      	beq.n	8007c06 <_dtoa_r+0xa76>
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	4620      	mov	r0, r4
 8007b52:	f000 fa0f 	bl	8007f74 <_Balloc>
 8007b56:	4605      	mov	r5, r0
 8007b58:	b928      	cbnz	r0, 8007b66 <_dtoa_r+0x9d6>
 8007b5a:	4b83      	ldr	r3, [pc, #524]	; (8007d68 <_dtoa_r+0xbd8>)
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007b62:	f7ff bb2e 	b.w	80071c2 <_dtoa_r+0x32>
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	3202      	adds	r2, #2
 8007b6a:	0092      	lsls	r2, r2, #2
 8007b6c:	f107 010c 	add.w	r1, r7, #12
 8007b70:	300c      	adds	r0, #12
 8007b72:	f001 f813 	bl	8008b9c <memcpy>
 8007b76:	2201      	movs	r2, #1
 8007b78:	4629      	mov	r1, r5
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f000 fc0a 	bl	8008394 <__lshift>
 8007b80:	9b00      	ldr	r3, [sp, #0]
 8007b82:	3301      	adds	r3, #1
 8007b84:	9304      	str	r3, [sp, #16]
 8007b86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	9308      	str	r3, [sp, #32]
 8007b8e:	9b02      	ldr	r3, [sp, #8]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	46b8      	mov	r8, r7
 8007b96:	9306      	str	r3, [sp, #24]
 8007b98:	4607      	mov	r7, r0
 8007b9a:	9b04      	ldr	r3, [sp, #16]
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	4650      	mov	r0, sl
 8007ba2:	9301      	str	r3, [sp, #4]
 8007ba4:	f7ff fa6b 	bl	800707e <quorem>
 8007ba8:	4641      	mov	r1, r8
 8007baa:	9002      	str	r0, [sp, #8]
 8007bac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007bb0:	4650      	mov	r0, sl
 8007bb2:	f000 fc5b 	bl	800846c <__mcmp>
 8007bb6:	463a      	mov	r2, r7
 8007bb8:	9005      	str	r0, [sp, #20]
 8007bba:	4631      	mov	r1, r6
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f000 fc71 	bl	80084a4 <__mdiff>
 8007bc2:	68c2      	ldr	r2, [r0, #12]
 8007bc4:	4605      	mov	r5, r0
 8007bc6:	bb02      	cbnz	r2, 8007c0a <_dtoa_r+0xa7a>
 8007bc8:	4601      	mov	r1, r0
 8007bca:	4650      	mov	r0, sl
 8007bcc:	f000 fc4e 	bl	800846c <__mcmp>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	9209      	str	r2, [sp, #36]	; 0x24
 8007bd8:	f000 fa0c 	bl	8007ff4 <_Bfree>
 8007bdc:	9b07      	ldr	r3, [sp, #28]
 8007bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007be0:	9d04      	ldr	r5, [sp, #16]
 8007be2:	ea43 0102 	orr.w	r1, r3, r2
 8007be6:	9b06      	ldr	r3, [sp, #24]
 8007be8:	4319      	orrs	r1, r3
 8007bea:	d110      	bne.n	8007c0e <_dtoa_r+0xa7e>
 8007bec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007bf0:	d029      	beq.n	8007c46 <_dtoa_r+0xab6>
 8007bf2:	9b05      	ldr	r3, [sp, #20]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	dd02      	ble.n	8007bfe <_dtoa_r+0xa6e>
 8007bf8:	9b02      	ldr	r3, [sp, #8]
 8007bfa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007bfe:	9b01      	ldr	r3, [sp, #4]
 8007c00:	f883 9000 	strb.w	r9, [r3]
 8007c04:	e774      	b.n	8007af0 <_dtoa_r+0x960>
 8007c06:	4638      	mov	r0, r7
 8007c08:	e7ba      	b.n	8007b80 <_dtoa_r+0x9f0>
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	e7e1      	b.n	8007bd2 <_dtoa_r+0xa42>
 8007c0e:	9b05      	ldr	r3, [sp, #20]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	db04      	blt.n	8007c1e <_dtoa_r+0xa8e>
 8007c14:	9907      	ldr	r1, [sp, #28]
 8007c16:	430b      	orrs	r3, r1
 8007c18:	9906      	ldr	r1, [sp, #24]
 8007c1a:	430b      	orrs	r3, r1
 8007c1c:	d120      	bne.n	8007c60 <_dtoa_r+0xad0>
 8007c1e:	2a00      	cmp	r2, #0
 8007c20:	dded      	ble.n	8007bfe <_dtoa_r+0xa6e>
 8007c22:	4651      	mov	r1, sl
 8007c24:	2201      	movs	r2, #1
 8007c26:	4620      	mov	r0, r4
 8007c28:	f000 fbb4 	bl	8008394 <__lshift>
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	4682      	mov	sl, r0
 8007c30:	f000 fc1c 	bl	800846c <__mcmp>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	dc03      	bgt.n	8007c40 <_dtoa_r+0xab0>
 8007c38:	d1e1      	bne.n	8007bfe <_dtoa_r+0xa6e>
 8007c3a:	f019 0f01 	tst.w	r9, #1
 8007c3e:	d0de      	beq.n	8007bfe <_dtoa_r+0xa6e>
 8007c40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c44:	d1d8      	bne.n	8007bf8 <_dtoa_r+0xa68>
 8007c46:	9a01      	ldr	r2, [sp, #4]
 8007c48:	2339      	movs	r3, #57	; 0x39
 8007c4a:	7013      	strb	r3, [r2, #0]
 8007c4c:	462b      	mov	r3, r5
 8007c4e:	461d      	mov	r5, r3
 8007c50:	3b01      	subs	r3, #1
 8007c52:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c56:	2a39      	cmp	r2, #57	; 0x39
 8007c58:	d06c      	beq.n	8007d34 <_dtoa_r+0xba4>
 8007c5a:	3201      	adds	r2, #1
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	e747      	b.n	8007af0 <_dtoa_r+0x960>
 8007c60:	2a00      	cmp	r2, #0
 8007c62:	dd07      	ble.n	8007c74 <_dtoa_r+0xae4>
 8007c64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c68:	d0ed      	beq.n	8007c46 <_dtoa_r+0xab6>
 8007c6a:	9a01      	ldr	r2, [sp, #4]
 8007c6c:	f109 0301 	add.w	r3, r9, #1
 8007c70:	7013      	strb	r3, [r2, #0]
 8007c72:	e73d      	b.n	8007af0 <_dtoa_r+0x960>
 8007c74:	9b04      	ldr	r3, [sp, #16]
 8007c76:	9a08      	ldr	r2, [sp, #32]
 8007c78:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d043      	beq.n	8007d08 <_dtoa_r+0xb78>
 8007c80:	4651      	mov	r1, sl
 8007c82:	2300      	movs	r3, #0
 8007c84:	220a      	movs	r2, #10
 8007c86:	4620      	mov	r0, r4
 8007c88:	f000 f9d6 	bl	8008038 <__multadd>
 8007c8c:	45b8      	cmp	r8, r7
 8007c8e:	4682      	mov	sl, r0
 8007c90:	f04f 0300 	mov.w	r3, #0
 8007c94:	f04f 020a 	mov.w	r2, #10
 8007c98:	4641      	mov	r1, r8
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	d107      	bne.n	8007cae <_dtoa_r+0xb1e>
 8007c9e:	f000 f9cb 	bl	8008038 <__multadd>
 8007ca2:	4680      	mov	r8, r0
 8007ca4:	4607      	mov	r7, r0
 8007ca6:	9b04      	ldr	r3, [sp, #16]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	9304      	str	r3, [sp, #16]
 8007cac:	e775      	b.n	8007b9a <_dtoa_r+0xa0a>
 8007cae:	f000 f9c3 	bl	8008038 <__multadd>
 8007cb2:	4639      	mov	r1, r7
 8007cb4:	4680      	mov	r8, r0
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	220a      	movs	r2, #10
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f000 f9bc 	bl	8008038 <__multadd>
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	e7f0      	b.n	8007ca6 <_dtoa_r+0xb16>
 8007cc4:	9b04      	ldr	r3, [sp, #16]
 8007cc6:	9301      	str	r3, [sp, #4]
 8007cc8:	9d00      	ldr	r5, [sp, #0]
 8007cca:	4631      	mov	r1, r6
 8007ccc:	4650      	mov	r0, sl
 8007cce:	f7ff f9d6 	bl	800707e <quorem>
 8007cd2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007cd6:	9b00      	ldr	r3, [sp, #0]
 8007cd8:	f805 9b01 	strb.w	r9, [r5], #1
 8007cdc:	1aea      	subs	r2, r5, r3
 8007cde:	9b01      	ldr	r3, [sp, #4]
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	dd07      	ble.n	8007cf4 <_dtoa_r+0xb64>
 8007ce4:	4651      	mov	r1, sl
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	220a      	movs	r2, #10
 8007cea:	4620      	mov	r0, r4
 8007cec:	f000 f9a4 	bl	8008038 <__multadd>
 8007cf0:	4682      	mov	sl, r0
 8007cf2:	e7ea      	b.n	8007cca <_dtoa_r+0xb3a>
 8007cf4:	9b01      	ldr	r3, [sp, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	bfc8      	it	gt
 8007cfa:	461d      	movgt	r5, r3
 8007cfc:	9b00      	ldr	r3, [sp, #0]
 8007cfe:	bfd8      	it	le
 8007d00:	2501      	movle	r5, #1
 8007d02:	441d      	add	r5, r3
 8007d04:	f04f 0800 	mov.w	r8, #0
 8007d08:	4651      	mov	r1, sl
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f000 fb41 	bl	8008394 <__lshift>
 8007d12:	4631      	mov	r1, r6
 8007d14:	4682      	mov	sl, r0
 8007d16:	f000 fba9 	bl	800846c <__mcmp>
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	dc96      	bgt.n	8007c4c <_dtoa_r+0xabc>
 8007d1e:	d102      	bne.n	8007d26 <_dtoa_r+0xb96>
 8007d20:	f019 0f01 	tst.w	r9, #1
 8007d24:	d192      	bne.n	8007c4c <_dtoa_r+0xabc>
 8007d26:	462b      	mov	r3, r5
 8007d28:	461d      	mov	r5, r3
 8007d2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d2e:	2a30      	cmp	r2, #48	; 0x30
 8007d30:	d0fa      	beq.n	8007d28 <_dtoa_r+0xb98>
 8007d32:	e6dd      	b.n	8007af0 <_dtoa_r+0x960>
 8007d34:	9a00      	ldr	r2, [sp, #0]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d189      	bne.n	8007c4e <_dtoa_r+0xabe>
 8007d3a:	f10b 0b01 	add.w	fp, fp, #1
 8007d3e:	2331      	movs	r3, #49	; 0x31
 8007d40:	e796      	b.n	8007c70 <_dtoa_r+0xae0>
 8007d42:	4b0a      	ldr	r3, [pc, #40]	; (8007d6c <_dtoa_r+0xbdc>)
 8007d44:	f7ff ba99 	b.w	800727a <_dtoa_r+0xea>
 8007d48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f47f aa6d 	bne.w	800722a <_dtoa_r+0x9a>
 8007d50:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <_dtoa_r+0xbe0>)
 8007d52:	f7ff ba92 	b.w	800727a <_dtoa_r+0xea>
 8007d56:	9b01      	ldr	r3, [sp, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	dcb5      	bgt.n	8007cc8 <_dtoa_r+0xb38>
 8007d5c:	9b07      	ldr	r3, [sp, #28]
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	f73f aeb1 	bgt.w	8007ac6 <_dtoa_r+0x936>
 8007d64:	e7b0      	b.n	8007cc8 <_dtoa_r+0xb38>
 8007d66:	bf00      	nop
 8007d68:	08008f78 	.word	0x08008f78
 8007d6c:	08008ed8 	.word	0x08008ed8
 8007d70:	08008efc 	.word	0x08008efc

08007d74 <_free_r>:
 8007d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d76:	2900      	cmp	r1, #0
 8007d78:	d044      	beq.n	8007e04 <_free_r+0x90>
 8007d7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d7e:	9001      	str	r0, [sp, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f1a1 0404 	sub.w	r4, r1, #4
 8007d86:	bfb8      	it	lt
 8007d88:	18e4      	addlt	r4, r4, r3
 8007d8a:	f000 f8e7 	bl	8007f5c <__malloc_lock>
 8007d8e:	4a1e      	ldr	r2, [pc, #120]	; (8007e08 <_free_r+0x94>)
 8007d90:	9801      	ldr	r0, [sp, #4]
 8007d92:	6813      	ldr	r3, [r2, #0]
 8007d94:	b933      	cbnz	r3, 8007da4 <_free_r+0x30>
 8007d96:	6063      	str	r3, [r4, #4]
 8007d98:	6014      	str	r4, [r2, #0]
 8007d9a:	b003      	add	sp, #12
 8007d9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007da0:	f000 b8e2 	b.w	8007f68 <__malloc_unlock>
 8007da4:	42a3      	cmp	r3, r4
 8007da6:	d908      	bls.n	8007dba <_free_r+0x46>
 8007da8:	6825      	ldr	r5, [r4, #0]
 8007daa:	1961      	adds	r1, r4, r5
 8007dac:	428b      	cmp	r3, r1
 8007dae:	bf01      	itttt	eq
 8007db0:	6819      	ldreq	r1, [r3, #0]
 8007db2:	685b      	ldreq	r3, [r3, #4]
 8007db4:	1949      	addeq	r1, r1, r5
 8007db6:	6021      	streq	r1, [r4, #0]
 8007db8:	e7ed      	b.n	8007d96 <_free_r+0x22>
 8007dba:	461a      	mov	r2, r3
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	b10b      	cbz	r3, 8007dc4 <_free_r+0x50>
 8007dc0:	42a3      	cmp	r3, r4
 8007dc2:	d9fa      	bls.n	8007dba <_free_r+0x46>
 8007dc4:	6811      	ldr	r1, [r2, #0]
 8007dc6:	1855      	adds	r5, r2, r1
 8007dc8:	42a5      	cmp	r5, r4
 8007dca:	d10b      	bne.n	8007de4 <_free_r+0x70>
 8007dcc:	6824      	ldr	r4, [r4, #0]
 8007dce:	4421      	add	r1, r4
 8007dd0:	1854      	adds	r4, r2, r1
 8007dd2:	42a3      	cmp	r3, r4
 8007dd4:	6011      	str	r1, [r2, #0]
 8007dd6:	d1e0      	bne.n	8007d9a <_free_r+0x26>
 8007dd8:	681c      	ldr	r4, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	6053      	str	r3, [r2, #4]
 8007dde:	440c      	add	r4, r1
 8007de0:	6014      	str	r4, [r2, #0]
 8007de2:	e7da      	b.n	8007d9a <_free_r+0x26>
 8007de4:	d902      	bls.n	8007dec <_free_r+0x78>
 8007de6:	230c      	movs	r3, #12
 8007de8:	6003      	str	r3, [r0, #0]
 8007dea:	e7d6      	b.n	8007d9a <_free_r+0x26>
 8007dec:	6825      	ldr	r5, [r4, #0]
 8007dee:	1961      	adds	r1, r4, r5
 8007df0:	428b      	cmp	r3, r1
 8007df2:	bf04      	itt	eq
 8007df4:	6819      	ldreq	r1, [r3, #0]
 8007df6:	685b      	ldreq	r3, [r3, #4]
 8007df8:	6063      	str	r3, [r4, #4]
 8007dfa:	bf04      	itt	eq
 8007dfc:	1949      	addeq	r1, r1, r5
 8007dfe:	6021      	streq	r1, [r4, #0]
 8007e00:	6054      	str	r4, [r2, #4]
 8007e02:	e7ca      	b.n	8007d9a <_free_r+0x26>
 8007e04:	b003      	add	sp, #12
 8007e06:	bd30      	pop	{r4, r5, pc}
 8007e08:	20000594 	.word	0x20000594

08007e0c <malloc>:
 8007e0c:	4b02      	ldr	r3, [pc, #8]	; (8007e18 <malloc+0xc>)
 8007e0e:	4601      	mov	r1, r0
 8007e10:	6818      	ldr	r0, [r3, #0]
 8007e12:	f000 b823 	b.w	8007e5c <_malloc_r>
 8007e16:	bf00      	nop
 8007e18:	20000064 	.word	0x20000064

08007e1c <sbrk_aligned>:
 8007e1c:	b570      	push	{r4, r5, r6, lr}
 8007e1e:	4e0e      	ldr	r6, [pc, #56]	; (8007e58 <sbrk_aligned+0x3c>)
 8007e20:	460c      	mov	r4, r1
 8007e22:	6831      	ldr	r1, [r6, #0]
 8007e24:	4605      	mov	r5, r0
 8007e26:	b911      	cbnz	r1, 8007e2e <sbrk_aligned+0x12>
 8007e28:	f000 fea8 	bl	8008b7c <_sbrk_r>
 8007e2c:	6030      	str	r0, [r6, #0]
 8007e2e:	4621      	mov	r1, r4
 8007e30:	4628      	mov	r0, r5
 8007e32:	f000 fea3 	bl	8008b7c <_sbrk_r>
 8007e36:	1c43      	adds	r3, r0, #1
 8007e38:	d00a      	beq.n	8007e50 <sbrk_aligned+0x34>
 8007e3a:	1cc4      	adds	r4, r0, #3
 8007e3c:	f024 0403 	bic.w	r4, r4, #3
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	d007      	beq.n	8007e54 <sbrk_aligned+0x38>
 8007e44:	1a21      	subs	r1, r4, r0
 8007e46:	4628      	mov	r0, r5
 8007e48:	f000 fe98 	bl	8008b7c <_sbrk_r>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d101      	bne.n	8007e54 <sbrk_aligned+0x38>
 8007e50:	f04f 34ff 	mov.w	r4, #4294967295
 8007e54:	4620      	mov	r0, r4
 8007e56:	bd70      	pop	{r4, r5, r6, pc}
 8007e58:	20000598 	.word	0x20000598

08007e5c <_malloc_r>:
 8007e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e60:	1ccd      	adds	r5, r1, #3
 8007e62:	f025 0503 	bic.w	r5, r5, #3
 8007e66:	3508      	adds	r5, #8
 8007e68:	2d0c      	cmp	r5, #12
 8007e6a:	bf38      	it	cc
 8007e6c:	250c      	movcc	r5, #12
 8007e6e:	2d00      	cmp	r5, #0
 8007e70:	4607      	mov	r7, r0
 8007e72:	db01      	blt.n	8007e78 <_malloc_r+0x1c>
 8007e74:	42a9      	cmp	r1, r5
 8007e76:	d905      	bls.n	8007e84 <_malloc_r+0x28>
 8007e78:	230c      	movs	r3, #12
 8007e7a:	603b      	str	r3, [r7, #0]
 8007e7c:	2600      	movs	r6, #0
 8007e7e:	4630      	mov	r0, r6
 8007e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f58 <_malloc_r+0xfc>
 8007e88:	f000 f868 	bl	8007f5c <__malloc_lock>
 8007e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8007e90:	461c      	mov	r4, r3
 8007e92:	bb5c      	cbnz	r4, 8007eec <_malloc_r+0x90>
 8007e94:	4629      	mov	r1, r5
 8007e96:	4638      	mov	r0, r7
 8007e98:	f7ff ffc0 	bl	8007e1c <sbrk_aligned>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	d155      	bne.n	8007f4e <_malloc_r+0xf2>
 8007ea2:	f8d8 4000 	ldr.w	r4, [r8]
 8007ea6:	4626      	mov	r6, r4
 8007ea8:	2e00      	cmp	r6, #0
 8007eaa:	d145      	bne.n	8007f38 <_malloc_r+0xdc>
 8007eac:	2c00      	cmp	r4, #0
 8007eae:	d048      	beq.n	8007f42 <_malloc_r+0xe6>
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	eb04 0903 	add.w	r9, r4, r3
 8007eba:	f000 fe5f 	bl	8008b7c <_sbrk_r>
 8007ebe:	4581      	cmp	r9, r0
 8007ec0:	d13f      	bne.n	8007f42 <_malloc_r+0xe6>
 8007ec2:	6821      	ldr	r1, [r4, #0]
 8007ec4:	1a6d      	subs	r5, r5, r1
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	4638      	mov	r0, r7
 8007eca:	f7ff ffa7 	bl	8007e1c <sbrk_aligned>
 8007ece:	3001      	adds	r0, #1
 8007ed0:	d037      	beq.n	8007f42 <_malloc_r+0xe6>
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	442b      	add	r3, r5
 8007ed6:	6023      	str	r3, [r4, #0]
 8007ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d038      	beq.n	8007f52 <_malloc_r+0xf6>
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	42a2      	cmp	r2, r4
 8007ee4:	d12b      	bne.n	8007f3e <_malloc_r+0xe2>
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	605a      	str	r2, [r3, #4]
 8007eea:	e00f      	b.n	8007f0c <_malloc_r+0xb0>
 8007eec:	6822      	ldr	r2, [r4, #0]
 8007eee:	1b52      	subs	r2, r2, r5
 8007ef0:	d41f      	bmi.n	8007f32 <_malloc_r+0xd6>
 8007ef2:	2a0b      	cmp	r2, #11
 8007ef4:	d917      	bls.n	8007f26 <_malloc_r+0xca>
 8007ef6:	1961      	adds	r1, r4, r5
 8007ef8:	42a3      	cmp	r3, r4
 8007efa:	6025      	str	r5, [r4, #0]
 8007efc:	bf18      	it	ne
 8007efe:	6059      	strne	r1, [r3, #4]
 8007f00:	6863      	ldr	r3, [r4, #4]
 8007f02:	bf08      	it	eq
 8007f04:	f8c8 1000 	streq.w	r1, [r8]
 8007f08:	5162      	str	r2, [r4, r5]
 8007f0a:	604b      	str	r3, [r1, #4]
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	f104 060b 	add.w	r6, r4, #11
 8007f12:	f000 f829 	bl	8007f68 <__malloc_unlock>
 8007f16:	f026 0607 	bic.w	r6, r6, #7
 8007f1a:	1d23      	adds	r3, r4, #4
 8007f1c:	1af2      	subs	r2, r6, r3
 8007f1e:	d0ae      	beq.n	8007e7e <_malloc_r+0x22>
 8007f20:	1b9b      	subs	r3, r3, r6
 8007f22:	50a3      	str	r3, [r4, r2]
 8007f24:	e7ab      	b.n	8007e7e <_malloc_r+0x22>
 8007f26:	42a3      	cmp	r3, r4
 8007f28:	6862      	ldr	r2, [r4, #4]
 8007f2a:	d1dd      	bne.n	8007ee8 <_malloc_r+0x8c>
 8007f2c:	f8c8 2000 	str.w	r2, [r8]
 8007f30:	e7ec      	b.n	8007f0c <_malloc_r+0xb0>
 8007f32:	4623      	mov	r3, r4
 8007f34:	6864      	ldr	r4, [r4, #4]
 8007f36:	e7ac      	b.n	8007e92 <_malloc_r+0x36>
 8007f38:	4634      	mov	r4, r6
 8007f3a:	6876      	ldr	r6, [r6, #4]
 8007f3c:	e7b4      	b.n	8007ea8 <_malloc_r+0x4c>
 8007f3e:	4613      	mov	r3, r2
 8007f40:	e7cc      	b.n	8007edc <_malloc_r+0x80>
 8007f42:	230c      	movs	r3, #12
 8007f44:	603b      	str	r3, [r7, #0]
 8007f46:	4638      	mov	r0, r7
 8007f48:	f000 f80e 	bl	8007f68 <__malloc_unlock>
 8007f4c:	e797      	b.n	8007e7e <_malloc_r+0x22>
 8007f4e:	6025      	str	r5, [r4, #0]
 8007f50:	e7dc      	b.n	8007f0c <_malloc_r+0xb0>
 8007f52:	605b      	str	r3, [r3, #4]
 8007f54:	deff      	udf	#255	; 0xff
 8007f56:	bf00      	nop
 8007f58:	20000594 	.word	0x20000594

08007f5c <__malloc_lock>:
 8007f5c:	4801      	ldr	r0, [pc, #4]	; (8007f64 <__malloc_lock+0x8>)
 8007f5e:	f7ff b88c 	b.w	800707a <__retarget_lock_acquire_recursive>
 8007f62:	bf00      	nop
 8007f64:	20000590 	.word	0x20000590

08007f68 <__malloc_unlock>:
 8007f68:	4801      	ldr	r0, [pc, #4]	; (8007f70 <__malloc_unlock+0x8>)
 8007f6a:	f7ff b887 	b.w	800707c <__retarget_lock_release_recursive>
 8007f6e:	bf00      	nop
 8007f70:	20000590 	.word	0x20000590

08007f74 <_Balloc>:
 8007f74:	b570      	push	{r4, r5, r6, lr}
 8007f76:	69c6      	ldr	r6, [r0, #28]
 8007f78:	4604      	mov	r4, r0
 8007f7a:	460d      	mov	r5, r1
 8007f7c:	b976      	cbnz	r6, 8007f9c <_Balloc+0x28>
 8007f7e:	2010      	movs	r0, #16
 8007f80:	f7ff ff44 	bl	8007e0c <malloc>
 8007f84:	4602      	mov	r2, r0
 8007f86:	61e0      	str	r0, [r4, #28]
 8007f88:	b920      	cbnz	r0, 8007f94 <_Balloc+0x20>
 8007f8a:	4b18      	ldr	r3, [pc, #96]	; (8007fec <_Balloc+0x78>)
 8007f8c:	4818      	ldr	r0, [pc, #96]	; (8007ff0 <_Balloc+0x7c>)
 8007f8e:	216b      	movs	r1, #107	; 0x6b
 8007f90:	f000 fe12 	bl	8008bb8 <__assert_func>
 8007f94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f98:	6006      	str	r6, [r0, #0]
 8007f9a:	60c6      	str	r6, [r0, #12]
 8007f9c:	69e6      	ldr	r6, [r4, #28]
 8007f9e:	68f3      	ldr	r3, [r6, #12]
 8007fa0:	b183      	cbz	r3, 8007fc4 <_Balloc+0x50>
 8007fa2:	69e3      	ldr	r3, [r4, #28]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007faa:	b9b8      	cbnz	r0, 8007fdc <_Balloc+0x68>
 8007fac:	2101      	movs	r1, #1
 8007fae:	fa01 f605 	lsl.w	r6, r1, r5
 8007fb2:	1d72      	adds	r2, r6, #5
 8007fb4:	0092      	lsls	r2, r2, #2
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f000 fe1c 	bl	8008bf4 <_calloc_r>
 8007fbc:	b160      	cbz	r0, 8007fd8 <_Balloc+0x64>
 8007fbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fc2:	e00e      	b.n	8007fe2 <_Balloc+0x6e>
 8007fc4:	2221      	movs	r2, #33	; 0x21
 8007fc6:	2104      	movs	r1, #4
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f000 fe13 	bl	8008bf4 <_calloc_r>
 8007fce:	69e3      	ldr	r3, [r4, #28]
 8007fd0:	60f0      	str	r0, [r6, #12]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e4      	bne.n	8007fa2 <_Balloc+0x2e>
 8007fd8:	2000      	movs	r0, #0
 8007fda:	bd70      	pop	{r4, r5, r6, pc}
 8007fdc:	6802      	ldr	r2, [r0, #0]
 8007fde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fe8:	e7f7      	b.n	8007fda <_Balloc+0x66>
 8007fea:	bf00      	nop
 8007fec:	08008f09 	.word	0x08008f09
 8007ff0:	08008f89 	.word	0x08008f89

08007ff4 <_Bfree>:
 8007ff4:	b570      	push	{r4, r5, r6, lr}
 8007ff6:	69c6      	ldr	r6, [r0, #28]
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	b976      	cbnz	r6, 800801c <_Bfree+0x28>
 8007ffe:	2010      	movs	r0, #16
 8008000:	f7ff ff04 	bl	8007e0c <malloc>
 8008004:	4602      	mov	r2, r0
 8008006:	61e8      	str	r0, [r5, #28]
 8008008:	b920      	cbnz	r0, 8008014 <_Bfree+0x20>
 800800a:	4b09      	ldr	r3, [pc, #36]	; (8008030 <_Bfree+0x3c>)
 800800c:	4809      	ldr	r0, [pc, #36]	; (8008034 <_Bfree+0x40>)
 800800e:	218f      	movs	r1, #143	; 0x8f
 8008010:	f000 fdd2 	bl	8008bb8 <__assert_func>
 8008014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008018:	6006      	str	r6, [r0, #0]
 800801a:	60c6      	str	r6, [r0, #12]
 800801c:	b13c      	cbz	r4, 800802e <_Bfree+0x3a>
 800801e:	69eb      	ldr	r3, [r5, #28]
 8008020:	6862      	ldr	r2, [r4, #4]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008028:	6021      	str	r1, [r4, #0]
 800802a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800802e:	bd70      	pop	{r4, r5, r6, pc}
 8008030:	08008f09 	.word	0x08008f09
 8008034:	08008f89 	.word	0x08008f89

08008038 <__multadd>:
 8008038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800803c:	690d      	ldr	r5, [r1, #16]
 800803e:	4607      	mov	r7, r0
 8008040:	460c      	mov	r4, r1
 8008042:	461e      	mov	r6, r3
 8008044:	f101 0c14 	add.w	ip, r1, #20
 8008048:	2000      	movs	r0, #0
 800804a:	f8dc 3000 	ldr.w	r3, [ip]
 800804e:	b299      	uxth	r1, r3
 8008050:	fb02 6101 	mla	r1, r2, r1, r6
 8008054:	0c1e      	lsrs	r6, r3, #16
 8008056:	0c0b      	lsrs	r3, r1, #16
 8008058:	fb02 3306 	mla	r3, r2, r6, r3
 800805c:	b289      	uxth	r1, r1
 800805e:	3001      	adds	r0, #1
 8008060:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008064:	4285      	cmp	r5, r0
 8008066:	f84c 1b04 	str.w	r1, [ip], #4
 800806a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800806e:	dcec      	bgt.n	800804a <__multadd+0x12>
 8008070:	b30e      	cbz	r6, 80080b6 <__multadd+0x7e>
 8008072:	68a3      	ldr	r3, [r4, #8]
 8008074:	42ab      	cmp	r3, r5
 8008076:	dc19      	bgt.n	80080ac <__multadd+0x74>
 8008078:	6861      	ldr	r1, [r4, #4]
 800807a:	4638      	mov	r0, r7
 800807c:	3101      	adds	r1, #1
 800807e:	f7ff ff79 	bl	8007f74 <_Balloc>
 8008082:	4680      	mov	r8, r0
 8008084:	b928      	cbnz	r0, 8008092 <__multadd+0x5a>
 8008086:	4602      	mov	r2, r0
 8008088:	4b0c      	ldr	r3, [pc, #48]	; (80080bc <__multadd+0x84>)
 800808a:	480d      	ldr	r0, [pc, #52]	; (80080c0 <__multadd+0x88>)
 800808c:	21ba      	movs	r1, #186	; 0xba
 800808e:	f000 fd93 	bl	8008bb8 <__assert_func>
 8008092:	6922      	ldr	r2, [r4, #16]
 8008094:	3202      	adds	r2, #2
 8008096:	f104 010c 	add.w	r1, r4, #12
 800809a:	0092      	lsls	r2, r2, #2
 800809c:	300c      	adds	r0, #12
 800809e:	f000 fd7d 	bl	8008b9c <memcpy>
 80080a2:	4621      	mov	r1, r4
 80080a4:	4638      	mov	r0, r7
 80080a6:	f7ff ffa5 	bl	8007ff4 <_Bfree>
 80080aa:	4644      	mov	r4, r8
 80080ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080b0:	3501      	adds	r5, #1
 80080b2:	615e      	str	r6, [r3, #20]
 80080b4:	6125      	str	r5, [r4, #16]
 80080b6:	4620      	mov	r0, r4
 80080b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080bc:	08008f78 	.word	0x08008f78
 80080c0:	08008f89 	.word	0x08008f89

080080c4 <__hi0bits>:
 80080c4:	0c03      	lsrs	r3, r0, #16
 80080c6:	041b      	lsls	r3, r3, #16
 80080c8:	b9d3      	cbnz	r3, 8008100 <__hi0bits+0x3c>
 80080ca:	0400      	lsls	r0, r0, #16
 80080cc:	2310      	movs	r3, #16
 80080ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80080d2:	bf04      	itt	eq
 80080d4:	0200      	lsleq	r0, r0, #8
 80080d6:	3308      	addeq	r3, #8
 80080d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80080dc:	bf04      	itt	eq
 80080de:	0100      	lsleq	r0, r0, #4
 80080e0:	3304      	addeq	r3, #4
 80080e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80080e6:	bf04      	itt	eq
 80080e8:	0080      	lsleq	r0, r0, #2
 80080ea:	3302      	addeq	r3, #2
 80080ec:	2800      	cmp	r0, #0
 80080ee:	db05      	blt.n	80080fc <__hi0bits+0x38>
 80080f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80080f4:	f103 0301 	add.w	r3, r3, #1
 80080f8:	bf08      	it	eq
 80080fa:	2320      	moveq	r3, #32
 80080fc:	4618      	mov	r0, r3
 80080fe:	4770      	bx	lr
 8008100:	2300      	movs	r3, #0
 8008102:	e7e4      	b.n	80080ce <__hi0bits+0xa>

08008104 <__lo0bits>:
 8008104:	6803      	ldr	r3, [r0, #0]
 8008106:	f013 0207 	ands.w	r2, r3, #7
 800810a:	d00c      	beq.n	8008126 <__lo0bits+0x22>
 800810c:	07d9      	lsls	r1, r3, #31
 800810e:	d422      	bmi.n	8008156 <__lo0bits+0x52>
 8008110:	079a      	lsls	r2, r3, #30
 8008112:	bf49      	itett	mi
 8008114:	085b      	lsrmi	r3, r3, #1
 8008116:	089b      	lsrpl	r3, r3, #2
 8008118:	6003      	strmi	r3, [r0, #0]
 800811a:	2201      	movmi	r2, #1
 800811c:	bf5c      	itt	pl
 800811e:	6003      	strpl	r3, [r0, #0]
 8008120:	2202      	movpl	r2, #2
 8008122:	4610      	mov	r0, r2
 8008124:	4770      	bx	lr
 8008126:	b299      	uxth	r1, r3
 8008128:	b909      	cbnz	r1, 800812e <__lo0bits+0x2a>
 800812a:	0c1b      	lsrs	r3, r3, #16
 800812c:	2210      	movs	r2, #16
 800812e:	b2d9      	uxtb	r1, r3
 8008130:	b909      	cbnz	r1, 8008136 <__lo0bits+0x32>
 8008132:	3208      	adds	r2, #8
 8008134:	0a1b      	lsrs	r3, r3, #8
 8008136:	0719      	lsls	r1, r3, #28
 8008138:	bf04      	itt	eq
 800813a:	091b      	lsreq	r3, r3, #4
 800813c:	3204      	addeq	r2, #4
 800813e:	0799      	lsls	r1, r3, #30
 8008140:	bf04      	itt	eq
 8008142:	089b      	lsreq	r3, r3, #2
 8008144:	3202      	addeq	r2, #2
 8008146:	07d9      	lsls	r1, r3, #31
 8008148:	d403      	bmi.n	8008152 <__lo0bits+0x4e>
 800814a:	085b      	lsrs	r3, r3, #1
 800814c:	f102 0201 	add.w	r2, r2, #1
 8008150:	d003      	beq.n	800815a <__lo0bits+0x56>
 8008152:	6003      	str	r3, [r0, #0]
 8008154:	e7e5      	b.n	8008122 <__lo0bits+0x1e>
 8008156:	2200      	movs	r2, #0
 8008158:	e7e3      	b.n	8008122 <__lo0bits+0x1e>
 800815a:	2220      	movs	r2, #32
 800815c:	e7e1      	b.n	8008122 <__lo0bits+0x1e>
	...

08008160 <__i2b>:
 8008160:	b510      	push	{r4, lr}
 8008162:	460c      	mov	r4, r1
 8008164:	2101      	movs	r1, #1
 8008166:	f7ff ff05 	bl	8007f74 <_Balloc>
 800816a:	4602      	mov	r2, r0
 800816c:	b928      	cbnz	r0, 800817a <__i2b+0x1a>
 800816e:	4b05      	ldr	r3, [pc, #20]	; (8008184 <__i2b+0x24>)
 8008170:	4805      	ldr	r0, [pc, #20]	; (8008188 <__i2b+0x28>)
 8008172:	f240 1145 	movw	r1, #325	; 0x145
 8008176:	f000 fd1f 	bl	8008bb8 <__assert_func>
 800817a:	2301      	movs	r3, #1
 800817c:	6144      	str	r4, [r0, #20]
 800817e:	6103      	str	r3, [r0, #16]
 8008180:	bd10      	pop	{r4, pc}
 8008182:	bf00      	nop
 8008184:	08008f78 	.word	0x08008f78
 8008188:	08008f89 	.word	0x08008f89

0800818c <__multiply>:
 800818c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008190:	4691      	mov	r9, r2
 8008192:	690a      	ldr	r2, [r1, #16]
 8008194:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008198:	429a      	cmp	r2, r3
 800819a:	bfb8      	it	lt
 800819c:	460b      	movlt	r3, r1
 800819e:	460c      	mov	r4, r1
 80081a0:	bfbc      	itt	lt
 80081a2:	464c      	movlt	r4, r9
 80081a4:	4699      	movlt	r9, r3
 80081a6:	6927      	ldr	r7, [r4, #16]
 80081a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081ac:	68a3      	ldr	r3, [r4, #8]
 80081ae:	6861      	ldr	r1, [r4, #4]
 80081b0:	eb07 060a 	add.w	r6, r7, sl
 80081b4:	42b3      	cmp	r3, r6
 80081b6:	b085      	sub	sp, #20
 80081b8:	bfb8      	it	lt
 80081ba:	3101      	addlt	r1, #1
 80081bc:	f7ff feda 	bl	8007f74 <_Balloc>
 80081c0:	b930      	cbnz	r0, 80081d0 <__multiply+0x44>
 80081c2:	4602      	mov	r2, r0
 80081c4:	4b44      	ldr	r3, [pc, #272]	; (80082d8 <__multiply+0x14c>)
 80081c6:	4845      	ldr	r0, [pc, #276]	; (80082dc <__multiply+0x150>)
 80081c8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80081cc:	f000 fcf4 	bl	8008bb8 <__assert_func>
 80081d0:	f100 0514 	add.w	r5, r0, #20
 80081d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081d8:	462b      	mov	r3, r5
 80081da:	2200      	movs	r2, #0
 80081dc:	4543      	cmp	r3, r8
 80081de:	d321      	bcc.n	8008224 <__multiply+0x98>
 80081e0:	f104 0314 	add.w	r3, r4, #20
 80081e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80081e8:	f109 0314 	add.w	r3, r9, #20
 80081ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80081f0:	9202      	str	r2, [sp, #8]
 80081f2:	1b3a      	subs	r2, r7, r4
 80081f4:	3a15      	subs	r2, #21
 80081f6:	f022 0203 	bic.w	r2, r2, #3
 80081fa:	3204      	adds	r2, #4
 80081fc:	f104 0115 	add.w	r1, r4, #21
 8008200:	428f      	cmp	r7, r1
 8008202:	bf38      	it	cc
 8008204:	2204      	movcc	r2, #4
 8008206:	9201      	str	r2, [sp, #4]
 8008208:	9a02      	ldr	r2, [sp, #8]
 800820a:	9303      	str	r3, [sp, #12]
 800820c:	429a      	cmp	r2, r3
 800820e:	d80c      	bhi.n	800822a <__multiply+0x9e>
 8008210:	2e00      	cmp	r6, #0
 8008212:	dd03      	ble.n	800821c <__multiply+0x90>
 8008214:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008218:	2b00      	cmp	r3, #0
 800821a:	d05b      	beq.n	80082d4 <__multiply+0x148>
 800821c:	6106      	str	r6, [r0, #16]
 800821e:	b005      	add	sp, #20
 8008220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008224:	f843 2b04 	str.w	r2, [r3], #4
 8008228:	e7d8      	b.n	80081dc <__multiply+0x50>
 800822a:	f8b3 a000 	ldrh.w	sl, [r3]
 800822e:	f1ba 0f00 	cmp.w	sl, #0
 8008232:	d024      	beq.n	800827e <__multiply+0xf2>
 8008234:	f104 0e14 	add.w	lr, r4, #20
 8008238:	46a9      	mov	r9, r5
 800823a:	f04f 0c00 	mov.w	ip, #0
 800823e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008242:	f8d9 1000 	ldr.w	r1, [r9]
 8008246:	fa1f fb82 	uxth.w	fp, r2
 800824a:	b289      	uxth	r1, r1
 800824c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008250:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008254:	f8d9 2000 	ldr.w	r2, [r9]
 8008258:	4461      	add	r1, ip
 800825a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800825e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008262:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008266:	b289      	uxth	r1, r1
 8008268:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800826c:	4577      	cmp	r7, lr
 800826e:	f849 1b04 	str.w	r1, [r9], #4
 8008272:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008276:	d8e2      	bhi.n	800823e <__multiply+0xb2>
 8008278:	9a01      	ldr	r2, [sp, #4]
 800827a:	f845 c002 	str.w	ip, [r5, r2]
 800827e:	9a03      	ldr	r2, [sp, #12]
 8008280:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008284:	3304      	adds	r3, #4
 8008286:	f1b9 0f00 	cmp.w	r9, #0
 800828a:	d021      	beq.n	80082d0 <__multiply+0x144>
 800828c:	6829      	ldr	r1, [r5, #0]
 800828e:	f104 0c14 	add.w	ip, r4, #20
 8008292:	46ae      	mov	lr, r5
 8008294:	f04f 0a00 	mov.w	sl, #0
 8008298:	f8bc b000 	ldrh.w	fp, [ip]
 800829c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80082a0:	fb09 220b 	mla	r2, r9, fp, r2
 80082a4:	4452      	add	r2, sl
 80082a6:	b289      	uxth	r1, r1
 80082a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80082ac:	f84e 1b04 	str.w	r1, [lr], #4
 80082b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80082b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80082b8:	f8be 1000 	ldrh.w	r1, [lr]
 80082bc:	fb09 110a 	mla	r1, r9, sl, r1
 80082c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80082c4:	4567      	cmp	r7, ip
 80082c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80082ca:	d8e5      	bhi.n	8008298 <__multiply+0x10c>
 80082cc:	9a01      	ldr	r2, [sp, #4]
 80082ce:	50a9      	str	r1, [r5, r2]
 80082d0:	3504      	adds	r5, #4
 80082d2:	e799      	b.n	8008208 <__multiply+0x7c>
 80082d4:	3e01      	subs	r6, #1
 80082d6:	e79b      	b.n	8008210 <__multiply+0x84>
 80082d8:	08008f78 	.word	0x08008f78
 80082dc:	08008f89 	.word	0x08008f89

080082e0 <__pow5mult>:
 80082e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e4:	4615      	mov	r5, r2
 80082e6:	f012 0203 	ands.w	r2, r2, #3
 80082ea:	4606      	mov	r6, r0
 80082ec:	460f      	mov	r7, r1
 80082ee:	d007      	beq.n	8008300 <__pow5mult+0x20>
 80082f0:	4c25      	ldr	r4, [pc, #148]	; (8008388 <__pow5mult+0xa8>)
 80082f2:	3a01      	subs	r2, #1
 80082f4:	2300      	movs	r3, #0
 80082f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082fa:	f7ff fe9d 	bl	8008038 <__multadd>
 80082fe:	4607      	mov	r7, r0
 8008300:	10ad      	asrs	r5, r5, #2
 8008302:	d03d      	beq.n	8008380 <__pow5mult+0xa0>
 8008304:	69f4      	ldr	r4, [r6, #28]
 8008306:	b97c      	cbnz	r4, 8008328 <__pow5mult+0x48>
 8008308:	2010      	movs	r0, #16
 800830a:	f7ff fd7f 	bl	8007e0c <malloc>
 800830e:	4602      	mov	r2, r0
 8008310:	61f0      	str	r0, [r6, #28]
 8008312:	b928      	cbnz	r0, 8008320 <__pow5mult+0x40>
 8008314:	4b1d      	ldr	r3, [pc, #116]	; (800838c <__pow5mult+0xac>)
 8008316:	481e      	ldr	r0, [pc, #120]	; (8008390 <__pow5mult+0xb0>)
 8008318:	f240 11b3 	movw	r1, #435	; 0x1b3
 800831c:	f000 fc4c 	bl	8008bb8 <__assert_func>
 8008320:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008324:	6004      	str	r4, [r0, #0]
 8008326:	60c4      	str	r4, [r0, #12]
 8008328:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800832c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008330:	b94c      	cbnz	r4, 8008346 <__pow5mult+0x66>
 8008332:	f240 2171 	movw	r1, #625	; 0x271
 8008336:	4630      	mov	r0, r6
 8008338:	f7ff ff12 	bl	8008160 <__i2b>
 800833c:	2300      	movs	r3, #0
 800833e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008342:	4604      	mov	r4, r0
 8008344:	6003      	str	r3, [r0, #0]
 8008346:	f04f 0900 	mov.w	r9, #0
 800834a:	07eb      	lsls	r3, r5, #31
 800834c:	d50a      	bpl.n	8008364 <__pow5mult+0x84>
 800834e:	4639      	mov	r1, r7
 8008350:	4622      	mov	r2, r4
 8008352:	4630      	mov	r0, r6
 8008354:	f7ff ff1a 	bl	800818c <__multiply>
 8008358:	4639      	mov	r1, r7
 800835a:	4680      	mov	r8, r0
 800835c:	4630      	mov	r0, r6
 800835e:	f7ff fe49 	bl	8007ff4 <_Bfree>
 8008362:	4647      	mov	r7, r8
 8008364:	106d      	asrs	r5, r5, #1
 8008366:	d00b      	beq.n	8008380 <__pow5mult+0xa0>
 8008368:	6820      	ldr	r0, [r4, #0]
 800836a:	b938      	cbnz	r0, 800837c <__pow5mult+0x9c>
 800836c:	4622      	mov	r2, r4
 800836e:	4621      	mov	r1, r4
 8008370:	4630      	mov	r0, r6
 8008372:	f7ff ff0b 	bl	800818c <__multiply>
 8008376:	6020      	str	r0, [r4, #0]
 8008378:	f8c0 9000 	str.w	r9, [r0]
 800837c:	4604      	mov	r4, r0
 800837e:	e7e4      	b.n	800834a <__pow5mult+0x6a>
 8008380:	4638      	mov	r0, r7
 8008382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008386:	bf00      	nop
 8008388:	080090d8 	.word	0x080090d8
 800838c:	08008f09 	.word	0x08008f09
 8008390:	08008f89 	.word	0x08008f89

08008394 <__lshift>:
 8008394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008398:	460c      	mov	r4, r1
 800839a:	6849      	ldr	r1, [r1, #4]
 800839c:	6923      	ldr	r3, [r4, #16]
 800839e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083a2:	68a3      	ldr	r3, [r4, #8]
 80083a4:	4607      	mov	r7, r0
 80083a6:	4691      	mov	r9, r2
 80083a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083ac:	f108 0601 	add.w	r6, r8, #1
 80083b0:	42b3      	cmp	r3, r6
 80083b2:	db0b      	blt.n	80083cc <__lshift+0x38>
 80083b4:	4638      	mov	r0, r7
 80083b6:	f7ff fddd 	bl	8007f74 <_Balloc>
 80083ba:	4605      	mov	r5, r0
 80083bc:	b948      	cbnz	r0, 80083d2 <__lshift+0x3e>
 80083be:	4602      	mov	r2, r0
 80083c0:	4b28      	ldr	r3, [pc, #160]	; (8008464 <__lshift+0xd0>)
 80083c2:	4829      	ldr	r0, [pc, #164]	; (8008468 <__lshift+0xd4>)
 80083c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80083c8:	f000 fbf6 	bl	8008bb8 <__assert_func>
 80083cc:	3101      	adds	r1, #1
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	e7ee      	b.n	80083b0 <__lshift+0x1c>
 80083d2:	2300      	movs	r3, #0
 80083d4:	f100 0114 	add.w	r1, r0, #20
 80083d8:	f100 0210 	add.w	r2, r0, #16
 80083dc:	4618      	mov	r0, r3
 80083de:	4553      	cmp	r3, sl
 80083e0:	db33      	blt.n	800844a <__lshift+0xb6>
 80083e2:	6920      	ldr	r0, [r4, #16]
 80083e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083e8:	f104 0314 	add.w	r3, r4, #20
 80083ec:	f019 091f 	ands.w	r9, r9, #31
 80083f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083f8:	d02b      	beq.n	8008452 <__lshift+0xbe>
 80083fa:	f1c9 0e20 	rsb	lr, r9, #32
 80083fe:	468a      	mov	sl, r1
 8008400:	2200      	movs	r2, #0
 8008402:	6818      	ldr	r0, [r3, #0]
 8008404:	fa00 f009 	lsl.w	r0, r0, r9
 8008408:	4310      	orrs	r0, r2
 800840a:	f84a 0b04 	str.w	r0, [sl], #4
 800840e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008412:	459c      	cmp	ip, r3
 8008414:	fa22 f20e 	lsr.w	r2, r2, lr
 8008418:	d8f3      	bhi.n	8008402 <__lshift+0x6e>
 800841a:	ebac 0304 	sub.w	r3, ip, r4
 800841e:	3b15      	subs	r3, #21
 8008420:	f023 0303 	bic.w	r3, r3, #3
 8008424:	3304      	adds	r3, #4
 8008426:	f104 0015 	add.w	r0, r4, #21
 800842a:	4584      	cmp	ip, r0
 800842c:	bf38      	it	cc
 800842e:	2304      	movcc	r3, #4
 8008430:	50ca      	str	r2, [r1, r3]
 8008432:	b10a      	cbz	r2, 8008438 <__lshift+0xa4>
 8008434:	f108 0602 	add.w	r6, r8, #2
 8008438:	3e01      	subs	r6, #1
 800843a:	4638      	mov	r0, r7
 800843c:	612e      	str	r6, [r5, #16]
 800843e:	4621      	mov	r1, r4
 8008440:	f7ff fdd8 	bl	8007ff4 <_Bfree>
 8008444:	4628      	mov	r0, r5
 8008446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800844a:	f842 0f04 	str.w	r0, [r2, #4]!
 800844e:	3301      	adds	r3, #1
 8008450:	e7c5      	b.n	80083de <__lshift+0x4a>
 8008452:	3904      	subs	r1, #4
 8008454:	f853 2b04 	ldr.w	r2, [r3], #4
 8008458:	f841 2f04 	str.w	r2, [r1, #4]!
 800845c:	459c      	cmp	ip, r3
 800845e:	d8f9      	bhi.n	8008454 <__lshift+0xc0>
 8008460:	e7ea      	b.n	8008438 <__lshift+0xa4>
 8008462:	bf00      	nop
 8008464:	08008f78 	.word	0x08008f78
 8008468:	08008f89 	.word	0x08008f89

0800846c <__mcmp>:
 800846c:	b530      	push	{r4, r5, lr}
 800846e:	6902      	ldr	r2, [r0, #16]
 8008470:	690c      	ldr	r4, [r1, #16]
 8008472:	1b12      	subs	r2, r2, r4
 8008474:	d10e      	bne.n	8008494 <__mcmp+0x28>
 8008476:	f100 0314 	add.w	r3, r0, #20
 800847a:	3114      	adds	r1, #20
 800847c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008480:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008484:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008488:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800848c:	42a5      	cmp	r5, r4
 800848e:	d003      	beq.n	8008498 <__mcmp+0x2c>
 8008490:	d305      	bcc.n	800849e <__mcmp+0x32>
 8008492:	2201      	movs	r2, #1
 8008494:	4610      	mov	r0, r2
 8008496:	bd30      	pop	{r4, r5, pc}
 8008498:	4283      	cmp	r3, r0
 800849a:	d3f3      	bcc.n	8008484 <__mcmp+0x18>
 800849c:	e7fa      	b.n	8008494 <__mcmp+0x28>
 800849e:	f04f 32ff 	mov.w	r2, #4294967295
 80084a2:	e7f7      	b.n	8008494 <__mcmp+0x28>

080084a4 <__mdiff>:
 80084a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a8:	460c      	mov	r4, r1
 80084aa:	4606      	mov	r6, r0
 80084ac:	4611      	mov	r1, r2
 80084ae:	4620      	mov	r0, r4
 80084b0:	4690      	mov	r8, r2
 80084b2:	f7ff ffdb 	bl	800846c <__mcmp>
 80084b6:	1e05      	subs	r5, r0, #0
 80084b8:	d110      	bne.n	80084dc <__mdiff+0x38>
 80084ba:	4629      	mov	r1, r5
 80084bc:	4630      	mov	r0, r6
 80084be:	f7ff fd59 	bl	8007f74 <_Balloc>
 80084c2:	b930      	cbnz	r0, 80084d2 <__mdiff+0x2e>
 80084c4:	4b3a      	ldr	r3, [pc, #232]	; (80085b0 <__mdiff+0x10c>)
 80084c6:	4602      	mov	r2, r0
 80084c8:	f240 2137 	movw	r1, #567	; 0x237
 80084cc:	4839      	ldr	r0, [pc, #228]	; (80085b4 <__mdiff+0x110>)
 80084ce:	f000 fb73 	bl	8008bb8 <__assert_func>
 80084d2:	2301      	movs	r3, #1
 80084d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084dc:	bfa4      	itt	ge
 80084de:	4643      	movge	r3, r8
 80084e0:	46a0      	movge	r8, r4
 80084e2:	4630      	mov	r0, r6
 80084e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80084e8:	bfa6      	itte	ge
 80084ea:	461c      	movge	r4, r3
 80084ec:	2500      	movge	r5, #0
 80084ee:	2501      	movlt	r5, #1
 80084f0:	f7ff fd40 	bl	8007f74 <_Balloc>
 80084f4:	b920      	cbnz	r0, 8008500 <__mdiff+0x5c>
 80084f6:	4b2e      	ldr	r3, [pc, #184]	; (80085b0 <__mdiff+0x10c>)
 80084f8:	4602      	mov	r2, r0
 80084fa:	f240 2145 	movw	r1, #581	; 0x245
 80084fe:	e7e5      	b.n	80084cc <__mdiff+0x28>
 8008500:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008504:	6926      	ldr	r6, [r4, #16]
 8008506:	60c5      	str	r5, [r0, #12]
 8008508:	f104 0914 	add.w	r9, r4, #20
 800850c:	f108 0514 	add.w	r5, r8, #20
 8008510:	f100 0e14 	add.w	lr, r0, #20
 8008514:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008518:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800851c:	f108 0210 	add.w	r2, r8, #16
 8008520:	46f2      	mov	sl, lr
 8008522:	2100      	movs	r1, #0
 8008524:	f859 3b04 	ldr.w	r3, [r9], #4
 8008528:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800852c:	fa11 f88b 	uxtah	r8, r1, fp
 8008530:	b299      	uxth	r1, r3
 8008532:	0c1b      	lsrs	r3, r3, #16
 8008534:	eba8 0801 	sub.w	r8, r8, r1
 8008538:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800853c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008540:	fa1f f888 	uxth.w	r8, r8
 8008544:	1419      	asrs	r1, r3, #16
 8008546:	454e      	cmp	r6, r9
 8008548:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800854c:	f84a 3b04 	str.w	r3, [sl], #4
 8008550:	d8e8      	bhi.n	8008524 <__mdiff+0x80>
 8008552:	1b33      	subs	r3, r6, r4
 8008554:	3b15      	subs	r3, #21
 8008556:	f023 0303 	bic.w	r3, r3, #3
 800855a:	3304      	adds	r3, #4
 800855c:	3415      	adds	r4, #21
 800855e:	42a6      	cmp	r6, r4
 8008560:	bf38      	it	cc
 8008562:	2304      	movcc	r3, #4
 8008564:	441d      	add	r5, r3
 8008566:	4473      	add	r3, lr
 8008568:	469e      	mov	lr, r3
 800856a:	462e      	mov	r6, r5
 800856c:	4566      	cmp	r6, ip
 800856e:	d30e      	bcc.n	800858e <__mdiff+0xea>
 8008570:	f10c 0203 	add.w	r2, ip, #3
 8008574:	1b52      	subs	r2, r2, r5
 8008576:	f022 0203 	bic.w	r2, r2, #3
 800857a:	3d03      	subs	r5, #3
 800857c:	45ac      	cmp	ip, r5
 800857e:	bf38      	it	cc
 8008580:	2200      	movcc	r2, #0
 8008582:	4413      	add	r3, r2
 8008584:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008588:	b17a      	cbz	r2, 80085aa <__mdiff+0x106>
 800858a:	6107      	str	r7, [r0, #16]
 800858c:	e7a4      	b.n	80084d8 <__mdiff+0x34>
 800858e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008592:	fa11 f288 	uxtah	r2, r1, r8
 8008596:	1414      	asrs	r4, r2, #16
 8008598:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800859c:	b292      	uxth	r2, r2
 800859e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80085a2:	f84e 2b04 	str.w	r2, [lr], #4
 80085a6:	1421      	asrs	r1, r4, #16
 80085a8:	e7e0      	b.n	800856c <__mdiff+0xc8>
 80085aa:	3f01      	subs	r7, #1
 80085ac:	e7ea      	b.n	8008584 <__mdiff+0xe0>
 80085ae:	bf00      	nop
 80085b0:	08008f78 	.word	0x08008f78
 80085b4:	08008f89 	.word	0x08008f89

080085b8 <__d2b>:
 80085b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085bc:	460f      	mov	r7, r1
 80085be:	2101      	movs	r1, #1
 80085c0:	ec59 8b10 	vmov	r8, r9, d0
 80085c4:	4616      	mov	r6, r2
 80085c6:	f7ff fcd5 	bl	8007f74 <_Balloc>
 80085ca:	4604      	mov	r4, r0
 80085cc:	b930      	cbnz	r0, 80085dc <__d2b+0x24>
 80085ce:	4602      	mov	r2, r0
 80085d0:	4b24      	ldr	r3, [pc, #144]	; (8008664 <__d2b+0xac>)
 80085d2:	4825      	ldr	r0, [pc, #148]	; (8008668 <__d2b+0xb0>)
 80085d4:	f240 310f 	movw	r1, #783	; 0x30f
 80085d8:	f000 faee 	bl	8008bb8 <__assert_func>
 80085dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80085e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085e4:	bb2d      	cbnz	r5, 8008632 <__d2b+0x7a>
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	f1b8 0300 	subs.w	r3, r8, #0
 80085ec:	d026      	beq.n	800863c <__d2b+0x84>
 80085ee:	4668      	mov	r0, sp
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	f7ff fd87 	bl	8008104 <__lo0bits>
 80085f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80085fa:	b1e8      	cbz	r0, 8008638 <__d2b+0x80>
 80085fc:	f1c0 0320 	rsb	r3, r0, #32
 8008600:	fa02 f303 	lsl.w	r3, r2, r3
 8008604:	430b      	orrs	r3, r1
 8008606:	40c2      	lsrs	r2, r0
 8008608:	6163      	str	r3, [r4, #20]
 800860a:	9201      	str	r2, [sp, #4]
 800860c:	9b01      	ldr	r3, [sp, #4]
 800860e:	61a3      	str	r3, [r4, #24]
 8008610:	2b00      	cmp	r3, #0
 8008612:	bf14      	ite	ne
 8008614:	2202      	movne	r2, #2
 8008616:	2201      	moveq	r2, #1
 8008618:	6122      	str	r2, [r4, #16]
 800861a:	b1bd      	cbz	r5, 800864c <__d2b+0x94>
 800861c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008620:	4405      	add	r5, r0
 8008622:	603d      	str	r5, [r7, #0]
 8008624:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008628:	6030      	str	r0, [r6, #0]
 800862a:	4620      	mov	r0, r4
 800862c:	b003      	add	sp, #12
 800862e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008636:	e7d6      	b.n	80085e6 <__d2b+0x2e>
 8008638:	6161      	str	r1, [r4, #20]
 800863a:	e7e7      	b.n	800860c <__d2b+0x54>
 800863c:	a801      	add	r0, sp, #4
 800863e:	f7ff fd61 	bl	8008104 <__lo0bits>
 8008642:	9b01      	ldr	r3, [sp, #4]
 8008644:	6163      	str	r3, [r4, #20]
 8008646:	3020      	adds	r0, #32
 8008648:	2201      	movs	r2, #1
 800864a:	e7e5      	b.n	8008618 <__d2b+0x60>
 800864c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008650:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008654:	6038      	str	r0, [r7, #0]
 8008656:	6918      	ldr	r0, [r3, #16]
 8008658:	f7ff fd34 	bl	80080c4 <__hi0bits>
 800865c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008660:	e7e2      	b.n	8008628 <__d2b+0x70>
 8008662:	bf00      	nop
 8008664:	08008f78 	.word	0x08008f78
 8008668:	08008f89 	.word	0x08008f89

0800866c <__sfputc_r>:
 800866c:	6893      	ldr	r3, [r2, #8]
 800866e:	3b01      	subs	r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	b410      	push	{r4}
 8008674:	6093      	str	r3, [r2, #8]
 8008676:	da08      	bge.n	800868a <__sfputc_r+0x1e>
 8008678:	6994      	ldr	r4, [r2, #24]
 800867a:	42a3      	cmp	r3, r4
 800867c:	db01      	blt.n	8008682 <__sfputc_r+0x16>
 800867e:	290a      	cmp	r1, #10
 8008680:	d103      	bne.n	800868a <__sfputc_r+0x1e>
 8008682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008686:	f000 b9e3 	b.w	8008a50 <__swbuf_r>
 800868a:	6813      	ldr	r3, [r2, #0]
 800868c:	1c58      	adds	r0, r3, #1
 800868e:	6010      	str	r0, [r2, #0]
 8008690:	7019      	strb	r1, [r3, #0]
 8008692:	4608      	mov	r0, r1
 8008694:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008698:	4770      	bx	lr

0800869a <__sfputs_r>:
 800869a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869c:	4606      	mov	r6, r0
 800869e:	460f      	mov	r7, r1
 80086a0:	4614      	mov	r4, r2
 80086a2:	18d5      	adds	r5, r2, r3
 80086a4:	42ac      	cmp	r4, r5
 80086a6:	d101      	bne.n	80086ac <__sfputs_r+0x12>
 80086a8:	2000      	movs	r0, #0
 80086aa:	e007      	b.n	80086bc <__sfputs_r+0x22>
 80086ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086b0:	463a      	mov	r2, r7
 80086b2:	4630      	mov	r0, r6
 80086b4:	f7ff ffda 	bl	800866c <__sfputc_r>
 80086b8:	1c43      	adds	r3, r0, #1
 80086ba:	d1f3      	bne.n	80086a4 <__sfputs_r+0xa>
 80086bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086c0 <_vfiprintf_r>:
 80086c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	460d      	mov	r5, r1
 80086c6:	b09d      	sub	sp, #116	; 0x74
 80086c8:	4614      	mov	r4, r2
 80086ca:	4698      	mov	r8, r3
 80086cc:	4606      	mov	r6, r0
 80086ce:	b118      	cbz	r0, 80086d8 <_vfiprintf_r+0x18>
 80086d0:	6a03      	ldr	r3, [r0, #32]
 80086d2:	b90b      	cbnz	r3, 80086d8 <_vfiprintf_r+0x18>
 80086d4:	f7fe fbc8 	bl	8006e68 <__sinit>
 80086d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086da:	07d9      	lsls	r1, r3, #31
 80086dc:	d405      	bmi.n	80086ea <_vfiprintf_r+0x2a>
 80086de:	89ab      	ldrh	r3, [r5, #12]
 80086e0:	059a      	lsls	r2, r3, #22
 80086e2:	d402      	bmi.n	80086ea <_vfiprintf_r+0x2a>
 80086e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086e6:	f7fe fcc8 	bl	800707a <__retarget_lock_acquire_recursive>
 80086ea:	89ab      	ldrh	r3, [r5, #12]
 80086ec:	071b      	lsls	r3, r3, #28
 80086ee:	d501      	bpl.n	80086f4 <_vfiprintf_r+0x34>
 80086f0:	692b      	ldr	r3, [r5, #16]
 80086f2:	b99b      	cbnz	r3, 800871c <_vfiprintf_r+0x5c>
 80086f4:	4629      	mov	r1, r5
 80086f6:	4630      	mov	r0, r6
 80086f8:	f000 f9e8 	bl	8008acc <__swsetup_r>
 80086fc:	b170      	cbz	r0, 800871c <_vfiprintf_r+0x5c>
 80086fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008700:	07dc      	lsls	r4, r3, #31
 8008702:	d504      	bpl.n	800870e <_vfiprintf_r+0x4e>
 8008704:	f04f 30ff 	mov.w	r0, #4294967295
 8008708:	b01d      	add	sp, #116	; 0x74
 800870a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870e:	89ab      	ldrh	r3, [r5, #12]
 8008710:	0598      	lsls	r0, r3, #22
 8008712:	d4f7      	bmi.n	8008704 <_vfiprintf_r+0x44>
 8008714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008716:	f7fe fcb1 	bl	800707c <__retarget_lock_release_recursive>
 800871a:	e7f3      	b.n	8008704 <_vfiprintf_r+0x44>
 800871c:	2300      	movs	r3, #0
 800871e:	9309      	str	r3, [sp, #36]	; 0x24
 8008720:	2320      	movs	r3, #32
 8008722:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008726:	f8cd 800c 	str.w	r8, [sp, #12]
 800872a:	2330      	movs	r3, #48	; 0x30
 800872c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80088e0 <_vfiprintf_r+0x220>
 8008730:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008734:	f04f 0901 	mov.w	r9, #1
 8008738:	4623      	mov	r3, r4
 800873a:	469a      	mov	sl, r3
 800873c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008740:	b10a      	cbz	r2, 8008746 <_vfiprintf_r+0x86>
 8008742:	2a25      	cmp	r2, #37	; 0x25
 8008744:	d1f9      	bne.n	800873a <_vfiprintf_r+0x7a>
 8008746:	ebba 0b04 	subs.w	fp, sl, r4
 800874a:	d00b      	beq.n	8008764 <_vfiprintf_r+0xa4>
 800874c:	465b      	mov	r3, fp
 800874e:	4622      	mov	r2, r4
 8008750:	4629      	mov	r1, r5
 8008752:	4630      	mov	r0, r6
 8008754:	f7ff ffa1 	bl	800869a <__sfputs_r>
 8008758:	3001      	adds	r0, #1
 800875a:	f000 80a9 	beq.w	80088b0 <_vfiprintf_r+0x1f0>
 800875e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008760:	445a      	add	r2, fp
 8008762:	9209      	str	r2, [sp, #36]	; 0x24
 8008764:	f89a 3000 	ldrb.w	r3, [sl]
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 80a1 	beq.w	80088b0 <_vfiprintf_r+0x1f0>
 800876e:	2300      	movs	r3, #0
 8008770:	f04f 32ff 	mov.w	r2, #4294967295
 8008774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008778:	f10a 0a01 	add.w	sl, sl, #1
 800877c:	9304      	str	r3, [sp, #16]
 800877e:	9307      	str	r3, [sp, #28]
 8008780:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008784:	931a      	str	r3, [sp, #104]	; 0x68
 8008786:	4654      	mov	r4, sl
 8008788:	2205      	movs	r2, #5
 800878a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800878e:	4854      	ldr	r0, [pc, #336]	; (80088e0 <_vfiprintf_r+0x220>)
 8008790:	f7f7 fd46 	bl	8000220 <memchr>
 8008794:	9a04      	ldr	r2, [sp, #16]
 8008796:	b9d8      	cbnz	r0, 80087d0 <_vfiprintf_r+0x110>
 8008798:	06d1      	lsls	r1, r2, #27
 800879a:	bf44      	itt	mi
 800879c:	2320      	movmi	r3, #32
 800879e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087a2:	0713      	lsls	r3, r2, #28
 80087a4:	bf44      	itt	mi
 80087a6:	232b      	movmi	r3, #43	; 0x2b
 80087a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087ac:	f89a 3000 	ldrb.w	r3, [sl]
 80087b0:	2b2a      	cmp	r3, #42	; 0x2a
 80087b2:	d015      	beq.n	80087e0 <_vfiprintf_r+0x120>
 80087b4:	9a07      	ldr	r2, [sp, #28]
 80087b6:	4654      	mov	r4, sl
 80087b8:	2000      	movs	r0, #0
 80087ba:	f04f 0c0a 	mov.w	ip, #10
 80087be:	4621      	mov	r1, r4
 80087c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087c4:	3b30      	subs	r3, #48	; 0x30
 80087c6:	2b09      	cmp	r3, #9
 80087c8:	d94d      	bls.n	8008866 <_vfiprintf_r+0x1a6>
 80087ca:	b1b0      	cbz	r0, 80087fa <_vfiprintf_r+0x13a>
 80087cc:	9207      	str	r2, [sp, #28]
 80087ce:	e014      	b.n	80087fa <_vfiprintf_r+0x13a>
 80087d0:	eba0 0308 	sub.w	r3, r0, r8
 80087d4:	fa09 f303 	lsl.w	r3, r9, r3
 80087d8:	4313      	orrs	r3, r2
 80087da:	9304      	str	r3, [sp, #16]
 80087dc:	46a2      	mov	sl, r4
 80087de:	e7d2      	b.n	8008786 <_vfiprintf_r+0xc6>
 80087e0:	9b03      	ldr	r3, [sp, #12]
 80087e2:	1d19      	adds	r1, r3, #4
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	9103      	str	r1, [sp, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	bfbb      	ittet	lt
 80087ec:	425b      	neglt	r3, r3
 80087ee:	f042 0202 	orrlt.w	r2, r2, #2
 80087f2:	9307      	strge	r3, [sp, #28]
 80087f4:	9307      	strlt	r3, [sp, #28]
 80087f6:	bfb8      	it	lt
 80087f8:	9204      	strlt	r2, [sp, #16]
 80087fa:	7823      	ldrb	r3, [r4, #0]
 80087fc:	2b2e      	cmp	r3, #46	; 0x2e
 80087fe:	d10c      	bne.n	800881a <_vfiprintf_r+0x15a>
 8008800:	7863      	ldrb	r3, [r4, #1]
 8008802:	2b2a      	cmp	r3, #42	; 0x2a
 8008804:	d134      	bne.n	8008870 <_vfiprintf_r+0x1b0>
 8008806:	9b03      	ldr	r3, [sp, #12]
 8008808:	1d1a      	adds	r2, r3, #4
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	9203      	str	r2, [sp, #12]
 800880e:	2b00      	cmp	r3, #0
 8008810:	bfb8      	it	lt
 8008812:	f04f 33ff 	movlt.w	r3, #4294967295
 8008816:	3402      	adds	r4, #2
 8008818:	9305      	str	r3, [sp, #20]
 800881a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80088f0 <_vfiprintf_r+0x230>
 800881e:	7821      	ldrb	r1, [r4, #0]
 8008820:	2203      	movs	r2, #3
 8008822:	4650      	mov	r0, sl
 8008824:	f7f7 fcfc 	bl	8000220 <memchr>
 8008828:	b138      	cbz	r0, 800883a <_vfiprintf_r+0x17a>
 800882a:	9b04      	ldr	r3, [sp, #16]
 800882c:	eba0 000a 	sub.w	r0, r0, sl
 8008830:	2240      	movs	r2, #64	; 0x40
 8008832:	4082      	lsls	r2, r0
 8008834:	4313      	orrs	r3, r2
 8008836:	3401      	adds	r4, #1
 8008838:	9304      	str	r3, [sp, #16]
 800883a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800883e:	4829      	ldr	r0, [pc, #164]	; (80088e4 <_vfiprintf_r+0x224>)
 8008840:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008844:	2206      	movs	r2, #6
 8008846:	f7f7 fceb 	bl	8000220 <memchr>
 800884a:	2800      	cmp	r0, #0
 800884c:	d03f      	beq.n	80088ce <_vfiprintf_r+0x20e>
 800884e:	4b26      	ldr	r3, [pc, #152]	; (80088e8 <_vfiprintf_r+0x228>)
 8008850:	bb1b      	cbnz	r3, 800889a <_vfiprintf_r+0x1da>
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	3307      	adds	r3, #7
 8008856:	f023 0307 	bic.w	r3, r3, #7
 800885a:	3308      	adds	r3, #8
 800885c:	9303      	str	r3, [sp, #12]
 800885e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008860:	443b      	add	r3, r7
 8008862:	9309      	str	r3, [sp, #36]	; 0x24
 8008864:	e768      	b.n	8008738 <_vfiprintf_r+0x78>
 8008866:	fb0c 3202 	mla	r2, ip, r2, r3
 800886a:	460c      	mov	r4, r1
 800886c:	2001      	movs	r0, #1
 800886e:	e7a6      	b.n	80087be <_vfiprintf_r+0xfe>
 8008870:	2300      	movs	r3, #0
 8008872:	3401      	adds	r4, #1
 8008874:	9305      	str	r3, [sp, #20]
 8008876:	4619      	mov	r1, r3
 8008878:	f04f 0c0a 	mov.w	ip, #10
 800887c:	4620      	mov	r0, r4
 800887e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008882:	3a30      	subs	r2, #48	; 0x30
 8008884:	2a09      	cmp	r2, #9
 8008886:	d903      	bls.n	8008890 <_vfiprintf_r+0x1d0>
 8008888:	2b00      	cmp	r3, #0
 800888a:	d0c6      	beq.n	800881a <_vfiprintf_r+0x15a>
 800888c:	9105      	str	r1, [sp, #20]
 800888e:	e7c4      	b.n	800881a <_vfiprintf_r+0x15a>
 8008890:	fb0c 2101 	mla	r1, ip, r1, r2
 8008894:	4604      	mov	r4, r0
 8008896:	2301      	movs	r3, #1
 8008898:	e7f0      	b.n	800887c <_vfiprintf_r+0x1bc>
 800889a:	ab03      	add	r3, sp, #12
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	462a      	mov	r2, r5
 80088a0:	4b12      	ldr	r3, [pc, #72]	; (80088ec <_vfiprintf_r+0x22c>)
 80088a2:	a904      	add	r1, sp, #16
 80088a4:	4630      	mov	r0, r6
 80088a6:	f7fd fe8d 	bl	80065c4 <_printf_float>
 80088aa:	4607      	mov	r7, r0
 80088ac:	1c78      	adds	r0, r7, #1
 80088ae:	d1d6      	bne.n	800885e <_vfiprintf_r+0x19e>
 80088b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088b2:	07d9      	lsls	r1, r3, #31
 80088b4:	d405      	bmi.n	80088c2 <_vfiprintf_r+0x202>
 80088b6:	89ab      	ldrh	r3, [r5, #12]
 80088b8:	059a      	lsls	r2, r3, #22
 80088ba:	d402      	bmi.n	80088c2 <_vfiprintf_r+0x202>
 80088bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088be:	f7fe fbdd 	bl	800707c <__retarget_lock_release_recursive>
 80088c2:	89ab      	ldrh	r3, [r5, #12]
 80088c4:	065b      	lsls	r3, r3, #25
 80088c6:	f53f af1d 	bmi.w	8008704 <_vfiprintf_r+0x44>
 80088ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088cc:	e71c      	b.n	8008708 <_vfiprintf_r+0x48>
 80088ce:	ab03      	add	r3, sp, #12
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	462a      	mov	r2, r5
 80088d4:	4b05      	ldr	r3, [pc, #20]	; (80088ec <_vfiprintf_r+0x22c>)
 80088d6:	a904      	add	r1, sp, #16
 80088d8:	4630      	mov	r0, r6
 80088da:	f7fe f917 	bl	8006b0c <_printf_i>
 80088de:	e7e4      	b.n	80088aa <_vfiprintf_r+0x1ea>
 80088e0:	080090e4 	.word	0x080090e4
 80088e4:	080090ee 	.word	0x080090ee
 80088e8:	080065c5 	.word	0x080065c5
 80088ec:	0800869b 	.word	0x0800869b
 80088f0:	080090ea 	.word	0x080090ea

080088f4 <__sflush_r>:
 80088f4:	898a      	ldrh	r2, [r1, #12]
 80088f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088fa:	4605      	mov	r5, r0
 80088fc:	0710      	lsls	r0, r2, #28
 80088fe:	460c      	mov	r4, r1
 8008900:	d458      	bmi.n	80089b4 <__sflush_r+0xc0>
 8008902:	684b      	ldr	r3, [r1, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	dc05      	bgt.n	8008914 <__sflush_r+0x20>
 8008908:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800890a:	2b00      	cmp	r3, #0
 800890c:	dc02      	bgt.n	8008914 <__sflush_r+0x20>
 800890e:	2000      	movs	r0, #0
 8008910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008916:	2e00      	cmp	r6, #0
 8008918:	d0f9      	beq.n	800890e <__sflush_r+0x1a>
 800891a:	2300      	movs	r3, #0
 800891c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008920:	682f      	ldr	r7, [r5, #0]
 8008922:	6a21      	ldr	r1, [r4, #32]
 8008924:	602b      	str	r3, [r5, #0]
 8008926:	d032      	beq.n	800898e <__sflush_r+0x9a>
 8008928:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	075a      	lsls	r2, r3, #29
 800892e:	d505      	bpl.n	800893c <__sflush_r+0x48>
 8008930:	6863      	ldr	r3, [r4, #4]
 8008932:	1ac0      	subs	r0, r0, r3
 8008934:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008936:	b10b      	cbz	r3, 800893c <__sflush_r+0x48>
 8008938:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800893a:	1ac0      	subs	r0, r0, r3
 800893c:	2300      	movs	r3, #0
 800893e:	4602      	mov	r2, r0
 8008940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008942:	6a21      	ldr	r1, [r4, #32]
 8008944:	4628      	mov	r0, r5
 8008946:	47b0      	blx	r6
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	89a3      	ldrh	r3, [r4, #12]
 800894c:	d106      	bne.n	800895c <__sflush_r+0x68>
 800894e:	6829      	ldr	r1, [r5, #0]
 8008950:	291d      	cmp	r1, #29
 8008952:	d82b      	bhi.n	80089ac <__sflush_r+0xb8>
 8008954:	4a29      	ldr	r2, [pc, #164]	; (80089fc <__sflush_r+0x108>)
 8008956:	410a      	asrs	r2, r1
 8008958:	07d6      	lsls	r6, r2, #31
 800895a:	d427      	bmi.n	80089ac <__sflush_r+0xb8>
 800895c:	2200      	movs	r2, #0
 800895e:	6062      	str	r2, [r4, #4]
 8008960:	04d9      	lsls	r1, r3, #19
 8008962:	6922      	ldr	r2, [r4, #16]
 8008964:	6022      	str	r2, [r4, #0]
 8008966:	d504      	bpl.n	8008972 <__sflush_r+0x7e>
 8008968:	1c42      	adds	r2, r0, #1
 800896a:	d101      	bne.n	8008970 <__sflush_r+0x7c>
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	b903      	cbnz	r3, 8008972 <__sflush_r+0x7e>
 8008970:	6560      	str	r0, [r4, #84]	; 0x54
 8008972:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008974:	602f      	str	r7, [r5, #0]
 8008976:	2900      	cmp	r1, #0
 8008978:	d0c9      	beq.n	800890e <__sflush_r+0x1a>
 800897a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800897e:	4299      	cmp	r1, r3
 8008980:	d002      	beq.n	8008988 <__sflush_r+0x94>
 8008982:	4628      	mov	r0, r5
 8008984:	f7ff f9f6 	bl	8007d74 <_free_r>
 8008988:	2000      	movs	r0, #0
 800898a:	6360      	str	r0, [r4, #52]	; 0x34
 800898c:	e7c0      	b.n	8008910 <__sflush_r+0x1c>
 800898e:	2301      	movs	r3, #1
 8008990:	4628      	mov	r0, r5
 8008992:	47b0      	blx	r6
 8008994:	1c41      	adds	r1, r0, #1
 8008996:	d1c8      	bne.n	800892a <__sflush_r+0x36>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d0c5      	beq.n	800892a <__sflush_r+0x36>
 800899e:	2b1d      	cmp	r3, #29
 80089a0:	d001      	beq.n	80089a6 <__sflush_r+0xb2>
 80089a2:	2b16      	cmp	r3, #22
 80089a4:	d101      	bne.n	80089aa <__sflush_r+0xb6>
 80089a6:	602f      	str	r7, [r5, #0]
 80089a8:	e7b1      	b.n	800890e <__sflush_r+0x1a>
 80089aa:	89a3      	ldrh	r3, [r4, #12]
 80089ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b0:	81a3      	strh	r3, [r4, #12]
 80089b2:	e7ad      	b.n	8008910 <__sflush_r+0x1c>
 80089b4:	690f      	ldr	r7, [r1, #16]
 80089b6:	2f00      	cmp	r7, #0
 80089b8:	d0a9      	beq.n	800890e <__sflush_r+0x1a>
 80089ba:	0793      	lsls	r3, r2, #30
 80089bc:	680e      	ldr	r6, [r1, #0]
 80089be:	bf08      	it	eq
 80089c0:	694b      	ldreq	r3, [r1, #20]
 80089c2:	600f      	str	r7, [r1, #0]
 80089c4:	bf18      	it	ne
 80089c6:	2300      	movne	r3, #0
 80089c8:	eba6 0807 	sub.w	r8, r6, r7
 80089cc:	608b      	str	r3, [r1, #8]
 80089ce:	f1b8 0f00 	cmp.w	r8, #0
 80089d2:	dd9c      	ble.n	800890e <__sflush_r+0x1a>
 80089d4:	6a21      	ldr	r1, [r4, #32]
 80089d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089d8:	4643      	mov	r3, r8
 80089da:	463a      	mov	r2, r7
 80089dc:	4628      	mov	r0, r5
 80089de:	47b0      	blx	r6
 80089e0:	2800      	cmp	r0, #0
 80089e2:	dc06      	bgt.n	80089f2 <__sflush_r+0xfe>
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ea:	81a3      	strh	r3, [r4, #12]
 80089ec:	f04f 30ff 	mov.w	r0, #4294967295
 80089f0:	e78e      	b.n	8008910 <__sflush_r+0x1c>
 80089f2:	4407      	add	r7, r0
 80089f4:	eba8 0800 	sub.w	r8, r8, r0
 80089f8:	e7e9      	b.n	80089ce <__sflush_r+0xda>
 80089fa:	bf00      	nop
 80089fc:	dfbffffe 	.word	0xdfbffffe

08008a00 <_fflush_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	690b      	ldr	r3, [r1, #16]
 8008a04:	4605      	mov	r5, r0
 8008a06:	460c      	mov	r4, r1
 8008a08:	b913      	cbnz	r3, 8008a10 <_fflush_r+0x10>
 8008a0a:	2500      	movs	r5, #0
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	bd38      	pop	{r3, r4, r5, pc}
 8008a10:	b118      	cbz	r0, 8008a1a <_fflush_r+0x1a>
 8008a12:	6a03      	ldr	r3, [r0, #32]
 8008a14:	b90b      	cbnz	r3, 8008a1a <_fflush_r+0x1a>
 8008a16:	f7fe fa27 	bl	8006e68 <__sinit>
 8008a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d0f3      	beq.n	8008a0a <_fflush_r+0xa>
 8008a22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a24:	07d0      	lsls	r0, r2, #31
 8008a26:	d404      	bmi.n	8008a32 <_fflush_r+0x32>
 8008a28:	0599      	lsls	r1, r3, #22
 8008a2a:	d402      	bmi.n	8008a32 <_fflush_r+0x32>
 8008a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a2e:	f7fe fb24 	bl	800707a <__retarget_lock_acquire_recursive>
 8008a32:	4628      	mov	r0, r5
 8008a34:	4621      	mov	r1, r4
 8008a36:	f7ff ff5d 	bl	80088f4 <__sflush_r>
 8008a3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a3c:	07da      	lsls	r2, r3, #31
 8008a3e:	4605      	mov	r5, r0
 8008a40:	d4e4      	bmi.n	8008a0c <_fflush_r+0xc>
 8008a42:	89a3      	ldrh	r3, [r4, #12]
 8008a44:	059b      	lsls	r3, r3, #22
 8008a46:	d4e1      	bmi.n	8008a0c <_fflush_r+0xc>
 8008a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a4a:	f7fe fb17 	bl	800707c <__retarget_lock_release_recursive>
 8008a4e:	e7dd      	b.n	8008a0c <_fflush_r+0xc>

08008a50 <__swbuf_r>:
 8008a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a52:	460e      	mov	r6, r1
 8008a54:	4614      	mov	r4, r2
 8008a56:	4605      	mov	r5, r0
 8008a58:	b118      	cbz	r0, 8008a62 <__swbuf_r+0x12>
 8008a5a:	6a03      	ldr	r3, [r0, #32]
 8008a5c:	b90b      	cbnz	r3, 8008a62 <__swbuf_r+0x12>
 8008a5e:	f7fe fa03 	bl	8006e68 <__sinit>
 8008a62:	69a3      	ldr	r3, [r4, #24]
 8008a64:	60a3      	str	r3, [r4, #8]
 8008a66:	89a3      	ldrh	r3, [r4, #12]
 8008a68:	071a      	lsls	r2, r3, #28
 8008a6a:	d525      	bpl.n	8008ab8 <__swbuf_r+0x68>
 8008a6c:	6923      	ldr	r3, [r4, #16]
 8008a6e:	b31b      	cbz	r3, 8008ab8 <__swbuf_r+0x68>
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	6922      	ldr	r2, [r4, #16]
 8008a74:	1a98      	subs	r0, r3, r2
 8008a76:	6963      	ldr	r3, [r4, #20]
 8008a78:	b2f6      	uxtb	r6, r6
 8008a7a:	4283      	cmp	r3, r0
 8008a7c:	4637      	mov	r7, r6
 8008a7e:	dc04      	bgt.n	8008a8a <__swbuf_r+0x3a>
 8008a80:	4621      	mov	r1, r4
 8008a82:	4628      	mov	r0, r5
 8008a84:	f7ff ffbc 	bl	8008a00 <_fflush_r>
 8008a88:	b9e0      	cbnz	r0, 8008ac4 <__swbuf_r+0x74>
 8008a8a:	68a3      	ldr	r3, [r4, #8]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	60a3      	str	r3, [r4, #8]
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	6022      	str	r2, [r4, #0]
 8008a96:	701e      	strb	r6, [r3, #0]
 8008a98:	6962      	ldr	r2, [r4, #20]
 8008a9a:	1c43      	adds	r3, r0, #1
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d004      	beq.n	8008aaa <__swbuf_r+0x5a>
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	07db      	lsls	r3, r3, #31
 8008aa4:	d506      	bpl.n	8008ab4 <__swbuf_r+0x64>
 8008aa6:	2e0a      	cmp	r6, #10
 8008aa8:	d104      	bne.n	8008ab4 <__swbuf_r+0x64>
 8008aaa:	4621      	mov	r1, r4
 8008aac:	4628      	mov	r0, r5
 8008aae:	f7ff ffa7 	bl	8008a00 <_fflush_r>
 8008ab2:	b938      	cbnz	r0, 8008ac4 <__swbuf_r+0x74>
 8008ab4:	4638      	mov	r0, r7
 8008ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ab8:	4621      	mov	r1, r4
 8008aba:	4628      	mov	r0, r5
 8008abc:	f000 f806 	bl	8008acc <__swsetup_r>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	d0d5      	beq.n	8008a70 <__swbuf_r+0x20>
 8008ac4:	f04f 37ff 	mov.w	r7, #4294967295
 8008ac8:	e7f4      	b.n	8008ab4 <__swbuf_r+0x64>
	...

08008acc <__swsetup_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4b2a      	ldr	r3, [pc, #168]	; (8008b78 <__swsetup_r+0xac>)
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	6818      	ldr	r0, [r3, #0]
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	b118      	cbz	r0, 8008ae0 <__swsetup_r+0x14>
 8008ad8:	6a03      	ldr	r3, [r0, #32]
 8008ada:	b90b      	cbnz	r3, 8008ae0 <__swsetup_r+0x14>
 8008adc:	f7fe f9c4 	bl	8006e68 <__sinit>
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ae6:	0718      	lsls	r0, r3, #28
 8008ae8:	d422      	bmi.n	8008b30 <__swsetup_r+0x64>
 8008aea:	06d9      	lsls	r1, r3, #27
 8008aec:	d407      	bmi.n	8008afe <__swsetup_r+0x32>
 8008aee:	2309      	movs	r3, #9
 8008af0:	602b      	str	r3, [r5, #0]
 8008af2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008af6:	81a3      	strh	r3, [r4, #12]
 8008af8:	f04f 30ff 	mov.w	r0, #4294967295
 8008afc:	e034      	b.n	8008b68 <__swsetup_r+0x9c>
 8008afe:	0758      	lsls	r0, r3, #29
 8008b00:	d512      	bpl.n	8008b28 <__swsetup_r+0x5c>
 8008b02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b04:	b141      	cbz	r1, 8008b18 <__swsetup_r+0x4c>
 8008b06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b0a:	4299      	cmp	r1, r3
 8008b0c:	d002      	beq.n	8008b14 <__swsetup_r+0x48>
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f7ff f930 	bl	8007d74 <_free_r>
 8008b14:	2300      	movs	r3, #0
 8008b16:	6363      	str	r3, [r4, #52]	; 0x34
 8008b18:	89a3      	ldrh	r3, [r4, #12]
 8008b1a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b1e:	81a3      	strh	r3, [r4, #12]
 8008b20:	2300      	movs	r3, #0
 8008b22:	6063      	str	r3, [r4, #4]
 8008b24:	6923      	ldr	r3, [r4, #16]
 8008b26:	6023      	str	r3, [r4, #0]
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	f043 0308 	orr.w	r3, r3, #8
 8008b2e:	81a3      	strh	r3, [r4, #12]
 8008b30:	6923      	ldr	r3, [r4, #16]
 8008b32:	b94b      	cbnz	r3, 8008b48 <__swsetup_r+0x7c>
 8008b34:	89a3      	ldrh	r3, [r4, #12]
 8008b36:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b3e:	d003      	beq.n	8008b48 <__swsetup_r+0x7c>
 8008b40:	4621      	mov	r1, r4
 8008b42:	4628      	mov	r0, r5
 8008b44:	f000 f8c4 	bl	8008cd0 <__smakebuf_r>
 8008b48:	89a0      	ldrh	r0, [r4, #12]
 8008b4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b4e:	f010 0301 	ands.w	r3, r0, #1
 8008b52:	d00a      	beq.n	8008b6a <__swsetup_r+0x9e>
 8008b54:	2300      	movs	r3, #0
 8008b56:	60a3      	str	r3, [r4, #8]
 8008b58:	6963      	ldr	r3, [r4, #20]
 8008b5a:	425b      	negs	r3, r3
 8008b5c:	61a3      	str	r3, [r4, #24]
 8008b5e:	6923      	ldr	r3, [r4, #16]
 8008b60:	b943      	cbnz	r3, 8008b74 <__swsetup_r+0xa8>
 8008b62:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b66:	d1c4      	bne.n	8008af2 <__swsetup_r+0x26>
 8008b68:	bd38      	pop	{r3, r4, r5, pc}
 8008b6a:	0781      	lsls	r1, r0, #30
 8008b6c:	bf58      	it	pl
 8008b6e:	6963      	ldrpl	r3, [r4, #20]
 8008b70:	60a3      	str	r3, [r4, #8]
 8008b72:	e7f4      	b.n	8008b5e <__swsetup_r+0x92>
 8008b74:	2000      	movs	r0, #0
 8008b76:	e7f7      	b.n	8008b68 <__swsetup_r+0x9c>
 8008b78:	20000064 	.word	0x20000064

08008b7c <_sbrk_r>:
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	4d06      	ldr	r5, [pc, #24]	; (8008b98 <_sbrk_r+0x1c>)
 8008b80:	2300      	movs	r3, #0
 8008b82:	4604      	mov	r4, r0
 8008b84:	4608      	mov	r0, r1
 8008b86:	602b      	str	r3, [r5, #0]
 8008b88:	f7f9 f8b0 	bl	8001cec <_sbrk>
 8008b8c:	1c43      	adds	r3, r0, #1
 8008b8e:	d102      	bne.n	8008b96 <_sbrk_r+0x1a>
 8008b90:	682b      	ldr	r3, [r5, #0]
 8008b92:	b103      	cbz	r3, 8008b96 <_sbrk_r+0x1a>
 8008b94:	6023      	str	r3, [r4, #0]
 8008b96:	bd38      	pop	{r3, r4, r5, pc}
 8008b98:	2000058c 	.word	0x2000058c

08008b9c <memcpy>:
 8008b9c:	440a      	add	r2, r1
 8008b9e:	4291      	cmp	r1, r2
 8008ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba4:	d100      	bne.n	8008ba8 <memcpy+0xc>
 8008ba6:	4770      	bx	lr
 8008ba8:	b510      	push	{r4, lr}
 8008baa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bb2:	4291      	cmp	r1, r2
 8008bb4:	d1f9      	bne.n	8008baa <memcpy+0xe>
 8008bb6:	bd10      	pop	{r4, pc}

08008bb8 <__assert_func>:
 8008bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bba:	4614      	mov	r4, r2
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	4b09      	ldr	r3, [pc, #36]	; (8008be4 <__assert_func+0x2c>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4605      	mov	r5, r0
 8008bc4:	68d8      	ldr	r0, [r3, #12]
 8008bc6:	b14c      	cbz	r4, 8008bdc <__assert_func+0x24>
 8008bc8:	4b07      	ldr	r3, [pc, #28]	; (8008be8 <__assert_func+0x30>)
 8008bca:	9100      	str	r1, [sp, #0]
 8008bcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bd0:	4906      	ldr	r1, [pc, #24]	; (8008bec <__assert_func+0x34>)
 8008bd2:	462b      	mov	r3, r5
 8008bd4:	f000 f844 	bl	8008c60 <fiprintf>
 8008bd8:	f000 f8d8 	bl	8008d8c <abort>
 8008bdc:	4b04      	ldr	r3, [pc, #16]	; (8008bf0 <__assert_func+0x38>)
 8008bde:	461c      	mov	r4, r3
 8008be0:	e7f3      	b.n	8008bca <__assert_func+0x12>
 8008be2:	bf00      	nop
 8008be4:	20000064 	.word	0x20000064
 8008be8:	080090ff 	.word	0x080090ff
 8008bec:	0800910c 	.word	0x0800910c
 8008bf0:	0800913a 	.word	0x0800913a

08008bf4 <_calloc_r>:
 8008bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bf6:	fba1 2402 	umull	r2, r4, r1, r2
 8008bfa:	b94c      	cbnz	r4, 8008c10 <_calloc_r+0x1c>
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	9201      	str	r2, [sp, #4]
 8008c00:	f7ff f92c 	bl	8007e5c <_malloc_r>
 8008c04:	9a01      	ldr	r2, [sp, #4]
 8008c06:	4605      	mov	r5, r0
 8008c08:	b930      	cbnz	r0, 8008c18 <_calloc_r+0x24>
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	b003      	add	sp, #12
 8008c0e:	bd30      	pop	{r4, r5, pc}
 8008c10:	220c      	movs	r2, #12
 8008c12:	6002      	str	r2, [r0, #0]
 8008c14:	2500      	movs	r5, #0
 8008c16:	e7f8      	b.n	8008c0a <_calloc_r+0x16>
 8008c18:	4621      	mov	r1, r4
 8008c1a:	f7fe f9b0 	bl	8006f7e <memset>
 8008c1e:	e7f4      	b.n	8008c0a <_calloc_r+0x16>

08008c20 <__ascii_mbtowc>:
 8008c20:	b082      	sub	sp, #8
 8008c22:	b901      	cbnz	r1, 8008c26 <__ascii_mbtowc+0x6>
 8008c24:	a901      	add	r1, sp, #4
 8008c26:	b142      	cbz	r2, 8008c3a <__ascii_mbtowc+0x1a>
 8008c28:	b14b      	cbz	r3, 8008c3e <__ascii_mbtowc+0x1e>
 8008c2a:	7813      	ldrb	r3, [r2, #0]
 8008c2c:	600b      	str	r3, [r1, #0]
 8008c2e:	7812      	ldrb	r2, [r2, #0]
 8008c30:	1e10      	subs	r0, r2, #0
 8008c32:	bf18      	it	ne
 8008c34:	2001      	movne	r0, #1
 8008c36:	b002      	add	sp, #8
 8008c38:	4770      	bx	lr
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	e7fb      	b.n	8008c36 <__ascii_mbtowc+0x16>
 8008c3e:	f06f 0001 	mvn.w	r0, #1
 8008c42:	e7f8      	b.n	8008c36 <__ascii_mbtowc+0x16>

08008c44 <__ascii_wctomb>:
 8008c44:	b149      	cbz	r1, 8008c5a <__ascii_wctomb+0x16>
 8008c46:	2aff      	cmp	r2, #255	; 0xff
 8008c48:	bf85      	ittet	hi
 8008c4a:	238a      	movhi	r3, #138	; 0x8a
 8008c4c:	6003      	strhi	r3, [r0, #0]
 8008c4e:	700a      	strbls	r2, [r1, #0]
 8008c50:	f04f 30ff 	movhi.w	r0, #4294967295
 8008c54:	bf98      	it	ls
 8008c56:	2001      	movls	r0, #1
 8008c58:	4770      	bx	lr
 8008c5a:	4608      	mov	r0, r1
 8008c5c:	4770      	bx	lr
	...

08008c60 <fiprintf>:
 8008c60:	b40e      	push	{r1, r2, r3}
 8008c62:	b503      	push	{r0, r1, lr}
 8008c64:	4601      	mov	r1, r0
 8008c66:	ab03      	add	r3, sp, #12
 8008c68:	4805      	ldr	r0, [pc, #20]	; (8008c80 <fiprintf+0x20>)
 8008c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c6e:	6800      	ldr	r0, [r0, #0]
 8008c70:	9301      	str	r3, [sp, #4]
 8008c72:	f7ff fd25 	bl	80086c0 <_vfiprintf_r>
 8008c76:	b002      	add	sp, #8
 8008c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c7c:	b003      	add	sp, #12
 8008c7e:	4770      	bx	lr
 8008c80:	20000064 	.word	0x20000064

08008c84 <__swhatbuf_r>:
 8008c84:	b570      	push	{r4, r5, r6, lr}
 8008c86:	460c      	mov	r4, r1
 8008c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c8c:	2900      	cmp	r1, #0
 8008c8e:	b096      	sub	sp, #88	; 0x58
 8008c90:	4615      	mov	r5, r2
 8008c92:	461e      	mov	r6, r3
 8008c94:	da0d      	bge.n	8008cb2 <__swhatbuf_r+0x2e>
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008c9c:	f04f 0100 	mov.w	r1, #0
 8008ca0:	bf0c      	ite	eq
 8008ca2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008ca6:	2340      	movne	r3, #64	; 0x40
 8008ca8:	2000      	movs	r0, #0
 8008caa:	6031      	str	r1, [r6, #0]
 8008cac:	602b      	str	r3, [r5, #0]
 8008cae:	b016      	add	sp, #88	; 0x58
 8008cb0:	bd70      	pop	{r4, r5, r6, pc}
 8008cb2:	466a      	mov	r2, sp
 8008cb4:	f000 f848 	bl	8008d48 <_fstat_r>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	dbec      	blt.n	8008c96 <__swhatbuf_r+0x12>
 8008cbc:	9901      	ldr	r1, [sp, #4]
 8008cbe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008cc2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008cc6:	4259      	negs	r1, r3
 8008cc8:	4159      	adcs	r1, r3
 8008cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cce:	e7eb      	b.n	8008ca8 <__swhatbuf_r+0x24>

08008cd0 <__smakebuf_r>:
 8008cd0:	898b      	ldrh	r3, [r1, #12]
 8008cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cd4:	079d      	lsls	r5, r3, #30
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	460c      	mov	r4, r1
 8008cda:	d507      	bpl.n	8008cec <__smakebuf_r+0x1c>
 8008cdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	6123      	str	r3, [r4, #16]
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	6163      	str	r3, [r4, #20]
 8008ce8:	b002      	add	sp, #8
 8008cea:	bd70      	pop	{r4, r5, r6, pc}
 8008cec:	ab01      	add	r3, sp, #4
 8008cee:	466a      	mov	r2, sp
 8008cf0:	f7ff ffc8 	bl	8008c84 <__swhatbuf_r>
 8008cf4:	9900      	ldr	r1, [sp, #0]
 8008cf6:	4605      	mov	r5, r0
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f7ff f8af 	bl	8007e5c <_malloc_r>
 8008cfe:	b948      	cbnz	r0, 8008d14 <__smakebuf_r+0x44>
 8008d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d04:	059a      	lsls	r2, r3, #22
 8008d06:	d4ef      	bmi.n	8008ce8 <__smakebuf_r+0x18>
 8008d08:	f023 0303 	bic.w	r3, r3, #3
 8008d0c:	f043 0302 	orr.w	r3, r3, #2
 8008d10:	81a3      	strh	r3, [r4, #12]
 8008d12:	e7e3      	b.n	8008cdc <__smakebuf_r+0xc>
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	6020      	str	r0, [r4, #0]
 8008d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d1c:	81a3      	strh	r3, [r4, #12]
 8008d1e:	9b00      	ldr	r3, [sp, #0]
 8008d20:	6163      	str	r3, [r4, #20]
 8008d22:	9b01      	ldr	r3, [sp, #4]
 8008d24:	6120      	str	r0, [r4, #16]
 8008d26:	b15b      	cbz	r3, 8008d40 <__smakebuf_r+0x70>
 8008d28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	f000 f81d 	bl	8008d6c <_isatty_r>
 8008d32:	b128      	cbz	r0, 8008d40 <__smakebuf_r+0x70>
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	f023 0303 	bic.w	r3, r3, #3
 8008d3a:	f043 0301 	orr.w	r3, r3, #1
 8008d3e:	81a3      	strh	r3, [r4, #12]
 8008d40:	89a3      	ldrh	r3, [r4, #12]
 8008d42:	431d      	orrs	r5, r3
 8008d44:	81a5      	strh	r5, [r4, #12]
 8008d46:	e7cf      	b.n	8008ce8 <__smakebuf_r+0x18>

08008d48 <_fstat_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	4d07      	ldr	r5, [pc, #28]	; (8008d68 <_fstat_r+0x20>)
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4604      	mov	r4, r0
 8008d50:	4608      	mov	r0, r1
 8008d52:	4611      	mov	r1, r2
 8008d54:	602b      	str	r3, [r5, #0]
 8008d56:	f7f8 ffa0 	bl	8001c9a <_fstat>
 8008d5a:	1c43      	adds	r3, r0, #1
 8008d5c:	d102      	bne.n	8008d64 <_fstat_r+0x1c>
 8008d5e:	682b      	ldr	r3, [r5, #0]
 8008d60:	b103      	cbz	r3, 8008d64 <_fstat_r+0x1c>
 8008d62:	6023      	str	r3, [r4, #0]
 8008d64:	bd38      	pop	{r3, r4, r5, pc}
 8008d66:	bf00      	nop
 8008d68:	2000058c 	.word	0x2000058c

08008d6c <_isatty_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4d06      	ldr	r5, [pc, #24]	; (8008d88 <_isatty_r+0x1c>)
 8008d70:	2300      	movs	r3, #0
 8008d72:	4604      	mov	r4, r0
 8008d74:	4608      	mov	r0, r1
 8008d76:	602b      	str	r3, [r5, #0]
 8008d78:	f7f8 ff9f 	bl	8001cba <_isatty>
 8008d7c:	1c43      	adds	r3, r0, #1
 8008d7e:	d102      	bne.n	8008d86 <_isatty_r+0x1a>
 8008d80:	682b      	ldr	r3, [r5, #0]
 8008d82:	b103      	cbz	r3, 8008d86 <_isatty_r+0x1a>
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	2000058c 	.word	0x2000058c

08008d8c <abort>:
 8008d8c:	b508      	push	{r3, lr}
 8008d8e:	2006      	movs	r0, #6
 8008d90:	f000 f82c 	bl	8008dec <raise>
 8008d94:	2001      	movs	r0, #1
 8008d96:	f7f8 ff4d 	bl	8001c34 <_exit>

08008d9a <_raise_r>:
 8008d9a:	291f      	cmp	r1, #31
 8008d9c:	b538      	push	{r3, r4, r5, lr}
 8008d9e:	4604      	mov	r4, r0
 8008da0:	460d      	mov	r5, r1
 8008da2:	d904      	bls.n	8008dae <_raise_r+0x14>
 8008da4:	2316      	movs	r3, #22
 8008da6:	6003      	str	r3, [r0, #0]
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dac:	bd38      	pop	{r3, r4, r5, pc}
 8008dae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008db0:	b112      	cbz	r2, 8008db8 <_raise_r+0x1e>
 8008db2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008db6:	b94b      	cbnz	r3, 8008dcc <_raise_r+0x32>
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 f831 	bl	8008e20 <_getpid_r>
 8008dbe:	462a      	mov	r2, r5
 8008dc0:	4601      	mov	r1, r0
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dc8:	f000 b818 	b.w	8008dfc <_kill_r>
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d00a      	beq.n	8008de6 <_raise_r+0x4c>
 8008dd0:	1c59      	adds	r1, r3, #1
 8008dd2:	d103      	bne.n	8008ddc <_raise_r+0x42>
 8008dd4:	2316      	movs	r3, #22
 8008dd6:	6003      	str	r3, [r0, #0]
 8008dd8:	2001      	movs	r0, #1
 8008dda:	e7e7      	b.n	8008dac <_raise_r+0x12>
 8008ddc:	2400      	movs	r4, #0
 8008dde:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008de2:	4628      	mov	r0, r5
 8008de4:	4798      	blx	r3
 8008de6:	2000      	movs	r0, #0
 8008de8:	e7e0      	b.n	8008dac <_raise_r+0x12>
	...

08008dec <raise>:
 8008dec:	4b02      	ldr	r3, [pc, #8]	; (8008df8 <raise+0xc>)
 8008dee:	4601      	mov	r1, r0
 8008df0:	6818      	ldr	r0, [r3, #0]
 8008df2:	f7ff bfd2 	b.w	8008d9a <_raise_r>
 8008df6:	bf00      	nop
 8008df8:	20000064 	.word	0x20000064

08008dfc <_kill_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	4d07      	ldr	r5, [pc, #28]	; (8008e1c <_kill_r+0x20>)
 8008e00:	2300      	movs	r3, #0
 8008e02:	4604      	mov	r4, r0
 8008e04:	4608      	mov	r0, r1
 8008e06:	4611      	mov	r1, r2
 8008e08:	602b      	str	r3, [r5, #0]
 8008e0a:	f7f8 ff03 	bl	8001c14 <_kill>
 8008e0e:	1c43      	adds	r3, r0, #1
 8008e10:	d102      	bne.n	8008e18 <_kill_r+0x1c>
 8008e12:	682b      	ldr	r3, [r5, #0]
 8008e14:	b103      	cbz	r3, 8008e18 <_kill_r+0x1c>
 8008e16:	6023      	str	r3, [r4, #0]
 8008e18:	bd38      	pop	{r3, r4, r5, pc}
 8008e1a:	bf00      	nop
 8008e1c:	2000058c 	.word	0x2000058c

08008e20 <_getpid_r>:
 8008e20:	f7f8 bef0 	b.w	8001c04 <_getpid>

08008e24 <_init>:
 8008e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e26:	bf00      	nop
 8008e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2a:	bc08      	pop	{r3}
 8008e2c:	469e      	mov	lr, r3
 8008e2e:	4770      	bx	lr

08008e30 <_fini>:
 8008e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e32:	bf00      	nop
 8008e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e36:	bc08      	pop	{r3}
 8008e38:	469e      	mov	lr, r3
 8008e3a:	4770      	bx	lr
