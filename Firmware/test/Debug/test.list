
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fd4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  080091b8  080091b8  000191b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095ac  080095ac  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080095ac  080095ac  000195ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095b4  080095b4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095b4  080095b4  000195b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095b8  080095b8  000195b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080095bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  200001d4  08009790  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  08009790  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001585b  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002958  00000000  00000000  00035aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  00038400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5d  00000000  00000000  00039790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f899  00000000  00000000  0003a6ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000171d5  00000000  00000000  00059f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca8d8  00000000  00000000  0007115b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006438  00000000  00000000  0013ba34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00141e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800919c 	.word	0x0800919c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800919c 	.word	0x0800919c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	230a      	movs	r3, #10
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <_write+0x24>)
 8000f0a:	f004 fe5a 	bl	8005bc2 <HAL_UART_Transmit>
	return len;
 8000f0e:	687b      	ldr	r3, [r7, #4]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200003b8 	.word	0x200003b8

08000f1c <read_encoder_value>:


int32_t read_encoder_value(TIM_TypeDef *TIM)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	uint16_t enc_buff = TIM->CNT;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	81fb      	strh	r3, [r7, #14]
	TIM->CNT = 0;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
	return (int16_t)enc_buff;
 8000f30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b092      	sub	sp, #72	; 0x48
 8000f44:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f46:	f000 ff94 	bl	8001e72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4a:	f000 f8cd 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4e:	f000 fb59 	bl	8001604 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f52:	f000 fb0b 	bl	800156c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f56:	f000 fa11 	bl	800137c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f5a:	f000 fa63 	bl	8001424 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000f5e:	f000 f94f 	bl	8001200 <MX_TIM1_Init>
  MX_TIM17_Init();
 8000f62:	f000 fadd 	bl	8001520 <MX_TIM17_Init>
  MX_I2C1_Init();
 8000f66:	f000 f90b 	bl	8001180 <MX_I2C1_Init>
  MX_TIM16_Init();
 8000f6a:	f000 fab1 	bl	80014d0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000f6e:	213c      	movs	r1, #60	; 0x3c
 8000f70:	4854      	ldr	r0, [pc, #336]	; (80010c4 <main+0x184>)
 8000f72:	f003 faff 	bl	8004574 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f76:	213c      	movs	r1, #60	; 0x3c
 8000f78:	4853      	ldr	r0, [pc, #332]	; (80010c8 <main+0x188>)
 8000f7a:	f003 fafb 	bl	8004574 <HAL_TIM_Encoder_Start>

  uint8_t Rxbuffer[6];
  float euler[3];
  char eulerheader[3][10] = {"x", "y", "z"};
 8000f7e:	4b53      	ldr	r3, [pc, #332]	; (80010cc <main+0x18c>)
 8000f80:	1d3c      	adds	r4, r7, #4
 8000f82:	461d      	mov	r5, r3
 8000f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f8c:	c407      	stmia	r4!, {r0, r1, r2}
 8000f8e:	8023      	strh	r3, [r4, #0]

  BNO055_Init();
 8000f90:	f000 fb8e 	bl	80016b0 <BNO055_Init>

  HAL_I2C_Mem_Read(&hi2c1, 0x28 << 1, 0x3A, I2C_MEMADD_SIZE_8BIT, &Rxbuffer, 1, 100);
 8000f94:	2364      	movs	r3, #100	; 0x64
 8000f96:	9302      	str	r3, [sp, #8]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	223a      	movs	r2, #58	; 0x3a
 8000fa6:	2150      	movs	r1, #80	; 0x50
 8000fa8:	4849      	ldr	r0, [pc, #292]	; (80010d0 <main+0x190>)
 8000faa:	f001 fc65 	bl	8002878 <HAL_I2C_Mem_Read>
	//printf(Rxbuff, "Error");

	HAL_I2C_Mem_Read(&hi2c1, 0x28 << 1, 0x00, I2C_MEMADD_SIZE_8BIT, &Rxbuffer, 1, 100);
 8000fae:	2364      	movs	r3, #100	; 0x64
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2150      	movs	r1, #80	; 0x50
 8000fc2:	4843      	ldr	r0, [pc, #268]	; (80010d0 <main+0x190>)
 8000fc4:	f001 fc58 	bl	8002878 <HAL_I2C_Mem_Read>
	//printf(Rxbuff, "ID");

	HAL_I2C_Mem_Read(&hi2c1, 0x28 << 1, 0x34, I2C_MEMADD_SIZE_8BIT, &Rxbuffer, 1, 100);
 8000fc8:	2364      	movs	r3, #100	; 0x64
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	2234      	movs	r2, #52	; 0x34
 8000fda:	2150      	movs	r1, #80	; 0x50
 8000fdc:	483c      	ldr	r0, [pc, #240]	; (80010d0 <main+0x190>)
 8000fde:	f001 fc4b 	bl	8002878 <HAL_I2C_Mem_Read>
	//printf(Rxbuffer, "Temp");
	HAL_Delay(5000);
 8000fe2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fe6:	f000 ffb5 	bl	8001f54 <HAL_Delay>


	user_tim1_pwm_setvalue(-800, -800);
 8000fea:	493a      	ldr	r1, [pc, #232]	; (80010d4 <main+0x194>)
 8000fec:	4839      	ldr	r0, [pc, #228]	; (80010d4 <main+0x194>)
 8000fee:	f000 fbaf 	bl	8001750 <user_tim1_pwm_setvalue>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Right:%d\r\n",read_encoder_value(TIM2));
 8000ff2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ff6:	f7ff ff91 	bl	8000f1c <read_encoder_value>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4836      	ldr	r0, [pc, #216]	; (80010d8 <main+0x198>)
 8001000:	f006 f922 	bl	8007248 <iprintf>
	  printf("Left :%d\r\n",read_encoder_value(TIM3));
 8001004:	4835      	ldr	r0, [pc, #212]	; (80010dc <main+0x19c>)
 8001006:	f7ff ff89 	bl	8000f1c <read_encoder_value>
 800100a:	4603      	mov	r3, r0
 800100c:	4619      	mov	r1, r3
 800100e:	4834      	ldr	r0, [pc, #208]	; (80010e0 <main+0x1a0>)
 8001010:	f006 f91a 	bl	8007248 <iprintf>
	  HAL_Delay(200);
 8001014:	20c8      	movs	r0, #200	; 0xc8
 8001016:	f000 ff9d 	bl	8001f54 <HAL_Delay>

	  HAL_I2C_Mem_Read(&hi2c1, BNO_ADDRESS << 1, 0x1A, I2C_MEMADD_SIZE_8BIT, Rxbuffer, 6, 100);
 800101a:	2364      	movs	r3, #100	; 0x64
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	2306      	movs	r3, #6
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	221a      	movs	r2, #26
 800102c:	2150      	movs	r1, #80	; 0x50
 800102e:	4828      	ldr	r0, [pc, #160]	; (80010d0 <main+0x190>)
 8001030:	f001 fc22 	bl	8002878 <HAL_I2C_Mem_Read>

	  for(uint8_t i=0; i<3; i++){
 8001034:	2300      	movs	r3, #0
 8001036:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800103a:	e03d      	b.n	80010b8 <main+0x178>
		  euler[i] = (float)((Rxbuffer[i*2+1] << 8) | Rxbuffer[i*2])/16;
 800103c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	3301      	adds	r3, #1
 8001044:	3338      	adds	r3, #56	; 0x38
 8001046:	443b      	add	r3, r7
 8001048:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001052:	0052      	lsls	r2, r2, #1
 8001054:	3238      	adds	r2, #56	; 0x38
 8001056:	443a      	add	r2, r7
 8001058:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800105c:	4313      	orrs	r3, r2
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001066:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800106a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800106e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	3338      	adds	r3, #56	; 0x38
 8001076:	443b      	add	r3, r7
 8001078:	3b14      	subs	r3, #20
 800107a:	edc3 7a00 	vstr	s15, [r3]
		  printf("%s:%f", eulerheader[i],euler[i]);
 800107e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001082:	1d39      	adds	r1, r7, #4
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	18cc      	adds	r4, r1, r3
 800108e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	3338      	adds	r3, #56	; 0x38
 8001096:	443b      	add	r3, r7
 8001098:	3b14      	subs	r3, #20
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fa7b 	bl	8000598 <__aeabi_f2d>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4621      	mov	r1, r4
 80010a8:	480e      	ldr	r0, [pc, #56]	; (80010e4 <main+0x1a4>)
 80010aa:	f006 f8cd 	bl	8007248 <iprintf>
	  for(uint8_t i=0; i<3; i++){
 80010ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010b2:	3301      	adds	r3, #1
 80010b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80010b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d9bd      	bls.n	800103c <main+0xfc>
	  printf("Right:%d\r\n",read_encoder_value(TIM2));
 80010c0:	e797      	b.n	8000ff2 <main+0xb2>
 80010c2:	bf00      	nop
 80010c4:	20000288 	.word	0x20000288
 80010c8:	200002d4 	.word	0x200002d4
 80010cc:	080091d8 	.word	0x080091d8
 80010d0:	200001f0 	.word	0x200001f0
 80010d4:	fffffce0 	.word	0xfffffce0
 80010d8:	080091b8 	.word	0x080091b8
 80010dc:	40000400 	.word	0x40000400
 80010e0:	080091c4 	.word	0x080091c4
 80010e4:	080091d0 	.word	0x080091d0

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	; 0x50
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0318 	add.w	r3, r7, #24
 80010f2:	2238      	movs	r2, #56	; 0x38
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f006 f8fb 	bl	80072f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800110a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800110e:	f002 f80b 	bl	8003128 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111c:	2340      	movs	r3, #64	; 0x40
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001120:	2302      	movs	r3, #2
 8001122:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001124:	2302      	movs	r3, #2
 8001126:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001128:	2301      	movs	r3, #1
 800112a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 800112c:	230a      	movs	r3, #10
 800112e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001130:	2302      	movs	r3, #2
 8001132:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001134:	2302      	movs	r3, #2
 8001136:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001138:	2302      	movs	r3, #2
 800113a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113c:	f107 0318 	add.w	r3, r7, #24
 8001140:	4618      	mov	r0, r3
 8001142:	f002 f895 	bl	8003270 <HAL_RCC_OscConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800114c:	f000 fb56 	bl	80017fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001150:	230f      	movs	r3, #15
 8001152:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001154:	2303      	movs	r3, #3
 8001156:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2102      	movs	r1, #2
 8001168:	4618      	mov	r0, r3
 800116a:	f002 fb99 	bl	80038a0 <HAL_RCC_ClockConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001174:	f000 fb42 	bl	80017fc <Error_Handler>
  }
}
 8001178:	bf00      	nop
 800117a:	3750      	adds	r7, #80	; 0x50
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <MX_I2C1_Init+0x74>)
 8001186:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <MX_I2C1_Init+0x78>)
 8001188:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_I2C1_Init+0x74>)
 800118c:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <MX_I2C1_Init+0x7c>)
 800118e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_I2C1_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_I2C1_Init+0x74>)
 8001198:	2201      	movs	r2, #1
 800119a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_I2C1_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ba:	480e      	ldr	r0, [pc, #56]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011bc:	f001 f9b9 	bl	8002532 <HAL_I2C_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011c6:	f000 fb19 	bl	80017fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ca:	2100      	movs	r1, #0
 80011cc:	4809      	ldr	r0, [pc, #36]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011ce:	f001 ff13 	bl	8002ff8 <HAL_I2CEx_ConfigAnalogFilter>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011d8:	f000 fb10 	bl	80017fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011dc:	2100      	movs	r1, #0
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011e0:	f001 ff55 	bl	800308e <HAL_I2CEx_ConfigDigitalFilter>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ea:	f000 fb07 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200001f0 	.word	0x200001f0
 80011f8:	40005400 	.word	0x40005400
 80011fc:	00702991 	.word	0x00702991

08001200 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b09c      	sub	sp, #112	; 0x70
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001220:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2234      	movs	r2, #52	; 0x34
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f006 f859 	bl	80072f2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001240:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <MX_TIM1_Init+0x170>)
 8001242:	4a4c      	ldr	r2, [pc, #304]	; (8001374 <MX_TIM1_Init+0x174>)
 8001244:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 19;
 8001246:	4b4a      	ldr	r3, [pc, #296]	; (8001370 <MX_TIM1_Init+0x170>)
 8001248:	2213      	movs	r2, #19
 800124a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b48      	ldr	r3, [pc, #288]	; (8001370 <MX_TIM1_Init+0x170>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001252:	4b47      	ldr	r3, [pc, #284]	; (8001370 <MX_TIM1_Init+0x170>)
 8001254:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001258:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b45      	ldr	r3, [pc, #276]	; (8001370 <MX_TIM1_Init+0x170>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001260:	4b43      	ldr	r3, [pc, #268]	; (8001370 <MX_TIM1_Init+0x170>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b42      	ldr	r3, [pc, #264]	; (8001370 <MX_TIM1_Init+0x170>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800126c:	4840      	ldr	r0, [pc, #256]	; (8001370 <MX_TIM1_Init+0x170>)
 800126e:	f002 ff23 	bl	80040b8 <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001278:	f000 fac0 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001280:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001282:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001286:	4619      	mov	r1, r3
 8001288:	4839      	ldr	r0, [pc, #228]	; (8001370 <MX_TIM1_Init+0x170>)
 800128a:	f003 fc95 	bl	8004bb8 <HAL_TIM_ConfigClockSource>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001294:	f000 fab2 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001298:	4835      	ldr	r0, [pc, #212]	; (8001370 <MX_TIM1_Init+0x170>)
 800129a:	f002 ff64 	bl	8004166 <HAL_TIM_PWM_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012a4:	f000 faaa 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012b8:	4619      	mov	r1, r3
 80012ba:	482d      	ldr	r0, [pc, #180]	; (8001370 <MX_TIM1_Init+0x170>)
 80012bc:	f004 faa4 	bl	8005808 <HAL_TIMEx_MasterConfigSynchronization>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012c6:	f000 fa99 	bl	80017fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <MX_TIM1_Init+0x178>)
 80012cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d2:	2300      	movs	r3, #0
 80012d4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012d6:	2300      	movs	r3, #0
 80012d8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012ea:	2200      	movs	r2, #0
 80012ec:	4619      	mov	r1, r3
 80012ee:	4820      	ldr	r0, [pc, #128]	; (8001370 <MX_TIM1_Init+0x170>)
 80012f0:	f003 fb4e 	bl	8004990 <HAL_TIM_PWM_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80012fa:	f000 fa7f 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001302:	2204      	movs	r2, #4
 8001304:	4619      	mov	r1, r3
 8001306:	481a      	ldr	r0, [pc, #104]	; (8001370 <MX_TIM1_Init+0x170>)
 8001308:	f003 fb42 	bl	8004990 <HAL_TIM_PWM_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001312:	f000 fa73 	bl	80017fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800132a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800133c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001346:	2300      	movs	r3, #0
 8001348:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	4619      	mov	r1, r3
 8001352:	4807      	ldr	r0, [pc, #28]	; (8001370 <MX_TIM1_Init+0x170>)
 8001354:	f004 fada 	bl	800590c <HAL_TIMEx_ConfigBreakDeadTime>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800135e:	f000 fa4d 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001362:	4803      	ldr	r0, [pc, #12]	; (8001370 <MX_TIM1_Init+0x170>)
 8001364:	f000 fbc2 	bl	8001aec <HAL_TIM_MspPostInit>

}
 8001368:	bf00      	nop
 800136a:	3770      	adds	r7, #112	; 0x70
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000023c 	.word	0x2000023c
 8001374:	40012c00 	.word	0x40012c00
 8001378:	00010060 	.word	0x00010060

0800137c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08c      	sub	sp, #48	; 0x30
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	2224      	movs	r2, #36	; 0x24
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f005 ffb1 	bl	80072f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	463b      	mov	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <MX_TIM2_Init+0xa4>)
 800139c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_TIM2_Init+0xa4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <MX_TIM2_Init+0xa4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_TIM2_Init+0xa4>)
 80013b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_TIM2_Init+0xa4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_TIM2_Init+0xa4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013c2:	2303      	movs	r3, #3
 80013c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013ca:	2301      	movs	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013da:	2301      	movs	r3, #1
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	480c      	ldr	r0, [pc, #48]	; (8001420 <MX_TIM2_Init+0xa4>)
 80013ee:	f003 f81b 	bl	8004428 <HAL_TIM_Encoder_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80013f8:	f000 fa00 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001404:	463b      	mov	r3, r7
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_TIM2_Init+0xa4>)
 800140a:	f004 f9fd 	bl	8005808 <HAL_TIMEx_MasterConfigSynchronization>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001414:	f000 f9f2 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	3730      	adds	r7, #48	; 0x30
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000288 	.word	0x20000288

08001424 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08c      	sub	sp, #48	; 0x30
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	2224      	movs	r2, #36	; 0x24
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f005 ff5d 	bl	80072f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	463b      	mov	r3, r7
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001442:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <MX_TIM3_Init+0xa4>)
 8001444:	4a21      	ldr	r2, [pc, #132]	; (80014cc <MX_TIM3_Init+0xa8>)
 8001446:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001448:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <MX_TIM3_Init+0xa4>)
 800144a:	2200      	movs	r2, #0
 800144c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144e:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <MX_TIM3_Init+0xa4>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <MX_TIM3_Init+0xa4>)
 8001456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800145a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <MX_TIM3_Init+0xa4>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <MX_TIM3_Init+0xa4>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001468:	2303      	movs	r3, #3
 800146a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001470:	2301      	movs	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001480:	2301      	movs	r3, #1
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	4619      	mov	r1, r3
 8001492:	480d      	ldr	r0, [pc, #52]	; (80014c8 <MX_TIM3_Init+0xa4>)
 8001494:	f002 ffc8 	bl	8004428 <HAL_TIM_Encoder_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800149e:	f000 f9ad 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014aa:	463b      	mov	r3, r7
 80014ac:	4619      	mov	r1, r3
 80014ae:	4806      	ldr	r0, [pc, #24]	; (80014c8 <MX_TIM3_Init+0xa4>)
 80014b0:	f004 f9aa 	bl	8005808 <HAL_TIMEx_MasterConfigSynchronization>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80014ba:	f000 f99f 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	3730      	adds	r7, #48	; 0x30
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200002d4 	.word	0x200002d4
 80014cc:	40000400 	.word	0x40000400

080014d0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80014d4:	4b10      	ldr	r3, [pc, #64]	; (8001518 <MX_TIM16_Init+0x48>)
 80014d6:	4a11      	ldr	r2, [pc, #68]	; (800151c <MX_TIM16_Init+0x4c>)
 80014d8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 799;
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_TIM16_Init+0x48>)
 80014dc:	f240 321f 	movw	r2, #799	; 0x31f
 80014e0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <MX_TIM16_Init+0x48>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_TIM16_Init+0x48>)
 80014ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014ee:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_TIM16_Init+0x48>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_TIM16_Init+0x48>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_TIM16_Init+0x48>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_TIM16_Init+0x48>)
 8001504:	f002 fdd8 	bl	80040b8 <HAL_TIM_Base_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800150e:	f000 f975 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000320 	.word	0x20000320
 800151c:	40014400 	.word	0x40014400

08001520 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_TIM17_Init+0x44>)
 8001526:	4a10      	ldr	r2, [pc, #64]	; (8001568 <MX_TIM17_Init+0x48>)
 8001528:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 79;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_TIM17_Init+0x44>)
 800152c:	224f      	movs	r2, #79	; 0x4f
 800152e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_TIM17_Init+0x44>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_TIM17_Init+0x44>)
 8001538:	f240 32e7 	movw	r2, #999	; 0x3e7
 800153c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_TIM17_Init+0x44>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <MX_TIM17_Init+0x44>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_TIM17_Init+0x44>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001550:	4804      	ldr	r0, [pc, #16]	; (8001564 <MX_TIM17_Init+0x44>)
 8001552:	f002 fdb1 	bl	80040b8 <HAL_TIM_Base_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 800155c:	f000 f94e 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	2000036c 	.word	0x2000036c
 8001568:	40014800 	.word	0x40014800

0800156c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <MX_USART2_UART_Init+0x90>)
 8001572:	4a23      	ldr	r2, [pc, #140]	; (8001600 <MX_USART2_UART_Init+0x94>)
 8001574:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <MX_USART2_UART_Init+0x90>)
 8001578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800157c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800157e:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <MX_USART2_UART_Init+0x90>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001584:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <MX_USART2_UART_Init+0x90>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <MX_USART2_UART_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <MX_USART2_UART_Init+0x90>)
 8001592:	220c      	movs	r2, #12
 8001594:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001596:	4b19      	ldr	r3, [pc, #100]	; (80015fc <MX_USART2_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800159c:	4b17      	ldr	r3, [pc, #92]	; (80015fc <MX_USART2_UART_Init+0x90>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a2:	4b16      	ldr	r3, [pc, #88]	; (80015fc <MX_USART2_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <MX_USART2_UART_Init+0x90>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ae:	4b13      	ldr	r3, [pc, #76]	; (80015fc <MX_USART2_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b4:	4811      	ldr	r0, [pc, #68]	; (80015fc <MX_USART2_UART_Init+0x90>)
 80015b6:	f004 fab4 	bl	8005b22 <HAL_UART_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015c0:	f000 f91c 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c4:	2100      	movs	r1, #0
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <MX_USART2_UART_Init+0x90>)
 80015c8:	f005 f84c 	bl	8006664 <HAL_UARTEx_SetTxFifoThreshold>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015d2:	f000 f913 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d6:	2100      	movs	r1, #0
 80015d8:	4808      	ldr	r0, [pc, #32]	; (80015fc <MX_USART2_UART_Init+0x90>)
 80015da:	f005 f881 	bl	80066e0 <HAL_UARTEx_SetRxFifoThreshold>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015e4:	f000 f90a 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015e8:	4804      	ldr	r0, [pc, #16]	; (80015fc <MX_USART2_UART_Init+0x90>)
 80015ea:	f005 f802 	bl	80065f2 <HAL_UARTEx_DisableFifoMode>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015f4:	f000 f902 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200003b8 	.word	0x200003b8
 8001600:	40004400 	.word	0x40004400

08001604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <MX_GPIO_Init+0xa4>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4a22      	ldr	r2, [pc, #136]	; (80016a8 <MX_GPIO_Init+0xa4>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <MX_GPIO_Init+0xa4>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <MX_GPIO_Init+0xa4>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <MX_GPIO_Init+0xa4>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_GPIO_Init+0xa4>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001650:	4816      	ldr	r0, [pc, #88]	; (80016ac <MX_GPIO_Init+0xa8>)
 8001652:	f000 ff33 	bl	80024bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800165a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800165e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	4619      	mov	r1, r3
 800166a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166e:	f000 fda3 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001678:	2301      	movs	r3, #1
 800167a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	4619      	mov	r1, r3
 800168a:	4808      	ldr	r0, [pc, #32]	; (80016ac <MX_GPIO_Init+0xa8>)
 800168c:	f000 fd94 	bl	80021b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2100      	movs	r1, #0
 8001694:	2017      	movs	r0, #23
 8001696:	f000 fd5a 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800169a:	2017      	movs	r0, #23
 800169c:	f000 fd71 	bl	8002182 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a0:	bf00      	nop
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000
 80016ac:	48000400 	.word	0x48000400

080016b0 <BNO055_Init>:

/* USER CODE BEGIN 4 */

void BNO055_Init(){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af04      	add	r7, sp, #16
	HAL_Delay(700);
 80016b6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80016ba:	f000 fc4b 	bl	8001f54 <HAL_Delay>


	//Txbuff = 0x20;
	//HAL_I2C_Mem_Write(&hi2c1, 0x28 << 1, 0x3F, I2C_MEMADD_SIZE_8BIT, &Txbuff, 1, 100); //system trigger

	Txbuff = 0x00;
 80016be:	2300      	movs	r3, #0
 80016c0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x28 << 1, 0x3E, I2C_MEMADD_SIZE_8BIT, &Txbuff, 1, 100); //power mode
 80016c2:	2364      	movs	r3, #100	; 0x64
 80016c4:	9302      	str	r3, [sp, #8]
 80016c6:	2301      	movs	r3, #1
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2301      	movs	r3, #1
 80016d0:	223e      	movs	r2, #62	; 0x3e
 80016d2:	2150      	movs	r1, #80	; 0x50
 80016d4:	481d      	ldr	r0, [pc, #116]	; (800174c <BNO055_Init+0x9c>)
 80016d6:	f000 ffbb 	bl	8002650 <HAL_I2C_Mem_Write>

	Txbuff = 0x0C;
 80016da:	230c      	movs	r3, #12
 80016dc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x28 << 1, 0x3D, I2C_MEMADD_SIZE_8BIT, &Txbuff, 1, 100);//using Nine Degree of Freedom mode
 80016de:	2364      	movs	r3, #100	; 0x64
 80016e0:	9302      	str	r3, [sp, #8]
 80016e2:	2301      	movs	r3, #1
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	1dfb      	adds	r3, r7, #7
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2301      	movs	r3, #1
 80016ec:	223d      	movs	r2, #61	; 0x3d
 80016ee:	2150      	movs	r1, #80	; 0x50
 80016f0:	4816      	ldr	r0, [pc, #88]	; (800174c <BNO055_Init+0x9c>)
 80016f2:	f000 ffad 	bl	8002650 <HAL_I2C_Mem_Write>




	HAL_I2C_Mem_Read(&hi2c1, 0x28 << 1, 0x3A, I2C_MEMADD_SIZE_8BIT, &Rxbuff, 1, 100);
 80016f6:	2364      	movs	r3, #100	; 0x64
 80016f8:	9302      	str	r3, [sp, #8]
 80016fa:	2301      	movs	r3, #1
 80016fc:	9301      	str	r3, [sp, #4]
 80016fe:	1dbb      	adds	r3, r7, #6
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2301      	movs	r3, #1
 8001704:	223a      	movs	r2, #58	; 0x3a
 8001706:	2150      	movs	r1, #80	; 0x50
 8001708:	4810      	ldr	r0, [pc, #64]	; (800174c <BNO055_Init+0x9c>)
 800170a:	f001 f8b5 	bl	8002878 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, 0x28 << 1, 0x00, I2C_MEMADD_SIZE_8BIT, &Rxbuff, 1, 100);
 800170e:	2364      	movs	r3, #100	; 0x64
 8001710:	9302      	str	r3, [sp, #8]
 8001712:	2301      	movs	r3, #1
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	1dbb      	adds	r3, r7, #6
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2301      	movs	r3, #1
 800171c:	2200      	movs	r2, #0
 800171e:	2150      	movs	r1, #80	; 0x50
 8001720:	480a      	ldr	r0, [pc, #40]	; (800174c <BNO055_Init+0x9c>)
 8001722:	f001 f8a9 	bl	8002878 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, 0x28 << 1, 0x34, I2C_MEMADD_SIZE_8BIT, &Rxbuff, 1, 100);
 8001726:	2364      	movs	r3, #100	; 0x64
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2301      	movs	r3, #1
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	1dbb      	adds	r3, r7, #6
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2301      	movs	r3, #1
 8001734:	2234      	movs	r2, #52	; 0x34
 8001736:	2150      	movs	r1, #80	; 0x50
 8001738:	4804      	ldr	r0, [pc, #16]	; (800174c <BNO055_Init+0x9c>)
 800173a:	f001 f89d 	bl	8002878 <HAL_I2C_Mem_Read>


	//print_int(30, "testing");
	HAL_Delay(100);
 800173e:	2064      	movs	r0, #100	; 0x64
 8001740:	f000 fc08 	bl	8001f54 <HAL_Delay>


}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200001f0 	.word	0x200001f0

08001750 <user_tim1_pwm_setvalue>:


void user_tim1_pwm_setvalue(int16_t value1, int16_t value2)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	460a      	mov	r2, r1
 800175a:	80fb      	strh	r3, [r7, #6]
 800175c:	4613      	mov	r3, r2
 800175e:	80bb      	strh	r3, [r7, #4]
	value2 = (value2>1000)?1000:value2;

	value1 = (value1<-1000)?-1000:value1;
	value2 = (value2<-1000)?-1000:value2;
*/
	value1 = value1 + 1000;
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001766:	b29b      	uxth	r3, r3
 8001768:	80fb      	strh	r3, [r7, #6]
	value2 = value2 + 1000;
 800176a:	88bb      	ldrh	r3, [r7, #4]
 800176c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001770:	b29b      	uxth	r3, r3
 8001772:	80bb      	strh	r3, [r7, #4]


	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <user_tim1_pwm_setvalue+0xa4>)
 8001776:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value1;
 8001778:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800177c:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8001792:	f107 030c 	add.w	r3, r7, #12
 8001796:	2200      	movs	r2, #0
 8001798:	4619      	mov	r1, r3
 800179a:	4817      	ldr	r0, [pc, #92]	; (80017f8 <user_tim1_pwm_setvalue+0xa8>)
 800179c:	f003 f8f8 	bl	8004990 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017a0:	2100      	movs	r1, #0
 80017a2:	4815      	ldr	r0, [pc, #84]	; (80017f8 <user_tim1_pwm_setvalue+0xa8>)
 80017a4:	f002 fd40 	bl	8004228 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80017a8:	2100      	movs	r1, #0
 80017aa:	4813      	ldr	r0, [pc, #76]	; (80017f8 <user_tim1_pwm_setvalue+0xa8>)
 80017ac:	f003 ff78 	bl	80056a0 <HAL_TIMEx_PWMN_Start>

	sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <user_tim1_pwm_setvalue+0xa4>)
 80017b2:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value2;
 80017b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017b8:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	2204      	movs	r2, #4
 80017d4:	4619      	mov	r1, r3
 80017d6:	4808      	ldr	r0, [pc, #32]	; (80017f8 <user_tim1_pwm_setvalue+0xa8>)
 80017d8:	f003 f8da 	bl	8004990 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80017dc:	2104      	movs	r1, #4
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <user_tim1_pwm_setvalue+0xa8>)
 80017e0:	f002 fd22 	bl	8004228 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80017e4:	2104      	movs	r1, #4
 80017e6:	4804      	ldr	r0, [pc, #16]	; (80017f8 <user_tim1_pwm_setvalue+0xa8>)
 80017e8:	f003 ff5a 	bl	80056a0 <HAL_TIMEx_PWMN_Start>
}
 80017ec:	bf00      	nop
 80017ee:	3728      	adds	r7, #40	; 0x28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	00010060 	.word	0x00010060
 80017f8:	2000023c 	.word	0x2000023c

080017fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001800:	b672      	cpsid	i
}
 8001802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001804:	e7fe      	b.n	8001804 <Error_Handler+0x8>
	...

08001808 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_MspInit+0x44>)
 8001810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001812:	4a0e      	ldr	r2, [pc, #56]	; (800184c <HAL_MspInit+0x44>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6613      	str	r3, [r2, #96]	; 0x60
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_MspInit+0x44>)
 800181c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_MspInit+0x44>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <HAL_MspInit+0x44>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	6593      	str	r3, [r2, #88]	; 0x58
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_MspInit+0x44>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b09c      	sub	sp, #112	; 0x70
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001868:	f107 0318 	add.w	r3, r7, #24
 800186c:	2244      	movs	r2, #68	; 0x44
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f005 fd3e 	bl	80072f2 <memset>
  if(hi2c->Instance==I2C1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a2d      	ldr	r2, [pc, #180]	; (8001930 <HAL_I2C_MspInit+0xe0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d153      	bne.n	8001928 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001880:	2340      	movs	r3, #64	; 0x40
 8001882:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001884:	2300      	movs	r3, #0
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001888:	f107 0318 	add.w	r3, r7, #24
 800188c:	4618      	mov	r0, r3
 800188e:	f002 fa23 	bl	8003cd8 <HAL_RCCEx_PeriphCLKConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001898:	f7ff ffb0 	bl	80017fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	4b25      	ldr	r3, [pc, #148]	; (8001934 <HAL_I2C_MspInit+0xe4>)
 800189e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a0:	4a24      	ldr	r2, [pc, #144]	; (8001934 <HAL_I2C_MspInit+0xe4>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <HAL_I2C_MspInit+0xe4>)
 80018aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <HAL_I2C_MspInit+0xe4>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b8:	4a1e      	ldr	r2, [pc, #120]	; (8001934 <HAL_I2C_MspInit+0xe4>)
 80018ba:	f043 0302 	orr.w	r3, r3, #2
 80018be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c0:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <HAL_I2C_MspInit+0xe4>)
 80018c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d2:	2312      	movs	r3, #18
 80018d4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018de:	2304      	movs	r3, #4
 80018e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ec:	f000 fc64 	bl	80021b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f4:	2312      	movs	r3, #18
 80018f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001900:	2304      	movs	r3, #4
 8001902:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001908:	4619      	mov	r1, r3
 800190a:	480b      	ldr	r0, [pc, #44]	; (8001938 <HAL_I2C_MspInit+0xe8>)
 800190c:	f000 fc54 	bl	80021b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_I2C_MspInit+0xe4>)
 8001912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001914:	4a07      	ldr	r2, [pc, #28]	; (8001934 <HAL_I2C_MspInit+0xe4>)
 8001916:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800191a:	6593      	str	r3, [r2, #88]	; 0x58
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_I2C_MspInit+0xe4>)
 800191e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001928:	bf00      	nop
 800192a:	3770      	adds	r7, #112	; 0x70
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40005400 	.word	0x40005400
 8001934:	40021000 	.word	0x40021000
 8001938:	48000400 	.word	0x48000400

0800193c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a2b      	ldr	r2, [pc, #172]	; (80019f8 <HAL_TIM_Base_MspInit+0xbc>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d11c      	bne.n	8001988 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800194e:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_TIM_Base_MspInit+0xc0>)
 8001950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001952:	4a2a      	ldr	r2, [pc, #168]	; (80019fc <HAL_TIM_Base_MspInit+0xc0>)
 8001954:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001958:	6613      	str	r3, [r2, #96]	; 0x60
 800195a:	4b28      	ldr	r3, [pc, #160]	; (80019fc <HAL_TIM_Base_MspInit+0xc0>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	2019      	movs	r0, #25
 800196c:	f000 fbef 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001970:	2019      	movs	r0, #25
 8001972:	f000 fc06 	bl	8002182 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	201a      	movs	r0, #26
 800197c:	f000 fbe7 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001980:	201a      	movs	r0, #26
 8001982:	f000 fbfe 	bl	8002182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001986:	e032      	b.n	80019ee <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM16)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a1c      	ldr	r2, [pc, #112]	; (8001a00 <HAL_TIM_Base_MspInit+0xc4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d114      	bne.n	80019bc <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <HAL_TIM_Base_MspInit+0xc0>)
 8001994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001996:	4a19      	ldr	r2, [pc, #100]	; (80019fc <HAL_TIM_Base_MspInit+0xc0>)
 8001998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199c:	6613      	str	r3, [r2, #96]	; 0x60
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_TIM_Base_MspInit+0xc0>)
 80019a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	2019      	movs	r0, #25
 80019b0:	f000 fbcd 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019b4:	2019      	movs	r0, #25
 80019b6:	f000 fbe4 	bl	8002182 <HAL_NVIC_EnableIRQ>
}
 80019ba:	e018      	b.n	80019ee <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM17)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a10      	ldr	r2, [pc, #64]	; (8001a04 <HAL_TIM_Base_MspInit+0xc8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d113      	bne.n	80019ee <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_TIM_Base_MspInit+0xc0>)
 80019c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ca:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <HAL_TIM_Base_MspInit+0xc0>)
 80019cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d0:	6613      	str	r3, [r2, #96]	; 0x60
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_TIM_Base_MspInit+0xc0>)
 80019d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	201a      	movs	r0, #26
 80019e4:	f000 fbb3 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80019e8:	201a      	movs	r0, #26
 80019ea:	f000 fbca 	bl	8002182 <HAL_NVIC_EnableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40012c00 	.word	0x40012c00
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40014400 	.word	0x40014400
 8001a04:	40014800 	.word	0x40014800

08001a08 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a28:	d129      	bne.n	8001a7e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2e:	4a2d      	ldr	r2, [pc, #180]	; (8001ae4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6593      	str	r3, [r2, #88]	; 0x58
 8001a36:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	4a27      	ldr	r2, [pc, #156]	; (8001ae4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4e:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	4619      	mov	r1, r3
 8001a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a78:	f000 fb9e 	bl	80021b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a7c:	e02d      	b.n	8001ada <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM3)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d128      	bne.n	8001ada <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8c:	4a15      	ldr	r2, [pc, #84]	; (8001ae4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a8e:	f043 0302 	orr.w	r3, r3, #2
 8001a92:	6593      	str	r3, [r2, #88]	; 0x58
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa4:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001ab8:	2350      	movs	r3, #80	; 0x50
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad6:	f000 fb6f 	bl	80021b8 <HAL_GPIO_Init>
}
 8001ada:	bf00      	nop
 8001adc:	3730      	adds	r7, #48	; 0x30
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40000400 	.word	0x40000400

08001aec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <HAL_TIM_MspPostInit+0x68>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d11d      	bne.n	8001b4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_TIM_MspPostInit+0x6c>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <HAL_TIM_MspPostInit+0x6c>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_TIM_MspPostInit+0x6c>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001b26:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001b2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b38:	2306      	movs	r3, #6
 8001b3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	4619      	mov	r1, r3
 8001b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b46:	f000 fb37 	bl	80021b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40012c00 	.word	0x40012c00
 8001b58:	40021000 	.word	0x40021000

08001b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b09a      	sub	sp, #104	; 0x68
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b74:	f107 0310 	add.w	r3, r7, #16
 8001b78:	2244      	movs	r2, #68	; 0x44
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f005 fbb8 	bl	80072f2 <memset>
  if(huart->Instance==USART2)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1f      	ldr	r2, [pc, #124]	; (8001c04 <HAL_UART_MspInit+0xa8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d136      	bne.n	8001bfa <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 f89d 	bl	8003cd8 <HAL_RCCEx_PeriphCLKConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ba4:	f7ff fe2a 	bl	80017fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <HAL_UART_MspInit+0xac>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bac:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <HAL_UART_MspInit+0xac>)
 8001bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <HAL_UART_MspInit+0xac>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_UART_MspInit+0xac>)
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc4:	4a10      	ldr	r2, [pc, #64]	; (8001c08 <HAL_UART_MspInit+0xac>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_UART_MspInit+0xac>)
 8001bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001bd8:	230c      	movs	r3, #12
 8001bda:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001be8:	2307      	movs	r3, #7
 8001bea:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf6:	f000 fadf 	bl	80021b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bfa:	bf00      	nop
 8001bfc:	3768      	adds	r7, #104	; 0x68
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40004400 	.word	0x40004400
 8001c08:	40021000 	.word	0x40021000

08001c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <NMI_Handler+0x4>

08001c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <HardFault_Handler+0x4>

08001c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <MemManage_Handler+0x4>

08001c1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <BusFault_Handler+0x4>

08001c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <UsageFault_Handler+0x4>

08001c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c58:	f000 f95e 	bl	8001f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001c64:	2080      	movs	r0, #128	; 0x80
 8001c66:	f000 fc41 	bl	80024ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c74:	4803      	ldr	r0, [pc, #12]	; (8001c84 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001c76:	f002 fd0b 	bl	8004690 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001c7a:	4803      	ldr	r0, [pc, #12]	; (8001c88 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001c7c:	f002 fd08 	bl	8004690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	2000023c 	.word	0x2000023c
 8001c88:	20000320 	.word	0x20000320

08001c8c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c90:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001c92:	f002 fcfd 	bl	8004690 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001c96:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001c98:	f002 fcfa 	bl	8004690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	2000023c 	.word	0x2000023c
 8001ca4:	2000036c 	.word	0x2000036c

08001ca8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return 1;
 8001cac:	2301      	movs	r3, #1
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <_kill>:

int _kill(int pid, int sig)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cc2:	f005 fb69 	bl	8007398 <__errno>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2216      	movs	r2, #22
 8001cca:	601a      	str	r2, [r3, #0]
  return -1;
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_exit>:

void _exit (int status)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ffe7 	bl	8001cb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cea:	e7fe      	b.n	8001cea <_exit+0x12>

08001cec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	e00a      	b.n	8001d14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cfe:	f3af 8000 	nop.w
 8001d02:	4601      	mov	r1, r0
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	60ba      	str	r2, [r7, #8]
 8001d0a:	b2ca      	uxtb	r2, r1
 8001d0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	3301      	adds	r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	dbf0      	blt.n	8001cfe <_read+0x12>
  }

  return len;
 8001d1c:	687b      	ldr	r3, [r7, #4]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d4e:	605a      	str	r2, [r3, #4]
  return 0;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <_isatty>:

int _isatty(int file)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d66:	2301      	movs	r3, #1
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d98:	4a14      	ldr	r2, [pc, #80]	; (8001dec <_sbrk+0x5c>)
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <_sbrk+0x60>)
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <_sbrk+0x64>)
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <_sbrk+0x68>)
 8001db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d207      	bcs.n	8001dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc0:	f005 faea 	bl	8007398 <__errno>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	e009      	b.n	8001de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <_sbrk+0x64>)
 8001de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20008000 	.word	0x20008000
 8001df0:	00000400 	.word	0x00000400
 8001df4:	20000448 	.word	0x20000448
 8001df8:	200005a0 	.word	0x200005a0

08001dfc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <SystemInit+0x20>)
 8001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <SystemInit+0x20>)
 8001e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e20:	480d      	ldr	r0, [pc, #52]	; (8001e58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e24:	480d      	ldr	r0, [pc, #52]	; (8001e5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e26:	490e      	ldr	r1, [pc, #56]	; (8001e60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e28:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <LoopForever+0xe>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e2c:	e002      	b.n	8001e34 <LoopCopyDataInit>

08001e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e32:	3304      	adds	r3, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e38:	d3f9      	bcc.n	8001e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3a:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e3c:	4c0b      	ldr	r4, [pc, #44]	; (8001e6c <LoopForever+0x16>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e40:	e001      	b.n	8001e46 <LoopFillZerobss>

08001e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e44:	3204      	adds	r2, #4

08001e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e48:	d3fb      	bcc.n	8001e42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e4a:	f7ff ffd7 	bl	8001dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4e:	f005 faa9 	bl	80073a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e52:	f7ff f875 	bl	8000f40 <main>

08001e56 <LoopForever>:

LoopForever:
    b LoopForever
 8001e56:	e7fe      	b.n	8001e56 <LoopForever>
  ldr   r0, =_estack
 8001e58:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e60:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e64:	080095bc 	.word	0x080095bc
  ldr r2, =_sbss
 8001e68:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e6c:	2000059c 	.word	0x2000059c

08001e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e70:	e7fe      	b.n	8001e70 <ADC1_2_IRQHandler>

08001e72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	f000 f95b 	bl	8002138 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e82:	2001      	movs	r0, #1
 8001e84:	f000 f80e 	bl	8001ea4 <HAL_InitTick>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	71fb      	strb	r3, [r7, #7]
 8001e92:	e001      	b.n	8001e98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e94:	f7ff fcb8 	bl	8001808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e98:	79fb      	ldrb	r3, [r7, #7]

}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001eb0:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <HAL_InitTick+0x68>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d022      	beq.n	8001efe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001eb8:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <HAL_InitTick+0x6c>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <HAL_InitTick+0x68>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ec4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 f966 	bl	800219e <HAL_SYSTICK_Config>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10f      	bne.n	8001ef8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b0f      	cmp	r3, #15
 8001edc:	d809      	bhi.n	8001ef2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee6:	f000 f932 	bl	800214e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <HAL_InitTick+0x70>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	e007      	b.n	8001f02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	e004      	b.n	8001f02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	e001      	b.n	8001f02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000004 	.word	0x20000004

08001f18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_IncTick+0x1c>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_IncTick+0x20>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4413      	add	r3, r2
 8001f26:	4a03      	ldr	r2, [pc, #12]	; (8001f34 <HAL_IncTick+0x1c>)
 8001f28:	6013      	str	r3, [r2, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	2000044c 	.word	0x2000044c
 8001f38:	20000008 	.word	0x20000008

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	2000044c 	.word	0x2000044c

08001f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff ffee 	bl	8001f3c <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d004      	beq.n	8001f78 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_Delay+0x40>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4413      	add	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f78:	bf00      	nop
 8001f7a:	f7ff ffdf 	bl	8001f3c <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d8f7      	bhi.n	8001f7a <HAL_Delay+0x26>
  {
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	bf00      	nop
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000008 	.word	0x20000008

08001f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0307 	and.w	r3, r3, #7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	2b00      	cmp	r3, #0
 800200c:	db0b      	blt.n	8002026 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	f003 021f 	and.w	r2, r3, #31
 8002014:	4907      	ldr	r1, [pc, #28]	; (8002034 <__NVIC_EnableIRQ+0x38>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	2001      	movs	r0, #1
 800201e:	fa00 f202 	lsl.w	r2, r0, r2
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000e100 	.word	0xe000e100

08002038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002048:	2b00      	cmp	r3, #0
 800204a:	db0a      	blt.n	8002062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	490c      	ldr	r1, [pc, #48]	; (8002084 <__NVIC_SetPriority+0x4c>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	0112      	lsls	r2, r2, #4
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	440b      	add	r3, r1
 800205c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002060:	e00a      	b.n	8002078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4908      	ldr	r1, [pc, #32]	; (8002088 <__NVIC_SetPriority+0x50>)
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	3b04      	subs	r3, #4
 8002070:	0112      	lsls	r2, r2, #4
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	440b      	add	r3, r1
 8002076:	761a      	strb	r2, [r3, #24]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000e100 	.word	0xe000e100
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f1c3 0307 	rsb	r3, r3, #7
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	bf28      	it	cs
 80020aa:	2304      	movcs	r3, #4
 80020ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3304      	adds	r3, #4
 80020b2:	2b06      	cmp	r3, #6
 80020b4:	d902      	bls.n	80020bc <NVIC_EncodePriority+0x30>
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3b03      	subs	r3, #3
 80020ba:	e000      	b.n	80020be <NVIC_EncodePriority+0x32>
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	f04f 32ff 	mov.w	r2, #4294967295
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d4:	f04f 31ff 	mov.w	r1, #4294967295
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	43d9      	mvns	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	4313      	orrs	r3, r2
         );
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002104:	d301      	bcc.n	800210a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002106:	2301      	movs	r3, #1
 8002108:	e00f      	b.n	800212a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210a:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <SysTick_Config+0x40>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002112:	210f      	movs	r1, #15
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
 8002118:	f7ff ff8e 	bl	8002038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <SysTick_Config+0x40>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002122:	4b04      	ldr	r3, [pc, #16]	; (8002134 <SysTick_Config+0x40>)
 8002124:	2207      	movs	r2, #7
 8002126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	e000e010 	.word	0xe000e010

08002138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff29 	bl	8001f98 <__NVIC_SetPriorityGrouping>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800215c:	f7ff ff40 	bl	8001fe0 <__NVIC_GetPriorityGrouping>
 8002160:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	6978      	ldr	r0, [r7, #20]
 8002168:	f7ff ff90 	bl	800208c <NVIC_EncodePriority>
 800216c:	4602      	mov	r2, r0
 800216e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff5f 	bl	8002038 <__NVIC_SetPriority>
}
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff33 	bl	8001ffc <__NVIC_EnableIRQ>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ffa4 	bl	80020f4 <SysTick_Config>
 80021ac:	4603      	mov	r3, r0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021c6:	e15a      	b.n	800247e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2101      	movs	r1, #1
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 814c 	beq.w	8002478 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d005      	beq.n	80021f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d130      	bne.n	800225a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800222e:	2201      	movs	r2, #1
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	f003 0201 	and.w	r2, r3, #1
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b03      	cmp	r3, #3
 8002264:	d017      	beq.n	8002296 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d123      	bne.n	80022ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	08da      	lsrs	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3208      	adds	r2, #8
 80022aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	220f      	movs	r2, #15
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	08da      	lsrs	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3208      	adds	r2, #8
 80022e4:	6939      	ldr	r1, [r7, #16]
 80022e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	2203      	movs	r2, #3
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0203 	and.w	r2, r3, #3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80a6 	beq.w	8002478 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232c:	4b5b      	ldr	r3, [pc, #364]	; (800249c <HAL_GPIO_Init+0x2e4>)
 800232e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002330:	4a5a      	ldr	r2, [pc, #360]	; (800249c <HAL_GPIO_Init+0x2e4>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6613      	str	r3, [r2, #96]	; 0x60
 8002338:	4b58      	ldr	r3, [pc, #352]	; (800249c <HAL_GPIO_Init+0x2e4>)
 800233a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002344:	4a56      	ldr	r2, [pc, #344]	; (80024a0 <HAL_GPIO_Init+0x2e8>)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	220f      	movs	r2, #15
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800236e:	d01f      	beq.n	80023b0 <HAL_GPIO_Init+0x1f8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a4c      	ldr	r2, [pc, #304]	; (80024a4 <HAL_GPIO_Init+0x2ec>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d019      	beq.n	80023ac <HAL_GPIO_Init+0x1f4>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a4b      	ldr	r2, [pc, #300]	; (80024a8 <HAL_GPIO_Init+0x2f0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d013      	beq.n	80023a8 <HAL_GPIO_Init+0x1f0>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a4a      	ldr	r2, [pc, #296]	; (80024ac <HAL_GPIO_Init+0x2f4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d00d      	beq.n	80023a4 <HAL_GPIO_Init+0x1ec>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a49      	ldr	r2, [pc, #292]	; (80024b0 <HAL_GPIO_Init+0x2f8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d007      	beq.n	80023a0 <HAL_GPIO_Init+0x1e8>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a48      	ldr	r2, [pc, #288]	; (80024b4 <HAL_GPIO_Init+0x2fc>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d101      	bne.n	800239c <HAL_GPIO_Init+0x1e4>
 8002398:	2305      	movs	r3, #5
 800239a:	e00a      	b.n	80023b2 <HAL_GPIO_Init+0x1fa>
 800239c:	2306      	movs	r3, #6
 800239e:	e008      	b.n	80023b2 <HAL_GPIO_Init+0x1fa>
 80023a0:	2304      	movs	r3, #4
 80023a2:	e006      	b.n	80023b2 <HAL_GPIO_Init+0x1fa>
 80023a4:	2303      	movs	r3, #3
 80023a6:	e004      	b.n	80023b2 <HAL_GPIO_Init+0x1fa>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e002      	b.n	80023b2 <HAL_GPIO_Init+0x1fa>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <HAL_GPIO_Init+0x1fa>
 80023b0:	2300      	movs	r3, #0
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	f002 0203 	and.w	r2, r2, #3
 80023b8:	0092      	lsls	r2, r2, #2
 80023ba:	4093      	lsls	r3, r2
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c2:	4937      	ldr	r1, [pc, #220]	; (80024a0 <HAL_GPIO_Init+0x2e8>)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	3302      	adds	r3, #2
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023d0:	4b39      	ldr	r3, [pc, #228]	; (80024b8 <HAL_GPIO_Init+0x300>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023f4:	4a30      	ldr	r2, [pc, #192]	; (80024b8 <HAL_GPIO_Init+0x300>)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023fa:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <HAL_GPIO_Init+0x300>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800241e:	4a26      	ldr	r2, [pc, #152]	; (80024b8 <HAL_GPIO_Init+0x300>)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002424:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <HAL_GPIO_Init+0x300>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	43db      	mvns	r3, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002448:	4a1b      	ldr	r2, [pc, #108]	; (80024b8 <HAL_GPIO_Init+0x300>)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <HAL_GPIO_Init+0x300>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	43db      	mvns	r3, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002472:	4a11      	ldr	r2, [pc, #68]	; (80024b8 <HAL_GPIO_Init+0x300>)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	3301      	adds	r3, #1
 800247c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	f47f ae9d 	bne.w	80021c8 <HAL_GPIO_Init+0x10>
  }
}
 800248e:	bf00      	nop
 8002490:	bf00      	nop
 8002492:	371c      	adds	r7, #28
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40021000 	.word	0x40021000
 80024a0:	40010000 	.word	0x40010000
 80024a4:	48000400 	.word	0x48000400
 80024a8:	48000800 	.word	0x48000800
 80024ac:	48000c00 	.word	0x48000c00
 80024b0:	48001000 	.word	0x48001000
 80024b4:	48001400 	.word	0x48001400
 80024b8:	40010400 	.word	0x40010400

080024bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
 80024c8:	4613      	mov	r3, r2
 80024ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024cc:	787b      	ldrb	r3, [r7, #1]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024d8:	e002      	b.n	80024e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d006      	beq.n	8002510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002502:	4a05      	ldr	r2, [pc, #20]	; (8002518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f806 	bl	800251c <HAL_GPIO_EXTI_Callback>
  }
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40010400 	.word	0x40010400

0800251c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e081      	b.n	8002648 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d106      	bne.n	800255e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff f979 	bl	8001850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2224      	movs	r2, #36	; 0x24
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002582:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002592:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d107      	bne.n	80025ac <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	e006      	b.n	80025ba <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d104      	bne.n	80025cc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025ca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025de:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025ee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69d9      	ldr	r1, [r3, #28]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1a      	ldr	r2, [r3, #32]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	4608      	mov	r0, r1
 800265a:	4611      	mov	r1, r2
 800265c:	461a      	mov	r2, r3
 800265e:	4603      	mov	r3, r0
 8002660:	817b      	strh	r3, [r7, #10]
 8002662:	460b      	mov	r3, r1
 8002664:	813b      	strh	r3, [r7, #8]
 8002666:	4613      	mov	r3, r2
 8002668:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b20      	cmp	r3, #32
 8002674:	f040 80f9 	bne.w	800286a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <HAL_I2C_Mem_Write+0x34>
 800267e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800268a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0ed      	b.n	800286c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_I2C_Mem_Write+0x4e>
 800269a:	2302      	movs	r3, #2
 800269c:	e0e6      	b.n	800286c <HAL_I2C_Mem_Write+0x21c>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026a6:	f7ff fc49 	bl	8001f3c <HAL_GetTick>
 80026aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2319      	movs	r3, #25
 80026b2:	2201      	movs	r2, #1
 80026b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 fac3 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0d1      	b.n	800286c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2221      	movs	r2, #33	; 0x21
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2240      	movs	r2, #64	; 0x40
 80026d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a3a      	ldr	r2, [r7, #32]
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026f0:	88f8      	ldrh	r0, [r7, #6]
 80026f2:	893a      	ldrh	r2, [r7, #8]
 80026f4:	8979      	ldrh	r1, [r7, #10]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	4603      	mov	r3, r0
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f9d3 	bl	8002aac <I2C_RequestMemoryWrite>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0a9      	b.n	800286c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271c:	b29b      	uxth	r3, r3
 800271e:	2bff      	cmp	r3, #255	; 0xff
 8002720:	d90e      	bls.n	8002740 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	22ff      	movs	r2, #255	; 0xff
 8002726:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272c:	b2da      	uxtb	r2, r3
 800272e:	8979      	ldrh	r1, [r7, #10]
 8002730:	2300      	movs	r3, #0
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 fc2b 	bl	8002f94 <I2C_TransferConfig>
 800273e:	e00f      	b.n	8002760 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	b2da      	uxtb	r2, r3
 8002750:	8979      	ldrh	r1, [r7, #10]
 8002752:	2300      	movs	r3, #0
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fc1a 	bl	8002f94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 faad 	bl	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e07b      	b.n	800286c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	781a      	ldrb	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d034      	beq.n	8002818 <HAL_I2C_Mem_Write+0x1c8>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d130      	bne.n	8002818 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	2200      	movs	r2, #0
 80027be:	2180      	movs	r1, #128	; 0x80
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fa3f 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e04d      	b.n	800286c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2bff      	cmp	r3, #255	; 0xff
 80027d8:	d90e      	bls.n	80027f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	22ff      	movs	r2, #255	; 0xff
 80027de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	8979      	ldrh	r1, [r7, #10]
 80027e8:	2300      	movs	r3, #0
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fbcf 	bl	8002f94 <I2C_TransferConfig>
 80027f6:	e00f      	b.n	8002818 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	b2da      	uxtb	r2, r3
 8002808:	8979      	ldrh	r1, [r7, #10]
 800280a:	2300      	movs	r3, #0
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 fbbe 	bl	8002f94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d19e      	bne.n	8002760 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 fa8c 	bl	8002d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e01a      	b.n	800286c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2220      	movs	r2, #32
 800283c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <HAL_I2C_Mem_Write+0x224>)
 800284a:	400b      	ands	r3, r1
 800284c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e000      	b.n	800286c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800286a:	2302      	movs	r3, #2
  }
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	fe00e800 	.word	0xfe00e800

08002878 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	4608      	mov	r0, r1
 8002882:	4611      	mov	r1, r2
 8002884:	461a      	mov	r2, r3
 8002886:	4603      	mov	r3, r0
 8002888:	817b      	strh	r3, [r7, #10]
 800288a:	460b      	mov	r3, r1
 800288c:	813b      	strh	r3, [r7, #8]
 800288e:	4613      	mov	r3, r2
 8002890:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b20      	cmp	r3, #32
 800289c:	f040 80fd 	bne.w	8002a9a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_I2C_Mem_Read+0x34>
 80028a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0f1      	b.n	8002a9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_I2C_Mem_Read+0x4e>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e0ea      	b.n	8002a9c <HAL_I2C_Mem_Read+0x224>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028ce:	f7ff fb35 	bl	8001f3c <HAL_GetTick>
 80028d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	2319      	movs	r3, #25
 80028da:	2201      	movs	r2, #1
 80028dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f9af 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0d5      	b.n	8002a9c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2222      	movs	r2, #34	; 0x22
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2240      	movs	r2, #64	; 0x40
 80028fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a3a      	ldr	r2, [r7, #32]
 800290a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002910:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002918:	88f8      	ldrh	r0, [r7, #6]
 800291a:	893a      	ldrh	r2, [r7, #8]
 800291c:	8979      	ldrh	r1, [r7, #10]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	4603      	mov	r3, r0
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f913 	bl	8002b54 <I2C_RequestMemoryRead>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0ad      	b.n	8002a9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	2bff      	cmp	r3, #255	; 0xff
 8002948:	d90e      	bls.n	8002968 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	22ff      	movs	r2, #255	; 0xff
 800294e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002954:	b2da      	uxtb	r2, r3
 8002956:	8979      	ldrh	r1, [r7, #10]
 8002958:	4b52      	ldr	r3, [pc, #328]	; (8002aa4 <HAL_I2C_Mem_Read+0x22c>)
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 fb17 	bl	8002f94 <I2C_TransferConfig>
 8002966:	e00f      	b.n	8002988 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002976:	b2da      	uxtb	r2, r3
 8002978:	8979      	ldrh	r1, [r7, #10]
 800297a:	4b4a      	ldr	r3, [pc, #296]	; (8002aa4 <HAL_I2C_Mem_Read+0x22c>)
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 fb06 	bl	8002f94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298e:	2200      	movs	r2, #0
 8002990:	2104      	movs	r1, #4
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f956 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e07c      	b.n	8002a9c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d034      	beq.n	8002a48 <HAL_I2C_Mem_Read+0x1d0>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d130      	bne.n	8002a48 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	2200      	movs	r2, #0
 80029ee:	2180      	movs	r1, #128	; 0x80
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f927 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e04d      	b.n	8002a9c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2bff      	cmp	r3, #255	; 0xff
 8002a08:	d90e      	bls.n	8002a28 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	22ff      	movs	r2, #255	; 0xff
 8002a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	8979      	ldrh	r1, [r7, #10]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 fab7 	bl	8002f94 <I2C_TransferConfig>
 8002a26:	e00f      	b.n	8002a48 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	8979      	ldrh	r1, [r7, #10]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 faa6 	bl	8002f94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d19a      	bne.n	8002988 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f974 	bl	8002d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e01a      	b.n	8002a9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_I2C_Mem_Read+0x230>)
 8002a7a:	400b      	ands	r3, r1
 8002a7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e000      	b.n	8002a9c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a9a:	2302      	movs	r3, #2
  }
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	80002400 	.word	0x80002400
 8002aa8:	fe00e800 	.word	0xfe00e800

08002aac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	4608      	mov	r0, r1
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4603      	mov	r3, r0
 8002abc:	817b      	strh	r3, [r7, #10]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	813b      	strh	r3, [r7, #8]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	8979      	ldrh	r1, [r7, #10]
 8002acc:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <I2C_RequestMemoryWrite+0xa4>)
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fa5d 	bl	8002f94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	69b9      	ldr	r1, [r7, #24]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f8f0 	bl	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e02c      	b.n	8002b48 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d105      	bne.n	8002b00 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002af4:	893b      	ldrh	r3, [r7, #8]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
 8002afe:	e015      	b.n	8002b2c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b00:	893b      	ldrh	r3, [r7, #8]
 8002b02:	0a1b      	lsrs	r3, r3, #8
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	69b9      	ldr	r1, [r7, #24]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f8d6 	bl	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e012      	b.n	8002b48 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b22:	893b      	ldrh	r3, [r7, #8]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	2200      	movs	r2, #0
 8002b34:	2180      	movs	r1, #128	; 0x80
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f884 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	80002000 	.word	0x80002000

08002b54 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	4608      	mov	r0, r1
 8002b5e:	4611      	mov	r1, r2
 8002b60:	461a      	mov	r2, r3
 8002b62:	4603      	mov	r3, r0
 8002b64:	817b      	strh	r3, [r7, #10]
 8002b66:	460b      	mov	r3, r1
 8002b68:	813b      	strh	r3, [r7, #8]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	8979      	ldrh	r1, [r7, #10]
 8002b74:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <I2C_RequestMemoryRead+0xa4>)
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fa0a 	bl	8002f94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	69b9      	ldr	r1, [r7, #24]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f89d 	bl	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e02c      	b.n	8002bee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d105      	bne.n	8002ba6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b9a:	893b      	ldrh	r3, [r7, #8]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ba4:	e015      	b.n	8002bd2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ba6:	893b      	ldrh	r3, [r7, #8]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	69b9      	ldr	r1, [r7, #24]
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f883 	bl	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e012      	b.n	8002bee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc8:	893b      	ldrh	r3, [r7, #8]
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2140      	movs	r1, #64	; 0x40
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f831 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	80002000 	.word	0x80002000

08002bfc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d103      	bne.n	8002c1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2200      	movs	r2, #0
 8002c18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d007      	beq.n	8002c38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	619a      	str	r2, [r3, #24]
  }
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c54:	e022      	b.n	8002c9c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5c:	d01e      	beq.n	8002c9c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5e:	f7ff f96d 	bl	8001f3c <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d302      	bcc.n	8002c74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d113      	bne.n	8002c9c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	f043 0220 	orr.w	r2, r3, #32
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e00f      	b.n	8002cbc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d0cd      	beq.n	8002c56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cd0:	e02c      	b.n	8002d2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f870 	bl	8002dbc <I2C_IsErrorOccurred>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e02a      	b.n	8002d3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d01e      	beq.n	8002d2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cee:	f7ff f925 	bl	8001f3c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d302      	bcc.n	8002d04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d113      	bne.n	8002d2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d08:	f043 0220 	orr.w	r2, r3, #32
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e007      	b.n	8002d3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d1cb      	bne.n	8002cd2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d50:	e028      	b.n	8002da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f830 	bl	8002dbc <I2C_IsErrorOccurred>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e026      	b.n	8002db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d66:	f7ff f8e9 	bl	8001f3c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d302      	bcc.n	8002d7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d113      	bne.n	8002da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d80:	f043 0220 	orr.w	r2, r3, #32
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e007      	b.n	8002db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d1cf      	bne.n	8002d52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	; 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d075      	beq.n	8002ed4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2210      	movs	r2, #16
 8002dee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002df0:	e056      	b.n	8002ea0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d052      	beq.n	8002ea0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dfa:	f7ff f89f 	bl	8001f3c <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d302      	bcc.n	8002e10 <I2C_IsErrorOccurred+0x54>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d147      	bne.n	8002ea0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e32:	d12e      	bne.n	8002e92 <I2C_IsErrorOccurred+0xd6>
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e3a:	d02a      	beq.n	8002e92 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d027      	beq.n	8002e92 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e50:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e52:	f7ff f873 	bl	8001f3c <HAL_GetTick>
 8002e56:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e58:	e01b      	b.n	8002e92 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e5a:	f7ff f86f 	bl	8001f3c <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b19      	cmp	r3, #25
 8002e66:	d914      	bls.n	8002e92 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d1dc      	bne.n	8002e5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	d003      	beq.n	8002eb6 <I2C_IsErrorOccurred+0xfa>
 8002eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d09d      	beq.n	8002df2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00b      	beq.n	8002efe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ef6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	f043 0308 	orr.w	r3, r3, #8
 8002f0e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	f043 0302 	orr.w	r3, r3, #2
 8002f30:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01c      	beq.n	8002f84 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f7ff fe56 	bl	8002bfc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6859      	ldr	r1, [r3, #4]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <I2C_IsErrorOccurred+0x1d4>)
 8002f5c:	400b      	ands	r3, r1
 8002f5e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3728      	adds	r7, #40	; 0x28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	fe00e800 	.word	0xfe00e800

08002f94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	817b      	strh	r3, [r7, #10]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fa6:	897b      	ldrh	r3, [r7, #10]
 8002fa8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fac:	7a7b      	ldrb	r3, [r7, #9]
 8002fae:	041b      	lsls	r3, r3, #16
 8002fb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fb4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fc2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	0d5b      	lsrs	r3, r3, #21
 8002fce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002fd2:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <I2C_TransferConfig+0x60>)
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	ea02 0103 	and.w	r1, r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fe6:	bf00      	nop
 8002fe8:	371c      	adds	r7, #28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	03ff63ff 	.word	0x03ff63ff

08002ff8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b20      	cmp	r3, #32
 800300c:	d138      	bne.n	8003080 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003018:	2302      	movs	r3, #2
 800301a:	e032      	b.n	8003082 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2224      	movs	r2, #36	; 0x24
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800304a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6819      	ldr	r1, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	e000      	b.n	8003082 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
  }
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d139      	bne.n	8003118 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e033      	b.n	800311a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2224      	movs	r2, #36	; 0x24
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	e000      	b.n	800311a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003118:	2302      	movs	r3, #2
  }
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d141      	bne.n	80031ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003136:	4b4b      	ldr	r3, [pc, #300]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800313e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003142:	d131      	bne.n	80031a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003144:	4b47      	ldr	r3, [pc, #284]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800314a:	4a46      	ldr	r2, [pc, #280]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800314c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003150:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003154:	4b43      	ldr	r3, [pc, #268]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800315c:	4a41      	ldr	r2, [pc, #260]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003162:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003164:	4b40      	ldr	r3, [pc, #256]	; (8003268 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2232      	movs	r2, #50	; 0x32
 800316a:	fb02 f303 	mul.w	r3, r2, r3
 800316e:	4a3f      	ldr	r2, [pc, #252]	; (800326c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	0c9b      	lsrs	r3, r3, #18
 8003176:	3301      	adds	r3, #1
 8003178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800317a:	e002      	b.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3b01      	subs	r3, #1
 8003180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003182:	4b38      	ldr	r3, [pc, #224]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318e:	d102      	bne.n	8003196 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f2      	bne.n	800317c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003196:	4b33      	ldr	r3, [pc, #204]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a2:	d158      	bne.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e057      	b.n	8003258 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031a8:	4b2e      	ldr	r3, [pc, #184]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ae:	4a2d      	ldr	r2, [pc, #180]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031b8:	e04d      	b.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c0:	d141      	bne.n	8003246 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031c2:	4b28      	ldr	r3, [pc, #160]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d131      	bne.n	8003234 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031d0:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031d6:	4a23      	ldr	r2, [pc, #140]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031e0:	4b20      	ldr	r3, [pc, #128]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031e8:	4a1e      	ldr	r2, [pc, #120]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2232      	movs	r2, #50	; 0x32
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	4a1c      	ldr	r2, [pc, #112]	; (800326c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	0c9b      	lsrs	r3, r3, #18
 8003202:	3301      	adds	r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003206:	e002      	b.n	800320e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3b01      	subs	r3, #1
 800320c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800320e:	4b15      	ldr	r3, [pc, #84]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321a:	d102      	bne.n	8003222 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f2      	bne.n	8003208 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003222:	4b10      	ldr	r3, [pc, #64]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322e:	d112      	bne.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e011      	b.n	8003258 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800323a:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003240:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003244:	e007      	b.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003246:	4b07      	ldr	r3, [pc, #28]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800324e:	4a05      	ldr	r2, [pc, #20]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003250:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003254:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	40007000 	.word	0x40007000
 8003268:	20000000 	.word	0x20000000
 800326c:	431bde83 	.word	0x431bde83

08003270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e306      	b.n	8003890 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d075      	beq.n	800337a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800328e:	4b97      	ldr	r3, [pc, #604]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003298:	4b94      	ldr	r3, [pc, #592]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	2b0c      	cmp	r3, #12
 80032a6:	d102      	bne.n	80032ae <HAL_RCC_OscConfig+0x3e>
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d002      	beq.n	80032b4 <HAL_RCC_OscConfig+0x44>
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d10b      	bne.n	80032cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	4b8d      	ldr	r3, [pc, #564]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d05b      	beq.n	8003378 <HAL_RCC_OscConfig+0x108>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d157      	bne.n	8003378 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e2e1      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d4:	d106      	bne.n	80032e4 <HAL_RCC_OscConfig+0x74>
 80032d6:	4b85      	ldr	r3, [pc, #532]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a84      	ldr	r2, [pc, #528]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 80032dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	e01d      	b.n	8003320 <HAL_RCC_OscConfig+0xb0>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032ec:	d10c      	bne.n	8003308 <HAL_RCC_OscConfig+0x98>
 80032ee:	4b7f      	ldr	r3, [pc, #508]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a7e      	ldr	r2, [pc, #504]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 80032f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	4b7c      	ldr	r3, [pc, #496]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a7b      	ldr	r2, [pc, #492]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e00b      	b.n	8003320 <HAL_RCC_OscConfig+0xb0>
 8003308:	4b78      	ldr	r3, [pc, #480]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a77      	ldr	r2, [pc, #476]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 800330e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	4b75      	ldr	r3, [pc, #468]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a74      	ldr	r2, [pc, #464]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 800331a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800331e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d013      	beq.n	8003350 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe fe08 	bl	8001f3c <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003330:	f7fe fe04 	bl	8001f3c <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	; 0x64
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e2a6      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003342:	4b6a      	ldr	r3, [pc, #424]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0xc0>
 800334e:	e014      	b.n	800337a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fe fdf4 	bl	8001f3c <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003358:	f7fe fdf0 	bl	8001f3c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	; 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e292      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800336a:	4b60      	ldr	r3, [pc, #384]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0xe8>
 8003376:	e000      	b.n	800337a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d075      	beq.n	8003472 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003386:	4b59      	ldr	r3, [pc, #356]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003390:	4b56      	ldr	r3, [pc, #344]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2b0c      	cmp	r3, #12
 800339e:	d102      	bne.n	80033a6 <HAL_RCC_OscConfig+0x136>
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d002      	beq.n	80033ac <HAL_RCC_OscConfig+0x13c>
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d11f      	bne.n	80033ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033ac:	4b4f      	ldr	r3, [pc, #316]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_RCC_OscConfig+0x154>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e265      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c4:	4b49      	ldr	r3, [pc, #292]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	4946      	ldr	r1, [pc, #280]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033d8:	4b45      	ldr	r3, [pc, #276]	; (80034f0 <HAL_RCC_OscConfig+0x280>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe fd61 	bl	8001ea4 <HAL_InitTick>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d043      	beq.n	8003470 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e251      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d023      	beq.n	800343c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f4:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a3c      	ldr	r2, [pc, #240]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 80033fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fe fd9c 	bl	8001f3c <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003408:	f7fe fd98 	bl	8001f3c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e23a      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800341a:	4b34      	ldr	r3, [pc, #208]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003426:	4b31      	ldr	r3, [pc, #196]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	061b      	lsls	r3, r3, #24
 8003434:	492d      	ldr	r1, [pc, #180]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]
 800343a:	e01a      	b.n	8003472 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343c:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a2a      	ldr	r2, [pc, #168]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 8003442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fe fd78 	bl	8001f3c <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003450:	f7fe fd74 	bl	8001f3c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e216      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003462:	4b22      	ldr	r3, [pc, #136]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x1e0>
 800346e:	e000      	b.n	8003472 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003470:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d041      	beq.n	8003502 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01c      	beq.n	80034c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003486:	4b19      	ldr	r3, [pc, #100]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 8003488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800348c:	4a17      	ldr	r2, [pc, #92]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003496:	f7fe fd51 	bl	8001f3c <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800349e:	f7fe fd4d 	bl	8001f3c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e1ef      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034b0:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 80034b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0ef      	beq.n	800349e <HAL_RCC_OscConfig+0x22e>
 80034be:	e020      	b.n	8003502 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c0:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 80034c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c6:	4a09      	ldr	r2, [pc, #36]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fe fd34 	bl	8001f3c <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034d6:	e00d      	b.n	80034f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d8:	f7fe fd30 	bl	8001f3c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d906      	bls.n	80034f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e1d2      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
 80034f0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034f4:	4b8c      	ldr	r3, [pc, #560]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 80034f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1ea      	bne.n	80034d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 80a6 	beq.w	800365c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003510:	2300      	movs	r3, #0
 8003512:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003514:	4b84      	ldr	r3, [pc, #528]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 8003516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_OscConfig+0x2b4>
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <HAL_RCC_OscConfig+0x2b6>
 8003524:	2300      	movs	r3, #0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00d      	beq.n	8003546 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352a:	4b7f      	ldr	r3, [pc, #508]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352e:	4a7e      	ldr	r2, [pc, #504]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 8003530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003534:	6593      	str	r3, [r2, #88]	; 0x58
 8003536:	4b7c      	ldr	r3, [pc, #496]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 8003538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003542:	2301      	movs	r3, #1
 8003544:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003546:	4b79      	ldr	r3, [pc, #484]	; (800372c <HAL_RCC_OscConfig+0x4bc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354e:	2b00      	cmp	r3, #0
 8003550:	d118      	bne.n	8003584 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003552:	4b76      	ldr	r3, [pc, #472]	; (800372c <HAL_RCC_OscConfig+0x4bc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a75      	ldr	r2, [pc, #468]	; (800372c <HAL_RCC_OscConfig+0x4bc>)
 8003558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800355c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355e:	f7fe fced 	bl	8001f3c <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003566:	f7fe fce9 	bl	8001f3c <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e18b      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003578:	4b6c      	ldr	r3, [pc, #432]	; (800372c <HAL_RCC_OscConfig+0x4bc>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0f0      	beq.n	8003566 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d108      	bne.n	800359e <HAL_RCC_OscConfig+0x32e>
 800358c:	4b66      	ldr	r3, [pc, #408]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003592:	4a65      	ldr	r2, [pc, #404]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800359c:	e024      	b.n	80035e8 <HAL_RCC_OscConfig+0x378>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b05      	cmp	r3, #5
 80035a4:	d110      	bne.n	80035c8 <HAL_RCC_OscConfig+0x358>
 80035a6:	4b60      	ldr	r3, [pc, #384]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ac:	4a5e      	ldr	r2, [pc, #376]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 80035ae:	f043 0304 	orr.w	r3, r3, #4
 80035b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035b6:	4b5c      	ldr	r3, [pc, #368]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035bc:	4a5a      	ldr	r2, [pc, #360]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035c6:	e00f      	b.n	80035e8 <HAL_RCC_OscConfig+0x378>
 80035c8:	4b57      	ldr	r3, [pc, #348]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ce:	4a56      	ldr	r2, [pc, #344]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035d8:	4b53      	ldr	r3, [pc, #332]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	4a52      	ldr	r2, [pc, #328]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 80035e0:	f023 0304 	bic.w	r3, r3, #4
 80035e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d016      	beq.n	800361e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fe fca4 	bl	8001f3c <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f6:	e00a      	b.n	800360e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f7fe fca0 	bl	8001f3c <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e140      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800360e:	4b46      	ldr	r3, [pc, #280]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0ed      	beq.n	80035f8 <HAL_RCC_OscConfig+0x388>
 800361c:	e015      	b.n	800364a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361e:	f7fe fc8d 	bl	8001f3c <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003624:	e00a      	b.n	800363c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003626:	f7fe fc89 	bl	8001f3c <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	f241 3288 	movw	r2, #5000	; 0x1388
 8003634:	4293      	cmp	r3, r2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e129      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800363c:	4b3a      	ldr	r3, [pc, #232]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1ed      	bne.n	8003626 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800364a:	7ffb      	ldrb	r3, [r7, #31]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d105      	bne.n	800365c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003650:	4b35      	ldr	r3, [pc, #212]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003654:	4a34      	ldr	r2, [pc, #208]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 8003656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800365a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d03c      	beq.n	80036e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d01c      	beq.n	80036aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003670:	4b2d      	ldr	r3, [pc, #180]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 8003672:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003676:	4a2c      	ldr	r2, [pc, #176]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003680:	f7fe fc5c 	bl	8001f3c <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003688:	f7fe fc58 	bl	8001f3c <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e0fa      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800369a:	4b23      	ldr	r3, [pc, #140]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 800369c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ef      	beq.n	8003688 <HAL_RCC_OscConfig+0x418>
 80036a8:	e01b      	b.n	80036e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036aa:	4b1f      	ldr	r3, [pc, #124]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 80036ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036b0:	4a1d      	ldr	r2, [pc, #116]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fe fc3f 	bl	8001f3c <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036c2:	f7fe fc3b 	bl	8001f3c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e0dd      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 80036d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1ef      	bne.n	80036c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 80d1 	beq.w	800388e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ec:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b0c      	cmp	r3, #12
 80036f6:	f000 808b 	beq.w	8003810 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d15e      	bne.n	80037c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	4b09      	ldr	r3, [pc, #36]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a08      	ldr	r2, [pc, #32]	; (8003728 <HAL_RCC_OscConfig+0x4b8>)
 8003708:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800370c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370e:	f7fe fc15 	bl	8001f3c <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003714:	e00c      	b.n	8003730 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003716:	f7fe fc11 	bl	8001f3c <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d905      	bls.n	8003730 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e0b3      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
 8003728:	40021000 	.word	0x40021000
 800372c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003730:	4b59      	ldr	r3, [pc, #356]	; (8003898 <HAL_RCC_OscConfig+0x628>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1ec      	bne.n	8003716 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800373c:	4b56      	ldr	r3, [pc, #344]	; (8003898 <HAL_RCC_OscConfig+0x628>)
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	4b56      	ldr	r3, [pc, #344]	; (800389c <HAL_RCC_OscConfig+0x62c>)
 8003742:	4013      	ands	r3, r2
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6a11      	ldr	r1, [r2, #32]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800374c:	3a01      	subs	r2, #1
 800374e:	0112      	lsls	r2, r2, #4
 8003750:	4311      	orrs	r1, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003756:	0212      	lsls	r2, r2, #8
 8003758:	4311      	orrs	r1, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800375e:	0852      	lsrs	r2, r2, #1
 8003760:	3a01      	subs	r2, #1
 8003762:	0552      	lsls	r2, r2, #21
 8003764:	4311      	orrs	r1, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800376a:	0852      	lsrs	r2, r2, #1
 800376c:	3a01      	subs	r2, #1
 800376e:	0652      	lsls	r2, r2, #25
 8003770:	4311      	orrs	r1, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003776:	06d2      	lsls	r2, r2, #27
 8003778:	430a      	orrs	r2, r1
 800377a:	4947      	ldr	r1, [pc, #284]	; (8003898 <HAL_RCC_OscConfig+0x628>)
 800377c:	4313      	orrs	r3, r2
 800377e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003780:	4b45      	ldr	r3, [pc, #276]	; (8003898 <HAL_RCC_OscConfig+0x628>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a44      	ldr	r2, [pc, #272]	; (8003898 <HAL_RCC_OscConfig+0x628>)
 8003786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800378a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800378c:	4b42      	ldr	r3, [pc, #264]	; (8003898 <HAL_RCC_OscConfig+0x628>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a41      	ldr	r2, [pc, #260]	; (8003898 <HAL_RCC_OscConfig+0x628>)
 8003792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003796:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fe fbd0 	bl	8001f3c <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fe fbcc 	bl	8001f3c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e06e      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b2:	4b39      	ldr	r3, [pc, #228]	; (8003898 <HAL_RCC_OscConfig+0x628>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x530>
 80037be:	e066      	b.n	800388e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c0:	4b35      	ldr	r3, [pc, #212]	; (8003898 <HAL_RCC_OscConfig+0x628>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a34      	ldr	r2, [pc, #208]	; (8003898 <HAL_RCC_OscConfig+0x628>)
 80037c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037cc:	4b32      	ldr	r3, [pc, #200]	; (8003898 <HAL_RCC_OscConfig+0x628>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4a31      	ldr	r2, [pc, #196]	; (8003898 <HAL_RCC_OscConfig+0x628>)
 80037d2:	f023 0303 	bic.w	r3, r3, #3
 80037d6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80037d8:	4b2f      	ldr	r3, [pc, #188]	; (8003898 <HAL_RCC_OscConfig+0x628>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a2e      	ldr	r2, [pc, #184]	; (8003898 <HAL_RCC_OscConfig+0x628>)
 80037de:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e8:	f7fe fba8 	bl	8001f3c <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f0:	f7fe fba4 	bl	8001f3c <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e046      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003802:	4b25      	ldr	r3, [pc, #148]	; (8003898 <HAL_RCC_OscConfig+0x628>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x580>
 800380e:	e03e      	b.n	800388e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e039      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800381c:	4b1e      	ldr	r3, [pc, #120]	; (8003898 <HAL_RCC_OscConfig+0x628>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f003 0203 	and.w	r2, r3, #3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	429a      	cmp	r2, r3
 800382e:	d12c      	bne.n	800388a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	3b01      	subs	r3, #1
 800383c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d123      	bne.n	800388a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d11b      	bne.n	800388a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d113      	bne.n	800388a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	085b      	lsrs	r3, r3, #1
 800386e:	3b01      	subs	r3, #1
 8003870:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003872:	429a      	cmp	r2, r3
 8003874:	d109      	bne.n	800388a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	3b01      	subs	r3, #1
 8003884:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003886:	429a      	cmp	r2, r3
 8003888:	d001      	beq.n	800388e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3720      	adds	r7, #32
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40021000 	.word	0x40021000
 800389c:	019f800c 	.word	0x019f800c

080038a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e11e      	b.n	8003af6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038b8:	4b91      	ldr	r3, [pc, #580]	; (8003b00 <HAL_RCC_ClockConfig+0x260>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d910      	bls.n	80038e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	4b8e      	ldr	r3, [pc, #568]	; (8003b00 <HAL_RCC_ClockConfig+0x260>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 020f 	bic.w	r2, r3, #15
 80038ce:	498c      	ldr	r1, [pc, #560]	; (8003b00 <HAL_RCC_ClockConfig+0x260>)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d6:	4b8a      	ldr	r3, [pc, #552]	; (8003b00 <HAL_RCC_ClockConfig+0x260>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d001      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e106      	b.n	8003af6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d073      	beq.n	80039dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d129      	bne.n	8003950 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038fc:	4b81      	ldr	r3, [pc, #516]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0f4      	b.n	8003af6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800390c:	f000 f99e 	bl	8003c4c <RCC_GetSysClockFreqFromPLLSource>
 8003910:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4a7c      	ldr	r2, [pc, #496]	; (8003b08 <HAL_RCC_ClockConfig+0x268>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d93f      	bls.n	800399a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800391a:	4b7a      	ldr	r3, [pc, #488]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800392e:	2b00      	cmp	r3, #0
 8003930:	d033      	beq.n	800399a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003936:	2b00      	cmp	r3, #0
 8003938:	d12f      	bne.n	800399a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800393a:	4b72      	ldr	r3, [pc, #456]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003942:	4a70      	ldr	r2, [pc, #448]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003948:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	e024      	b.n	800399a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d107      	bne.n	8003968 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003958:	4b6a      	ldr	r3, [pc, #424]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d109      	bne.n	8003978 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0c6      	b.n	8003af6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003968:	4b66      	ldr	r3, [pc, #408]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0be      	b.n	8003af6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003978:	f000 f8ce 	bl	8003b18 <HAL_RCC_GetSysClockFreq>
 800397c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4a61      	ldr	r2, [pc, #388]	; (8003b08 <HAL_RCC_ClockConfig+0x268>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d909      	bls.n	800399a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003986:	4b5f      	ldr	r3, [pc, #380]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800398e:	4a5d      	ldr	r2, [pc, #372]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003994:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800399a:	4b5a      	ldr	r3, [pc, #360]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f023 0203 	bic.w	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	4957      	ldr	r1, [pc, #348]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ac:	f7fe fac6 	bl	8001f3c <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b4:	f7fe fac2 	bl	8001f3c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e095      	b.n	8003af6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	4b4e      	ldr	r3, [pc, #312]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 020c 	and.w	r2, r3, #12
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	429a      	cmp	r2, r3
 80039da:	d1eb      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d023      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039f4:	4b43      	ldr	r3, [pc, #268]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a42      	ldr	r2, [pc, #264]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 80039fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d007      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a0c:	4b3d      	ldr	r3, [pc, #244]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a14:	4a3b      	ldr	r2, [pc, #236]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003a16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a1c:	4b39      	ldr	r3, [pc, #228]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4936      	ldr	r1, [pc, #216]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	608b      	str	r3, [r1, #8]
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2b80      	cmp	r3, #128	; 0x80
 8003a34:	d105      	bne.n	8003a42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a36:	4b33      	ldr	r3, [pc, #204]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	4a32      	ldr	r2, [pc, #200]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003a3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a42:	4b2f      	ldr	r3, [pc, #188]	; (8003b00 <HAL_RCC_ClockConfig+0x260>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d21d      	bcs.n	8003a8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a50:	4b2b      	ldr	r3, [pc, #172]	; (8003b00 <HAL_RCC_ClockConfig+0x260>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 020f 	bic.w	r2, r3, #15
 8003a58:	4929      	ldr	r1, [pc, #164]	; (8003b00 <HAL_RCC_ClockConfig+0x260>)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a60:	f7fe fa6c 	bl	8001f3c <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	e00a      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a68:	f7fe fa68 	bl	8001f3c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e03b      	b.n	8003af6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7e:	4b20      	ldr	r3, [pc, #128]	; (8003b00 <HAL_RCC_ClockConfig+0x260>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d1ed      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a98:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	4917      	ldr	r1, [pc, #92]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ab6:	4b13      	ldr	r3, [pc, #76]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	490f      	ldr	r1, [pc, #60]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aca:	f000 f825 	bl	8003b18 <HAL_RCC_GetSysClockFreq>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	490c      	ldr	r1, [pc, #48]	; (8003b0c <HAL_RCC_ClockConfig+0x26c>)
 8003adc:	5ccb      	ldrb	r3, [r1, r3]
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae6:	4a0a      	ldr	r2, [pc, #40]	; (8003b10 <HAL_RCC_ClockConfig+0x270>)
 8003ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <HAL_RCC_ClockConfig+0x274>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fe f9d8 	bl	8001ea4 <HAL_InitTick>
 8003af4:	4603      	mov	r3, r0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40022000 	.word	0x40022000
 8003b04:	40021000 	.word	0x40021000
 8003b08:	04c4b400 	.word	0x04c4b400
 8003b0c:	080091f8 	.word	0x080091f8
 8003b10:	20000000 	.word	0x20000000
 8003b14:	20000004 	.word	0x20000004

08003b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b1e:	4b2c      	ldr	r3, [pc, #176]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d102      	bne.n	8003b30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b2a:	4b2a      	ldr	r3, [pc, #168]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	e047      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b30:	4b27      	ldr	r3, [pc, #156]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 030c 	and.w	r3, r3, #12
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d102      	bne.n	8003b42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b3c:	4b26      	ldr	r3, [pc, #152]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	e03e      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b42:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b0c      	cmp	r3, #12
 8003b4c:	d136      	bne.n	8003bbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	3301      	adds	r3, #1
 8003b64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d10c      	bne.n	8003b86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b6c:	4a1a      	ldr	r2, [pc, #104]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	4a16      	ldr	r2, [pc, #88]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b76:	68d2      	ldr	r2, [r2, #12]
 8003b78:	0a12      	lsrs	r2, r2, #8
 8003b7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b7e:	fb02 f303 	mul.w	r3, r2, r3
 8003b82:	617b      	str	r3, [r7, #20]
      break;
 8003b84:	e00c      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b86:	4a13      	ldr	r2, [pc, #76]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	4a10      	ldr	r2, [pc, #64]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b90:	68d2      	ldr	r2, [r2, #12]
 8003b92:	0a12      	lsrs	r2, r2, #8
 8003b94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b98:	fb02 f303 	mul.w	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]
      break;
 8003b9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	0e5b      	lsrs	r3, r3, #25
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	3301      	adds	r3, #1
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	e001      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bc0:	693b      	ldr	r3, [r7, #16]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	371c      	adds	r7, #28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	00f42400 	.word	0x00f42400
 8003bd8:	007a1200 	.word	0x007a1200

08003bdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be0:	4b03      	ldr	r3, [pc, #12]	; (8003bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003be2:	681b      	ldr	r3, [r3, #0]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20000000 	.word	0x20000000

08003bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bf8:	f7ff fff0 	bl	8003bdc <HAL_RCC_GetHCLKFreq>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	0a1b      	lsrs	r3, r3, #8
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	4904      	ldr	r1, [pc, #16]	; (8003c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c0a:	5ccb      	ldrb	r3, [r1, r3]
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	08009208 	.word	0x08009208

08003c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c24:	f7ff ffda 	bl	8003bdc <HAL_RCC_GetHCLKFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	0adb      	lsrs	r3, r3, #11
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4904      	ldr	r1, [pc, #16]	; (8003c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40021000 	.word	0x40021000
 8003c48:	08009208 	.word	0x08009208

08003c4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c52:	4b1e      	ldr	r3, [pc, #120]	; (8003ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	3301      	adds	r3, #1
 8003c68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d10c      	bne.n	8003c8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c70:	4a17      	ldr	r2, [pc, #92]	; (8003cd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c7a:	68d2      	ldr	r2, [r2, #12]
 8003c7c:	0a12      	lsrs	r2, r2, #8
 8003c7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	617b      	str	r3, [r7, #20]
    break;
 8003c88:	e00c      	b.n	8003ca4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c8a:	4a12      	ldr	r2, [pc, #72]	; (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	4a0e      	ldr	r2, [pc, #56]	; (8003ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c94:	68d2      	ldr	r2, [r2, #12]
 8003c96:	0a12      	lsrs	r2, r2, #8
 8003c98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ca0:	617b      	str	r3, [r7, #20]
    break;
 8003ca2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ca4:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	0e5b      	lsrs	r3, r3, #25
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	3301      	adds	r3, #1
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003cbe:	687b      	ldr	r3, [r7, #4]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	007a1200 	.word	0x007a1200
 8003cd4:	00f42400 	.word	0x00f42400

08003cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8098 	beq.w	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cfa:	4b43      	ldr	r3, [pc, #268]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10d      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d06:	4b40      	ldr	r3, [pc, #256]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	4a3f      	ldr	r2, [pc, #252]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d10:	6593      	str	r3, [r2, #88]	; 0x58
 8003d12:	4b3d      	ldr	r3, [pc, #244]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d22:	4b3a      	ldr	r3, [pc, #232]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a39      	ldr	r2, [pc, #228]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d2e:	f7fe f905 	bl	8001f3c <HAL_GetTick>
 8003d32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d34:	e009      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d36:	f7fe f901 	bl	8001f3c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d902      	bls.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	74fb      	strb	r3, [r7, #19]
        break;
 8003d48:	e005      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d4a:	4b30      	ldr	r3, [pc, #192]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0ef      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d56:	7cfb      	ldrb	r3, [r7, #19]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d159      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d5c:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d01e      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d019      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d78:	4b23      	ldr	r3, [pc, #140]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d84:	4b20      	ldr	r3, [pc, #128]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8a:	4a1f      	ldr	r2, [pc, #124]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d94:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	4a1b      	ldr	r2, [pc, #108]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003da4:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d016      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db6:	f7fe f8c1 	bl	8001f3c <HAL_GetTick>
 8003dba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dbc:	e00b      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dbe:	f7fe f8bd 	bl	8001f3c <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d902      	bls.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	74fb      	strb	r3, [r7, #19]
            break;
 8003dd4:	e006      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0ec      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003de4:	7cfb      	ldrb	r3, [r7, #19]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10b      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dea:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	4903      	ldr	r1, [pc, #12]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e00:	e008      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e02:	7cfb      	ldrb	r3, [r7, #19]
 8003e04:	74bb      	strb	r3, [r7, #18]
 8003e06:	e005      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e10:	7cfb      	ldrb	r3, [r7, #19]
 8003e12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e14:	7c7b      	ldrb	r3, [r7, #17]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d105      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e1a:	4ba6      	ldr	r3, [pc, #664]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1e:	4aa5      	ldr	r2, [pc, #660]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e32:	4ba0      	ldr	r3, [pc, #640]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e38:	f023 0203 	bic.w	r2, r3, #3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	499c      	ldr	r1, [pc, #624]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e54:	4b97      	ldr	r3, [pc, #604]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5a:	f023 020c 	bic.w	r2, r3, #12
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	4994      	ldr	r1, [pc, #592]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e76:	4b8f      	ldr	r3, [pc, #572]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	498b      	ldr	r1, [pc, #556]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e98:	4b86      	ldr	r3, [pc, #536]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	4983      	ldr	r1, [pc, #524]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eba:	4b7e      	ldr	r3, [pc, #504]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	497a      	ldr	r1, [pc, #488]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003edc:	4b75      	ldr	r3, [pc, #468]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	4972      	ldr	r1, [pc, #456]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003efe:	4b6d      	ldr	r3, [pc, #436]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	4969      	ldr	r1, [pc, #420]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f20:	4b64      	ldr	r3, [pc, #400]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	4961      	ldr	r1, [pc, #388]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f42:	4b5c      	ldr	r3, [pc, #368]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	4958      	ldr	r1, [pc, #352]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d015      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f64:	4b53      	ldr	r3, [pc, #332]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	4950      	ldr	r1, [pc, #320]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f82:	d105      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f84:	4b4b      	ldr	r3, [pc, #300]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4a4a      	ldr	r2, [pc, #296]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d015      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f9c:	4b45      	ldr	r3, [pc, #276]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	4942      	ldr	r1, [pc, #264]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fba:	d105      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fbc:	4b3d      	ldr	r3, [pc, #244]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4a3c      	ldr	r2, [pc, #240]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fc6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d015      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fd4:	4b37      	ldr	r3, [pc, #220]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	4934      	ldr	r1, [pc, #208]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ff2:	d105      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff4:	4b2f      	ldr	r3, [pc, #188]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4a2e      	ldr	r2, [pc, #184]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ffe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d015      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800400c:	4b29      	ldr	r3, [pc, #164]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401a:	4926      	ldr	r1, [pc, #152]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800402a:	d105      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800402c:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4a20      	ldr	r2, [pc, #128]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004036:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d015      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004044:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	4918      	ldr	r1, [pc, #96]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004062:	d105      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004064:	4b13      	ldr	r3, [pc, #76]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4a12      	ldr	r2, [pc, #72]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800406e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d015      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800407c:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	490a      	ldr	r1, [pc, #40]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800409a:	d105      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4a04      	ldr	r2, [pc, #16]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80040a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40021000 	.word	0x40021000

080040b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e049      	b.n	800415e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fd fc2c 	bl	800193c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3304      	adds	r3, #4
 80040f4:	4619      	mov	r1, r3
 80040f6:	4610      	mov	r0, r2
 80040f8:	f000 fe8a 	bl	8004e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e049      	b.n	800420c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d106      	bne.n	8004192 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f841 	bl	8004214 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2202      	movs	r2, #2
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4619      	mov	r1, r3
 80041a4:	4610      	mov	r0, r2
 80041a6:	f000 fe33 	bl	8004e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d109      	bne.n	800424c <HAL_TIM_PWM_Start+0x24>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	bf14      	ite	ne
 8004244:	2301      	movne	r3, #1
 8004246:	2300      	moveq	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	e03c      	b.n	80042c6 <HAL_TIM_PWM_Start+0x9e>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b04      	cmp	r3, #4
 8004250:	d109      	bne.n	8004266 <HAL_TIM_PWM_Start+0x3e>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b01      	cmp	r3, #1
 800425c:	bf14      	ite	ne
 800425e:	2301      	movne	r3, #1
 8004260:	2300      	moveq	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	e02f      	b.n	80042c6 <HAL_TIM_PWM_Start+0x9e>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d109      	bne.n	8004280 <HAL_TIM_PWM_Start+0x58>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b01      	cmp	r3, #1
 8004276:	bf14      	ite	ne
 8004278:	2301      	movne	r3, #1
 800427a:	2300      	moveq	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	e022      	b.n	80042c6 <HAL_TIM_PWM_Start+0x9e>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b0c      	cmp	r3, #12
 8004284:	d109      	bne.n	800429a <HAL_TIM_PWM_Start+0x72>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b01      	cmp	r3, #1
 8004290:	bf14      	ite	ne
 8004292:	2301      	movne	r3, #1
 8004294:	2300      	moveq	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	e015      	b.n	80042c6 <HAL_TIM_PWM_Start+0x9e>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b10      	cmp	r3, #16
 800429e:	d109      	bne.n	80042b4 <HAL_TIM_PWM_Start+0x8c>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	bf14      	ite	ne
 80042ac:	2301      	movne	r3, #1
 80042ae:	2300      	moveq	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	e008      	b.n	80042c6 <HAL_TIM_PWM_Start+0x9e>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	bf14      	ite	ne
 80042c0:	2301      	movne	r3, #1
 80042c2:	2300      	moveq	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e097      	b.n	80043fe <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d104      	bne.n	80042de <HAL_TIM_PWM_Start+0xb6>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042dc:	e023      	b.n	8004326 <HAL_TIM_PWM_Start+0xfe>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d104      	bne.n	80042ee <HAL_TIM_PWM_Start+0xc6>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042ec:	e01b      	b.n	8004326 <HAL_TIM_PWM_Start+0xfe>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d104      	bne.n	80042fe <HAL_TIM_PWM_Start+0xd6>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042fc:	e013      	b.n	8004326 <HAL_TIM_PWM_Start+0xfe>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b0c      	cmp	r3, #12
 8004302:	d104      	bne.n	800430e <HAL_TIM_PWM_Start+0xe6>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800430c:	e00b      	b.n	8004326 <HAL_TIM_PWM_Start+0xfe>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b10      	cmp	r3, #16
 8004312:	d104      	bne.n	800431e <HAL_TIM_PWM_Start+0xf6>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800431c:	e003      	b.n	8004326 <HAL_TIM_PWM_Start+0xfe>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2202      	movs	r2, #2
 8004322:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2201      	movs	r2, #1
 800432c:	6839      	ldr	r1, [r7, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f001 f990 	bl	8005654 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a33      	ldr	r2, [pc, #204]	; (8004408 <HAL_TIM_PWM_Start+0x1e0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d013      	beq.n	8004366 <HAL_TIM_PWM_Start+0x13e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a32      	ldr	r2, [pc, #200]	; (800440c <HAL_TIM_PWM_Start+0x1e4>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00e      	beq.n	8004366 <HAL_TIM_PWM_Start+0x13e>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a30      	ldr	r2, [pc, #192]	; (8004410 <HAL_TIM_PWM_Start+0x1e8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d009      	beq.n	8004366 <HAL_TIM_PWM_Start+0x13e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a2f      	ldr	r2, [pc, #188]	; (8004414 <HAL_TIM_PWM_Start+0x1ec>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d004      	beq.n	8004366 <HAL_TIM_PWM_Start+0x13e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a2d      	ldr	r2, [pc, #180]	; (8004418 <HAL_TIM_PWM_Start+0x1f0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d101      	bne.n	800436a <HAL_TIM_PWM_Start+0x142>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <HAL_TIM_PWM_Start+0x144>
 800436a:	2300      	movs	r3, #0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d007      	beq.n	8004380 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800437e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a20      	ldr	r2, [pc, #128]	; (8004408 <HAL_TIM_PWM_Start+0x1e0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d018      	beq.n	80043bc <HAL_TIM_PWM_Start+0x194>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004392:	d013      	beq.n	80043bc <HAL_TIM_PWM_Start+0x194>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a20      	ldr	r2, [pc, #128]	; (800441c <HAL_TIM_PWM_Start+0x1f4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00e      	beq.n	80043bc <HAL_TIM_PWM_Start+0x194>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <HAL_TIM_PWM_Start+0x1f8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d009      	beq.n	80043bc <HAL_TIM_PWM_Start+0x194>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a17      	ldr	r2, [pc, #92]	; (800440c <HAL_TIM_PWM_Start+0x1e4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d004      	beq.n	80043bc <HAL_TIM_PWM_Start+0x194>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a16      	ldr	r2, [pc, #88]	; (8004410 <HAL_TIM_PWM_Start+0x1e8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d115      	bne.n	80043e8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	4b18      	ldr	r3, [pc, #96]	; (8004424 <HAL_TIM_PWM_Start+0x1fc>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b06      	cmp	r3, #6
 80043cc:	d015      	beq.n	80043fa <HAL_TIM_PWM_Start+0x1d2>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d4:	d011      	beq.n	80043fa <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0201 	orr.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e6:	e008      	b.n	80043fa <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	e000      	b.n	80043fc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40012c00 	.word	0x40012c00
 800440c:	40013400 	.word	0x40013400
 8004410:	40014000 	.word	0x40014000
 8004414:	40014400 	.word	0x40014400
 8004418:	40014800 	.word	0x40014800
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	00010007 	.word	0x00010007

08004428 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e097      	b.n	800456c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d106      	bne.n	8004456 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7fd fad9 	bl	8001a08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800446c:	f023 0307 	bic.w	r3, r3, #7
 8004470:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3304      	adds	r3, #4
 800447a:	4619      	mov	r1, r3
 800447c:	4610      	mov	r0, r2
 800447e:	f000 fcc7 	bl	8004e10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044aa:	f023 0303 	bic.w	r3, r3, #3
 80044ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	4313      	orrs	r3, r2
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80044c8:	f023 030c 	bic.w	r3, r3, #12
 80044cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	4313      	orrs	r3, r2
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	011a      	lsls	r2, r3, #4
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	031b      	lsls	r3, r3, #12
 80044f8:	4313      	orrs	r3, r2
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004506:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800450e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	4313      	orrs	r3, r2
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004584:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800458c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004594:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800459c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d110      	bne.n	80045c6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d102      	bne.n	80045b0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80045aa:	7b7b      	ldrb	r3, [r7, #13]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d001      	beq.n	80045b4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e069      	b.n	8004688 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c4:	e031      	b.n	800462a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d110      	bne.n	80045ee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045cc:	7bbb      	ldrb	r3, [r7, #14]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d102      	bne.n	80045d8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045d2:	7b3b      	ldrb	r3, [r7, #12]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d001      	beq.n	80045dc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e055      	b.n	8004688 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045ec:	e01d      	b.n	800462a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d108      	bne.n	8004606 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045f4:	7bbb      	ldrb	r3, [r7, #14]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d105      	bne.n	8004606 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045fa:	7b7b      	ldrb	r3, [r7, #13]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d102      	bne.n	8004606 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004600:	7b3b      	ldrb	r3, [r7, #12]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d001      	beq.n	800460a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e03e      	b.n	8004688 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2202      	movs	r2, #2
 8004616:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2202      	movs	r2, #2
 800461e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2202      	movs	r2, #2
 8004626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_TIM_Encoder_Start+0xc4>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b04      	cmp	r3, #4
 8004634:	d008      	beq.n	8004648 <HAL_TIM_Encoder_Start+0xd4>
 8004636:	e00f      	b.n	8004658 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2201      	movs	r2, #1
 800463e:	2100      	movs	r1, #0
 8004640:	4618      	mov	r0, r3
 8004642:	f001 f807 	bl	8005654 <TIM_CCxChannelCmd>
      break;
 8004646:	e016      	b.n	8004676 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2201      	movs	r2, #1
 800464e:	2104      	movs	r1, #4
 8004650:	4618      	mov	r0, r3
 8004652:	f000 ffff 	bl	8005654 <TIM_CCxChannelCmd>
      break;
 8004656:	e00e      	b.n	8004676 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2201      	movs	r2, #1
 800465e:	2100      	movs	r1, #0
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fff7 	bl	8005654 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2201      	movs	r2, #1
 800466c:	2104      	movs	r1, #4
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fff0 	bl	8005654 <TIM_CCxChannelCmd>
      break;
 8004674:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0201 	orr.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d122      	bne.n	80046ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d11b      	bne.n	80046ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0202 	mvn.w	r2, #2
 80046bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fb7e 	bl	8004dd4 <HAL_TIM_IC_CaptureCallback>
 80046d8:	e005      	b.n	80046e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fb70 	bl	8004dc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fb81 	bl	8004de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d122      	bne.n	8004740 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b04      	cmp	r3, #4
 8004706:	d11b      	bne.n	8004740 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0204 	mvn.w	r2, #4
 8004710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fb54 	bl	8004dd4 <HAL_TIM_IC_CaptureCallback>
 800472c:	e005      	b.n	800473a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fb46 	bl	8004dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fb57 	bl	8004de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b08      	cmp	r3, #8
 800474c:	d122      	bne.n	8004794 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b08      	cmp	r3, #8
 800475a:	d11b      	bne.n	8004794 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0208 	mvn.w	r2, #8
 8004764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2204      	movs	r2, #4
 800476a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fb2a 	bl	8004dd4 <HAL_TIM_IC_CaptureCallback>
 8004780:	e005      	b.n	800478e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fb1c 	bl	8004dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fb2d 	bl	8004de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f003 0310 	and.w	r3, r3, #16
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d122      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2b10      	cmp	r3, #16
 80047ae:	d11b      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0210 	mvn.w	r2, #16
 80047b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2208      	movs	r2, #8
 80047be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fb00 	bl	8004dd4 <HAL_TIM_IC_CaptureCallback>
 80047d4:	e005      	b.n	80047e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 faf2 	bl	8004dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fb03 	bl	8004de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d10e      	bne.n	8004814 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b01      	cmp	r3, #1
 8004802:	d107      	bne.n	8004814 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0201 	mvn.w	r2, #1
 800480c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 facc 	bl	8004dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b80      	cmp	r3, #128	; 0x80
 8004820:	d10e      	bne.n	8004840 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482c:	2b80      	cmp	r3, #128	; 0x80
 800482e:	d107      	bne.n	8004840 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f001 f910 	bl	8005a60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800484e:	d10e      	bne.n	800486e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485a:	2b80      	cmp	r3, #128	; 0x80
 800485c:	d107      	bne.n	800486e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f001 f903 	bl	8005a74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004878:	2b40      	cmp	r3, #64	; 0x40
 800487a:	d10e      	bne.n	800489a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004886:	2b40      	cmp	r3, #64	; 0x40
 8004888:	d107      	bne.n	800489a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fab1 	bl	8004dfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d10e      	bne.n	80048c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d107      	bne.n	80048c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f06f 0220 	mvn.w	r2, #32
 80048be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f001 f8c3 	bl	8005a4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048d4:	d10f      	bne.n	80048f6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048e4:	d107      	bne.n	80048f6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80048ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f001 f8c9 	bl	8005a88 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004900:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004904:	d10f      	bne.n	8004926 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004910:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004914:	d107      	bne.n	8004926 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800491e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f001 f8bb 	bl	8005a9c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004934:	d10f      	bne.n	8004956 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004940:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004944:	d107      	bne.n	8004956 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800494e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f001 f8ad 	bl	8005ab0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004960:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004964:	d10f      	bne.n	8004986 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004970:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004974:	d107      	bne.n	8004986 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800497e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f001 f89f 	bl	8005ac4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004986:	bf00      	nop
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e0ff      	b.n	8004bae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b14      	cmp	r3, #20
 80049ba:	f200 80f0 	bhi.w	8004b9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80049be:	a201      	add	r2, pc, #4	; (adr r2, 80049c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c4:	08004a19 	.word	0x08004a19
 80049c8:	08004b9f 	.word	0x08004b9f
 80049cc:	08004b9f 	.word	0x08004b9f
 80049d0:	08004b9f 	.word	0x08004b9f
 80049d4:	08004a59 	.word	0x08004a59
 80049d8:	08004b9f 	.word	0x08004b9f
 80049dc:	08004b9f 	.word	0x08004b9f
 80049e0:	08004b9f 	.word	0x08004b9f
 80049e4:	08004a9b 	.word	0x08004a9b
 80049e8:	08004b9f 	.word	0x08004b9f
 80049ec:	08004b9f 	.word	0x08004b9f
 80049f0:	08004b9f 	.word	0x08004b9f
 80049f4:	08004adb 	.word	0x08004adb
 80049f8:	08004b9f 	.word	0x08004b9f
 80049fc:	08004b9f 	.word	0x08004b9f
 8004a00:	08004b9f 	.word	0x08004b9f
 8004a04:	08004b1d 	.word	0x08004b1d
 8004a08:	08004b9f 	.word	0x08004b9f
 8004a0c:	08004b9f 	.word	0x08004b9f
 8004a10:	08004b9f 	.word	0x08004b9f
 8004a14:	08004b5d 	.word	0x08004b5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68b9      	ldr	r1, [r7, #8]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fa86 	bl	8004f30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699a      	ldr	r2, [r3, #24]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0208 	orr.w	r2, r2, #8
 8004a32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0204 	bic.w	r2, r2, #4
 8004a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6999      	ldr	r1, [r3, #24]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	691a      	ldr	r2, [r3, #16]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	619a      	str	r2, [r3, #24]
      break;
 8004a56:	e0a5      	b.n	8004ba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 faf6 	bl	8005050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699a      	ldr	r2, [r3, #24]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6999      	ldr	r1, [r3, #24]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	021a      	lsls	r2, r3, #8
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	619a      	str	r2, [r3, #24]
      break;
 8004a98:	e084      	b.n	8004ba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68b9      	ldr	r1, [r7, #8]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 fb5f 	bl	8005164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69da      	ldr	r2, [r3, #28]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0208 	orr.w	r2, r2, #8
 8004ab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69da      	ldr	r2, [r3, #28]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0204 	bic.w	r2, r2, #4
 8004ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69d9      	ldr	r1, [r3, #28]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	61da      	str	r2, [r3, #28]
      break;
 8004ad8:	e064      	b.n	8004ba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68b9      	ldr	r1, [r7, #8]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fbc7 	bl	8005274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69da      	ldr	r2, [r3, #28]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69d9      	ldr	r1, [r3, #28]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	021a      	lsls	r2, r3, #8
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	61da      	str	r2, [r3, #28]
      break;
 8004b1a:	e043      	b.n	8004ba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fc30 	bl	8005388 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0208 	orr.w	r2, r2, #8
 8004b36:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0204 	bic.w	r2, r2, #4
 8004b46:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004b5a:	e023      	b.n	8004ba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fc74 	bl	8005450 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b86:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	021a      	lsls	r2, r3, #8
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004b9c:	e002      	b.n	8004ba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop

08004bb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_TIM_ConfigClockSource+0x1c>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e0de      	b.n	8004d92 <HAL_TIM_ConfigClockSource+0x1da>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004bf2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a63      	ldr	r2, [pc, #396]	; (8004d9c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	f000 80a9 	beq.w	8004d66 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c14:	4a61      	ldr	r2, [pc, #388]	; (8004d9c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	f200 80ae 	bhi.w	8004d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c1c:	4a60      	ldr	r2, [pc, #384]	; (8004da0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	f000 80a1 	beq.w	8004d66 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c24:	4a5e      	ldr	r2, [pc, #376]	; (8004da0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	f200 80a6 	bhi.w	8004d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c2c:	4a5d      	ldr	r2, [pc, #372]	; (8004da4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	f000 8099 	beq.w	8004d66 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c34:	4a5b      	ldr	r2, [pc, #364]	; (8004da4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	f200 809e 	bhi.w	8004d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c3c:	4a5a      	ldr	r2, [pc, #360]	; (8004da8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	f000 8091 	beq.w	8004d66 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c44:	4a58      	ldr	r2, [pc, #352]	; (8004da8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	f200 8096 	bhi.w	8004d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c50:	f000 8089 	beq.w	8004d66 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c58:	f200 808e 	bhi.w	8004d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c60:	d03e      	beq.n	8004ce0 <HAL_TIM_ConfigClockSource+0x128>
 8004c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c66:	f200 8087 	bhi.w	8004d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6e:	f000 8086 	beq.w	8004d7e <HAL_TIM_ConfigClockSource+0x1c6>
 8004c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c76:	d87f      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c78:	2b70      	cmp	r3, #112	; 0x70
 8004c7a:	d01a      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0xfa>
 8004c7c:	2b70      	cmp	r3, #112	; 0x70
 8004c7e:	d87b      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c80:	2b60      	cmp	r3, #96	; 0x60
 8004c82:	d050      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0x16e>
 8004c84:	2b60      	cmp	r3, #96	; 0x60
 8004c86:	d877      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c88:	2b50      	cmp	r3, #80	; 0x50
 8004c8a:	d03c      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x14e>
 8004c8c:	2b50      	cmp	r3, #80	; 0x50
 8004c8e:	d873      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d058      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x18e>
 8004c94:	2b40      	cmp	r3, #64	; 0x40
 8004c96:	d86f      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c98:	2b30      	cmp	r3, #48	; 0x30
 8004c9a:	d064      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c9c:	2b30      	cmp	r3, #48	; 0x30
 8004c9e:	d86b      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d060      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x1ae>
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	d867      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d05c      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x1ae>
 8004cac:	2b10      	cmp	r3, #16
 8004cae:	d05a      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x1ae>
 8004cb0:	e062      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6899      	ldr	r1, [r3, #8]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f000 fca7 	bl	8005614 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	609a      	str	r2, [r3, #8]
      break;
 8004cde:	e04f      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	6899      	ldr	r1, [r3, #8]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f000 fc90 	bl	8005614 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d02:	609a      	str	r2, [r3, #8]
      break;
 8004d04:	e03c      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6818      	ldr	r0, [r3, #0]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	6859      	ldr	r1, [r3, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	461a      	mov	r2, r3
 8004d14:	f000 fc02 	bl	800551c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2150      	movs	r1, #80	; 0x50
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fc5b 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 8004d24:	e02c      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	6859      	ldr	r1, [r3, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	461a      	mov	r2, r3
 8004d34:	f000 fc21 	bl	800557a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2160      	movs	r1, #96	; 0x60
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fc4b 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 8004d44:	e01c      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6818      	ldr	r0, [r3, #0]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	6859      	ldr	r1, [r3, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	461a      	mov	r2, r3
 8004d54:	f000 fbe2 	bl	800551c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2140      	movs	r1, #64	; 0x40
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fc3b 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 8004d64:	e00c      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4610      	mov	r0, r2
 8004d72:	f000 fc32 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 8004d76:	e003      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d7c:	e000      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004d7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	00100070 	.word	0x00100070
 8004da0:	00100040 	.word	0x00100040
 8004da4:	00100030 	.word	0x00100030
 8004da8:	00100020 	.word	0x00100020

08004dac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a3c      	ldr	r2, [pc, #240]	; (8004f14 <TIM_Base_SetConfig+0x104>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d00f      	beq.n	8004e48 <TIM_Base_SetConfig+0x38>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2e:	d00b      	beq.n	8004e48 <TIM_Base_SetConfig+0x38>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a39      	ldr	r2, [pc, #228]	; (8004f18 <TIM_Base_SetConfig+0x108>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d007      	beq.n	8004e48 <TIM_Base_SetConfig+0x38>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a38      	ldr	r2, [pc, #224]	; (8004f1c <TIM_Base_SetConfig+0x10c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <TIM_Base_SetConfig+0x38>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a37      	ldr	r2, [pc, #220]	; (8004f20 <TIM_Base_SetConfig+0x110>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d108      	bne.n	8004e5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2d      	ldr	r2, [pc, #180]	; (8004f14 <TIM_Base_SetConfig+0x104>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d01b      	beq.n	8004e9a <TIM_Base_SetConfig+0x8a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e68:	d017      	beq.n	8004e9a <TIM_Base_SetConfig+0x8a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2a      	ldr	r2, [pc, #168]	; (8004f18 <TIM_Base_SetConfig+0x108>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d013      	beq.n	8004e9a <TIM_Base_SetConfig+0x8a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a29      	ldr	r2, [pc, #164]	; (8004f1c <TIM_Base_SetConfig+0x10c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00f      	beq.n	8004e9a <TIM_Base_SetConfig+0x8a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a28      	ldr	r2, [pc, #160]	; (8004f20 <TIM_Base_SetConfig+0x110>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00b      	beq.n	8004e9a <TIM_Base_SetConfig+0x8a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a27      	ldr	r2, [pc, #156]	; (8004f24 <TIM_Base_SetConfig+0x114>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d007      	beq.n	8004e9a <TIM_Base_SetConfig+0x8a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a26      	ldr	r2, [pc, #152]	; (8004f28 <TIM_Base_SetConfig+0x118>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d003      	beq.n	8004e9a <TIM_Base_SetConfig+0x8a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a25      	ldr	r2, [pc, #148]	; (8004f2c <TIM_Base_SetConfig+0x11c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d108      	bne.n	8004eac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a10      	ldr	r2, [pc, #64]	; (8004f14 <TIM_Base_SetConfig+0x104>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00f      	beq.n	8004ef8 <TIM_Base_SetConfig+0xe8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a11      	ldr	r2, [pc, #68]	; (8004f20 <TIM_Base_SetConfig+0x110>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00b      	beq.n	8004ef8 <TIM_Base_SetConfig+0xe8>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a10      	ldr	r2, [pc, #64]	; (8004f24 <TIM_Base_SetConfig+0x114>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d007      	beq.n	8004ef8 <TIM_Base_SetConfig+0xe8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a0f      	ldr	r2, [pc, #60]	; (8004f28 <TIM_Base_SetConfig+0x118>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d003      	beq.n	8004ef8 <TIM_Base_SetConfig+0xe8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a0e      	ldr	r2, [pc, #56]	; (8004f2c <TIM_Base_SetConfig+0x11c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d103      	bne.n	8004f00 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	615a      	str	r2, [r3, #20]
}
 8004f06:	bf00      	nop
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40012c00 	.word	0x40012c00
 8004f18:	40000400 	.word	0x40000400
 8004f1c:	40000800 	.word	0x40000800
 8004f20:	40013400 	.word	0x40013400
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	40014800 	.word	0x40014800

08004f30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f023 0201 	bic.w	r2, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0303 	bic.w	r3, r3, #3
 8004f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f023 0302 	bic.w	r3, r3, #2
 8004f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a2c      	ldr	r2, [pc, #176]	; (800503c <TIM_OC1_SetConfig+0x10c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00f      	beq.n	8004fb0 <TIM_OC1_SetConfig+0x80>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a2b      	ldr	r2, [pc, #172]	; (8005040 <TIM_OC1_SetConfig+0x110>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00b      	beq.n	8004fb0 <TIM_OC1_SetConfig+0x80>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a2a      	ldr	r2, [pc, #168]	; (8005044 <TIM_OC1_SetConfig+0x114>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d007      	beq.n	8004fb0 <TIM_OC1_SetConfig+0x80>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a29      	ldr	r2, [pc, #164]	; (8005048 <TIM_OC1_SetConfig+0x118>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_OC1_SetConfig+0x80>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a28      	ldr	r2, [pc, #160]	; (800504c <TIM_OC1_SetConfig+0x11c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10c      	bne.n	8004fca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f023 0308 	bic.w	r3, r3, #8
 8004fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f023 0304 	bic.w	r3, r3, #4
 8004fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a1b      	ldr	r2, [pc, #108]	; (800503c <TIM_OC1_SetConfig+0x10c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00f      	beq.n	8004ff2 <TIM_OC1_SetConfig+0xc2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a1a      	ldr	r2, [pc, #104]	; (8005040 <TIM_OC1_SetConfig+0x110>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00b      	beq.n	8004ff2 <TIM_OC1_SetConfig+0xc2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a19      	ldr	r2, [pc, #100]	; (8005044 <TIM_OC1_SetConfig+0x114>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d007      	beq.n	8004ff2 <TIM_OC1_SetConfig+0xc2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a18      	ldr	r2, [pc, #96]	; (8005048 <TIM_OC1_SetConfig+0x118>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d003      	beq.n	8004ff2 <TIM_OC1_SetConfig+0xc2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a17      	ldr	r2, [pc, #92]	; (800504c <TIM_OC1_SetConfig+0x11c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d111      	bne.n	8005016 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	621a      	str	r2, [r3, #32]
}
 8005030:	bf00      	nop
 8005032:	371c      	adds	r7, #28
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	40012c00 	.word	0x40012c00
 8005040:	40013400 	.word	0x40013400
 8005044:	40014000 	.word	0x40014000
 8005048:	40014400 	.word	0x40014400
 800504c:	40014800 	.word	0x40014800

08005050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	f023 0210 	bic.w	r2, r3, #16
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800507e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 0320 	bic.w	r3, r3, #32
 800509e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a28      	ldr	r2, [pc, #160]	; (8005150 <TIM_OC2_SetConfig+0x100>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_OC2_SetConfig+0x6c>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a27      	ldr	r2, [pc, #156]	; (8005154 <TIM_OC2_SetConfig+0x104>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d10d      	bne.n	80050d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <TIM_OC2_SetConfig+0x100>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00f      	beq.n	8005100 <TIM_OC2_SetConfig+0xb0>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <TIM_OC2_SetConfig+0x104>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00b      	beq.n	8005100 <TIM_OC2_SetConfig+0xb0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a1b      	ldr	r2, [pc, #108]	; (8005158 <TIM_OC2_SetConfig+0x108>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d007      	beq.n	8005100 <TIM_OC2_SetConfig+0xb0>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a1a      	ldr	r2, [pc, #104]	; (800515c <TIM_OC2_SetConfig+0x10c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d003      	beq.n	8005100 <TIM_OC2_SetConfig+0xb0>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a19      	ldr	r2, [pc, #100]	; (8005160 <TIM_OC2_SetConfig+0x110>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d113      	bne.n	8005128 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800510e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	621a      	str	r2, [r3, #32]
}
 8005142:	bf00      	nop
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40012c00 	.word	0x40012c00
 8005154:	40013400 	.word	0x40013400
 8005158:	40014000 	.word	0x40014000
 800515c:	40014400 	.word	0x40014400
 8005160:	40014800 	.word	0x40014800

08005164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0303 	bic.w	r3, r3, #3
 800519e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a27      	ldr	r2, [pc, #156]	; (8005260 <TIM_OC3_SetConfig+0xfc>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d003      	beq.n	80051ce <TIM_OC3_SetConfig+0x6a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a26      	ldr	r2, [pc, #152]	; (8005264 <TIM_OC3_SetConfig+0x100>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d10d      	bne.n	80051ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a1c      	ldr	r2, [pc, #112]	; (8005260 <TIM_OC3_SetConfig+0xfc>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00f      	beq.n	8005212 <TIM_OC3_SetConfig+0xae>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a1b      	ldr	r2, [pc, #108]	; (8005264 <TIM_OC3_SetConfig+0x100>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00b      	beq.n	8005212 <TIM_OC3_SetConfig+0xae>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a1a      	ldr	r2, [pc, #104]	; (8005268 <TIM_OC3_SetConfig+0x104>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d007      	beq.n	8005212 <TIM_OC3_SetConfig+0xae>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a19      	ldr	r2, [pc, #100]	; (800526c <TIM_OC3_SetConfig+0x108>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d003      	beq.n	8005212 <TIM_OC3_SetConfig+0xae>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a18      	ldr	r2, [pc, #96]	; (8005270 <TIM_OC3_SetConfig+0x10c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d113      	bne.n	800523a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	621a      	str	r2, [r3, #32]
}
 8005254:	bf00      	nop
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	40012c00 	.word	0x40012c00
 8005264:	40013400 	.word	0x40013400
 8005268:	40014000 	.word	0x40014000
 800526c:	40014400 	.word	0x40014400
 8005270:	40014800 	.word	0x40014800

08005274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	031b      	lsls	r3, r3, #12
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a28      	ldr	r2, [pc, #160]	; (8005374 <TIM_OC4_SetConfig+0x100>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <TIM_OC4_SetConfig+0x6c>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a27      	ldr	r2, [pc, #156]	; (8005378 <TIM_OC4_SetConfig+0x104>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d10d      	bne.n	80052fc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	031b      	lsls	r3, r3, #12
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a1d      	ldr	r2, [pc, #116]	; (8005374 <TIM_OC4_SetConfig+0x100>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00f      	beq.n	8005324 <TIM_OC4_SetConfig+0xb0>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a1c      	ldr	r2, [pc, #112]	; (8005378 <TIM_OC4_SetConfig+0x104>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00b      	beq.n	8005324 <TIM_OC4_SetConfig+0xb0>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a1b      	ldr	r2, [pc, #108]	; (800537c <TIM_OC4_SetConfig+0x108>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d007      	beq.n	8005324 <TIM_OC4_SetConfig+0xb0>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a1a      	ldr	r2, [pc, #104]	; (8005380 <TIM_OC4_SetConfig+0x10c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d003      	beq.n	8005324 <TIM_OC4_SetConfig+0xb0>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a19      	ldr	r2, [pc, #100]	; (8005384 <TIM_OC4_SetConfig+0x110>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d113      	bne.n	800534c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800532a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005332:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	019b      	lsls	r3, r3, #6
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	019b      	lsls	r3, r3, #6
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	621a      	str	r2, [r3, #32]
}
 8005366:	bf00      	nop
 8005368:	371c      	adds	r7, #28
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40012c00 	.word	0x40012c00
 8005378:	40013400 	.word	0x40013400
 800537c:	40014000 	.word	0x40014000
 8005380:	40014400 	.word	0x40014400
 8005384:	40014800 	.word	0x40014800

08005388 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	041b      	lsls	r3, r3, #16
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a17      	ldr	r2, [pc, #92]	; (800543c <TIM_OC5_SetConfig+0xb4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00f      	beq.n	8005402 <TIM_OC5_SetConfig+0x7a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a16      	ldr	r2, [pc, #88]	; (8005440 <TIM_OC5_SetConfig+0xb8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00b      	beq.n	8005402 <TIM_OC5_SetConfig+0x7a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a15      	ldr	r2, [pc, #84]	; (8005444 <TIM_OC5_SetConfig+0xbc>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d007      	beq.n	8005402 <TIM_OC5_SetConfig+0x7a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a14      	ldr	r2, [pc, #80]	; (8005448 <TIM_OC5_SetConfig+0xc0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_OC5_SetConfig+0x7a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a13      	ldr	r2, [pc, #76]	; (800544c <TIM_OC5_SetConfig+0xc4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d109      	bne.n	8005416 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005408:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	621a      	str	r2, [r3, #32]
}
 8005430:	bf00      	nop
 8005432:	371c      	adds	r7, #28
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40013400 	.word	0x40013400
 8005444:	40014000 	.word	0x40014000
 8005448:	40014400 	.word	0x40014400
 800544c:	40014800 	.word	0x40014800

08005450 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800547e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	051b      	lsls	r3, r3, #20
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a18      	ldr	r2, [pc, #96]	; (8005508 <TIM_OC6_SetConfig+0xb8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00f      	beq.n	80054cc <TIM_OC6_SetConfig+0x7c>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a17      	ldr	r2, [pc, #92]	; (800550c <TIM_OC6_SetConfig+0xbc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00b      	beq.n	80054cc <TIM_OC6_SetConfig+0x7c>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a16      	ldr	r2, [pc, #88]	; (8005510 <TIM_OC6_SetConfig+0xc0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d007      	beq.n	80054cc <TIM_OC6_SetConfig+0x7c>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a15      	ldr	r2, [pc, #84]	; (8005514 <TIM_OC6_SetConfig+0xc4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d003      	beq.n	80054cc <TIM_OC6_SetConfig+0x7c>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a14      	ldr	r2, [pc, #80]	; (8005518 <TIM_OC6_SetConfig+0xc8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d109      	bne.n	80054e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	029b      	lsls	r3, r3, #10
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	621a      	str	r2, [r3, #32]
}
 80054fa:	bf00      	nop
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40013400 	.word	0x40013400
 8005510:	40014000 	.word	0x40014000
 8005514:	40014400 	.word	0x40014400
 8005518:	40014800 	.word	0x40014800

0800551c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f023 0201 	bic.w	r2, r3, #1
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f023 030a 	bic.w	r3, r3, #10
 8005558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800557a:	b480      	push	{r7}
 800557c:	b087      	sub	sp, #28
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	f023 0210 	bic.w	r2, r3, #16
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	031b      	lsls	r3, r3, #12
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4313      	orrs	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	621a      	str	r2, [r3, #32]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80055f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f043 0307 	orr.w	r3, r3, #7
 8005600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	609a      	str	r2, [r3, #8]
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800562e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	021a      	lsls	r2, r3, #8
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	431a      	orrs	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4313      	orrs	r3, r2
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	609a      	str	r2, [r3, #8]
}
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f003 031f 	and.w	r3, r3, #31
 8005666:	2201      	movs	r2, #1
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1a      	ldr	r2, [r3, #32]
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	43db      	mvns	r3, r3
 8005676:	401a      	ands	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a1a      	ldr	r2, [r3, #32]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f003 031f 	and.w	r3, r3, #31
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	fa01 f303 	lsl.w	r3, r1, r3
 800568c:	431a      	orrs	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d109      	bne.n	80056c4 <HAL_TIMEx_PWMN_Start+0x24>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	bf14      	ite	ne
 80056bc:	2301      	movne	r3, #1
 80056be:	2300      	moveq	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	e022      	b.n	800570a <HAL_TIMEx_PWMN_Start+0x6a>
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d109      	bne.n	80056de <HAL_TIMEx_PWMN_Start+0x3e>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	bf14      	ite	ne
 80056d6:	2301      	movne	r3, #1
 80056d8:	2300      	moveq	r3, #0
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	e015      	b.n	800570a <HAL_TIMEx_PWMN_Start+0x6a>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d109      	bne.n	80056f8 <HAL_TIMEx_PWMN_Start+0x58>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	bf14      	ite	ne
 80056f0:	2301      	movne	r3, #1
 80056f2:	2300      	moveq	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	e008      	b.n	800570a <HAL_TIMEx_PWMN_Start+0x6a>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	bf14      	ite	ne
 8005704:	2301      	movne	r3, #1
 8005706:	2300      	moveq	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e069      	b.n	80057e6 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d104      	bne.n	8005722 <HAL_TIMEx_PWMN_Start+0x82>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005720:	e013      	b.n	800574a <HAL_TIMEx_PWMN_Start+0xaa>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b04      	cmp	r3, #4
 8005726:	d104      	bne.n	8005732 <HAL_TIMEx_PWMN_Start+0x92>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005730:	e00b      	b.n	800574a <HAL_TIMEx_PWMN_Start+0xaa>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b08      	cmp	r3, #8
 8005736:	d104      	bne.n	8005742 <HAL_TIMEx_PWMN_Start+0xa2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005740:	e003      	b.n	800574a <HAL_TIMEx_PWMN_Start+0xaa>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2202      	movs	r2, #2
 8005746:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2204      	movs	r2, #4
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f000 f9c0 	bl	8005ad8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005766:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a20      	ldr	r2, [pc, #128]	; (80057f0 <HAL_TIMEx_PWMN_Start+0x150>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d018      	beq.n	80057a4 <HAL_TIMEx_PWMN_Start+0x104>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577a:	d013      	beq.n	80057a4 <HAL_TIMEx_PWMN_Start+0x104>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1c      	ldr	r2, [pc, #112]	; (80057f4 <HAL_TIMEx_PWMN_Start+0x154>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00e      	beq.n	80057a4 <HAL_TIMEx_PWMN_Start+0x104>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a1b      	ldr	r2, [pc, #108]	; (80057f8 <HAL_TIMEx_PWMN_Start+0x158>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d009      	beq.n	80057a4 <HAL_TIMEx_PWMN_Start+0x104>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a19      	ldr	r2, [pc, #100]	; (80057fc <HAL_TIMEx_PWMN_Start+0x15c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d004      	beq.n	80057a4 <HAL_TIMEx_PWMN_Start+0x104>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a18      	ldr	r2, [pc, #96]	; (8005800 <HAL_TIMEx_PWMN_Start+0x160>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d115      	bne.n	80057d0 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	4b16      	ldr	r3, [pc, #88]	; (8005804 <HAL_TIMEx_PWMN_Start+0x164>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b06      	cmp	r3, #6
 80057b4:	d015      	beq.n	80057e2 <HAL_TIMEx_PWMN_Start+0x142>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057bc:	d011      	beq.n	80057e2 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0201 	orr.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ce:	e008      	b.n	80057e2 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0201 	orr.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	e000      	b.n	80057e4 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40012c00 	.word	0x40012c00
 80057f4:	40000400 	.word	0x40000400
 80057f8:	40000800 	.word	0x40000800
 80057fc:	40013400 	.word	0x40013400
 8005800:	40014000 	.word	0x40014000
 8005804:	00010007 	.word	0x00010007

08005808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800581c:	2302      	movs	r3, #2
 800581e:	e065      	b.n	80058ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a2c      	ldr	r2, [pc, #176]	; (80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a2b      	ldr	r2, [pc, #172]	; (80058fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d108      	bne.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800585a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800586c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005870:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1b      	ldr	r2, [pc, #108]	; (80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d018      	beq.n	80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005896:	d013      	beq.n	80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a18      	ldr	r2, [pc, #96]	; (8005900 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00e      	beq.n	80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a17      	ldr	r2, [pc, #92]	; (8005904 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d009      	beq.n	80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a12      	ldr	r2, [pc, #72]	; (80058fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d004      	beq.n	80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a13      	ldr	r2, [pc, #76]	; (8005908 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10c      	bne.n	80058da <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	40012c00 	.word	0x40012c00
 80058fc:	40013400 	.word	0x40013400
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800
 8005908:	40014000 	.word	0x40014000

0800590c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005924:	2302      	movs	r3, #2
 8005926:	e087      	b.n	8005a38 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	041b      	lsls	r3, r3, #16
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a27      	ldr	r2, [pc, #156]	; (8005a44 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d004      	beq.n	80059b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a25      	ldr	r2, [pc, #148]	; (8005a48 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d106      	bne.n	80059c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a1e      	ldr	r2, [pc, #120]	; (8005a44 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d004      	beq.n	80059d8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a1d      	ldr	r2, [pc, #116]	; (8005a48 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d126      	bne.n	8005a26 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e2:	051b      	lsls	r3, r3, #20
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a0e      	ldr	r2, [pc, #56]	; (8005a44 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d004      	beq.n	8005a18 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a0d      	ldr	r2, [pc, #52]	; (8005a48 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d106      	bne.n	8005a26 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	40012c00 	.word	0x40012c00
 8005a48:	40013400 	.word	0x40013400

08005a4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 031f 	and.w	r3, r3, #31
 8005aea:	2204      	movs	r2, #4
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a1a      	ldr	r2, [r3, #32]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	43db      	mvns	r3, r3
 8005afa:	401a      	ands	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a1a      	ldr	r2, [r3, #32]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f003 031f 	and.w	r3, r3, #31
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b10:	431a      	orrs	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	621a      	str	r2, [r3, #32]
}
 8005b16:	bf00      	nop
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b082      	sub	sp, #8
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e042      	b.n	8005bba <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fc f808 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2224      	movs	r2, #36	; 0x24
 8005b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0201 	bic.w	r2, r2, #1
 8005b62:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f8c3 	bl	8005cf0 <UART_SetConfig>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e022      	b.n	8005bba <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fb83 	bl	8006288 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ba0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f042 0201 	orr.w	r2, r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fc0a 	bl	80063cc <UART_CheckIdleState>
 8005bb8:	4603      	mov	r3, r0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b08a      	sub	sp, #40	; 0x28
 8005bc6:	af02      	add	r7, sp, #8
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	f040 8083 	bne.w	8005ce4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <HAL_UART_Transmit+0x28>
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e07b      	b.n	8005ce6 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_UART_Transmit+0x3a>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e074      	b.n	8005ce6 <HAL_UART_Transmit+0x124>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2221      	movs	r2, #33	; 0x21
 8005c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c14:	f7fc f992 	bl	8001f3c <HAL_GetTick>
 8005c18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	88fa      	ldrh	r2, [r7, #6]
 8005c1e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	88fa      	ldrh	r2, [r7, #6]
 8005c26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c32:	d108      	bne.n	8005c46 <HAL_UART_Transmit+0x84>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d104      	bne.n	8005c46 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	61bb      	str	r3, [r7, #24]
 8005c44:	e003      	b.n	8005c4e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005c56:	e02c      	b.n	8005cb2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2180      	movs	r1, #128	; 0x80
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 fbfd 	bl	8006462 <UART_WaitOnFlagUntilTimeout>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e039      	b.n	8005ce6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10b      	bne.n	8005c90 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	3302      	adds	r3, #2
 8005c8c:	61bb      	str	r3, [r7, #24]
 8005c8e:	e007      	b.n	8005ca0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	781a      	ldrb	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1cc      	bne.n	8005c58 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2140      	movs	r1, #64	; 0x40
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 fbca 	bl	8006462 <UART_WaitOnFlagUntilTimeout>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e006      	b.n	8005ce6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e000      	b.n	8005ce6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005ce4:	2302      	movs	r3, #2
  }
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3720      	adds	r7, #32
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
	...

08005cf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cf4:	b08c      	sub	sp, #48	; 0x30
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4bab      	ldr	r3, [pc, #684]	; (8005fcc <UART_SetConfig+0x2dc>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	68da      	ldr	r2, [r3, #12]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4aa0      	ldr	r2, [pc, #640]	; (8005fd0 <UART_SetConfig+0x2e0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d004      	beq.n	8005d5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005d66:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	6812      	ldr	r2, [r2, #0]
 8005d6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d70:	430b      	orrs	r3, r1
 8005d72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7a:	f023 010f 	bic.w	r1, r3, #15
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a91      	ldr	r2, [pc, #580]	; (8005fd4 <UART_SetConfig+0x2e4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d125      	bne.n	8005de0 <UART_SetConfig+0xf0>
 8005d94:	4b90      	ldr	r3, [pc, #576]	; (8005fd8 <UART_SetConfig+0x2e8>)
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d81a      	bhi.n	8005dd8 <UART_SetConfig+0xe8>
 8005da2:	a201      	add	r2, pc, #4	; (adr r2, 8005da8 <UART_SetConfig+0xb8>)
 8005da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da8:	08005db9 	.word	0x08005db9
 8005dac:	08005dc9 	.word	0x08005dc9
 8005db0:	08005dc1 	.word	0x08005dc1
 8005db4:	08005dd1 	.word	0x08005dd1
 8005db8:	2301      	movs	r3, #1
 8005dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dbe:	e0d6      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dc6:	e0d2      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005dc8:	2304      	movs	r3, #4
 8005dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dce:	e0ce      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005dd0:	2308      	movs	r3, #8
 8005dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dd6:	e0ca      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005dd8:	2310      	movs	r3, #16
 8005dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dde:	e0c6      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a7d      	ldr	r2, [pc, #500]	; (8005fdc <UART_SetConfig+0x2ec>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d138      	bne.n	8005e5c <UART_SetConfig+0x16c>
 8005dea:	4b7b      	ldr	r3, [pc, #492]	; (8005fd8 <UART_SetConfig+0x2e8>)
 8005dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df0:	f003 030c 	and.w	r3, r3, #12
 8005df4:	2b0c      	cmp	r3, #12
 8005df6:	d82d      	bhi.n	8005e54 <UART_SetConfig+0x164>
 8005df8:	a201      	add	r2, pc, #4	; (adr r2, 8005e00 <UART_SetConfig+0x110>)
 8005dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfe:	bf00      	nop
 8005e00:	08005e35 	.word	0x08005e35
 8005e04:	08005e55 	.word	0x08005e55
 8005e08:	08005e55 	.word	0x08005e55
 8005e0c:	08005e55 	.word	0x08005e55
 8005e10:	08005e45 	.word	0x08005e45
 8005e14:	08005e55 	.word	0x08005e55
 8005e18:	08005e55 	.word	0x08005e55
 8005e1c:	08005e55 	.word	0x08005e55
 8005e20:	08005e3d 	.word	0x08005e3d
 8005e24:	08005e55 	.word	0x08005e55
 8005e28:	08005e55 	.word	0x08005e55
 8005e2c:	08005e55 	.word	0x08005e55
 8005e30:	08005e4d 	.word	0x08005e4d
 8005e34:	2300      	movs	r3, #0
 8005e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e3a:	e098      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e42:	e094      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005e44:	2304      	movs	r3, #4
 8005e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e4a:	e090      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005e4c:	2308      	movs	r3, #8
 8005e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e52:	e08c      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005e54:	2310      	movs	r3, #16
 8005e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e5a:	e088      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a5f      	ldr	r2, [pc, #380]	; (8005fe0 <UART_SetConfig+0x2f0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d125      	bne.n	8005eb2 <UART_SetConfig+0x1c2>
 8005e66:	4b5c      	ldr	r3, [pc, #368]	; (8005fd8 <UART_SetConfig+0x2e8>)
 8005e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e70:	2b30      	cmp	r3, #48	; 0x30
 8005e72:	d016      	beq.n	8005ea2 <UART_SetConfig+0x1b2>
 8005e74:	2b30      	cmp	r3, #48	; 0x30
 8005e76:	d818      	bhi.n	8005eaa <UART_SetConfig+0x1ba>
 8005e78:	2b20      	cmp	r3, #32
 8005e7a:	d00a      	beq.n	8005e92 <UART_SetConfig+0x1a2>
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d814      	bhi.n	8005eaa <UART_SetConfig+0x1ba>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <UART_SetConfig+0x19a>
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d008      	beq.n	8005e9a <UART_SetConfig+0x1aa>
 8005e88:	e00f      	b.n	8005eaa <UART_SetConfig+0x1ba>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e90:	e06d      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005e92:	2302      	movs	r3, #2
 8005e94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e98:	e069      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005e9a:	2304      	movs	r3, #4
 8005e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ea0:	e065      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005ea2:	2308      	movs	r3, #8
 8005ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ea8:	e061      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005eaa:	2310      	movs	r3, #16
 8005eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eb0:	e05d      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a4b      	ldr	r2, [pc, #300]	; (8005fe4 <UART_SetConfig+0x2f4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d125      	bne.n	8005f08 <UART_SetConfig+0x218>
 8005ebc:	4b46      	ldr	r3, [pc, #280]	; (8005fd8 <UART_SetConfig+0x2e8>)
 8005ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ec6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ec8:	d016      	beq.n	8005ef8 <UART_SetConfig+0x208>
 8005eca:	2bc0      	cmp	r3, #192	; 0xc0
 8005ecc:	d818      	bhi.n	8005f00 <UART_SetConfig+0x210>
 8005ece:	2b80      	cmp	r3, #128	; 0x80
 8005ed0:	d00a      	beq.n	8005ee8 <UART_SetConfig+0x1f8>
 8005ed2:	2b80      	cmp	r3, #128	; 0x80
 8005ed4:	d814      	bhi.n	8005f00 <UART_SetConfig+0x210>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <UART_SetConfig+0x1f0>
 8005eda:	2b40      	cmp	r3, #64	; 0x40
 8005edc:	d008      	beq.n	8005ef0 <UART_SetConfig+0x200>
 8005ede:	e00f      	b.n	8005f00 <UART_SetConfig+0x210>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ee6:	e042      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eee:	e03e      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ef6:	e03a      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005ef8:	2308      	movs	r3, #8
 8005efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005efe:	e036      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005f00:	2310      	movs	r3, #16
 8005f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f06:	e032      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a30      	ldr	r2, [pc, #192]	; (8005fd0 <UART_SetConfig+0x2e0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d12a      	bne.n	8005f68 <UART_SetConfig+0x278>
 8005f12:	4b31      	ldr	r3, [pc, #196]	; (8005fd8 <UART_SetConfig+0x2e8>)
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f20:	d01a      	beq.n	8005f58 <UART_SetConfig+0x268>
 8005f22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f26:	d81b      	bhi.n	8005f60 <UART_SetConfig+0x270>
 8005f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f2c:	d00c      	beq.n	8005f48 <UART_SetConfig+0x258>
 8005f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f32:	d815      	bhi.n	8005f60 <UART_SetConfig+0x270>
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <UART_SetConfig+0x250>
 8005f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f3c:	d008      	beq.n	8005f50 <UART_SetConfig+0x260>
 8005f3e:	e00f      	b.n	8005f60 <UART_SetConfig+0x270>
 8005f40:	2300      	movs	r3, #0
 8005f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f46:	e012      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f4e:	e00e      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005f50:	2304      	movs	r3, #4
 8005f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f56:	e00a      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005f58:	2308      	movs	r3, #8
 8005f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f5e:	e006      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005f60:	2310      	movs	r3, #16
 8005f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f66:	e002      	b.n	8005f6e <UART_SetConfig+0x27e>
 8005f68:	2310      	movs	r3, #16
 8005f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a17      	ldr	r2, [pc, #92]	; (8005fd0 <UART_SetConfig+0x2e0>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	f040 80a8 	bne.w	80060ca <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d834      	bhi.n	8005fec <UART_SetConfig+0x2fc>
 8005f82:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <UART_SetConfig+0x298>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08005fad 	.word	0x08005fad
 8005f8c:	08005fed 	.word	0x08005fed
 8005f90:	08005fb5 	.word	0x08005fb5
 8005f94:	08005fed 	.word	0x08005fed
 8005f98:	08005fbb 	.word	0x08005fbb
 8005f9c:	08005fed 	.word	0x08005fed
 8005fa0:	08005fed 	.word	0x08005fed
 8005fa4:	08005fed 	.word	0x08005fed
 8005fa8:	08005fc3 	.word	0x08005fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fac:	f7fd fe22 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8005fb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fb2:	e021      	b.n	8005ff8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fb4:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <UART_SetConfig+0x2f8>)
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fb8:	e01e      	b.n	8005ff8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fba:	f7fd fdad 	bl	8003b18 <HAL_RCC_GetSysClockFreq>
 8005fbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fc0:	e01a      	b.n	8005ff8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fc8:	e016      	b.n	8005ff8 <UART_SetConfig+0x308>
 8005fca:	bf00      	nop
 8005fcc:	cfff69f3 	.word	0xcfff69f3
 8005fd0:	40008000 	.word	0x40008000
 8005fd4:	40013800 	.word	0x40013800
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	40004400 	.word	0x40004400
 8005fe0:	40004800 	.word	0x40004800
 8005fe4:	40004c00 	.word	0x40004c00
 8005fe8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ff6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 812a 	beq.w	8006254 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	4a9e      	ldr	r2, [pc, #632]	; (8006280 <UART_SetConfig+0x590>)
 8006006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800600a:	461a      	mov	r2, r3
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006012:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	4613      	mov	r3, r2
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	4413      	add	r3, r2
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	429a      	cmp	r2, r3
 8006022:	d305      	bcc.n	8006030 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	429a      	cmp	r2, r3
 800602e:	d903      	bls.n	8006038 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006036:	e10d      	b.n	8006254 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	2200      	movs	r2, #0
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	60fa      	str	r2, [r7, #12]
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	4a8e      	ldr	r2, [pc, #568]	; (8006280 <UART_SetConfig+0x590>)
 8006046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800604a:	b29b      	uxth	r3, r3
 800604c:	2200      	movs	r2, #0
 800604e:	603b      	str	r3, [r7, #0]
 8006050:	607a      	str	r2, [r7, #4]
 8006052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006056:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800605a:	f7fa fdcd 	bl	8000bf8 <__aeabi_uldivmod>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4610      	mov	r0, r2
 8006064:	4619      	mov	r1, r3
 8006066:	f04f 0200 	mov.w	r2, #0
 800606a:	f04f 0300 	mov.w	r3, #0
 800606e:	020b      	lsls	r3, r1, #8
 8006070:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006074:	0202      	lsls	r2, r0, #8
 8006076:	6979      	ldr	r1, [r7, #20]
 8006078:	6849      	ldr	r1, [r1, #4]
 800607a:	0849      	lsrs	r1, r1, #1
 800607c:	2000      	movs	r0, #0
 800607e:	460c      	mov	r4, r1
 8006080:	4605      	mov	r5, r0
 8006082:	eb12 0804 	adds.w	r8, r2, r4
 8006086:	eb43 0905 	adc.w	r9, r3, r5
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	469a      	mov	sl, r3
 8006092:	4693      	mov	fp, r2
 8006094:	4652      	mov	r2, sl
 8006096:	465b      	mov	r3, fp
 8006098:	4640      	mov	r0, r8
 800609a:	4649      	mov	r1, r9
 800609c:	f7fa fdac 	bl	8000bf8 <__aeabi_uldivmod>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4613      	mov	r3, r2
 80060a6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ae:	d308      	bcc.n	80060c2 <UART_SetConfig+0x3d2>
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060b6:	d204      	bcs.n	80060c2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6a3a      	ldr	r2, [r7, #32]
 80060be:	60da      	str	r2, [r3, #12]
 80060c0:	e0c8      	b.n	8006254 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060c8:	e0c4      	b.n	8006254 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d2:	d167      	bne.n	80061a4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80060d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d828      	bhi.n	800612e <UART_SetConfig+0x43e>
 80060dc:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <UART_SetConfig+0x3f4>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	08006109 	.word	0x08006109
 80060e8:	08006111 	.word	0x08006111
 80060ec:	08006119 	.word	0x08006119
 80060f0:	0800612f 	.word	0x0800612f
 80060f4:	0800611f 	.word	0x0800611f
 80060f8:	0800612f 	.word	0x0800612f
 80060fc:	0800612f 	.word	0x0800612f
 8006100:	0800612f 	.word	0x0800612f
 8006104:	08006127 	.word	0x08006127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006108:	f7fd fd74 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 800610c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800610e:	e014      	b.n	800613a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006110:	f7fd fd86 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 8006114:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006116:	e010      	b.n	800613a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006118:	4b5a      	ldr	r3, [pc, #360]	; (8006284 <UART_SetConfig+0x594>)
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800611c:	e00d      	b.n	800613a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800611e:	f7fd fcfb 	bl	8003b18 <HAL_RCC_GetSysClockFreq>
 8006122:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006124:	e009      	b.n	800613a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800612c:	e005      	b.n	800613a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006138:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8089 	beq.w	8006254 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	4a4e      	ldr	r2, [pc, #312]	; (8006280 <UART_SetConfig+0x590>)
 8006148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800614c:	461a      	mov	r2, r3
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	fbb3 f3f2 	udiv	r3, r3, r2
 8006154:	005a      	lsls	r2, r3, #1
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	085b      	lsrs	r3, r3, #1
 800615c:	441a      	add	r2, r3
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	fbb2 f3f3 	udiv	r3, r2, r3
 8006166:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	2b0f      	cmp	r3, #15
 800616c:	d916      	bls.n	800619c <UART_SetConfig+0x4ac>
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006174:	d212      	bcs.n	800619c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	b29b      	uxth	r3, r3
 800617a:	f023 030f 	bic.w	r3, r3, #15
 800617e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	085b      	lsrs	r3, r3, #1
 8006184:	b29b      	uxth	r3, r3
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	b29a      	uxth	r2, r3
 800618c:	8bfb      	ldrh	r3, [r7, #30]
 800618e:	4313      	orrs	r3, r2
 8006190:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	8bfa      	ldrh	r2, [r7, #30]
 8006198:	60da      	str	r2, [r3, #12]
 800619a:	e05b      	b.n	8006254 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80061a2:	e057      	b.n	8006254 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d828      	bhi.n	80061fe <UART_SetConfig+0x50e>
 80061ac:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <UART_SetConfig+0x4c4>)
 80061ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b2:	bf00      	nop
 80061b4:	080061d9 	.word	0x080061d9
 80061b8:	080061e1 	.word	0x080061e1
 80061bc:	080061e9 	.word	0x080061e9
 80061c0:	080061ff 	.word	0x080061ff
 80061c4:	080061ef 	.word	0x080061ef
 80061c8:	080061ff 	.word	0x080061ff
 80061cc:	080061ff 	.word	0x080061ff
 80061d0:	080061ff 	.word	0x080061ff
 80061d4:	080061f7 	.word	0x080061f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061d8:	f7fd fd0c 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 80061dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061de:	e014      	b.n	800620a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061e0:	f7fd fd1e 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 80061e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061e6:	e010      	b.n	800620a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061e8:	4b26      	ldr	r3, [pc, #152]	; (8006284 <UART_SetConfig+0x594>)
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061ec:	e00d      	b.n	800620a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ee:	f7fd fc93 	bl	8003b18 <HAL_RCC_GetSysClockFreq>
 80061f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061f4:	e009      	b.n	800620a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061fc:	e005      	b.n	800620a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006208:	bf00      	nop
    }

    if (pclk != 0U)
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	2b00      	cmp	r3, #0
 800620e:	d021      	beq.n	8006254 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	4a1a      	ldr	r2, [pc, #104]	; (8006280 <UART_SetConfig+0x590>)
 8006216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800621a:	461a      	mov	r2, r3
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	085b      	lsrs	r3, r3, #1
 8006228:	441a      	add	r2, r3
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006232:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	2b0f      	cmp	r3, #15
 8006238:	d909      	bls.n	800624e <UART_SetConfig+0x55e>
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006240:	d205      	bcs.n	800624e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	b29a      	uxth	r2, r3
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60da      	str	r2, [r3, #12]
 800624c:	e002      	b.n	8006254 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2201      	movs	r2, #1
 8006258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2201      	movs	r2, #1
 8006260:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2200      	movs	r2, #0
 8006268:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2200      	movs	r2, #0
 800626e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006270:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006274:	4618      	mov	r0, r3
 8006276:	3730      	adds	r7, #48	; 0x30
 8006278:	46bd      	mov	sp, r7
 800627a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800627e:	bf00      	nop
 8006280:	08009210 	.word	0x08009210
 8006284:	00f42400 	.word	0x00f42400

08006288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00a      	beq.n	80062b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d8:	f003 0304 	and.w	r3, r3, #4
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00a      	beq.n	80062f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fa:	f003 0308 	and.w	r3, r3, #8
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00a      	beq.n	8006318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631c:	f003 0310 	and.w	r3, r3, #16
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00a      	beq.n	800633a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633e:	f003 0320 	and.w	r3, r3, #32
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01a      	beq.n	800639e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006386:	d10a      	bne.n	800639e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	605a      	str	r2, [r3, #4]
  }
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063dc:	f7fb fdae 	bl	8001f3c <HAL_GetTick>
 80063e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0308 	and.w	r3, r3, #8
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d10e      	bne.n	800640e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f82f 	bl	8006462 <UART_WaitOnFlagUntilTimeout>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e025      	b.n	800645a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b04      	cmp	r3, #4
 800641a:	d10e      	bne.n	800643a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800641c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f819 	bl	8006462 <UART_WaitOnFlagUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e00f      	b.n	800645a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2220      	movs	r2, #32
 800643e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2220      	movs	r2, #32
 8006446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b09c      	sub	sp, #112	; 0x70
 8006466:	af00      	add	r7, sp, #0
 8006468:	60f8      	str	r0, [r7, #12]
 800646a:	60b9      	str	r1, [r7, #8]
 800646c:	603b      	str	r3, [r7, #0]
 800646e:	4613      	mov	r3, r2
 8006470:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006472:	e0a9      	b.n	80065c8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	f000 80a5 	beq.w	80065c8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647e:	f7fb fd5d 	bl	8001f3c <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800648a:	429a      	cmp	r2, r3
 800648c:	d302      	bcc.n	8006494 <UART_WaitOnFlagUntilTimeout+0x32>
 800648e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006490:	2b00      	cmp	r3, #0
 8006492:	d140      	bne.n	8006516 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800649c:	e853 3f00 	ldrex	r3, [r3]
 80064a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80064a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064a8:	667b      	str	r3, [r7, #100]	; 0x64
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80064b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80064ba:	e841 2300 	strex	r3, r2, [r1]
 80064be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80064c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1e6      	bne.n	8006494 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3308      	adds	r3, #8
 80064cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d0:	e853 3f00 	ldrex	r3, [r3]
 80064d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d8:	f023 0301 	bic.w	r3, r3, #1
 80064dc:	663b      	str	r3, [r7, #96]	; 0x60
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3308      	adds	r3, #8
 80064e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80064e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064ee:	e841 2300 	strex	r3, r2, [r1]
 80064f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1e5      	bne.n	80064c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2220      	movs	r2, #32
 8006506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e069      	b.n	80065ea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	d051      	beq.n	80065c8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800652e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006532:	d149      	bne.n	80065c8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800653c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	e853 3f00 	ldrex	r3, [r3]
 800654a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006552:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	461a      	mov	r2, r3
 800655a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800655c:	637b      	str	r3, [r7, #52]	; 0x34
 800655e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006560:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006564:	e841 2300 	strex	r3, r2, [r1]
 8006568:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800656a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1e6      	bne.n	800653e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3308      	adds	r3, #8
 8006576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	e853 3f00 	ldrex	r3, [r3]
 800657e:	613b      	str	r3, [r7, #16]
   return(result);
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f023 0301 	bic.w	r3, r3, #1
 8006586:	66bb      	str	r3, [r7, #104]	; 0x68
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3308      	adds	r3, #8
 800658e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006590:	623a      	str	r2, [r7, #32]
 8006592:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006594:	69f9      	ldr	r1, [r7, #28]
 8006596:	6a3a      	ldr	r2, [r7, #32]
 8006598:	e841 2300 	strex	r3, r2, [r1]
 800659c:	61bb      	str	r3, [r7, #24]
   return(result);
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1e5      	bne.n	8006570 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e010      	b.n	80065ea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	69da      	ldr	r2, [r3, #28]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	4013      	ands	r3, r2
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	bf0c      	ite	eq
 80065d8:	2301      	moveq	r3, #1
 80065da:	2300      	movne	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	f43f af46 	beq.w	8006474 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3770      	adds	r7, #112	; 0x70
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b085      	sub	sp, #20
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_UARTEx_DisableFifoMode+0x16>
 8006604:	2302      	movs	r3, #2
 8006606:	e027      	b.n	8006658 <HAL_UARTEx_DisableFifoMode+0x66>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2224      	movs	r2, #36	; 0x24
 8006614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0201 	bic.w	r2, r2, #1
 800662e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006636:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2220      	movs	r2, #32
 800664a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006674:	2b01      	cmp	r3, #1
 8006676:	d101      	bne.n	800667c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006678:	2302      	movs	r3, #2
 800667a:	e02d      	b.n	80066d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2224      	movs	r2, #36	; 0x24
 8006688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0201 	bic.w	r2, r2, #1
 80066a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f84f 	bl	800675c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e02d      	b.n	8006754 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2224      	movs	r2, #36	; 0x24
 8006704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0201 	bic.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f811 	bl	800675c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006768:	2b00      	cmp	r3, #0
 800676a:	d108      	bne.n	800677e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800677c:	e031      	b.n	80067e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800677e:	2308      	movs	r3, #8
 8006780:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006782:	2308      	movs	r3, #8
 8006784:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	0e5b      	lsrs	r3, r3, #25
 800678e:	b2db      	uxtb	r3, r3
 8006790:	f003 0307 	and.w	r3, r3, #7
 8006794:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	0f5b      	lsrs	r3, r3, #29
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067a6:	7bbb      	ldrb	r3, [r7, #14]
 80067a8:	7b3a      	ldrb	r2, [r7, #12]
 80067aa:	4911      	ldr	r1, [pc, #68]	; (80067f0 <UARTEx_SetNbDataToProcess+0x94>)
 80067ac:	5c8a      	ldrb	r2, [r1, r2]
 80067ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80067b2:	7b3a      	ldrb	r2, [r7, #12]
 80067b4:	490f      	ldr	r1, [pc, #60]	; (80067f4 <UARTEx_SetNbDataToProcess+0x98>)
 80067b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80067bc:	b29a      	uxth	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	7b7a      	ldrb	r2, [r7, #13]
 80067c8:	4909      	ldr	r1, [pc, #36]	; (80067f0 <UARTEx_SetNbDataToProcess+0x94>)
 80067ca:	5c8a      	ldrb	r2, [r1, r2]
 80067cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80067d0:	7b7a      	ldrb	r2, [r7, #13]
 80067d2:	4908      	ldr	r1, [pc, #32]	; (80067f4 <UARTEx_SetNbDataToProcess+0x98>)
 80067d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80067da:	b29a      	uxth	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80067e2:	bf00      	nop
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	08009228 	.word	0x08009228
 80067f4:	08009230 	.word	0x08009230

080067f8 <__cvt>:
 80067f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067fc:	ec55 4b10 	vmov	r4, r5, d0
 8006800:	2d00      	cmp	r5, #0
 8006802:	460e      	mov	r6, r1
 8006804:	4619      	mov	r1, r3
 8006806:	462b      	mov	r3, r5
 8006808:	bfbb      	ittet	lt
 800680a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800680e:	461d      	movlt	r5, r3
 8006810:	2300      	movge	r3, #0
 8006812:	232d      	movlt	r3, #45	; 0x2d
 8006814:	700b      	strb	r3, [r1, #0]
 8006816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006818:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800681c:	4691      	mov	r9, r2
 800681e:	f023 0820 	bic.w	r8, r3, #32
 8006822:	bfbc      	itt	lt
 8006824:	4622      	movlt	r2, r4
 8006826:	4614      	movlt	r4, r2
 8006828:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800682c:	d005      	beq.n	800683a <__cvt+0x42>
 800682e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006832:	d100      	bne.n	8006836 <__cvt+0x3e>
 8006834:	3601      	adds	r6, #1
 8006836:	2102      	movs	r1, #2
 8006838:	e000      	b.n	800683c <__cvt+0x44>
 800683a:	2103      	movs	r1, #3
 800683c:	ab03      	add	r3, sp, #12
 800683e:	9301      	str	r3, [sp, #4]
 8006840:	ab02      	add	r3, sp, #8
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	ec45 4b10 	vmov	d0, r4, r5
 8006848:	4653      	mov	r3, sl
 800684a:	4632      	mov	r2, r6
 800684c:	f000 fe5c 	bl	8007508 <_dtoa_r>
 8006850:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006854:	4607      	mov	r7, r0
 8006856:	d102      	bne.n	800685e <__cvt+0x66>
 8006858:	f019 0f01 	tst.w	r9, #1
 800685c:	d022      	beq.n	80068a4 <__cvt+0xac>
 800685e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006862:	eb07 0906 	add.w	r9, r7, r6
 8006866:	d110      	bne.n	800688a <__cvt+0x92>
 8006868:	783b      	ldrb	r3, [r7, #0]
 800686a:	2b30      	cmp	r3, #48	; 0x30
 800686c:	d10a      	bne.n	8006884 <__cvt+0x8c>
 800686e:	2200      	movs	r2, #0
 8006870:	2300      	movs	r3, #0
 8006872:	4620      	mov	r0, r4
 8006874:	4629      	mov	r1, r5
 8006876:	f7fa f94f 	bl	8000b18 <__aeabi_dcmpeq>
 800687a:	b918      	cbnz	r0, 8006884 <__cvt+0x8c>
 800687c:	f1c6 0601 	rsb	r6, r6, #1
 8006880:	f8ca 6000 	str.w	r6, [sl]
 8006884:	f8da 3000 	ldr.w	r3, [sl]
 8006888:	4499      	add	r9, r3
 800688a:	2200      	movs	r2, #0
 800688c:	2300      	movs	r3, #0
 800688e:	4620      	mov	r0, r4
 8006890:	4629      	mov	r1, r5
 8006892:	f7fa f941 	bl	8000b18 <__aeabi_dcmpeq>
 8006896:	b108      	cbz	r0, 800689c <__cvt+0xa4>
 8006898:	f8cd 900c 	str.w	r9, [sp, #12]
 800689c:	2230      	movs	r2, #48	; 0x30
 800689e:	9b03      	ldr	r3, [sp, #12]
 80068a0:	454b      	cmp	r3, r9
 80068a2:	d307      	bcc.n	80068b4 <__cvt+0xbc>
 80068a4:	9b03      	ldr	r3, [sp, #12]
 80068a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068a8:	1bdb      	subs	r3, r3, r7
 80068aa:	4638      	mov	r0, r7
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	b004      	add	sp, #16
 80068b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b4:	1c59      	adds	r1, r3, #1
 80068b6:	9103      	str	r1, [sp, #12]
 80068b8:	701a      	strb	r2, [r3, #0]
 80068ba:	e7f0      	b.n	800689e <__cvt+0xa6>

080068bc <__exponent>:
 80068bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068be:	4603      	mov	r3, r0
 80068c0:	2900      	cmp	r1, #0
 80068c2:	bfb8      	it	lt
 80068c4:	4249      	neglt	r1, r1
 80068c6:	f803 2b02 	strb.w	r2, [r3], #2
 80068ca:	bfb4      	ite	lt
 80068cc:	222d      	movlt	r2, #45	; 0x2d
 80068ce:	222b      	movge	r2, #43	; 0x2b
 80068d0:	2909      	cmp	r1, #9
 80068d2:	7042      	strb	r2, [r0, #1]
 80068d4:	dd2a      	ble.n	800692c <__exponent+0x70>
 80068d6:	f10d 0207 	add.w	r2, sp, #7
 80068da:	4617      	mov	r7, r2
 80068dc:	260a      	movs	r6, #10
 80068de:	4694      	mov	ip, r2
 80068e0:	fb91 f5f6 	sdiv	r5, r1, r6
 80068e4:	fb06 1415 	mls	r4, r6, r5, r1
 80068e8:	3430      	adds	r4, #48	; 0x30
 80068ea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80068ee:	460c      	mov	r4, r1
 80068f0:	2c63      	cmp	r4, #99	; 0x63
 80068f2:	f102 32ff 	add.w	r2, r2, #4294967295
 80068f6:	4629      	mov	r1, r5
 80068f8:	dcf1      	bgt.n	80068de <__exponent+0x22>
 80068fa:	3130      	adds	r1, #48	; 0x30
 80068fc:	f1ac 0402 	sub.w	r4, ip, #2
 8006900:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006904:	1c41      	adds	r1, r0, #1
 8006906:	4622      	mov	r2, r4
 8006908:	42ba      	cmp	r2, r7
 800690a:	d30a      	bcc.n	8006922 <__exponent+0x66>
 800690c:	f10d 0209 	add.w	r2, sp, #9
 8006910:	eba2 020c 	sub.w	r2, r2, ip
 8006914:	42bc      	cmp	r4, r7
 8006916:	bf88      	it	hi
 8006918:	2200      	movhi	r2, #0
 800691a:	4413      	add	r3, r2
 800691c:	1a18      	subs	r0, r3, r0
 800691e:	b003      	add	sp, #12
 8006920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006922:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006926:	f801 5f01 	strb.w	r5, [r1, #1]!
 800692a:	e7ed      	b.n	8006908 <__exponent+0x4c>
 800692c:	2330      	movs	r3, #48	; 0x30
 800692e:	3130      	adds	r1, #48	; 0x30
 8006930:	7083      	strb	r3, [r0, #2]
 8006932:	70c1      	strb	r1, [r0, #3]
 8006934:	1d03      	adds	r3, r0, #4
 8006936:	e7f1      	b.n	800691c <__exponent+0x60>

08006938 <_printf_float>:
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	ed2d 8b02 	vpush	{d8}
 8006940:	b08d      	sub	sp, #52	; 0x34
 8006942:	460c      	mov	r4, r1
 8006944:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006948:	4616      	mov	r6, r2
 800694a:	461f      	mov	r7, r3
 800694c:	4605      	mov	r5, r0
 800694e:	f000 fcd9 	bl	8007304 <_localeconv_r>
 8006952:	f8d0 a000 	ldr.w	sl, [r0]
 8006956:	4650      	mov	r0, sl
 8006958:	f7f9 fcb2 	bl	80002c0 <strlen>
 800695c:	2300      	movs	r3, #0
 800695e:	930a      	str	r3, [sp, #40]	; 0x28
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	9305      	str	r3, [sp, #20]
 8006964:	f8d8 3000 	ldr.w	r3, [r8]
 8006968:	f894 b018 	ldrb.w	fp, [r4, #24]
 800696c:	3307      	adds	r3, #7
 800696e:	f023 0307 	bic.w	r3, r3, #7
 8006972:	f103 0208 	add.w	r2, r3, #8
 8006976:	f8c8 2000 	str.w	r2, [r8]
 800697a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800697e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006982:	9307      	str	r3, [sp, #28]
 8006984:	f8cd 8018 	str.w	r8, [sp, #24]
 8006988:	ee08 0a10 	vmov	s16, r0
 800698c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006990:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006994:	4b9e      	ldr	r3, [pc, #632]	; (8006c10 <_printf_float+0x2d8>)
 8006996:	f04f 32ff 	mov.w	r2, #4294967295
 800699a:	f7fa f8ef 	bl	8000b7c <__aeabi_dcmpun>
 800699e:	bb88      	cbnz	r0, 8006a04 <_printf_float+0xcc>
 80069a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069a4:	4b9a      	ldr	r3, [pc, #616]	; (8006c10 <_printf_float+0x2d8>)
 80069a6:	f04f 32ff 	mov.w	r2, #4294967295
 80069aa:	f7fa f8c9 	bl	8000b40 <__aeabi_dcmple>
 80069ae:	bb48      	cbnz	r0, 8006a04 <_printf_float+0xcc>
 80069b0:	2200      	movs	r2, #0
 80069b2:	2300      	movs	r3, #0
 80069b4:	4640      	mov	r0, r8
 80069b6:	4649      	mov	r1, r9
 80069b8:	f7fa f8b8 	bl	8000b2c <__aeabi_dcmplt>
 80069bc:	b110      	cbz	r0, 80069c4 <_printf_float+0x8c>
 80069be:	232d      	movs	r3, #45	; 0x2d
 80069c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c4:	4a93      	ldr	r2, [pc, #588]	; (8006c14 <_printf_float+0x2dc>)
 80069c6:	4b94      	ldr	r3, [pc, #592]	; (8006c18 <_printf_float+0x2e0>)
 80069c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80069cc:	bf94      	ite	ls
 80069ce:	4690      	movls	r8, r2
 80069d0:	4698      	movhi	r8, r3
 80069d2:	2303      	movs	r3, #3
 80069d4:	6123      	str	r3, [r4, #16]
 80069d6:	9b05      	ldr	r3, [sp, #20]
 80069d8:	f023 0304 	bic.w	r3, r3, #4
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	f04f 0900 	mov.w	r9, #0
 80069e2:	9700      	str	r7, [sp, #0]
 80069e4:	4633      	mov	r3, r6
 80069e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80069e8:	4621      	mov	r1, r4
 80069ea:	4628      	mov	r0, r5
 80069ec:	f000 f9da 	bl	8006da4 <_printf_common>
 80069f0:	3001      	adds	r0, #1
 80069f2:	f040 8090 	bne.w	8006b16 <_printf_float+0x1de>
 80069f6:	f04f 30ff 	mov.w	r0, #4294967295
 80069fa:	b00d      	add	sp, #52	; 0x34
 80069fc:	ecbd 8b02 	vpop	{d8}
 8006a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a04:	4642      	mov	r2, r8
 8006a06:	464b      	mov	r3, r9
 8006a08:	4640      	mov	r0, r8
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	f7fa f8b6 	bl	8000b7c <__aeabi_dcmpun>
 8006a10:	b140      	cbz	r0, 8006a24 <_printf_float+0xec>
 8006a12:	464b      	mov	r3, r9
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	bfbc      	itt	lt
 8006a18:	232d      	movlt	r3, #45	; 0x2d
 8006a1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a1e:	4a7f      	ldr	r2, [pc, #508]	; (8006c1c <_printf_float+0x2e4>)
 8006a20:	4b7f      	ldr	r3, [pc, #508]	; (8006c20 <_printf_float+0x2e8>)
 8006a22:	e7d1      	b.n	80069c8 <_printf_float+0x90>
 8006a24:	6863      	ldr	r3, [r4, #4]
 8006a26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006a2a:	9206      	str	r2, [sp, #24]
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	d13f      	bne.n	8006ab0 <_printf_float+0x178>
 8006a30:	2306      	movs	r3, #6
 8006a32:	6063      	str	r3, [r4, #4]
 8006a34:	9b05      	ldr	r3, [sp, #20]
 8006a36:	6861      	ldr	r1, [r4, #4]
 8006a38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	9303      	str	r3, [sp, #12]
 8006a40:	ab0a      	add	r3, sp, #40	; 0x28
 8006a42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006a46:	ab09      	add	r3, sp, #36	; 0x24
 8006a48:	ec49 8b10 	vmov	d0, r8, r9
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	6022      	str	r2, [r4, #0]
 8006a50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a54:	4628      	mov	r0, r5
 8006a56:	f7ff fecf 	bl	80067f8 <__cvt>
 8006a5a:	9b06      	ldr	r3, [sp, #24]
 8006a5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a5e:	2b47      	cmp	r3, #71	; 0x47
 8006a60:	4680      	mov	r8, r0
 8006a62:	d108      	bne.n	8006a76 <_printf_float+0x13e>
 8006a64:	1cc8      	adds	r0, r1, #3
 8006a66:	db02      	blt.n	8006a6e <_printf_float+0x136>
 8006a68:	6863      	ldr	r3, [r4, #4]
 8006a6a:	4299      	cmp	r1, r3
 8006a6c:	dd41      	ble.n	8006af2 <_printf_float+0x1ba>
 8006a6e:	f1ab 0302 	sub.w	r3, fp, #2
 8006a72:	fa5f fb83 	uxtb.w	fp, r3
 8006a76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a7a:	d820      	bhi.n	8006abe <_printf_float+0x186>
 8006a7c:	3901      	subs	r1, #1
 8006a7e:	465a      	mov	r2, fp
 8006a80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a84:	9109      	str	r1, [sp, #36]	; 0x24
 8006a86:	f7ff ff19 	bl	80068bc <__exponent>
 8006a8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a8c:	1813      	adds	r3, r2, r0
 8006a8e:	2a01      	cmp	r2, #1
 8006a90:	4681      	mov	r9, r0
 8006a92:	6123      	str	r3, [r4, #16]
 8006a94:	dc02      	bgt.n	8006a9c <_printf_float+0x164>
 8006a96:	6822      	ldr	r2, [r4, #0]
 8006a98:	07d2      	lsls	r2, r2, #31
 8006a9a:	d501      	bpl.n	8006aa0 <_printf_float+0x168>
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	6123      	str	r3, [r4, #16]
 8006aa0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d09c      	beq.n	80069e2 <_printf_float+0xaa>
 8006aa8:	232d      	movs	r3, #45	; 0x2d
 8006aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aae:	e798      	b.n	80069e2 <_printf_float+0xaa>
 8006ab0:	9a06      	ldr	r2, [sp, #24]
 8006ab2:	2a47      	cmp	r2, #71	; 0x47
 8006ab4:	d1be      	bne.n	8006a34 <_printf_float+0xfc>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1bc      	bne.n	8006a34 <_printf_float+0xfc>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e7b9      	b.n	8006a32 <_printf_float+0xfa>
 8006abe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ac2:	d118      	bne.n	8006af6 <_printf_float+0x1be>
 8006ac4:	2900      	cmp	r1, #0
 8006ac6:	6863      	ldr	r3, [r4, #4]
 8006ac8:	dd0b      	ble.n	8006ae2 <_printf_float+0x1aa>
 8006aca:	6121      	str	r1, [r4, #16]
 8006acc:	b913      	cbnz	r3, 8006ad4 <_printf_float+0x19c>
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	07d0      	lsls	r0, r2, #31
 8006ad2:	d502      	bpl.n	8006ada <_printf_float+0x1a2>
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	440b      	add	r3, r1
 8006ad8:	6123      	str	r3, [r4, #16]
 8006ada:	65a1      	str	r1, [r4, #88]	; 0x58
 8006adc:	f04f 0900 	mov.w	r9, #0
 8006ae0:	e7de      	b.n	8006aa0 <_printf_float+0x168>
 8006ae2:	b913      	cbnz	r3, 8006aea <_printf_float+0x1b2>
 8006ae4:	6822      	ldr	r2, [r4, #0]
 8006ae6:	07d2      	lsls	r2, r2, #31
 8006ae8:	d501      	bpl.n	8006aee <_printf_float+0x1b6>
 8006aea:	3302      	adds	r3, #2
 8006aec:	e7f4      	b.n	8006ad8 <_printf_float+0x1a0>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e7f2      	b.n	8006ad8 <_printf_float+0x1a0>
 8006af2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af8:	4299      	cmp	r1, r3
 8006afa:	db05      	blt.n	8006b08 <_printf_float+0x1d0>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	6121      	str	r1, [r4, #16]
 8006b00:	07d8      	lsls	r0, r3, #31
 8006b02:	d5ea      	bpl.n	8006ada <_printf_float+0x1a2>
 8006b04:	1c4b      	adds	r3, r1, #1
 8006b06:	e7e7      	b.n	8006ad8 <_printf_float+0x1a0>
 8006b08:	2900      	cmp	r1, #0
 8006b0a:	bfd4      	ite	le
 8006b0c:	f1c1 0202 	rsble	r2, r1, #2
 8006b10:	2201      	movgt	r2, #1
 8006b12:	4413      	add	r3, r2
 8006b14:	e7e0      	b.n	8006ad8 <_printf_float+0x1a0>
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	055a      	lsls	r2, r3, #21
 8006b1a:	d407      	bmi.n	8006b2c <_printf_float+0x1f4>
 8006b1c:	6923      	ldr	r3, [r4, #16]
 8006b1e:	4642      	mov	r2, r8
 8006b20:	4631      	mov	r1, r6
 8006b22:	4628      	mov	r0, r5
 8006b24:	47b8      	blx	r7
 8006b26:	3001      	adds	r0, #1
 8006b28:	d12c      	bne.n	8006b84 <_printf_float+0x24c>
 8006b2a:	e764      	b.n	80069f6 <_printf_float+0xbe>
 8006b2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b30:	f240 80e0 	bls.w	8006cf4 <_printf_float+0x3bc>
 8006b34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b38:	2200      	movs	r2, #0
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f7f9 ffec 	bl	8000b18 <__aeabi_dcmpeq>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d034      	beq.n	8006bae <_printf_float+0x276>
 8006b44:	4a37      	ldr	r2, [pc, #220]	; (8006c24 <_printf_float+0x2ec>)
 8006b46:	2301      	movs	r3, #1
 8006b48:	4631      	mov	r1, r6
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	47b8      	blx	r7
 8006b4e:	3001      	adds	r0, #1
 8006b50:	f43f af51 	beq.w	80069f6 <_printf_float+0xbe>
 8006b54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	db02      	blt.n	8006b62 <_printf_float+0x22a>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	07d8      	lsls	r0, r3, #31
 8006b60:	d510      	bpl.n	8006b84 <_printf_float+0x24c>
 8006b62:	ee18 3a10 	vmov	r3, s16
 8006b66:	4652      	mov	r2, sl
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	47b8      	blx	r7
 8006b6e:	3001      	adds	r0, #1
 8006b70:	f43f af41 	beq.w	80069f6 <_printf_float+0xbe>
 8006b74:	f04f 0800 	mov.w	r8, #0
 8006b78:	f104 091a 	add.w	r9, r4, #26
 8006b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	4543      	cmp	r3, r8
 8006b82:	dc09      	bgt.n	8006b98 <_printf_float+0x260>
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	079b      	lsls	r3, r3, #30
 8006b88:	f100 8107 	bmi.w	8006d9a <_printf_float+0x462>
 8006b8c:	68e0      	ldr	r0, [r4, #12]
 8006b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b90:	4298      	cmp	r0, r3
 8006b92:	bfb8      	it	lt
 8006b94:	4618      	movlt	r0, r3
 8006b96:	e730      	b.n	80069fa <_printf_float+0xc2>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	464a      	mov	r2, r9
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	47b8      	blx	r7
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	f43f af27 	beq.w	80069f6 <_printf_float+0xbe>
 8006ba8:	f108 0801 	add.w	r8, r8, #1
 8006bac:	e7e6      	b.n	8006b7c <_printf_float+0x244>
 8006bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	dc39      	bgt.n	8006c28 <_printf_float+0x2f0>
 8006bb4:	4a1b      	ldr	r2, [pc, #108]	; (8006c24 <_printf_float+0x2ec>)
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	4631      	mov	r1, r6
 8006bba:	4628      	mov	r0, r5
 8006bbc:	47b8      	blx	r7
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	f43f af19 	beq.w	80069f6 <_printf_float+0xbe>
 8006bc4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	d102      	bne.n	8006bd2 <_printf_float+0x29a>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	07d9      	lsls	r1, r3, #31
 8006bd0:	d5d8      	bpl.n	8006b84 <_printf_float+0x24c>
 8006bd2:	ee18 3a10 	vmov	r3, s16
 8006bd6:	4652      	mov	r2, sl
 8006bd8:	4631      	mov	r1, r6
 8006bda:	4628      	mov	r0, r5
 8006bdc:	47b8      	blx	r7
 8006bde:	3001      	adds	r0, #1
 8006be0:	f43f af09 	beq.w	80069f6 <_printf_float+0xbe>
 8006be4:	f04f 0900 	mov.w	r9, #0
 8006be8:	f104 0a1a 	add.w	sl, r4, #26
 8006bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bee:	425b      	negs	r3, r3
 8006bf0:	454b      	cmp	r3, r9
 8006bf2:	dc01      	bgt.n	8006bf8 <_printf_float+0x2c0>
 8006bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf6:	e792      	b.n	8006b1e <_printf_float+0x1e6>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	4652      	mov	r2, sl
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	4628      	mov	r0, r5
 8006c00:	47b8      	blx	r7
 8006c02:	3001      	adds	r0, #1
 8006c04:	f43f aef7 	beq.w	80069f6 <_printf_float+0xbe>
 8006c08:	f109 0901 	add.w	r9, r9, #1
 8006c0c:	e7ee      	b.n	8006bec <_printf_float+0x2b4>
 8006c0e:	bf00      	nop
 8006c10:	7fefffff 	.word	0x7fefffff
 8006c14:	08009238 	.word	0x08009238
 8006c18:	0800923c 	.word	0x0800923c
 8006c1c:	08009240 	.word	0x08009240
 8006c20:	08009244 	.word	0x08009244
 8006c24:	08009248 	.word	0x08009248
 8006c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	bfa8      	it	ge
 8006c30:	461a      	movge	r2, r3
 8006c32:	2a00      	cmp	r2, #0
 8006c34:	4691      	mov	r9, r2
 8006c36:	dc37      	bgt.n	8006ca8 <_printf_float+0x370>
 8006c38:	f04f 0b00 	mov.w	fp, #0
 8006c3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c40:	f104 021a 	add.w	r2, r4, #26
 8006c44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c46:	9305      	str	r3, [sp, #20]
 8006c48:	eba3 0309 	sub.w	r3, r3, r9
 8006c4c:	455b      	cmp	r3, fp
 8006c4e:	dc33      	bgt.n	8006cb8 <_printf_float+0x380>
 8006c50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c54:	429a      	cmp	r2, r3
 8006c56:	db3b      	blt.n	8006cd0 <_printf_float+0x398>
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	07da      	lsls	r2, r3, #31
 8006c5c:	d438      	bmi.n	8006cd0 <_printf_float+0x398>
 8006c5e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006c62:	eba2 0903 	sub.w	r9, r2, r3
 8006c66:	9b05      	ldr	r3, [sp, #20]
 8006c68:	1ad2      	subs	r2, r2, r3
 8006c6a:	4591      	cmp	r9, r2
 8006c6c:	bfa8      	it	ge
 8006c6e:	4691      	movge	r9, r2
 8006c70:	f1b9 0f00 	cmp.w	r9, #0
 8006c74:	dc35      	bgt.n	8006ce2 <_printf_float+0x3aa>
 8006c76:	f04f 0800 	mov.w	r8, #0
 8006c7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c7e:	f104 0a1a 	add.w	sl, r4, #26
 8006c82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c86:	1a9b      	subs	r3, r3, r2
 8006c88:	eba3 0309 	sub.w	r3, r3, r9
 8006c8c:	4543      	cmp	r3, r8
 8006c8e:	f77f af79 	ble.w	8006b84 <_printf_float+0x24c>
 8006c92:	2301      	movs	r3, #1
 8006c94:	4652      	mov	r2, sl
 8006c96:	4631      	mov	r1, r6
 8006c98:	4628      	mov	r0, r5
 8006c9a:	47b8      	blx	r7
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	f43f aeaa 	beq.w	80069f6 <_printf_float+0xbe>
 8006ca2:	f108 0801 	add.w	r8, r8, #1
 8006ca6:	e7ec      	b.n	8006c82 <_printf_float+0x34a>
 8006ca8:	4613      	mov	r3, r2
 8006caa:	4631      	mov	r1, r6
 8006cac:	4642      	mov	r2, r8
 8006cae:	4628      	mov	r0, r5
 8006cb0:	47b8      	blx	r7
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	d1c0      	bne.n	8006c38 <_printf_float+0x300>
 8006cb6:	e69e      	b.n	80069f6 <_printf_float+0xbe>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	4631      	mov	r1, r6
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	9205      	str	r2, [sp, #20]
 8006cc0:	47b8      	blx	r7
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	f43f ae97 	beq.w	80069f6 <_printf_float+0xbe>
 8006cc8:	9a05      	ldr	r2, [sp, #20]
 8006cca:	f10b 0b01 	add.w	fp, fp, #1
 8006cce:	e7b9      	b.n	8006c44 <_printf_float+0x30c>
 8006cd0:	ee18 3a10 	vmov	r3, s16
 8006cd4:	4652      	mov	r2, sl
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4628      	mov	r0, r5
 8006cda:	47b8      	blx	r7
 8006cdc:	3001      	adds	r0, #1
 8006cde:	d1be      	bne.n	8006c5e <_printf_float+0x326>
 8006ce0:	e689      	b.n	80069f6 <_printf_float+0xbe>
 8006ce2:	9a05      	ldr	r2, [sp, #20]
 8006ce4:	464b      	mov	r3, r9
 8006ce6:	4442      	add	r2, r8
 8006ce8:	4631      	mov	r1, r6
 8006cea:	4628      	mov	r0, r5
 8006cec:	47b8      	blx	r7
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d1c1      	bne.n	8006c76 <_printf_float+0x33e>
 8006cf2:	e680      	b.n	80069f6 <_printf_float+0xbe>
 8006cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cf6:	2a01      	cmp	r2, #1
 8006cf8:	dc01      	bgt.n	8006cfe <_printf_float+0x3c6>
 8006cfa:	07db      	lsls	r3, r3, #31
 8006cfc:	d53a      	bpl.n	8006d74 <_printf_float+0x43c>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	4642      	mov	r2, r8
 8006d02:	4631      	mov	r1, r6
 8006d04:	4628      	mov	r0, r5
 8006d06:	47b8      	blx	r7
 8006d08:	3001      	adds	r0, #1
 8006d0a:	f43f ae74 	beq.w	80069f6 <_printf_float+0xbe>
 8006d0e:	ee18 3a10 	vmov	r3, s16
 8006d12:	4652      	mov	r2, sl
 8006d14:	4631      	mov	r1, r6
 8006d16:	4628      	mov	r0, r5
 8006d18:	47b8      	blx	r7
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	f43f ae6b 	beq.w	80069f6 <_printf_float+0xbe>
 8006d20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d24:	2200      	movs	r2, #0
 8006d26:	2300      	movs	r3, #0
 8006d28:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006d2c:	f7f9 fef4 	bl	8000b18 <__aeabi_dcmpeq>
 8006d30:	b9d8      	cbnz	r0, 8006d6a <_printf_float+0x432>
 8006d32:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006d36:	f108 0201 	add.w	r2, r8, #1
 8006d3a:	4631      	mov	r1, r6
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	47b8      	blx	r7
 8006d40:	3001      	adds	r0, #1
 8006d42:	d10e      	bne.n	8006d62 <_printf_float+0x42a>
 8006d44:	e657      	b.n	80069f6 <_printf_float+0xbe>
 8006d46:	2301      	movs	r3, #1
 8006d48:	4652      	mov	r2, sl
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	47b8      	blx	r7
 8006d50:	3001      	adds	r0, #1
 8006d52:	f43f ae50 	beq.w	80069f6 <_printf_float+0xbe>
 8006d56:	f108 0801 	add.w	r8, r8, #1
 8006d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	4543      	cmp	r3, r8
 8006d60:	dcf1      	bgt.n	8006d46 <_printf_float+0x40e>
 8006d62:	464b      	mov	r3, r9
 8006d64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d68:	e6da      	b.n	8006b20 <_printf_float+0x1e8>
 8006d6a:	f04f 0800 	mov.w	r8, #0
 8006d6e:	f104 0a1a 	add.w	sl, r4, #26
 8006d72:	e7f2      	b.n	8006d5a <_printf_float+0x422>
 8006d74:	2301      	movs	r3, #1
 8006d76:	4642      	mov	r2, r8
 8006d78:	e7df      	b.n	8006d3a <_printf_float+0x402>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	464a      	mov	r2, r9
 8006d7e:	4631      	mov	r1, r6
 8006d80:	4628      	mov	r0, r5
 8006d82:	47b8      	blx	r7
 8006d84:	3001      	adds	r0, #1
 8006d86:	f43f ae36 	beq.w	80069f6 <_printf_float+0xbe>
 8006d8a:	f108 0801 	add.w	r8, r8, #1
 8006d8e:	68e3      	ldr	r3, [r4, #12]
 8006d90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d92:	1a5b      	subs	r3, r3, r1
 8006d94:	4543      	cmp	r3, r8
 8006d96:	dcf0      	bgt.n	8006d7a <_printf_float+0x442>
 8006d98:	e6f8      	b.n	8006b8c <_printf_float+0x254>
 8006d9a:	f04f 0800 	mov.w	r8, #0
 8006d9e:	f104 0919 	add.w	r9, r4, #25
 8006da2:	e7f4      	b.n	8006d8e <_printf_float+0x456>

08006da4 <_printf_common>:
 8006da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da8:	4616      	mov	r6, r2
 8006daa:	4699      	mov	r9, r3
 8006dac:	688a      	ldr	r2, [r1, #8]
 8006dae:	690b      	ldr	r3, [r1, #16]
 8006db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006db4:	4293      	cmp	r3, r2
 8006db6:	bfb8      	it	lt
 8006db8:	4613      	movlt	r3, r2
 8006dba:	6033      	str	r3, [r6, #0]
 8006dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006dc0:	4607      	mov	r7, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	b10a      	cbz	r2, 8006dca <_printf_common+0x26>
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	6033      	str	r3, [r6, #0]
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	0699      	lsls	r1, r3, #26
 8006dce:	bf42      	ittt	mi
 8006dd0:	6833      	ldrmi	r3, [r6, #0]
 8006dd2:	3302      	addmi	r3, #2
 8006dd4:	6033      	strmi	r3, [r6, #0]
 8006dd6:	6825      	ldr	r5, [r4, #0]
 8006dd8:	f015 0506 	ands.w	r5, r5, #6
 8006ddc:	d106      	bne.n	8006dec <_printf_common+0x48>
 8006dde:	f104 0a19 	add.w	sl, r4, #25
 8006de2:	68e3      	ldr	r3, [r4, #12]
 8006de4:	6832      	ldr	r2, [r6, #0]
 8006de6:	1a9b      	subs	r3, r3, r2
 8006de8:	42ab      	cmp	r3, r5
 8006dea:	dc26      	bgt.n	8006e3a <_printf_common+0x96>
 8006dec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006df0:	1e13      	subs	r3, r2, #0
 8006df2:	6822      	ldr	r2, [r4, #0]
 8006df4:	bf18      	it	ne
 8006df6:	2301      	movne	r3, #1
 8006df8:	0692      	lsls	r2, r2, #26
 8006dfa:	d42b      	bmi.n	8006e54 <_printf_common+0xb0>
 8006dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e00:	4649      	mov	r1, r9
 8006e02:	4638      	mov	r0, r7
 8006e04:	47c0      	blx	r8
 8006e06:	3001      	adds	r0, #1
 8006e08:	d01e      	beq.n	8006e48 <_printf_common+0xa4>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	6922      	ldr	r2, [r4, #16]
 8006e0e:	f003 0306 	and.w	r3, r3, #6
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	bf02      	ittt	eq
 8006e16:	68e5      	ldreq	r5, [r4, #12]
 8006e18:	6833      	ldreq	r3, [r6, #0]
 8006e1a:	1aed      	subeq	r5, r5, r3
 8006e1c:	68a3      	ldr	r3, [r4, #8]
 8006e1e:	bf0c      	ite	eq
 8006e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e24:	2500      	movne	r5, #0
 8006e26:	4293      	cmp	r3, r2
 8006e28:	bfc4      	itt	gt
 8006e2a:	1a9b      	subgt	r3, r3, r2
 8006e2c:	18ed      	addgt	r5, r5, r3
 8006e2e:	2600      	movs	r6, #0
 8006e30:	341a      	adds	r4, #26
 8006e32:	42b5      	cmp	r5, r6
 8006e34:	d11a      	bne.n	8006e6c <_printf_common+0xc8>
 8006e36:	2000      	movs	r0, #0
 8006e38:	e008      	b.n	8006e4c <_printf_common+0xa8>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	4652      	mov	r2, sl
 8006e3e:	4649      	mov	r1, r9
 8006e40:	4638      	mov	r0, r7
 8006e42:	47c0      	blx	r8
 8006e44:	3001      	adds	r0, #1
 8006e46:	d103      	bne.n	8006e50 <_printf_common+0xac>
 8006e48:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e50:	3501      	adds	r5, #1
 8006e52:	e7c6      	b.n	8006de2 <_printf_common+0x3e>
 8006e54:	18e1      	adds	r1, r4, r3
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	2030      	movs	r0, #48	; 0x30
 8006e5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e5e:	4422      	add	r2, r4
 8006e60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e68:	3302      	adds	r3, #2
 8006e6a:	e7c7      	b.n	8006dfc <_printf_common+0x58>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	4622      	mov	r2, r4
 8006e70:	4649      	mov	r1, r9
 8006e72:	4638      	mov	r0, r7
 8006e74:	47c0      	blx	r8
 8006e76:	3001      	adds	r0, #1
 8006e78:	d0e6      	beq.n	8006e48 <_printf_common+0xa4>
 8006e7a:	3601      	adds	r6, #1
 8006e7c:	e7d9      	b.n	8006e32 <_printf_common+0x8e>
	...

08006e80 <_printf_i>:
 8006e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e84:	7e0f      	ldrb	r7, [r1, #24]
 8006e86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e88:	2f78      	cmp	r7, #120	; 0x78
 8006e8a:	4691      	mov	r9, r2
 8006e8c:	4680      	mov	r8, r0
 8006e8e:	460c      	mov	r4, r1
 8006e90:	469a      	mov	sl, r3
 8006e92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e96:	d807      	bhi.n	8006ea8 <_printf_i+0x28>
 8006e98:	2f62      	cmp	r7, #98	; 0x62
 8006e9a:	d80a      	bhi.n	8006eb2 <_printf_i+0x32>
 8006e9c:	2f00      	cmp	r7, #0
 8006e9e:	f000 80d4 	beq.w	800704a <_printf_i+0x1ca>
 8006ea2:	2f58      	cmp	r7, #88	; 0x58
 8006ea4:	f000 80c0 	beq.w	8007028 <_printf_i+0x1a8>
 8006ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006eb0:	e03a      	b.n	8006f28 <_printf_i+0xa8>
 8006eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006eb6:	2b15      	cmp	r3, #21
 8006eb8:	d8f6      	bhi.n	8006ea8 <_printf_i+0x28>
 8006eba:	a101      	add	r1, pc, #4	; (adr r1, 8006ec0 <_printf_i+0x40>)
 8006ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ec0:	08006f19 	.word	0x08006f19
 8006ec4:	08006f2d 	.word	0x08006f2d
 8006ec8:	08006ea9 	.word	0x08006ea9
 8006ecc:	08006ea9 	.word	0x08006ea9
 8006ed0:	08006ea9 	.word	0x08006ea9
 8006ed4:	08006ea9 	.word	0x08006ea9
 8006ed8:	08006f2d 	.word	0x08006f2d
 8006edc:	08006ea9 	.word	0x08006ea9
 8006ee0:	08006ea9 	.word	0x08006ea9
 8006ee4:	08006ea9 	.word	0x08006ea9
 8006ee8:	08006ea9 	.word	0x08006ea9
 8006eec:	08007031 	.word	0x08007031
 8006ef0:	08006f59 	.word	0x08006f59
 8006ef4:	08006feb 	.word	0x08006feb
 8006ef8:	08006ea9 	.word	0x08006ea9
 8006efc:	08006ea9 	.word	0x08006ea9
 8006f00:	08007053 	.word	0x08007053
 8006f04:	08006ea9 	.word	0x08006ea9
 8006f08:	08006f59 	.word	0x08006f59
 8006f0c:	08006ea9 	.word	0x08006ea9
 8006f10:	08006ea9 	.word	0x08006ea9
 8006f14:	08006ff3 	.word	0x08006ff3
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	1d1a      	adds	r2, r3, #4
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	602a      	str	r2, [r5, #0]
 8006f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e09f      	b.n	800706c <_printf_i+0x1ec>
 8006f2c:	6820      	ldr	r0, [r4, #0]
 8006f2e:	682b      	ldr	r3, [r5, #0]
 8006f30:	0607      	lsls	r7, r0, #24
 8006f32:	f103 0104 	add.w	r1, r3, #4
 8006f36:	6029      	str	r1, [r5, #0]
 8006f38:	d501      	bpl.n	8006f3e <_printf_i+0xbe>
 8006f3a:	681e      	ldr	r6, [r3, #0]
 8006f3c:	e003      	b.n	8006f46 <_printf_i+0xc6>
 8006f3e:	0646      	lsls	r6, r0, #25
 8006f40:	d5fb      	bpl.n	8006f3a <_printf_i+0xba>
 8006f42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006f46:	2e00      	cmp	r6, #0
 8006f48:	da03      	bge.n	8006f52 <_printf_i+0xd2>
 8006f4a:	232d      	movs	r3, #45	; 0x2d
 8006f4c:	4276      	negs	r6, r6
 8006f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f52:	485a      	ldr	r0, [pc, #360]	; (80070bc <_printf_i+0x23c>)
 8006f54:	230a      	movs	r3, #10
 8006f56:	e012      	b.n	8006f7e <_printf_i+0xfe>
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	6820      	ldr	r0, [r4, #0]
 8006f5c:	1d19      	adds	r1, r3, #4
 8006f5e:	6029      	str	r1, [r5, #0]
 8006f60:	0605      	lsls	r5, r0, #24
 8006f62:	d501      	bpl.n	8006f68 <_printf_i+0xe8>
 8006f64:	681e      	ldr	r6, [r3, #0]
 8006f66:	e002      	b.n	8006f6e <_printf_i+0xee>
 8006f68:	0641      	lsls	r1, r0, #25
 8006f6a:	d5fb      	bpl.n	8006f64 <_printf_i+0xe4>
 8006f6c:	881e      	ldrh	r6, [r3, #0]
 8006f6e:	4853      	ldr	r0, [pc, #332]	; (80070bc <_printf_i+0x23c>)
 8006f70:	2f6f      	cmp	r7, #111	; 0x6f
 8006f72:	bf0c      	ite	eq
 8006f74:	2308      	moveq	r3, #8
 8006f76:	230a      	movne	r3, #10
 8006f78:	2100      	movs	r1, #0
 8006f7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f7e:	6865      	ldr	r5, [r4, #4]
 8006f80:	60a5      	str	r5, [r4, #8]
 8006f82:	2d00      	cmp	r5, #0
 8006f84:	bfa2      	ittt	ge
 8006f86:	6821      	ldrge	r1, [r4, #0]
 8006f88:	f021 0104 	bicge.w	r1, r1, #4
 8006f8c:	6021      	strge	r1, [r4, #0]
 8006f8e:	b90e      	cbnz	r6, 8006f94 <_printf_i+0x114>
 8006f90:	2d00      	cmp	r5, #0
 8006f92:	d04b      	beq.n	800702c <_printf_i+0x1ac>
 8006f94:	4615      	mov	r5, r2
 8006f96:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f9a:	fb03 6711 	mls	r7, r3, r1, r6
 8006f9e:	5dc7      	ldrb	r7, [r0, r7]
 8006fa0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fa4:	4637      	mov	r7, r6
 8006fa6:	42bb      	cmp	r3, r7
 8006fa8:	460e      	mov	r6, r1
 8006faa:	d9f4      	bls.n	8006f96 <_printf_i+0x116>
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d10b      	bne.n	8006fc8 <_printf_i+0x148>
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	07de      	lsls	r6, r3, #31
 8006fb4:	d508      	bpl.n	8006fc8 <_printf_i+0x148>
 8006fb6:	6923      	ldr	r3, [r4, #16]
 8006fb8:	6861      	ldr	r1, [r4, #4]
 8006fba:	4299      	cmp	r1, r3
 8006fbc:	bfde      	ittt	le
 8006fbe:	2330      	movle	r3, #48	; 0x30
 8006fc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006fc8:	1b52      	subs	r2, r2, r5
 8006fca:	6122      	str	r2, [r4, #16]
 8006fcc:	f8cd a000 	str.w	sl, [sp]
 8006fd0:	464b      	mov	r3, r9
 8006fd2:	aa03      	add	r2, sp, #12
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	f7ff fee4 	bl	8006da4 <_printf_common>
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d14a      	bne.n	8007076 <_printf_i+0x1f6>
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe4:	b004      	add	sp, #16
 8006fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fea:	6823      	ldr	r3, [r4, #0]
 8006fec:	f043 0320 	orr.w	r3, r3, #32
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	4833      	ldr	r0, [pc, #204]	; (80070c0 <_printf_i+0x240>)
 8006ff4:	2778      	movs	r7, #120	; 0x78
 8006ff6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	6829      	ldr	r1, [r5, #0]
 8006ffe:	061f      	lsls	r7, r3, #24
 8007000:	f851 6b04 	ldr.w	r6, [r1], #4
 8007004:	d402      	bmi.n	800700c <_printf_i+0x18c>
 8007006:	065f      	lsls	r7, r3, #25
 8007008:	bf48      	it	mi
 800700a:	b2b6      	uxthmi	r6, r6
 800700c:	07df      	lsls	r7, r3, #31
 800700e:	bf48      	it	mi
 8007010:	f043 0320 	orrmi.w	r3, r3, #32
 8007014:	6029      	str	r1, [r5, #0]
 8007016:	bf48      	it	mi
 8007018:	6023      	strmi	r3, [r4, #0]
 800701a:	b91e      	cbnz	r6, 8007024 <_printf_i+0x1a4>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	f023 0320 	bic.w	r3, r3, #32
 8007022:	6023      	str	r3, [r4, #0]
 8007024:	2310      	movs	r3, #16
 8007026:	e7a7      	b.n	8006f78 <_printf_i+0xf8>
 8007028:	4824      	ldr	r0, [pc, #144]	; (80070bc <_printf_i+0x23c>)
 800702a:	e7e4      	b.n	8006ff6 <_printf_i+0x176>
 800702c:	4615      	mov	r5, r2
 800702e:	e7bd      	b.n	8006fac <_printf_i+0x12c>
 8007030:	682b      	ldr	r3, [r5, #0]
 8007032:	6826      	ldr	r6, [r4, #0]
 8007034:	6961      	ldr	r1, [r4, #20]
 8007036:	1d18      	adds	r0, r3, #4
 8007038:	6028      	str	r0, [r5, #0]
 800703a:	0635      	lsls	r5, r6, #24
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	d501      	bpl.n	8007044 <_printf_i+0x1c4>
 8007040:	6019      	str	r1, [r3, #0]
 8007042:	e002      	b.n	800704a <_printf_i+0x1ca>
 8007044:	0670      	lsls	r0, r6, #25
 8007046:	d5fb      	bpl.n	8007040 <_printf_i+0x1c0>
 8007048:	8019      	strh	r1, [r3, #0]
 800704a:	2300      	movs	r3, #0
 800704c:	6123      	str	r3, [r4, #16]
 800704e:	4615      	mov	r5, r2
 8007050:	e7bc      	b.n	8006fcc <_printf_i+0x14c>
 8007052:	682b      	ldr	r3, [r5, #0]
 8007054:	1d1a      	adds	r2, r3, #4
 8007056:	602a      	str	r2, [r5, #0]
 8007058:	681d      	ldr	r5, [r3, #0]
 800705a:	6862      	ldr	r2, [r4, #4]
 800705c:	2100      	movs	r1, #0
 800705e:	4628      	mov	r0, r5
 8007060:	f7f9 f8de 	bl	8000220 <memchr>
 8007064:	b108      	cbz	r0, 800706a <_printf_i+0x1ea>
 8007066:	1b40      	subs	r0, r0, r5
 8007068:	6060      	str	r0, [r4, #4]
 800706a:	6863      	ldr	r3, [r4, #4]
 800706c:	6123      	str	r3, [r4, #16]
 800706e:	2300      	movs	r3, #0
 8007070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007074:	e7aa      	b.n	8006fcc <_printf_i+0x14c>
 8007076:	6923      	ldr	r3, [r4, #16]
 8007078:	462a      	mov	r2, r5
 800707a:	4649      	mov	r1, r9
 800707c:	4640      	mov	r0, r8
 800707e:	47d0      	blx	sl
 8007080:	3001      	adds	r0, #1
 8007082:	d0ad      	beq.n	8006fe0 <_printf_i+0x160>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	079b      	lsls	r3, r3, #30
 8007088:	d413      	bmi.n	80070b2 <_printf_i+0x232>
 800708a:	68e0      	ldr	r0, [r4, #12]
 800708c:	9b03      	ldr	r3, [sp, #12]
 800708e:	4298      	cmp	r0, r3
 8007090:	bfb8      	it	lt
 8007092:	4618      	movlt	r0, r3
 8007094:	e7a6      	b.n	8006fe4 <_printf_i+0x164>
 8007096:	2301      	movs	r3, #1
 8007098:	4632      	mov	r2, r6
 800709a:	4649      	mov	r1, r9
 800709c:	4640      	mov	r0, r8
 800709e:	47d0      	blx	sl
 80070a0:	3001      	adds	r0, #1
 80070a2:	d09d      	beq.n	8006fe0 <_printf_i+0x160>
 80070a4:	3501      	adds	r5, #1
 80070a6:	68e3      	ldr	r3, [r4, #12]
 80070a8:	9903      	ldr	r1, [sp, #12]
 80070aa:	1a5b      	subs	r3, r3, r1
 80070ac:	42ab      	cmp	r3, r5
 80070ae:	dcf2      	bgt.n	8007096 <_printf_i+0x216>
 80070b0:	e7eb      	b.n	800708a <_printf_i+0x20a>
 80070b2:	2500      	movs	r5, #0
 80070b4:	f104 0619 	add.w	r6, r4, #25
 80070b8:	e7f5      	b.n	80070a6 <_printf_i+0x226>
 80070ba:	bf00      	nop
 80070bc:	0800924a 	.word	0x0800924a
 80070c0:	0800925b 	.word	0x0800925b

080070c4 <std>:
 80070c4:	2300      	movs	r3, #0
 80070c6:	b510      	push	{r4, lr}
 80070c8:	4604      	mov	r4, r0
 80070ca:	e9c0 3300 	strd	r3, r3, [r0]
 80070ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070d2:	6083      	str	r3, [r0, #8]
 80070d4:	8181      	strh	r1, [r0, #12]
 80070d6:	6643      	str	r3, [r0, #100]	; 0x64
 80070d8:	81c2      	strh	r2, [r0, #14]
 80070da:	6183      	str	r3, [r0, #24]
 80070dc:	4619      	mov	r1, r3
 80070de:	2208      	movs	r2, #8
 80070e0:	305c      	adds	r0, #92	; 0x5c
 80070e2:	f000 f906 	bl	80072f2 <memset>
 80070e6:	4b0d      	ldr	r3, [pc, #52]	; (800711c <std+0x58>)
 80070e8:	6263      	str	r3, [r4, #36]	; 0x24
 80070ea:	4b0d      	ldr	r3, [pc, #52]	; (8007120 <std+0x5c>)
 80070ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80070ee:	4b0d      	ldr	r3, [pc, #52]	; (8007124 <std+0x60>)
 80070f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070f2:	4b0d      	ldr	r3, [pc, #52]	; (8007128 <std+0x64>)
 80070f4:	6323      	str	r3, [r4, #48]	; 0x30
 80070f6:	4b0d      	ldr	r3, [pc, #52]	; (800712c <std+0x68>)
 80070f8:	6224      	str	r4, [r4, #32]
 80070fa:	429c      	cmp	r4, r3
 80070fc:	d006      	beq.n	800710c <std+0x48>
 80070fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007102:	4294      	cmp	r4, r2
 8007104:	d002      	beq.n	800710c <std+0x48>
 8007106:	33d0      	adds	r3, #208	; 0xd0
 8007108:	429c      	cmp	r4, r3
 800710a:	d105      	bne.n	8007118 <std+0x54>
 800710c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007114:	f000 b96a 	b.w	80073ec <__retarget_lock_init_recursive>
 8007118:	bd10      	pop	{r4, pc}
 800711a:	bf00      	nop
 800711c:	0800726d 	.word	0x0800726d
 8007120:	0800728f 	.word	0x0800728f
 8007124:	080072c7 	.word	0x080072c7
 8007128:	080072eb 	.word	0x080072eb
 800712c:	20000450 	.word	0x20000450

08007130 <stdio_exit_handler>:
 8007130:	4a02      	ldr	r2, [pc, #8]	; (800713c <stdio_exit_handler+0xc>)
 8007132:	4903      	ldr	r1, [pc, #12]	; (8007140 <stdio_exit_handler+0x10>)
 8007134:	4803      	ldr	r0, [pc, #12]	; (8007144 <stdio_exit_handler+0x14>)
 8007136:	f000 b869 	b.w	800720c <_fwalk_sglue>
 800713a:	bf00      	nop
 800713c:	2000000c 	.word	0x2000000c
 8007140:	08008d79 	.word	0x08008d79
 8007144:	20000018 	.word	0x20000018

08007148 <cleanup_stdio>:
 8007148:	6841      	ldr	r1, [r0, #4]
 800714a:	4b0c      	ldr	r3, [pc, #48]	; (800717c <cleanup_stdio+0x34>)
 800714c:	4299      	cmp	r1, r3
 800714e:	b510      	push	{r4, lr}
 8007150:	4604      	mov	r4, r0
 8007152:	d001      	beq.n	8007158 <cleanup_stdio+0x10>
 8007154:	f001 fe10 	bl	8008d78 <_fflush_r>
 8007158:	68a1      	ldr	r1, [r4, #8]
 800715a:	4b09      	ldr	r3, [pc, #36]	; (8007180 <cleanup_stdio+0x38>)
 800715c:	4299      	cmp	r1, r3
 800715e:	d002      	beq.n	8007166 <cleanup_stdio+0x1e>
 8007160:	4620      	mov	r0, r4
 8007162:	f001 fe09 	bl	8008d78 <_fflush_r>
 8007166:	68e1      	ldr	r1, [r4, #12]
 8007168:	4b06      	ldr	r3, [pc, #24]	; (8007184 <cleanup_stdio+0x3c>)
 800716a:	4299      	cmp	r1, r3
 800716c:	d004      	beq.n	8007178 <cleanup_stdio+0x30>
 800716e:	4620      	mov	r0, r4
 8007170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007174:	f001 be00 	b.w	8008d78 <_fflush_r>
 8007178:	bd10      	pop	{r4, pc}
 800717a:	bf00      	nop
 800717c:	20000450 	.word	0x20000450
 8007180:	200004b8 	.word	0x200004b8
 8007184:	20000520 	.word	0x20000520

08007188 <global_stdio_init.part.0>:
 8007188:	b510      	push	{r4, lr}
 800718a:	4b0b      	ldr	r3, [pc, #44]	; (80071b8 <global_stdio_init.part.0+0x30>)
 800718c:	4c0b      	ldr	r4, [pc, #44]	; (80071bc <global_stdio_init.part.0+0x34>)
 800718e:	4a0c      	ldr	r2, [pc, #48]	; (80071c0 <global_stdio_init.part.0+0x38>)
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	4620      	mov	r0, r4
 8007194:	2200      	movs	r2, #0
 8007196:	2104      	movs	r1, #4
 8007198:	f7ff ff94 	bl	80070c4 <std>
 800719c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80071a0:	2201      	movs	r2, #1
 80071a2:	2109      	movs	r1, #9
 80071a4:	f7ff ff8e 	bl	80070c4 <std>
 80071a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80071ac:	2202      	movs	r2, #2
 80071ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071b2:	2112      	movs	r1, #18
 80071b4:	f7ff bf86 	b.w	80070c4 <std>
 80071b8:	20000588 	.word	0x20000588
 80071bc:	20000450 	.word	0x20000450
 80071c0:	08007131 	.word	0x08007131

080071c4 <__sfp_lock_acquire>:
 80071c4:	4801      	ldr	r0, [pc, #4]	; (80071cc <__sfp_lock_acquire+0x8>)
 80071c6:	f000 b912 	b.w	80073ee <__retarget_lock_acquire_recursive>
 80071ca:	bf00      	nop
 80071cc:	20000591 	.word	0x20000591

080071d0 <__sfp_lock_release>:
 80071d0:	4801      	ldr	r0, [pc, #4]	; (80071d8 <__sfp_lock_release+0x8>)
 80071d2:	f000 b90d 	b.w	80073f0 <__retarget_lock_release_recursive>
 80071d6:	bf00      	nop
 80071d8:	20000591 	.word	0x20000591

080071dc <__sinit>:
 80071dc:	b510      	push	{r4, lr}
 80071de:	4604      	mov	r4, r0
 80071e0:	f7ff fff0 	bl	80071c4 <__sfp_lock_acquire>
 80071e4:	6a23      	ldr	r3, [r4, #32]
 80071e6:	b11b      	cbz	r3, 80071f0 <__sinit+0x14>
 80071e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071ec:	f7ff bff0 	b.w	80071d0 <__sfp_lock_release>
 80071f0:	4b04      	ldr	r3, [pc, #16]	; (8007204 <__sinit+0x28>)
 80071f2:	6223      	str	r3, [r4, #32]
 80071f4:	4b04      	ldr	r3, [pc, #16]	; (8007208 <__sinit+0x2c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1f5      	bne.n	80071e8 <__sinit+0xc>
 80071fc:	f7ff ffc4 	bl	8007188 <global_stdio_init.part.0>
 8007200:	e7f2      	b.n	80071e8 <__sinit+0xc>
 8007202:	bf00      	nop
 8007204:	08007149 	.word	0x08007149
 8007208:	20000588 	.word	0x20000588

0800720c <_fwalk_sglue>:
 800720c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007210:	4607      	mov	r7, r0
 8007212:	4688      	mov	r8, r1
 8007214:	4614      	mov	r4, r2
 8007216:	2600      	movs	r6, #0
 8007218:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800721c:	f1b9 0901 	subs.w	r9, r9, #1
 8007220:	d505      	bpl.n	800722e <_fwalk_sglue+0x22>
 8007222:	6824      	ldr	r4, [r4, #0]
 8007224:	2c00      	cmp	r4, #0
 8007226:	d1f7      	bne.n	8007218 <_fwalk_sglue+0xc>
 8007228:	4630      	mov	r0, r6
 800722a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800722e:	89ab      	ldrh	r3, [r5, #12]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d907      	bls.n	8007244 <_fwalk_sglue+0x38>
 8007234:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007238:	3301      	adds	r3, #1
 800723a:	d003      	beq.n	8007244 <_fwalk_sglue+0x38>
 800723c:	4629      	mov	r1, r5
 800723e:	4638      	mov	r0, r7
 8007240:	47c0      	blx	r8
 8007242:	4306      	orrs	r6, r0
 8007244:	3568      	adds	r5, #104	; 0x68
 8007246:	e7e9      	b.n	800721c <_fwalk_sglue+0x10>

08007248 <iprintf>:
 8007248:	b40f      	push	{r0, r1, r2, r3}
 800724a:	b507      	push	{r0, r1, r2, lr}
 800724c:	4906      	ldr	r1, [pc, #24]	; (8007268 <iprintf+0x20>)
 800724e:	ab04      	add	r3, sp, #16
 8007250:	6808      	ldr	r0, [r1, #0]
 8007252:	f853 2b04 	ldr.w	r2, [r3], #4
 8007256:	6881      	ldr	r1, [r0, #8]
 8007258:	9301      	str	r3, [sp, #4]
 800725a:	f001 fbed 	bl	8008a38 <_vfiprintf_r>
 800725e:	b003      	add	sp, #12
 8007260:	f85d eb04 	ldr.w	lr, [sp], #4
 8007264:	b004      	add	sp, #16
 8007266:	4770      	bx	lr
 8007268:	20000064 	.word	0x20000064

0800726c <__sread>:
 800726c:	b510      	push	{r4, lr}
 800726e:	460c      	mov	r4, r1
 8007270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007274:	f000 f86c 	bl	8007350 <_read_r>
 8007278:	2800      	cmp	r0, #0
 800727a:	bfab      	itete	ge
 800727c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800727e:	89a3      	ldrhlt	r3, [r4, #12]
 8007280:	181b      	addge	r3, r3, r0
 8007282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007286:	bfac      	ite	ge
 8007288:	6563      	strge	r3, [r4, #84]	; 0x54
 800728a:	81a3      	strhlt	r3, [r4, #12]
 800728c:	bd10      	pop	{r4, pc}

0800728e <__swrite>:
 800728e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007292:	461f      	mov	r7, r3
 8007294:	898b      	ldrh	r3, [r1, #12]
 8007296:	05db      	lsls	r3, r3, #23
 8007298:	4605      	mov	r5, r0
 800729a:	460c      	mov	r4, r1
 800729c:	4616      	mov	r6, r2
 800729e:	d505      	bpl.n	80072ac <__swrite+0x1e>
 80072a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072a4:	2302      	movs	r3, #2
 80072a6:	2200      	movs	r2, #0
 80072a8:	f000 f840 	bl	800732c <_lseek_r>
 80072ac:	89a3      	ldrh	r3, [r4, #12]
 80072ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072b6:	81a3      	strh	r3, [r4, #12]
 80072b8:	4632      	mov	r2, r6
 80072ba:	463b      	mov	r3, r7
 80072bc:	4628      	mov	r0, r5
 80072be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072c2:	f000 b857 	b.w	8007374 <_write_r>

080072c6 <__sseek>:
 80072c6:	b510      	push	{r4, lr}
 80072c8:	460c      	mov	r4, r1
 80072ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ce:	f000 f82d 	bl	800732c <_lseek_r>
 80072d2:	1c43      	adds	r3, r0, #1
 80072d4:	89a3      	ldrh	r3, [r4, #12]
 80072d6:	bf15      	itete	ne
 80072d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80072da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072e2:	81a3      	strheq	r3, [r4, #12]
 80072e4:	bf18      	it	ne
 80072e6:	81a3      	strhne	r3, [r4, #12]
 80072e8:	bd10      	pop	{r4, pc}

080072ea <__sclose>:
 80072ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ee:	f000 b80d 	b.w	800730c <_close_r>

080072f2 <memset>:
 80072f2:	4402      	add	r2, r0
 80072f4:	4603      	mov	r3, r0
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d100      	bne.n	80072fc <memset+0xa>
 80072fa:	4770      	bx	lr
 80072fc:	f803 1b01 	strb.w	r1, [r3], #1
 8007300:	e7f9      	b.n	80072f6 <memset+0x4>
	...

08007304 <_localeconv_r>:
 8007304:	4800      	ldr	r0, [pc, #0]	; (8007308 <_localeconv_r+0x4>)
 8007306:	4770      	bx	lr
 8007308:	20000158 	.word	0x20000158

0800730c <_close_r>:
 800730c:	b538      	push	{r3, r4, r5, lr}
 800730e:	4d06      	ldr	r5, [pc, #24]	; (8007328 <_close_r+0x1c>)
 8007310:	2300      	movs	r3, #0
 8007312:	4604      	mov	r4, r0
 8007314:	4608      	mov	r0, r1
 8007316:	602b      	str	r3, [r5, #0]
 8007318:	f7fa fd05 	bl	8001d26 <_close>
 800731c:	1c43      	adds	r3, r0, #1
 800731e:	d102      	bne.n	8007326 <_close_r+0x1a>
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	b103      	cbz	r3, 8007326 <_close_r+0x1a>
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	bd38      	pop	{r3, r4, r5, pc}
 8007328:	2000058c 	.word	0x2000058c

0800732c <_lseek_r>:
 800732c:	b538      	push	{r3, r4, r5, lr}
 800732e:	4d07      	ldr	r5, [pc, #28]	; (800734c <_lseek_r+0x20>)
 8007330:	4604      	mov	r4, r0
 8007332:	4608      	mov	r0, r1
 8007334:	4611      	mov	r1, r2
 8007336:	2200      	movs	r2, #0
 8007338:	602a      	str	r2, [r5, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	f7fa fd1a 	bl	8001d74 <_lseek>
 8007340:	1c43      	adds	r3, r0, #1
 8007342:	d102      	bne.n	800734a <_lseek_r+0x1e>
 8007344:	682b      	ldr	r3, [r5, #0]
 8007346:	b103      	cbz	r3, 800734a <_lseek_r+0x1e>
 8007348:	6023      	str	r3, [r4, #0]
 800734a:	bd38      	pop	{r3, r4, r5, pc}
 800734c:	2000058c 	.word	0x2000058c

08007350 <_read_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	4d07      	ldr	r5, [pc, #28]	; (8007370 <_read_r+0x20>)
 8007354:	4604      	mov	r4, r0
 8007356:	4608      	mov	r0, r1
 8007358:	4611      	mov	r1, r2
 800735a:	2200      	movs	r2, #0
 800735c:	602a      	str	r2, [r5, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	f7fa fcc4 	bl	8001cec <_read>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d102      	bne.n	800736e <_read_r+0x1e>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	b103      	cbz	r3, 800736e <_read_r+0x1e>
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	2000058c 	.word	0x2000058c

08007374 <_write_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	4d07      	ldr	r5, [pc, #28]	; (8007394 <_write_r+0x20>)
 8007378:	4604      	mov	r4, r0
 800737a:	4608      	mov	r0, r1
 800737c:	4611      	mov	r1, r2
 800737e:	2200      	movs	r2, #0
 8007380:	602a      	str	r2, [r5, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	f7f9 fdb6 	bl	8000ef4 <_write>
 8007388:	1c43      	adds	r3, r0, #1
 800738a:	d102      	bne.n	8007392 <_write_r+0x1e>
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	b103      	cbz	r3, 8007392 <_write_r+0x1e>
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	bd38      	pop	{r3, r4, r5, pc}
 8007394:	2000058c 	.word	0x2000058c

08007398 <__errno>:
 8007398:	4b01      	ldr	r3, [pc, #4]	; (80073a0 <__errno+0x8>)
 800739a:	6818      	ldr	r0, [r3, #0]
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	20000064 	.word	0x20000064

080073a4 <__libc_init_array>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	4d0d      	ldr	r5, [pc, #52]	; (80073dc <__libc_init_array+0x38>)
 80073a8:	4c0d      	ldr	r4, [pc, #52]	; (80073e0 <__libc_init_array+0x3c>)
 80073aa:	1b64      	subs	r4, r4, r5
 80073ac:	10a4      	asrs	r4, r4, #2
 80073ae:	2600      	movs	r6, #0
 80073b0:	42a6      	cmp	r6, r4
 80073b2:	d109      	bne.n	80073c8 <__libc_init_array+0x24>
 80073b4:	4d0b      	ldr	r5, [pc, #44]	; (80073e4 <__libc_init_array+0x40>)
 80073b6:	4c0c      	ldr	r4, [pc, #48]	; (80073e8 <__libc_init_array+0x44>)
 80073b8:	f001 fef0 	bl	800919c <_init>
 80073bc:	1b64      	subs	r4, r4, r5
 80073be:	10a4      	asrs	r4, r4, #2
 80073c0:	2600      	movs	r6, #0
 80073c2:	42a6      	cmp	r6, r4
 80073c4:	d105      	bne.n	80073d2 <__libc_init_array+0x2e>
 80073c6:	bd70      	pop	{r4, r5, r6, pc}
 80073c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073cc:	4798      	blx	r3
 80073ce:	3601      	adds	r6, #1
 80073d0:	e7ee      	b.n	80073b0 <__libc_init_array+0xc>
 80073d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d6:	4798      	blx	r3
 80073d8:	3601      	adds	r6, #1
 80073da:	e7f2      	b.n	80073c2 <__libc_init_array+0x1e>
 80073dc:	080095b4 	.word	0x080095b4
 80073e0:	080095b4 	.word	0x080095b4
 80073e4:	080095b4 	.word	0x080095b4
 80073e8:	080095b8 	.word	0x080095b8

080073ec <__retarget_lock_init_recursive>:
 80073ec:	4770      	bx	lr

080073ee <__retarget_lock_acquire_recursive>:
 80073ee:	4770      	bx	lr

080073f0 <__retarget_lock_release_recursive>:
 80073f0:	4770      	bx	lr

080073f2 <quorem>:
 80073f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f6:	6903      	ldr	r3, [r0, #16]
 80073f8:	690c      	ldr	r4, [r1, #16]
 80073fa:	42a3      	cmp	r3, r4
 80073fc:	4607      	mov	r7, r0
 80073fe:	db7e      	blt.n	80074fe <quorem+0x10c>
 8007400:	3c01      	subs	r4, #1
 8007402:	f101 0814 	add.w	r8, r1, #20
 8007406:	f100 0514 	add.w	r5, r0, #20
 800740a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007418:	3301      	adds	r3, #1
 800741a:	429a      	cmp	r2, r3
 800741c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007420:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007424:	fbb2 f6f3 	udiv	r6, r2, r3
 8007428:	d331      	bcc.n	800748e <quorem+0x9c>
 800742a:	f04f 0e00 	mov.w	lr, #0
 800742e:	4640      	mov	r0, r8
 8007430:	46ac      	mov	ip, r5
 8007432:	46f2      	mov	sl, lr
 8007434:	f850 2b04 	ldr.w	r2, [r0], #4
 8007438:	b293      	uxth	r3, r2
 800743a:	fb06 e303 	mla	r3, r6, r3, lr
 800743e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007442:	0c1a      	lsrs	r2, r3, #16
 8007444:	b29b      	uxth	r3, r3
 8007446:	ebaa 0303 	sub.w	r3, sl, r3
 800744a:	f8dc a000 	ldr.w	sl, [ip]
 800744e:	fa13 f38a 	uxtah	r3, r3, sl
 8007452:	fb06 220e 	mla	r2, r6, lr, r2
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	9b00      	ldr	r3, [sp, #0]
 800745a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800745e:	b292      	uxth	r2, r2
 8007460:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007464:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007468:	f8bd 3000 	ldrh.w	r3, [sp]
 800746c:	4581      	cmp	r9, r0
 800746e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007472:	f84c 3b04 	str.w	r3, [ip], #4
 8007476:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800747a:	d2db      	bcs.n	8007434 <quorem+0x42>
 800747c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007480:	b92b      	cbnz	r3, 800748e <quorem+0x9c>
 8007482:	9b01      	ldr	r3, [sp, #4]
 8007484:	3b04      	subs	r3, #4
 8007486:	429d      	cmp	r5, r3
 8007488:	461a      	mov	r2, r3
 800748a:	d32c      	bcc.n	80074e6 <quorem+0xf4>
 800748c:	613c      	str	r4, [r7, #16]
 800748e:	4638      	mov	r0, r7
 8007490:	f001 f9a8 	bl	80087e4 <__mcmp>
 8007494:	2800      	cmp	r0, #0
 8007496:	db22      	blt.n	80074de <quorem+0xec>
 8007498:	3601      	adds	r6, #1
 800749a:	4629      	mov	r1, r5
 800749c:	2000      	movs	r0, #0
 800749e:	f858 2b04 	ldr.w	r2, [r8], #4
 80074a2:	f8d1 c000 	ldr.w	ip, [r1]
 80074a6:	b293      	uxth	r3, r2
 80074a8:	1ac3      	subs	r3, r0, r3
 80074aa:	0c12      	lsrs	r2, r2, #16
 80074ac:	fa13 f38c 	uxtah	r3, r3, ip
 80074b0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80074b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074be:	45c1      	cmp	r9, r8
 80074c0:	f841 3b04 	str.w	r3, [r1], #4
 80074c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80074c8:	d2e9      	bcs.n	800749e <quorem+0xac>
 80074ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074d2:	b922      	cbnz	r2, 80074de <quorem+0xec>
 80074d4:	3b04      	subs	r3, #4
 80074d6:	429d      	cmp	r5, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	d30a      	bcc.n	80074f2 <quorem+0x100>
 80074dc:	613c      	str	r4, [r7, #16]
 80074de:	4630      	mov	r0, r6
 80074e0:	b003      	add	sp, #12
 80074e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e6:	6812      	ldr	r2, [r2, #0]
 80074e8:	3b04      	subs	r3, #4
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	d1ce      	bne.n	800748c <quorem+0x9a>
 80074ee:	3c01      	subs	r4, #1
 80074f0:	e7c9      	b.n	8007486 <quorem+0x94>
 80074f2:	6812      	ldr	r2, [r2, #0]
 80074f4:	3b04      	subs	r3, #4
 80074f6:	2a00      	cmp	r2, #0
 80074f8:	d1f0      	bne.n	80074dc <quorem+0xea>
 80074fa:	3c01      	subs	r4, #1
 80074fc:	e7eb      	b.n	80074d6 <quorem+0xe4>
 80074fe:	2000      	movs	r0, #0
 8007500:	e7ee      	b.n	80074e0 <quorem+0xee>
 8007502:	0000      	movs	r0, r0
 8007504:	0000      	movs	r0, r0
	...

08007508 <_dtoa_r>:
 8007508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750c:	ed2d 8b04 	vpush	{d8-d9}
 8007510:	69c5      	ldr	r5, [r0, #28]
 8007512:	b093      	sub	sp, #76	; 0x4c
 8007514:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007518:	ec57 6b10 	vmov	r6, r7, d0
 800751c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007520:	9107      	str	r1, [sp, #28]
 8007522:	4604      	mov	r4, r0
 8007524:	920a      	str	r2, [sp, #40]	; 0x28
 8007526:	930d      	str	r3, [sp, #52]	; 0x34
 8007528:	b975      	cbnz	r5, 8007548 <_dtoa_r+0x40>
 800752a:	2010      	movs	r0, #16
 800752c:	f000 fe2a 	bl	8008184 <malloc>
 8007530:	4602      	mov	r2, r0
 8007532:	61e0      	str	r0, [r4, #28]
 8007534:	b920      	cbnz	r0, 8007540 <_dtoa_r+0x38>
 8007536:	4bae      	ldr	r3, [pc, #696]	; (80077f0 <_dtoa_r+0x2e8>)
 8007538:	21ef      	movs	r1, #239	; 0xef
 800753a:	48ae      	ldr	r0, [pc, #696]	; (80077f4 <_dtoa_r+0x2ec>)
 800753c:	f001 fcf8 	bl	8008f30 <__assert_func>
 8007540:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007544:	6005      	str	r5, [r0, #0]
 8007546:	60c5      	str	r5, [r0, #12]
 8007548:	69e3      	ldr	r3, [r4, #28]
 800754a:	6819      	ldr	r1, [r3, #0]
 800754c:	b151      	cbz	r1, 8007564 <_dtoa_r+0x5c>
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	604a      	str	r2, [r1, #4]
 8007552:	2301      	movs	r3, #1
 8007554:	4093      	lsls	r3, r2
 8007556:	608b      	str	r3, [r1, #8]
 8007558:	4620      	mov	r0, r4
 800755a:	f000 ff07 	bl	800836c <_Bfree>
 800755e:	69e3      	ldr	r3, [r4, #28]
 8007560:	2200      	movs	r2, #0
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	1e3b      	subs	r3, r7, #0
 8007566:	bfbb      	ittet	lt
 8007568:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800756c:	9303      	strlt	r3, [sp, #12]
 800756e:	2300      	movge	r3, #0
 8007570:	2201      	movlt	r2, #1
 8007572:	bfac      	ite	ge
 8007574:	f8c8 3000 	strge.w	r3, [r8]
 8007578:	f8c8 2000 	strlt.w	r2, [r8]
 800757c:	4b9e      	ldr	r3, [pc, #632]	; (80077f8 <_dtoa_r+0x2f0>)
 800757e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007582:	ea33 0308 	bics.w	r3, r3, r8
 8007586:	d11b      	bne.n	80075c0 <_dtoa_r+0xb8>
 8007588:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800758a:	f242 730f 	movw	r3, #9999	; 0x270f
 800758e:	6013      	str	r3, [r2, #0]
 8007590:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007594:	4333      	orrs	r3, r6
 8007596:	f000 8593 	beq.w	80080c0 <_dtoa_r+0xbb8>
 800759a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800759c:	b963      	cbnz	r3, 80075b8 <_dtoa_r+0xb0>
 800759e:	4b97      	ldr	r3, [pc, #604]	; (80077fc <_dtoa_r+0x2f4>)
 80075a0:	e027      	b.n	80075f2 <_dtoa_r+0xea>
 80075a2:	4b97      	ldr	r3, [pc, #604]	; (8007800 <_dtoa_r+0x2f8>)
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	3308      	adds	r3, #8
 80075a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	9800      	ldr	r0, [sp, #0]
 80075ae:	b013      	add	sp, #76	; 0x4c
 80075b0:	ecbd 8b04 	vpop	{d8-d9}
 80075b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b8:	4b90      	ldr	r3, [pc, #576]	; (80077fc <_dtoa_r+0x2f4>)
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	3303      	adds	r3, #3
 80075be:	e7f3      	b.n	80075a8 <_dtoa_r+0xa0>
 80075c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075c4:	2200      	movs	r2, #0
 80075c6:	ec51 0b17 	vmov	r0, r1, d7
 80075ca:	eeb0 8a47 	vmov.f32	s16, s14
 80075ce:	eef0 8a67 	vmov.f32	s17, s15
 80075d2:	2300      	movs	r3, #0
 80075d4:	f7f9 faa0 	bl	8000b18 <__aeabi_dcmpeq>
 80075d8:	4681      	mov	r9, r0
 80075da:	b160      	cbz	r0, 80075f6 <_dtoa_r+0xee>
 80075dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075de:	2301      	movs	r3, #1
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 8568 	beq.w	80080ba <_dtoa_r+0xbb2>
 80075ea:	4b86      	ldr	r3, [pc, #536]	; (8007804 <_dtoa_r+0x2fc>)
 80075ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	3b01      	subs	r3, #1
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	e7da      	b.n	80075ac <_dtoa_r+0xa4>
 80075f6:	aa10      	add	r2, sp, #64	; 0x40
 80075f8:	a911      	add	r1, sp, #68	; 0x44
 80075fa:	4620      	mov	r0, r4
 80075fc:	eeb0 0a48 	vmov.f32	s0, s16
 8007600:	eef0 0a68 	vmov.f32	s1, s17
 8007604:	f001 f994 	bl	8008930 <__d2b>
 8007608:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800760c:	4682      	mov	sl, r0
 800760e:	2d00      	cmp	r5, #0
 8007610:	d07f      	beq.n	8007712 <_dtoa_r+0x20a>
 8007612:	ee18 3a90 	vmov	r3, s17
 8007616:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800761a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800761e:	ec51 0b18 	vmov	r0, r1, d8
 8007622:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007626:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800762a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800762e:	4619      	mov	r1, r3
 8007630:	2200      	movs	r2, #0
 8007632:	4b75      	ldr	r3, [pc, #468]	; (8007808 <_dtoa_r+0x300>)
 8007634:	f7f8 fe50 	bl	80002d8 <__aeabi_dsub>
 8007638:	a367      	add	r3, pc, #412	; (adr r3, 80077d8 <_dtoa_r+0x2d0>)
 800763a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763e:	f7f9 f803 	bl	8000648 <__aeabi_dmul>
 8007642:	a367      	add	r3, pc, #412	; (adr r3, 80077e0 <_dtoa_r+0x2d8>)
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	f7f8 fe48 	bl	80002dc <__adddf3>
 800764c:	4606      	mov	r6, r0
 800764e:	4628      	mov	r0, r5
 8007650:	460f      	mov	r7, r1
 8007652:	f7f8 ff8f 	bl	8000574 <__aeabi_i2d>
 8007656:	a364      	add	r3, pc, #400	; (adr r3, 80077e8 <_dtoa_r+0x2e0>)
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	f7f8 fff4 	bl	8000648 <__aeabi_dmul>
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	4630      	mov	r0, r6
 8007666:	4639      	mov	r1, r7
 8007668:	f7f8 fe38 	bl	80002dc <__adddf3>
 800766c:	4606      	mov	r6, r0
 800766e:	460f      	mov	r7, r1
 8007670:	f7f9 fa9a 	bl	8000ba8 <__aeabi_d2iz>
 8007674:	2200      	movs	r2, #0
 8007676:	4683      	mov	fp, r0
 8007678:	2300      	movs	r3, #0
 800767a:	4630      	mov	r0, r6
 800767c:	4639      	mov	r1, r7
 800767e:	f7f9 fa55 	bl	8000b2c <__aeabi_dcmplt>
 8007682:	b148      	cbz	r0, 8007698 <_dtoa_r+0x190>
 8007684:	4658      	mov	r0, fp
 8007686:	f7f8 ff75 	bl	8000574 <__aeabi_i2d>
 800768a:	4632      	mov	r2, r6
 800768c:	463b      	mov	r3, r7
 800768e:	f7f9 fa43 	bl	8000b18 <__aeabi_dcmpeq>
 8007692:	b908      	cbnz	r0, 8007698 <_dtoa_r+0x190>
 8007694:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007698:	f1bb 0f16 	cmp.w	fp, #22
 800769c:	d857      	bhi.n	800774e <_dtoa_r+0x246>
 800769e:	4b5b      	ldr	r3, [pc, #364]	; (800780c <_dtoa_r+0x304>)
 80076a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	ec51 0b18 	vmov	r0, r1, d8
 80076ac:	f7f9 fa3e 	bl	8000b2c <__aeabi_dcmplt>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	d04e      	beq.n	8007752 <_dtoa_r+0x24a>
 80076b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076b8:	2300      	movs	r3, #0
 80076ba:	930c      	str	r3, [sp, #48]	; 0x30
 80076bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076be:	1b5b      	subs	r3, r3, r5
 80076c0:	1e5a      	subs	r2, r3, #1
 80076c2:	bf45      	ittet	mi
 80076c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80076c8:	9305      	strmi	r3, [sp, #20]
 80076ca:	2300      	movpl	r3, #0
 80076cc:	2300      	movmi	r3, #0
 80076ce:	9206      	str	r2, [sp, #24]
 80076d0:	bf54      	ite	pl
 80076d2:	9305      	strpl	r3, [sp, #20]
 80076d4:	9306      	strmi	r3, [sp, #24]
 80076d6:	f1bb 0f00 	cmp.w	fp, #0
 80076da:	db3c      	blt.n	8007756 <_dtoa_r+0x24e>
 80076dc:	9b06      	ldr	r3, [sp, #24]
 80076de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80076e2:	445b      	add	r3, fp
 80076e4:	9306      	str	r3, [sp, #24]
 80076e6:	2300      	movs	r3, #0
 80076e8:	9308      	str	r3, [sp, #32]
 80076ea:	9b07      	ldr	r3, [sp, #28]
 80076ec:	2b09      	cmp	r3, #9
 80076ee:	d868      	bhi.n	80077c2 <_dtoa_r+0x2ba>
 80076f0:	2b05      	cmp	r3, #5
 80076f2:	bfc4      	itt	gt
 80076f4:	3b04      	subgt	r3, #4
 80076f6:	9307      	strgt	r3, [sp, #28]
 80076f8:	9b07      	ldr	r3, [sp, #28]
 80076fa:	f1a3 0302 	sub.w	r3, r3, #2
 80076fe:	bfcc      	ite	gt
 8007700:	2500      	movgt	r5, #0
 8007702:	2501      	movle	r5, #1
 8007704:	2b03      	cmp	r3, #3
 8007706:	f200 8085 	bhi.w	8007814 <_dtoa_r+0x30c>
 800770a:	e8df f003 	tbb	[pc, r3]
 800770e:	3b2e      	.short	0x3b2e
 8007710:	5839      	.short	0x5839
 8007712:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007716:	441d      	add	r5, r3
 8007718:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800771c:	2b20      	cmp	r3, #32
 800771e:	bfc1      	itttt	gt
 8007720:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007724:	fa08 f803 	lslgt.w	r8, r8, r3
 8007728:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800772c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007730:	bfd6      	itet	le
 8007732:	f1c3 0320 	rsble	r3, r3, #32
 8007736:	ea48 0003 	orrgt.w	r0, r8, r3
 800773a:	fa06 f003 	lslle.w	r0, r6, r3
 800773e:	f7f8 ff09 	bl	8000554 <__aeabi_ui2d>
 8007742:	2201      	movs	r2, #1
 8007744:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007748:	3d01      	subs	r5, #1
 800774a:	920e      	str	r2, [sp, #56]	; 0x38
 800774c:	e76f      	b.n	800762e <_dtoa_r+0x126>
 800774e:	2301      	movs	r3, #1
 8007750:	e7b3      	b.n	80076ba <_dtoa_r+0x1b2>
 8007752:	900c      	str	r0, [sp, #48]	; 0x30
 8007754:	e7b2      	b.n	80076bc <_dtoa_r+0x1b4>
 8007756:	9b05      	ldr	r3, [sp, #20]
 8007758:	eba3 030b 	sub.w	r3, r3, fp
 800775c:	9305      	str	r3, [sp, #20]
 800775e:	f1cb 0300 	rsb	r3, fp, #0
 8007762:	9308      	str	r3, [sp, #32]
 8007764:	2300      	movs	r3, #0
 8007766:	930b      	str	r3, [sp, #44]	; 0x2c
 8007768:	e7bf      	b.n	80076ea <_dtoa_r+0x1e2>
 800776a:	2300      	movs	r3, #0
 800776c:	9309      	str	r3, [sp, #36]	; 0x24
 800776e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007770:	2b00      	cmp	r3, #0
 8007772:	dc52      	bgt.n	800781a <_dtoa_r+0x312>
 8007774:	2301      	movs	r3, #1
 8007776:	9301      	str	r3, [sp, #4]
 8007778:	9304      	str	r3, [sp, #16]
 800777a:	461a      	mov	r2, r3
 800777c:	920a      	str	r2, [sp, #40]	; 0x28
 800777e:	e00b      	b.n	8007798 <_dtoa_r+0x290>
 8007780:	2301      	movs	r3, #1
 8007782:	e7f3      	b.n	800776c <_dtoa_r+0x264>
 8007784:	2300      	movs	r3, #0
 8007786:	9309      	str	r3, [sp, #36]	; 0x24
 8007788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800778a:	445b      	add	r3, fp
 800778c:	9301      	str	r3, [sp, #4]
 800778e:	3301      	adds	r3, #1
 8007790:	2b01      	cmp	r3, #1
 8007792:	9304      	str	r3, [sp, #16]
 8007794:	bfb8      	it	lt
 8007796:	2301      	movlt	r3, #1
 8007798:	69e0      	ldr	r0, [r4, #28]
 800779a:	2100      	movs	r1, #0
 800779c:	2204      	movs	r2, #4
 800779e:	f102 0614 	add.w	r6, r2, #20
 80077a2:	429e      	cmp	r6, r3
 80077a4:	d93d      	bls.n	8007822 <_dtoa_r+0x31a>
 80077a6:	6041      	str	r1, [r0, #4]
 80077a8:	4620      	mov	r0, r4
 80077aa:	f000 fd9f 	bl	80082ec <_Balloc>
 80077ae:	9000      	str	r0, [sp, #0]
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d139      	bne.n	8007828 <_dtoa_r+0x320>
 80077b4:	4b16      	ldr	r3, [pc, #88]	; (8007810 <_dtoa_r+0x308>)
 80077b6:	4602      	mov	r2, r0
 80077b8:	f240 11af 	movw	r1, #431	; 0x1af
 80077bc:	e6bd      	b.n	800753a <_dtoa_r+0x32>
 80077be:	2301      	movs	r3, #1
 80077c0:	e7e1      	b.n	8007786 <_dtoa_r+0x27e>
 80077c2:	2501      	movs	r5, #1
 80077c4:	2300      	movs	r3, #0
 80077c6:	9307      	str	r3, [sp, #28]
 80077c8:	9509      	str	r5, [sp, #36]	; 0x24
 80077ca:	f04f 33ff 	mov.w	r3, #4294967295
 80077ce:	9301      	str	r3, [sp, #4]
 80077d0:	9304      	str	r3, [sp, #16]
 80077d2:	2200      	movs	r2, #0
 80077d4:	2312      	movs	r3, #18
 80077d6:	e7d1      	b.n	800777c <_dtoa_r+0x274>
 80077d8:	636f4361 	.word	0x636f4361
 80077dc:	3fd287a7 	.word	0x3fd287a7
 80077e0:	8b60c8b3 	.word	0x8b60c8b3
 80077e4:	3fc68a28 	.word	0x3fc68a28
 80077e8:	509f79fb 	.word	0x509f79fb
 80077ec:	3fd34413 	.word	0x3fd34413
 80077f0:	08009279 	.word	0x08009279
 80077f4:	08009290 	.word	0x08009290
 80077f8:	7ff00000 	.word	0x7ff00000
 80077fc:	08009275 	.word	0x08009275
 8007800:	0800926c 	.word	0x0800926c
 8007804:	08009249 	.word	0x08009249
 8007808:	3ff80000 	.word	0x3ff80000
 800780c:	08009380 	.word	0x08009380
 8007810:	080092e8 	.word	0x080092e8
 8007814:	2301      	movs	r3, #1
 8007816:	9309      	str	r3, [sp, #36]	; 0x24
 8007818:	e7d7      	b.n	80077ca <_dtoa_r+0x2c2>
 800781a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	9304      	str	r3, [sp, #16]
 8007820:	e7ba      	b.n	8007798 <_dtoa_r+0x290>
 8007822:	3101      	adds	r1, #1
 8007824:	0052      	lsls	r2, r2, #1
 8007826:	e7ba      	b.n	800779e <_dtoa_r+0x296>
 8007828:	69e3      	ldr	r3, [r4, #28]
 800782a:	9a00      	ldr	r2, [sp, #0]
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	9b04      	ldr	r3, [sp, #16]
 8007830:	2b0e      	cmp	r3, #14
 8007832:	f200 80a8 	bhi.w	8007986 <_dtoa_r+0x47e>
 8007836:	2d00      	cmp	r5, #0
 8007838:	f000 80a5 	beq.w	8007986 <_dtoa_r+0x47e>
 800783c:	f1bb 0f00 	cmp.w	fp, #0
 8007840:	dd38      	ble.n	80078b4 <_dtoa_r+0x3ac>
 8007842:	4bc0      	ldr	r3, [pc, #768]	; (8007b44 <_dtoa_r+0x63c>)
 8007844:	f00b 020f 	and.w	r2, fp, #15
 8007848:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800784c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007850:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007854:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007858:	d019      	beq.n	800788e <_dtoa_r+0x386>
 800785a:	4bbb      	ldr	r3, [pc, #748]	; (8007b48 <_dtoa_r+0x640>)
 800785c:	ec51 0b18 	vmov	r0, r1, d8
 8007860:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007864:	f7f9 f81a 	bl	800089c <__aeabi_ddiv>
 8007868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800786c:	f008 080f 	and.w	r8, r8, #15
 8007870:	2503      	movs	r5, #3
 8007872:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007b48 <_dtoa_r+0x640>
 8007876:	f1b8 0f00 	cmp.w	r8, #0
 800787a:	d10a      	bne.n	8007892 <_dtoa_r+0x38a>
 800787c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007880:	4632      	mov	r2, r6
 8007882:	463b      	mov	r3, r7
 8007884:	f7f9 f80a 	bl	800089c <__aeabi_ddiv>
 8007888:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800788c:	e02b      	b.n	80078e6 <_dtoa_r+0x3de>
 800788e:	2502      	movs	r5, #2
 8007890:	e7ef      	b.n	8007872 <_dtoa_r+0x36a>
 8007892:	f018 0f01 	tst.w	r8, #1
 8007896:	d008      	beq.n	80078aa <_dtoa_r+0x3a2>
 8007898:	4630      	mov	r0, r6
 800789a:	4639      	mov	r1, r7
 800789c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80078a0:	f7f8 fed2 	bl	8000648 <__aeabi_dmul>
 80078a4:	3501      	adds	r5, #1
 80078a6:	4606      	mov	r6, r0
 80078a8:	460f      	mov	r7, r1
 80078aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80078ae:	f109 0908 	add.w	r9, r9, #8
 80078b2:	e7e0      	b.n	8007876 <_dtoa_r+0x36e>
 80078b4:	f000 809f 	beq.w	80079f6 <_dtoa_r+0x4ee>
 80078b8:	f1cb 0600 	rsb	r6, fp, #0
 80078bc:	4ba1      	ldr	r3, [pc, #644]	; (8007b44 <_dtoa_r+0x63c>)
 80078be:	4fa2      	ldr	r7, [pc, #648]	; (8007b48 <_dtoa_r+0x640>)
 80078c0:	f006 020f 	and.w	r2, r6, #15
 80078c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078cc:	ec51 0b18 	vmov	r0, r1, d8
 80078d0:	f7f8 feba 	bl	8000648 <__aeabi_dmul>
 80078d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078d8:	1136      	asrs	r6, r6, #4
 80078da:	2300      	movs	r3, #0
 80078dc:	2502      	movs	r5, #2
 80078de:	2e00      	cmp	r6, #0
 80078e0:	d17e      	bne.n	80079e0 <_dtoa_r+0x4d8>
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1d0      	bne.n	8007888 <_dtoa_r+0x380>
 80078e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 8084 	beq.w	80079fa <_dtoa_r+0x4f2>
 80078f2:	4b96      	ldr	r3, [pc, #600]	; (8007b4c <_dtoa_r+0x644>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	4640      	mov	r0, r8
 80078f8:	4649      	mov	r1, r9
 80078fa:	f7f9 f917 	bl	8000b2c <__aeabi_dcmplt>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d07b      	beq.n	80079fa <_dtoa_r+0x4f2>
 8007902:	9b04      	ldr	r3, [sp, #16]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d078      	beq.n	80079fa <_dtoa_r+0x4f2>
 8007908:	9b01      	ldr	r3, [sp, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	dd39      	ble.n	8007982 <_dtoa_r+0x47a>
 800790e:	4b90      	ldr	r3, [pc, #576]	; (8007b50 <_dtoa_r+0x648>)
 8007910:	2200      	movs	r2, #0
 8007912:	4640      	mov	r0, r8
 8007914:	4649      	mov	r1, r9
 8007916:	f7f8 fe97 	bl	8000648 <__aeabi_dmul>
 800791a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800791e:	9e01      	ldr	r6, [sp, #4]
 8007920:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007924:	3501      	adds	r5, #1
 8007926:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800792a:	4628      	mov	r0, r5
 800792c:	f7f8 fe22 	bl	8000574 <__aeabi_i2d>
 8007930:	4642      	mov	r2, r8
 8007932:	464b      	mov	r3, r9
 8007934:	f7f8 fe88 	bl	8000648 <__aeabi_dmul>
 8007938:	4b86      	ldr	r3, [pc, #536]	; (8007b54 <_dtoa_r+0x64c>)
 800793a:	2200      	movs	r2, #0
 800793c:	f7f8 fcce 	bl	80002dc <__adddf3>
 8007940:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007948:	9303      	str	r3, [sp, #12]
 800794a:	2e00      	cmp	r6, #0
 800794c:	d158      	bne.n	8007a00 <_dtoa_r+0x4f8>
 800794e:	4b82      	ldr	r3, [pc, #520]	; (8007b58 <_dtoa_r+0x650>)
 8007950:	2200      	movs	r2, #0
 8007952:	4640      	mov	r0, r8
 8007954:	4649      	mov	r1, r9
 8007956:	f7f8 fcbf 	bl	80002d8 <__aeabi_dsub>
 800795a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800795e:	4680      	mov	r8, r0
 8007960:	4689      	mov	r9, r1
 8007962:	f7f9 f901 	bl	8000b68 <__aeabi_dcmpgt>
 8007966:	2800      	cmp	r0, #0
 8007968:	f040 8296 	bne.w	8007e98 <_dtoa_r+0x990>
 800796c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007970:	4640      	mov	r0, r8
 8007972:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007976:	4649      	mov	r1, r9
 8007978:	f7f9 f8d8 	bl	8000b2c <__aeabi_dcmplt>
 800797c:	2800      	cmp	r0, #0
 800797e:	f040 8289 	bne.w	8007e94 <_dtoa_r+0x98c>
 8007982:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007986:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007988:	2b00      	cmp	r3, #0
 800798a:	f2c0 814e 	blt.w	8007c2a <_dtoa_r+0x722>
 800798e:	f1bb 0f0e 	cmp.w	fp, #14
 8007992:	f300 814a 	bgt.w	8007c2a <_dtoa_r+0x722>
 8007996:	4b6b      	ldr	r3, [pc, #428]	; (8007b44 <_dtoa_r+0x63c>)
 8007998:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800799c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f280 80dc 	bge.w	8007b60 <_dtoa_r+0x658>
 80079a8:	9b04      	ldr	r3, [sp, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f300 80d8 	bgt.w	8007b60 <_dtoa_r+0x658>
 80079b0:	f040 826f 	bne.w	8007e92 <_dtoa_r+0x98a>
 80079b4:	4b68      	ldr	r3, [pc, #416]	; (8007b58 <_dtoa_r+0x650>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	4640      	mov	r0, r8
 80079ba:	4649      	mov	r1, r9
 80079bc:	f7f8 fe44 	bl	8000648 <__aeabi_dmul>
 80079c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079c4:	f7f9 f8c6 	bl	8000b54 <__aeabi_dcmpge>
 80079c8:	9e04      	ldr	r6, [sp, #16]
 80079ca:	4637      	mov	r7, r6
 80079cc:	2800      	cmp	r0, #0
 80079ce:	f040 8245 	bne.w	8007e5c <_dtoa_r+0x954>
 80079d2:	9d00      	ldr	r5, [sp, #0]
 80079d4:	2331      	movs	r3, #49	; 0x31
 80079d6:	f805 3b01 	strb.w	r3, [r5], #1
 80079da:	f10b 0b01 	add.w	fp, fp, #1
 80079de:	e241      	b.n	8007e64 <_dtoa_r+0x95c>
 80079e0:	07f2      	lsls	r2, r6, #31
 80079e2:	d505      	bpl.n	80079f0 <_dtoa_r+0x4e8>
 80079e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079e8:	f7f8 fe2e 	bl	8000648 <__aeabi_dmul>
 80079ec:	3501      	adds	r5, #1
 80079ee:	2301      	movs	r3, #1
 80079f0:	1076      	asrs	r6, r6, #1
 80079f2:	3708      	adds	r7, #8
 80079f4:	e773      	b.n	80078de <_dtoa_r+0x3d6>
 80079f6:	2502      	movs	r5, #2
 80079f8:	e775      	b.n	80078e6 <_dtoa_r+0x3de>
 80079fa:	9e04      	ldr	r6, [sp, #16]
 80079fc:	465f      	mov	r7, fp
 80079fe:	e792      	b.n	8007926 <_dtoa_r+0x41e>
 8007a00:	9900      	ldr	r1, [sp, #0]
 8007a02:	4b50      	ldr	r3, [pc, #320]	; (8007b44 <_dtoa_r+0x63c>)
 8007a04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a08:	4431      	add	r1, r6
 8007a0a:	9102      	str	r1, [sp, #8]
 8007a0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a0e:	eeb0 9a47 	vmov.f32	s18, s14
 8007a12:	eef0 9a67 	vmov.f32	s19, s15
 8007a16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a1e:	2900      	cmp	r1, #0
 8007a20:	d044      	beq.n	8007aac <_dtoa_r+0x5a4>
 8007a22:	494e      	ldr	r1, [pc, #312]	; (8007b5c <_dtoa_r+0x654>)
 8007a24:	2000      	movs	r0, #0
 8007a26:	f7f8 ff39 	bl	800089c <__aeabi_ddiv>
 8007a2a:	ec53 2b19 	vmov	r2, r3, d9
 8007a2e:	f7f8 fc53 	bl	80002d8 <__aeabi_dsub>
 8007a32:	9d00      	ldr	r5, [sp, #0]
 8007a34:	ec41 0b19 	vmov	d9, r0, r1
 8007a38:	4649      	mov	r1, r9
 8007a3a:	4640      	mov	r0, r8
 8007a3c:	f7f9 f8b4 	bl	8000ba8 <__aeabi_d2iz>
 8007a40:	4606      	mov	r6, r0
 8007a42:	f7f8 fd97 	bl	8000574 <__aeabi_i2d>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	f7f8 fc43 	bl	80002d8 <__aeabi_dsub>
 8007a52:	3630      	adds	r6, #48	; 0x30
 8007a54:	f805 6b01 	strb.w	r6, [r5], #1
 8007a58:	ec53 2b19 	vmov	r2, r3, d9
 8007a5c:	4680      	mov	r8, r0
 8007a5e:	4689      	mov	r9, r1
 8007a60:	f7f9 f864 	bl	8000b2c <__aeabi_dcmplt>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d164      	bne.n	8007b32 <_dtoa_r+0x62a>
 8007a68:	4642      	mov	r2, r8
 8007a6a:	464b      	mov	r3, r9
 8007a6c:	4937      	ldr	r1, [pc, #220]	; (8007b4c <_dtoa_r+0x644>)
 8007a6e:	2000      	movs	r0, #0
 8007a70:	f7f8 fc32 	bl	80002d8 <__aeabi_dsub>
 8007a74:	ec53 2b19 	vmov	r2, r3, d9
 8007a78:	f7f9 f858 	bl	8000b2c <__aeabi_dcmplt>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	f040 80b6 	bne.w	8007bee <_dtoa_r+0x6e6>
 8007a82:	9b02      	ldr	r3, [sp, #8]
 8007a84:	429d      	cmp	r5, r3
 8007a86:	f43f af7c 	beq.w	8007982 <_dtoa_r+0x47a>
 8007a8a:	4b31      	ldr	r3, [pc, #196]	; (8007b50 <_dtoa_r+0x648>)
 8007a8c:	ec51 0b19 	vmov	r0, r1, d9
 8007a90:	2200      	movs	r2, #0
 8007a92:	f7f8 fdd9 	bl	8000648 <__aeabi_dmul>
 8007a96:	4b2e      	ldr	r3, [pc, #184]	; (8007b50 <_dtoa_r+0x648>)
 8007a98:	ec41 0b19 	vmov	d9, r0, r1
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	4640      	mov	r0, r8
 8007aa0:	4649      	mov	r1, r9
 8007aa2:	f7f8 fdd1 	bl	8000648 <__aeabi_dmul>
 8007aa6:	4680      	mov	r8, r0
 8007aa8:	4689      	mov	r9, r1
 8007aaa:	e7c5      	b.n	8007a38 <_dtoa_r+0x530>
 8007aac:	ec51 0b17 	vmov	r0, r1, d7
 8007ab0:	f7f8 fdca 	bl	8000648 <__aeabi_dmul>
 8007ab4:	9b02      	ldr	r3, [sp, #8]
 8007ab6:	9d00      	ldr	r5, [sp, #0]
 8007ab8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007aba:	ec41 0b19 	vmov	d9, r0, r1
 8007abe:	4649      	mov	r1, r9
 8007ac0:	4640      	mov	r0, r8
 8007ac2:	f7f9 f871 	bl	8000ba8 <__aeabi_d2iz>
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	f7f8 fd54 	bl	8000574 <__aeabi_i2d>
 8007acc:	3630      	adds	r6, #48	; 0x30
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	4640      	mov	r0, r8
 8007ad4:	4649      	mov	r1, r9
 8007ad6:	f7f8 fbff 	bl	80002d8 <__aeabi_dsub>
 8007ada:	f805 6b01 	strb.w	r6, [r5], #1
 8007ade:	9b02      	ldr	r3, [sp, #8]
 8007ae0:	429d      	cmp	r5, r3
 8007ae2:	4680      	mov	r8, r0
 8007ae4:	4689      	mov	r9, r1
 8007ae6:	f04f 0200 	mov.w	r2, #0
 8007aea:	d124      	bne.n	8007b36 <_dtoa_r+0x62e>
 8007aec:	4b1b      	ldr	r3, [pc, #108]	; (8007b5c <_dtoa_r+0x654>)
 8007aee:	ec51 0b19 	vmov	r0, r1, d9
 8007af2:	f7f8 fbf3 	bl	80002dc <__adddf3>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	4640      	mov	r0, r8
 8007afc:	4649      	mov	r1, r9
 8007afe:	f7f9 f833 	bl	8000b68 <__aeabi_dcmpgt>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	d173      	bne.n	8007bee <_dtoa_r+0x6e6>
 8007b06:	ec53 2b19 	vmov	r2, r3, d9
 8007b0a:	4914      	ldr	r1, [pc, #80]	; (8007b5c <_dtoa_r+0x654>)
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	f7f8 fbe3 	bl	80002d8 <__aeabi_dsub>
 8007b12:	4602      	mov	r2, r0
 8007b14:	460b      	mov	r3, r1
 8007b16:	4640      	mov	r0, r8
 8007b18:	4649      	mov	r1, r9
 8007b1a:	f7f9 f807 	bl	8000b2c <__aeabi_dcmplt>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	f43f af2f 	beq.w	8007982 <_dtoa_r+0x47a>
 8007b24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007b26:	1e6b      	subs	r3, r5, #1
 8007b28:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b2e:	2b30      	cmp	r3, #48	; 0x30
 8007b30:	d0f8      	beq.n	8007b24 <_dtoa_r+0x61c>
 8007b32:	46bb      	mov	fp, r7
 8007b34:	e04a      	b.n	8007bcc <_dtoa_r+0x6c4>
 8007b36:	4b06      	ldr	r3, [pc, #24]	; (8007b50 <_dtoa_r+0x648>)
 8007b38:	f7f8 fd86 	bl	8000648 <__aeabi_dmul>
 8007b3c:	4680      	mov	r8, r0
 8007b3e:	4689      	mov	r9, r1
 8007b40:	e7bd      	b.n	8007abe <_dtoa_r+0x5b6>
 8007b42:	bf00      	nop
 8007b44:	08009380 	.word	0x08009380
 8007b48:	08009358 	.word	0x08009358
 8007b4c:	3ff00000 	.word	0x3ff00000
 8007b50:	40240000 	.word	0x40240000
 8007b54:	401c0000 	.word	0x401c0000
 8007b58:	40140000 	.word	0x40140000
 8007b5c:	3fe00000 	.word	0x3fe00000
 8007b60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b64:	9d00      	ldr	r5, [sp, #0]
 8007b66:	4642      	mov	r2, r8
 8007b68:	464b      	mov	r3, r9
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	4639      	mov	r1, r7
 8007b6e:	f7f8 fe95 	bl	800089c <__aeabi_ddiv>
 8007b72:	f7f9 f819 	bl	8000ba8 <__aeabi_d2iz>
 8007b76:	9001      	str	r0, [sp, #4]
 8007b78:	f7f8 fcfc 	bl	8000574 <__aeabi_i2d>
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	464b      	mov	r3, r9
 8007b80:	f7f8 fd62 	bl	8000648 <__aeabi_dmul>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4630      	mov	r0, r6
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	f7f8 fba4 	bl	80002d8 <__aeabi_dsub>
 8007b90:	9e01      	ldr	r6, [sp, #4]
 8007b92:	9f04      	ldr	r7, [sp, #16]
 8007b94:	3630      	adds	r6, #48	; 0x30
 8007b96:	f805 6b01 	strb.w	r6, [r5], #1
 8007b9a:	9e00      	ldr	r6, [sp, #0]
 8007b9c:	1bae      	subs	r6, r5, r6
 8007b9e:	42b7      	cmp	r7, r6
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	d134      	bne.n	8007c10 <_dtoa_r+0x708>
 8007ba6:	f7f8 fb99 	bl	80002dc <__adddf3>
 8007baa:	4642      	mov	r2, r8
 8007bac:	464b      	mov	r3, r9
 8007bae:	4606      	mov	r6, r0
 8007bb0:	460f      	mov	r7, r1
 8007bb2:	f7f8 ffd9 	bl	8000b68 <__aeabi_dcmpgt>
 8007bb6:	b9c8      	cbnz	r0, 8007bec <_dtoa_r+0x6e4>
 8007bb8:	4642      	mov	r2, r8
 8007bba:	464b      	mov	r3, r9
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	f7f8 ffaa 	bl	8000b18 <__aeabi_dcmpeq>
 8007bc4:	b110      	cbz	r0, 8007bcc <_dtoa_r+0x6c4>
 8007bc6:	9b01      	ldr	r3, [sp, #4]
 8007bc8:	07db      	lsls	r3, r3, #31
 8007bca:	d40f      	bmi.n	8007bec <_dtoa_r+0x6e4>
 8007bcc:	4651      	mov	r1, sl
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f000 fbcc 	bl	800836c <_Bfree>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bd8:	702b      	strb	r3, [r5, #0]
 8007bda:	f10b 0301 	add.w	r3, fp, #1
 8007bde:	6013      	str	r3, [r2, #0]
 8007be0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f43f ace2 	beq.w	80075ac <_dtoa_r+0xa4>
 8007be8:	601d      	str	r5, [r3, #0]
 8007bea:	e4df      	b.n	80075ac <_dtoa_r+0xa4>
 8007bec:	465f      	mov	r7, fp
 8007bee:	462b      	mov	r3, r5
 8007bf0:	461d      	mov	r5, r3
 8007bf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bf6:	2a39      	cmp	r2, #57	; 0x39
 8007bf8:	d106      	bne.n	8007c08 <_dtoa_r+0x700>
 8007bfa:	9a00      	ldr	r2, [sp, #0]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d1f7      	bne.n	8007bf0 <_dtoa_r+0x6e8>
 8007c00:	9900      	ldr	r1, [sp, #0]
 8007c02:	2230      	movs	r2, #48	; 0x30
 8007c04:	3701      	adds	r7, #1
 8007c06:	700a      	strb	r2, [r1, #0]
 8007c08:	781a      	ldrb	r2, [r3, #0]
 8007c0a:	3201      	adds	r2, #1
 8007c0c:	701a      	strb	r2, [r3, #0]
 8007c0e:	e790      	b.n	8007b32 <_dtoa_r+0x62a>
 8007c10:	4ba3      	ldr	r3, [pc, #652]	; (8007ea0 <_dtoa_r+0x998>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	f7f8 fd18 	bl	8000648 <__aeabi_dmul>
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	4606      	mov	r6, r0
 8007c1e:	460f      	mov	r7, r1
 8007c20:	f7f8 ff7a 	bl	8000b18 <__aeabi_dcmpeq>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d09e      	beq.n	8007b66 <_dtoa_r+0x65e>
 8007c28:	e7d0      	b.n	8007bcc <_dtoa_r+0x6c4>
 8007c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c2c:	2a00      	cmp	r2, #0
 8007c2e:	f000 80ca 	beq.w	8007dc6 <_dtoa_r+0x8be>
 8007c32:	9a07      	ldr	r2, [sp, #28]
 8007c34:	2a01      	cmp	r2, #1
 8007c36:	f300 80ad 	bgt.w	8007d94 <_dtoa_r+0x88c>
 8007c3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c3c:	2a00      	cmp	r2, #0
 8007c3e:	f000 80a5 	beq.w	8007d8c <_dtoa_r+0x884>
 8007c42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c46:	9e08      	ldr	r6, [sp, #32]
 8007c48:	9d05      	ldr	r5, [sp, #20]
 8007c4a:	9a05      	ldr	r2, [sp, #20]
 8007c4c:	441a      	add	r2, r3
 8007c4e:	9205      	str	r2, [sp, #20]
 8007c50:	9a06      	ldr	r2, [sp, #24]
 8007c52:	2101      	movs	r1, #1
 8007c54:	441a      	add	r2, r3
 8007c56:	4620      	mov	r0, r4
 8007c58:	9206      	str	r2, [sp, #24]
 8007c5a:	f000 fc3d 	bl	80084d8 <__i2b>
 8007c5e:	4607      	mov	r7, r0
 8007c60:	b165      	cbz	r5, 8007c7c <_dtoa_r+0x774>
 8007c62:	9b06      	ldr	r3, [sp, #24]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	dd09      	ble.n	8007c7c <_dtoa_r+0x774>
 8007c68:	42ab      	cmp	r3, r5
 8007c6a:	9a05      	ldr	r2, [sp, #20]
 8007c6c:	bfa8      	it	ge
 8007c6e:	462b      	movge	r3, r5
 8007c70:	1ad2      	subs	r2, r2, r3
 8007c72:	9205      	str	r2, [sp, #20]
 8007c74:	9a06      	ldr	r2, [sp, #24]
 8007c76:	1aed      	subs	r5, r5, r3
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	9306      	str	r3, [sp, #24]
 8007c7c:	9b08      	ldr	r3, [sp, #32]
 8007c7e:	b1f3      	cbz	r3, 8007cbe <_dtoa_r+0x7b6>
 8007c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 80a3 	beq.w	8007dce <_dtoa_r+0x8c6>
 8007c88:	2e00      	cmp	r6, #0
 8007c8a:	dd10      	ble.n	8007cae <_dtoa_r+0x7a6>
 8007c8c:	4639      	mov	r1, r7
 8007c8e:	4632      	mov	r2, r6
 8007c90:	4620      	mov	r0, r4
 8007c92:	f000 fce1 	bl	8008658 <__pow5mult>
 8007c96:	4652      	mov	r2, sl
 8007c98:	4601      	mov	r1, r0
 8007c9a:	4607      	mov	r7, r0
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f000 fc31 	bl	8008504 <__multiply>
 8007ca2:	4651      	mov	r1, sl
 8007ca4:	4680      	mov	r8, r0
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f000 fb60 	bl	800836c <_Bfree>
 8007cac:	46c2      	mov	sl, r8
 8007cae:	9b08      	ldr	r3, [sp, #32]
 8007cb0:	1b9a      	subs	r2, r3, r6
 8007cb2:	d004      	beq.n	8007cbe <_dtoa_r+0x7b6>
 8007cb4:	4651      	mov	r1, sl
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f000 fcce 	bl	8008658 <__pow5mult>
 8007cbc:	4682      	mov	sl, r0
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f000 fc09 	bl	80084d8 <__i2b>
 8007cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	4606      	mov	r6, r0
 8007ccc:	f340 8081 	ble.w	8007dd2 <_dtoa_r+0x8ca>
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	4601      	mov	r1, r0
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 fcbf 	bl	8008658 <__pow5mult>
 8007cda:	9b07      	ldr	r3, [sp, #28]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	4606      	mov	r6, r0
 8007ce0:	dd7a      	ble.n	8007dd8 <_dtoa_r+0x8d0>
 8007ce2:	f04f 0800 	mov.w	r8, #0
 8007ce6:	6933      	ldr	r3, [r6, #16]
 8007ce8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007cec:	6918      	ldr	r0, [r3, #16]
 8007cee:	f000 fba5 	bl	800843c <__hi0bits>
 8007cf2:	f1c0 0020 	rsb	r0, r0, #32
 8007cf6:	9b06      	ldr	r3, [sp, #24]
 8007cf8:	4418      	add	r0, r3
 8007cfa:	f010 001f 	ands.w	r0, r0, #31
 8007cfe:	f000 8094 	beq.w	8007e2a <_dtoa_r+0x922>
 8007d02:	f1c0 0320 	rsb	r3, r0, #32
 8007d06:	2b04      	cmp	r3, #4
 8007d08:	f340 8085 	ble.w	8007e16 <_dtoa_r+0x90e>
 8007d0c:	9b05      	ldr	r3, [sp, #20]
 8007d0e:	f1c0 001c 	rsb	r0, r0, #28
 8007d12:	4403      	add	r3, r0
 8007d14:	9305      	str	r3, [sp, #20]
 8007d16:	9b06      	ldr	r3, [sp, #24]
 8007d18:	4403      	add	r3, r0
 8007d1a:	4405      	add	r5, r0
 8007d1c:	9306      	str	r3, [sp, #24]
 8007d1e:	9b05      	ldr	r3, [sp, #20]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	dd05      	ble.n	8007d30 <_dtoa_r+0x828>
 8007d24:	4651      	mov	r1, sl
 8007d26:	461a      	mov	r2, r3
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f000 fcef 	bl	800870c <__lshift>
 8007d2e:	4682      	mov	sl, r0
 8007d30:	9b06      	ldr	r3, [sp, #24]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	dd05      	ble.n	8007d42 <_dtoa_r+0x83a>
 8007d36:	4631      	mov	r1, r6
 8007d38:	461a      	mov	r2, r3
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f000 fce6 	bl	800870c <__lshift>
 8007d40:	4606      	mov	r6, r0
 8007d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d072      	beq.n	8007e2e <_dtoa_r+0x926>
 8007d48:	4631      	mov	r1, r6
 8007d4a:	4650      	mov	r0, sl
 8007d4c:	f000 fd4a 	bl	80087e4 <__mcmp>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	da6c      	bge.n	8007e2e <_dtoa_r+0x926>
 8007d54:	2300      	movs	r3, #0
 8007d56:	4651      	mov	r1, sl
 8007d58:	220a      	movs	r2, #10
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f000 fb28 	bl	80083b0 <__multadd>
 8007d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d66:	4682      	mov	sl, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 81b0 	beq.w	80080ce <_dtoa_r+0xbc6>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	4639      	mov	r1, r7
 8007d72:	220a      	movs	r2, #10
 8007d74:	4620      	mov	r0, r4
 8007d76:	f000 fb1b 	bl	80083b0 <__multadd>
 8007d7a:	9b01      	ldr	r3, [sp, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	4607      	mov	r7, r0
 8007d80:	f300 8096 	bgt.w	8007eb0 <_dtoa_r+0x9a8>
 8007d84:	9b07      	ldr	r3, [sp, #28]
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	dc59      	bgt.n	8007e3e <_dtoa_r+0x936>
 8007d8a:	e091      	b.n	8007eb0 <_dtoa_r+0x9a8>
 8007d8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d92:	e758      	b.n	8007c46 <_dtoa_r+0x73e>
 8007d94:	9b04      	ldr	r3, [sp, #16]
 8007d96:	1e5e      	subs	r6, r3, #1
 8007d98:	9b08      	ldr	r3, [sp, #32]
 8007d9a:	42b3      	cmp	r3, r6
 8007d9c:	bfbf      	itttt	lt
 8007d9e:	9b08      	ldrlt	r3, [sp, #32]
 8007da0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007da2:	9608      	strlt	r6, [sp, #32]
 8007da4:	1af3      	sublt	r3, r6, r3
 8007da6:	bfb4      	ite	lt
 8007da8:	18d2      	addlt	r2, r2, r3
 8007daa:	1b9e      	subge	r6, r3, r6
 8007dac:	9b04      	ldr	r3, [sp, #16]
 8007dae:	bfbc      	itt	lt
 8007db0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007db2:	2600      	movlt	r6, #0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	bfb7      	itett	lt
 8007db8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007dbc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007dc0:	1a9d      	sublt	r5, r3, r2
 8007dc2:	2300      	movlt	r3, #0
 8007dc4:	e741      	b.n	8007c4a <_dtoa_r+0x742>
 8007dc6:	9e08      	ldr	r6, [sp, #32]
 8007dc8:	9d05      	ldr	r5, [sp, #20]
 8007dca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007dcc:	e748      	b.n	8007c60 <_dtoa_r+0x758>
 8007dce:	9a08      	ldr	r2, [sp, #32]
 8007dd0:	e770      	b.n	8007cb4 <_dtoa_r+0x7ac>
 8007dd2:	9b07      	ldr	r3, [sp, #28]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	dc19      	bgt.n	8007e0c <_dtoa_r+0x904>
 8007dd8:	9b02      	ldr	r3, [sp, #8]
 8007dda:	b9bb      	cbnz	r3, 8007e0c <_dtoa_r+0x904>
 8007ddc:	9b03      	ldr	r3, [sp, #12]
 8007dde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007de2:	b99b      	cbnz	r3, 8007e0c <_dtoa_r+0x904>
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007dea:	0d1b      	lsrs	r3, r3, #20
 8007dec:	051b      	lsls	r3, r3, #20
 8007dee:	b183      	cbz	r3, 8007e12 <_dtoa_r+0x90a>
 8007df0:	9b05      	ldr	r3, [sp, #20]
 8007df2:	3301      	adds	r3, #1
 8007df4:	9305      	str	r3, [sp, #20]
 8007df6:	9b06      	ldr	r3, [sp, #24]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	9306      	str	r3, [sp, #24]
 8007dfc:	f04f 0801 	mov.w	r8, #1
 8007e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f47f af6f 	bne.w	8007ce6 <_dtoa_r+0x7de>
 8007e08:	2001      	movs	r0, #1
 8007e0a:	e774      	b.n	8007cf6 <_dtoa_r+0x7ee>
 8007e0c:	f04f 0800 	mov.w	r8, #0
 8007e10:	e7f6      	b.n	8007e00 <_dtoa_r+0x8f8>
 8007e12:	4698      	mov	r8, r3
 8007e14:	e7f4      	b.n	8007e00 <_dtoa_r+0x8f8>
 8007e16:	d082      	beq.n	8007d1e <_dtoa_r+0x816>
 8007e18:	9a05      	ldr	r2, [sp, #20]
 8007e1a:	331c      	adds	r3, #28
 8007e1c:	441a      	add	r2, r3
 8007e1e:	9205      	str	r2, [sp, #20]
 8007e20:	9a06      	ldr	r2, [sp, #24]
 8007e22:	441a      	add	r2, r3
 8007e24:	441d      	add	r5, r3
 8007e26:	9206      	str	r2, [sp, #24]
 8007e28:	e779      	b.n	8007d1e <_dtoa_r+0x816>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	e7f4      	b.n	8007e18 <_dtoa_r+0x910>
 8007e2e:	9b04      	ldr	r3, [sp, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	dc37      	bgt.n	8007ea4 <_dtoa_r+0x99c>
 8007e34:	9b07      	ldr	r3, [sp, #28]
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	dd34      	ble.n	8007ea4 <_dtoa_r+0x99c>
 8007e3a:	9b04      	ldr	r3, [sp, #16]
 8007e3c:	9301      	str	r3, [sp, #4]
 8007e3e:	9b01      	ldr	r3, [sp, #4]
 8007e40:	b963      	cbnz	r3, 8007e5c <_dtoa_r+0x954>
 8007e42:	4631      	mov	r1, r6
 8007e44:	2205      	movs	r2, #5
 8007e46:	4620      	mov	r0, r4
 8007e48:	f000 fab2 	bl	80083b0 <__multadd>
 8007e4c:	4601      	mov	r1, r0
 8007e4e:	4606      	mov	r6, r0
 8007e50:	4650      	mov	r0, sl
 8007e52:	f000 fcc7 	bl	80087e4 <__mcmp>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	f73f adbb 	bgt.w	80079d2 <_dtoa_r+0x4ca>
 8007e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e5e:	9d00      	ldr	r5, [sp, #0]
 8007e60:	ea6f 0b03 	mvn.w	fp, r3
 8007e64:	f04f 0800 	mov.w	r8, #0
 8007e68:	4631      	mov	r1, r6
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 fa7e 	bl	800836c <_Bfree>
 8007e70:	2f00      	cmp	r7, #0
 8007e72:	f43f aeab 	beq.w	8007bcc <_dtoa_r+0x6c4>
 8007e76:	f1b8 0f00 	cmp.w	r8, #0
 8007e7a:	d005      	beq.n	8007e88 <_dtoa_r+0x980>
 8007e7c:	45b8      	cmp	r8, r7
 8007e7e:	d003      	beq.n	8007e88 <_dtoa_r+0x980>
 8007e80:	4641      	mov	r1, r8
 8007e82:	4620      	mov	r0, r4
 8007e84:	f000 fa72 	bl	800836c <_Bfree>
 8007e88:	4639      	mov	r1, r7
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f000 fa6e 	bl	800836c <_Bfree>
 8007e90:	e69c      	b.n	8007bcc <_dtoa_r+0x6c4>
 8007e92:	2600      	movs	r6, #0
 8007e94:	4637      	mov	r7, r6
 8007e96:	e7e1      	b.n	8007e5c <_dtoa_r+0x954>
 8007e98:	46bb      	mov	fp, r7
 8007e9a:	4637      	mov	r7, r6
 8007e9c:	e599      	b.n	80079d2 <_dtoa_r+0x4ca>
 8007e9e:	bf00      	nop
 8007ea0:	40240000 	.word	0x40240000
 8007ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 80c8 	beq.w	800803c <_dtoa_r+0xb34>
 8007eac:	9b04      	ldr	r3, [sp, #16]
 8007eae:	9301      	str	r3, [sp, #4]
 8007eb0:	2d00      	cmp	r5, #0
 8007eb2:	dd05      	ble.n	8007ec0 <_dtoa_r+0x9b8>
 8007eb4:	4639      	mov	r1, r7
 8007eb6:	462a      	mov	r2, r5
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f000 fc27 	bl	800870c <__lshift>
 8007ebe:	4607      	mov	r7, r0
 8007ec0:	f1b8 0f00 	cmp.w	r8, #0
 8007ec4:	d05b      	beq.n	8007f7e <_dtoa_r+0xa76>
 8007ec6:	6879      	ldr	r1, [r7, #4]
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f000 fa0f 	bl	80082ec <_Balloc>
 8007ece:	4605      	mov	r5, r0
 8007ed0:	b928      	cbnz	r0, 8007ede <_dtoa_r+0x9d6>
 8007ed2:	4b83      	ldr	r3, [pc, #524]	; (80080e0 <_dtoa_r+0xbd8>)
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007eda:	f7ff bb2e 	b.w	800753a <_dtoa_r+0x32>
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	3202      	adds	r2, #2
 8007ee2:	0092      	lsls	r2, r2, #2
 8007ee4:	f107 010c 	add.w	r1, r7, #12
 8007ee8:	300c      	adds	r0, #12
 8007eea:	f001 f813 	bl	8008f14 <memcpy>
 8007eee:	2201      	movs	r2, #1
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f000 fc0a 	bl	800870c <__lshift>
 8007ef8:	9b00      	ldr	r3, [sp, #0]
 8007efa:	3301      	adds	r3, #1
 8007efc:	9304      	str	r3, [sp, #16]
 8007efe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f02:	4413      	add	r3, r2
 8007f04:	9308      	str	r3, [sp, #32]
 8007f06:	9b02      	ldr	r3, [sp, #8]
 8007f08:	f003 0301 	and.w	r3, r3, #1
 8007f0c:	46b8      	mov	r8, r7
 8007f0e:	9306      	str	r3, [sp, #24]
 8007f10:	4607      	mov	r7, r0
 8007f12:	9b04      	ldr	r3, [sp, #16]
 8007f14:	4631      	mov	r1, r6
 8007f16:	3b01      	subs	r3, #1
 8007f18:	4650      	mov	r0, sl
 8007f1a:	9301      	str	r3, [sp, #4]
 8007f1c:	f7ff fa69 	bl	80073f2 <quorem>
 8007f20:	4641      	mov	r1, r8
 8007f22:	9002      	str	r0, [sp, #8]
 8007f24:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007f28:	4650      	mov	r0, sl
 8007f2a:	f000 fc5b 	bl	80087e4 <__mcmp>
 8007f2e:	463a      	mov	r2, r7
 8007f30:	9005      	str	r0, [sp, #20]
 8007f32:	4631      	mov	r1, r6
 8007f34:	4620      	mov	r0, r4
 8007f36:	f000 fc71 	bl	800881c <__mdiff>
 8007f3a:	68c2      	ldr	r2, [r0, #12]
 8007f3c:	4605      	mov	r5, r0
 8007f3e:	bb02      	cbnz	r2, 8007f82 <_dtoa_r+0xa7a>
 8007f40:	4601      	mov	r1, r0
 8007f42:	4650      	mov	r0, sl
 8007f44:	f000 fc4e 	bl	80087e4 <__mcmp>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	9209      	str	r2, [sp, #36]	; 0x24
 8007f50:	f000 fa0c 	bl	800836c <_Bfree>
 8007f54:	9b07      	ldr	r3, [sp, #28]
 8007f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f58:	9d04      	ldr	r5, [sp, #16]
 8007f5a:	ea43 0102 	orr.w	r1, r3, r2
 8007f5e:	9b06      	ldr	r3, [sp, #24]
 8007f60:	4319      	orrs	r1, r3
 8007f62:	d110      	bne.n	8007f86 <_dtoa_r+0xa7e>
 8007f64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f68:	d029      	beq.n	8007fbe <_dtoa_r+0xab6>
 8007f6a:	9b05      	ldr	r3, [sp, #20]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	dd02      	ble.n	8007f76 <_dtoa_r+0xa6e>
 8007f70:	9b02      	ldr	r3, [sp, #8]
 8007f72:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007f76:	9b01      	ldr	r3, [sp, #4]
 8007f78:	f883 9000 	strb.w	r9, [r3]
 8007f7c:	e774      	b.n	8007e68 <_dtoa_r+0x960>
 8007f7e:	4638      	mov	r0, r7
 8007f80:	e7ba      	b.n	8007ef8 <_dtoa_r+0x9f0>
 8007f82:	2201      	movs	r2, #1
 8007f84:	e7e1      	b.n	8007f4a <_dtoa_r+0xa42>
 8007f86:	9b05      	ldr	r3, [sp, #20]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	db04      	blt.n	8007f96 <_dtoa_r+0xa8e>
 8007f8c:	9907      	ldr	r1, [sp, #28]
 8007f8e:	430b      	orrs	r3, r1
 8007f90:	9906      	ldr	r1, [sp, #24]
 8007f92:	430b      	orrs	r3, r1
 8007f94:	d120      	bne.n	8007fd8 <_dtoa_r+0xad0>
 8007f96:	2a00      	cmp	r2, #0
 8007f98:	dded      	ble.n	8007f76 <_dtoa_r+0xa6e>
 8007f9a:	4651      	mov	r1, sl
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f000 fbb4 	bl	800870c <__lshift>
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4682      	mov	sl, r0
 8007fa8:	f000 fc1c 	bl	80087e4 <__mcmp>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	dc03      	bgt.n	8007fb8 <_dtoa_r+0xab0>
 8007fb0:	d1e1      	bne.n	8007f76 <_dtoa_r+0xa6e>
 8007fb2:	f019 0f01 	tst.w	r9, #1
 8007fb6:	d0de      	beq.n	8007f76 <_dtoa_r+0xa6e>
 8007fb8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007fbc:	d1d8      	bne.n	8007f70 <_dtoa_r+0xa68>
 8007fbe:	9a01      	ldr	r2, [sp, #4]
 8007fc0:	2339      	movs	r3, #57	; 0x39
 8007fc2:	7013      	strb	r3, [r2, #0]
 8007fc4:	462b      	mov	r3, r5
 8007fc6:	461d      	mov	r5, r3
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007fce:	2a39      	cmp	r2, #57	; 0x39
 8007fd0:	d06c      	beq.n	80080ac <_dtoa_r+0xba4>
 8007fd2:	3201      	adds	r2, #1
 8007fd4:	701a      	strb	r2, [r3, #0]
 8007fd6:	e747      	b.n	8007e68 <_dtoa_r+0x960>
 8007fd8:	2a00      	cmp	r2, #0
 8007fda:	dd07      	ble.n	8007fec <_dtoa_r+0xae4>
 8007fdc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007fe0:	d0ed      	beq.n	8007fbe <_dtoa_r+0xab6>
 8007fe2:	9a01      	ldr	r2, [sp, #4]
 8007fe4:	f109 0301 	add.w	r3, r9, #1
 8007fe8:	7013      	strb	r3, [r2, #0]
 8007fea:	e73d      	b.n	8007e68 <_dtoa_r+0x960>
 8007fec:	9b04      	ldr	r3, [sp, #16]
 8007fee:	9a08      	ldr	r2, [sp, #32]
 8007ff0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d043      	beq.n	8008080 <_dtoa_r+0xb78>
 8007ff8:	4651      	mov	r1, sl
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	220a      	movs	r2, #10
 8007ffe:	4620      	mov	r0, r4
 8008000:	f000 f9d6 	bl	80083b0 <__multadd>
 8008004:	45b8      	cmp	r8, r7
 8008006:	4682      	mov	sl, r0
 8008008:	f04f 0300 	mov.w	r3, #0
 800800c:	f04f 020a 	mov.w	r2, #10
 8008010:	4641      	mov	r1, r8
 8008012:	4620      	mov	r0, r4
 8008014:	d107      	bne.n	8008026 <_dtoa_r+0xb1e>
 8008016:	f000 f9cb 	bl	80083b0 <__multadd>
 800801a:	4680      	mov	r8, r0
 800801c:	4607      	mov	r7, r0
 800801e:	9b04      	ldr	r3, [sp, #16]
 8008020:	3301      	adds	r3, #1
 8008022:	9304      	str	r3, [sp, #16]
 8008024:	e775      	b.n	8007f12 <_dtoa_r+0xa0a>
 8008026:	f000 f9c3 	bl	80083b0 <__multadd>
 800802a:	4639      	mov	r1, r7
 800802c:	4680      	mov	r8, r0
 800802e:	2300      	movs	r3, #0
 8008030:	220a      	movs	r2, #10
 8008032:	4620      	mov	r0, r4
 8008034:	f000 f9bc 	bl	80083b0 <__multadd>
 8008038:	4607      	mov	r7, r0
 800803a:	e7f0      	b.n	800801e <_dtoa_r+0xb16>
 800803c:	9b04      	ldr	r3, [sp, #16]
 800803e:	9301      	str	r3, [sp, #4]
 8008040:	9d00      	ldr	r5, [sp, #0]
 8008042:	4631      	mov	r1, r6
 8008044:	4650      	mov	r0, sl
 8008046:	f7ff f9d4 	bl	80073f2 <quorem>
 800804a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800804e:	9b00      	ldr	r3, [sp, #0]
 8008050:	f805 9b01 	strb.w	r9, [r5], #1
 8008054:	1aea      	subs	r2, r5, r3
 8008056:	9b01      	ldr	r3, [sp, #4]
 8008058:	4293      	cmp	r3, r2
 800805a:	dd07      	ble.n	800806c <_dtoa_r+0xb64>
 800805c:	4651      	mov	r1, sl
 800805e:	2300      	movs	r3, #0
 8008060:	220a      	movs	r2, #10
 8008062:	4620      	mov	r0, r4
 8008064:	f000 f9a4 	bl	80083b0 <__multadd>
 8008068:	4682      	mov	sl, r0
 800806a:	e7ea      	b.n	8008042 <_dtoa_r+0xb3a>
 800806c:	9b01      	ldr	r3, [sp, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	bfc8      	it	gt
 8008072:	461d      	movgt	r5, r3
 8008074:	9b00      	ldr	r3, [sp, #0]
 8008076:	bfd8      	it	le
 8008078:	2501      	movle	r5, #1
 800807a:	441d      	add	r5, r3
 800807c:	f04f 0800 	mov.w	r8, #0
 8008080:	4651      	mov	r1, sl
 8008082:	2201      	movs	r2, #1
 8008084:	4620      	mov	r0, r4
 8008086:	f000 fb41 	bl	800870c <__lshift>
 800808a:	4631      	mov	r1, r6
 800808c:	4682      	mov	sl, r0
 800808e:	f000 fba9 	bl	80087e4 <__mcmp>
 8008092:	2800      	cmp	r0, #0
 8008094:	dc96      	bgt.n	8007fc4 <_dtoa_r+0xabc>
 8008096:	d102      	bne.n	800809e <_dtoa_r+0xb96>
 8008098:	f019 0f01 	tst.w	r9, #1
 800809c:	d192      	bne.n	8007fc4 <_dtoa_r+0xabc>
 800809e:	462b      	mov	r3, r5
 80080a0:	461d      	mov	r5, r3
 80080a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080a6:	2a30      	cmp	r2, #48	; 0x30
 80080a8:	d0fa      	beq.n	80080a0 <_dtoa_r+0xb98>
 80080aa:	e6dd      	b.n	8007e68 <_dtoa_r+0x960>
 80080ac:	9a00      	ldr	r2, [sp, #0]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d189      	bne.n	8007fc6 <_dtoa_r+0xabe>
 80080b2:	f10b 0b01 	add.w	fp, fp, #1
 80080b6:	2331      	movs	r3, #49	; 0x31
 80080b8:	e796      	b.n	8007fe8 <_dtoa_r+0xae0>
 80080ba:	4b0a      	ldr	r3, [pc, #40]	; (80080e4 <_dtoa_r+0xbdc>)
 80080bc:	f7ff ba99 	b.w	80075f2 <_dtoa_r+0xea>
 80080c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f47f aa6d 	bne.w	80075a2 <_dtoa_r+0x9a>
 80080c8:	4b07      	ldr	r3, [pc, #28]	; (80080e8 <_dtoa_r+0xbe0>)
 80080ca:	f7ff ba92 	b.w	80075f2 <_dtoa_r+0xea>
 80080ce:	9b01      	ldr	r3, [sp, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	dcb5      	bgt.n	8008040 <_dtoa_r+0xb38>
 80080d4:	9b07      	ldr	r3, [sp, #28]
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	f73f aeb1 	bgt.w	8007e3e <_dtoa_r+0x936>
 80080dc:	e7b0      	b.n	8008040 <_dtoa_r+0xb38>
 80080de:	bf00      	nop
 80080e0:	080092e8 	.word	0x080092e8
 80080e4:	08009248 	.word	0x08009248
 80080e8:	0800926c 	.word	0x0800926c

080080ec <_free_r>:
 80080ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ee:	2900      	cmp	r1, #0
 80080f0:	d044      	beq.n	800817c <_free_r+0x90>
 80080f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080f6:	9001      	str	r0, [sp, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f1a1 0404 	sub.w	r4, r1, #4
 80080fe:	bfb8      	it	lt
 8008100:	18e4      	addlt	r4, r4, r3
 8008102:	f000 f8e7 	bl	80082d4 <__malloc_lock>
 8008106:	4a1e      	ldr	r2, [pc, #120]	; (8008180 <_free_r+0x94>)
 8008108:	9801      	ldr	r0, [sp, #4]
 800810a:	6813      	ldr	r3, [r2, #0]
 800810c:	b933      	cbnz	r3, 800811c <_free_r+0x30>
 800810e:	6063      	str	r3, [r4, #4]
 8008110:	6014      	str	r4, [r2, #0]
 8008112:	b003      	add	sp, #12
 8008114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008118:	f000 b8e2 	b.w	80082e0 <__malloc_unlock>
 800811c:	42a3      	cmp	r3, r4
 800811e:	d908      	bls.n	8008132 <_free_r+0x46>
 8008120:	6825      	ldr	r5, [r4, #0]
 8008122:	1961      	adds	r1, r4, r5
 8008124:	428b      	cmp	r3, r1
 8008126:	bf01      	itttt	eq
 8008128:	6819      	ldreq	r1, [r3, #0]
 800812a:	685b      	ldreq	r3, [r3, #4]
 800812c:	1949      	addeq	r1, r1, r5
 800812e:	6021      	streq	r1, [r4, #0]
 8008130:	e7ed      	b.n	800810e <_free_r+0x22>
 8008132:	461a      	mov	r2, r3
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	b10b      	cbz	r3, 800813c <_free_r+0x50>
 8008138:	42a3      	cmp	r3, r4
 800813a:	d9fa      	bls.n	8008132 <_free_r+0x46>
 800813c:	6811      	ldr	r1, [r2, #0]
 800813e:	1855      	adds	r5, r2, r1
 8008140:	42a5      	cmp	r5, r4
 8008142:	d10b      	bne.n	800815c <_free_r+0x70>
 8008144:	6824      	ldr	r4, [r4, #0]
 8008146:	4421      	add	r1, r4
 8008148:	1854      	adds	r4, r2, r1
 800814a:	42a3      	cmp	r3, r4
 800814c:	6011      	str	r1, [r2, #0]
 800814e:	d1e0      	bne.n	8008112 <_free_r+0x26>
 8008150:	681c      	ldr	r4, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	6053      	str	r3, [r2, #4]
 8008156:	440c      	add	r4, r1
 8008158:	6014      	str	r4, [r2, #0]
 800815a:	e7da      	b.n	8008112 <_free_r+0x26>
 800815c:	d902      	bls.n	8008164 <_free_r+0x78>
 800815e:	230c      	movs	r3, #12
 8008160:	6003      	str	r3, [r0, #0]
 8008162:	e7d6      	b.n	8008112 <_free_r+0x26>
 8008164:	6825      	ldr	r5, [r4, #0]
 8008166:	1961      	adds	r1, r4, r5
 8008168:	428b      	cmp	r3, r1
 800816a:	bf04      	itt	eq
 800816c:	6819      	ldreq	r1, [r3, #0]
 800816e:	685b      	ldreq	r3, [r3, #4]
 8008170:	6063      	str	r3, [r4, #4]
 8008172:	bf04      	itt	eq
 8008174:	1949      	addeq	r1, r1, r5
 8008176:	6021      	streq	r1, [r4, #0]
 8008178:	6054      	str	r4, [r2, #4]
 800817a:	e7ca      	b.n	8008112 <_free_r+0x26>
 800817c:	b003      	add	sp, #12
 800817e:	bd30      	pop	{r4, r5, pc}
 8008180:	20000594 	.word	0x20000594

08008184 <malloc>:
 8008184:	4b02      	ldr	r3, [pc, #8]	; (8008190 <malloc+0xc>)
 8008186:	4601      	mov	r1, r0
 8008188:	6818      	ldr	r0, [r3, #0]
 800818a:	f000 b823 	b.w	80081d4 <_malloc_r>
 800818e:	bf00      	nop
 8008190:	20000064 	.word	0x20000064

08008194 <sbrk_aligned>:
 8008194:	b570      	push	{r4, r5, r6, lr}
 8008196:	4e0e      	ldr	r6, [pc, #56]	; (80081d0 <sbrk_aligned+0x3c>)
 8008198:	460c      	mov	r4, r1
 800819a:	6831      	ldr	r1, [r6, #0]
 800819c:	4605      	mov	r5, r0
 800819e:	b911      	cbnz	r1, 80081a6 <sbrk_aligned+0x12>
 80081a0:	f000 fea8 	bl	8008ef4 <_sbrk_r>
 80081a4:	6030      	str	r0, [r6, #0]
 80081a6:	4621      	mov	r1, r4
 80081a8:	4628      	mov	r0, r5
 80081aa:	f000 fea3 	bl	8008ef4 <_sbrk_r>
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	d00a      	beq.n	80081c8 <sbrk_aligned+0x34>
 80081b2:	1cc4      	adds	r4, r0, #3
 80081b4:	f024 0403 	bic.w	r4, r4, #3
 80081b8:	42a0      	cmp	r0, r4
 80081ba:	d007      	beq.n	80081cc <sbrk_aligned+0x38>
 80081bc:	1a21      	subs	r1, r4, r0
 80081be:	4628      	mov	r0, r5
 80081c0:	f000 fe98 	bl	8008ef4 <_sbrk_r>
 80081c4:	3001      	adds	r0, #1
 80081c6:	d101      	bne.n	80081cc <sbrk_aligned+0x38>
 80081c8:	f04f 34ff 	mov.w	r4, #4294967295
 80081cc:	4620      	mov	r0, r4
 80081ce:	bd70      	pop	{r4, r5, r6, pc}
 80081d0:	20000598 	.word	0x20000598

080081d4 <_malloc_r>:
 80081d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d8:	1ccd      	adds	r5, r1, #3
 80081da:	f025 0503 	bic.w	r5, r5, #3
 80081de:	3508      	adds	r5, #8
 80081e0:	2d0c      	cmp	r5, #12
 80081e2:	bf38      	it	cc
 80081e4:	250c      	movcc	r5, #12
 80081e6:	2d00      	cmp	r5, #0
 80081e8:	4607      	mov	r7, r0
 80081ea:	db01      	blt.n	80081f0 <_malloc_r+0x1c>
 80081ec:	42a9      	cmp	r1, r5
 80081ee:	d905      	bls.n	80081fc <_malloc_r+0x28>
 80081f0:	230c      	movs	r3, #12
 80081f2:	603b      	str	r3, [r7, #0]
 80081f4:	2600      	movs	r6, #0
 80081f6:	4630      	mov	r0, r6
 80081f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80082d0 <_malloc_r+0xfc>
 8008200:	f000 f868 	bl	80082d4 <__malloc_lock>
 8008204:	f8d8 3000 	ldr.w	r3, [r8]
 8008208:	461c      	mov	r4, r3
 800820a:	bb5c      	cbnz	r4, 8008264 <_malloc_r+0x90>
 800820c:	4629      	mov	r1, r5
 800820e:	4638      	mov	r0, r7
 8008210:	f7ff ffc0 	bl	8008194 <sbrk_aligned>
 8008214:	1c43      	adds	r3, r0, #1
 8008216:	4604      	mov	r4, r0
 8008218:	d155      	bne.n	80082c6 <_malloc_r+0xf2>
 800821a:	f8d8 4000 	ldr.w	r4, [r8]
 800821e:	4626      	mov	r6, r4
 8008220:	2e00      	cmp	r6, #0
 8008222:	d145      	bne.n	80082b0 <_malloc_r+0xdc>
 8008224:	2c00      	cmp	r4, #0
 8008226:	d048      	beq.n	80082ba <_malloc_r+0xe6>
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	4631      	mov	r1, r6
 800822c:	4638      	mov	r0, r7
 800822e:	eb04 0903 	add.w	r9, r4, r3
 8008232:	f000 fe5f 	bl	8008ef4 <_sbrk_r>
 8008236:	4581      	cmp	r9, r0
 8008238:	d13f      	bne.n	80082ba <_malloc_r+0xe6>
 800823a:	6821      	ldr	r1, [r4, #0]
 800823c:	1a6d      	subs	r5, r5, r1
 800823e:	4629      	mov	r1, r5
 8008240:	4638      	mov	r0, r7
 8008242:	f7ff ffa7 	bl	8008194 <sbrk_aligned>
 8008246:	3001      	adds	r0, #1
 8008248:	d037      	beq.n	80082ba <_malloc_r+0xe6>
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	442b      	add	r3, r5
 800824e:	6023      	str	r3, [r4, #0]
 8008250:	f8d8 3000 	ldr.w	r3, [r8]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d038      	beq.n	80082ca <_malloc_r+0xf6>
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	42a2      	cmp	r2, r4
 800825c:	d12b      	bne.n	80082b6 <_malloc_r+0xe2>
 800825e:	2200      	movs	r2, #0
 8008260:	605a      	str	r2, [r3, #4]
 8008262:	e00f      	b.n	8008284 <_malloc_r+0xb0>
 8008264:	6822      	ldr	r2, [r4, #0]
 8008266:	1b52      	subs	r2, r2, r5
 8008268:	d41f      	bmi.n	80082aa <_malloc_r+0xd6>
 800826a:	2a0b      	cmp	r2, #11
 800826c:	d917      	bls.n	800829e <_malloc_r+0xca>
 800826e:	1961      	adds	r1, r4, r5
 8008270:	42a3      	cmp	r3, r4
 8008272:	6025      	str	r5, [r4, #0]
 8008274:	bf18      	it	ne
 8008276:	6059      	strne	r1, [r3, #4]
 8008278:	6863      	ldr	r3, [r4, #4]
 800827a:	bf08      	it	eq
 800827c:	f8c8 1000 	streq.w	r1, [r8]
 8008280:	5162      	str	r2, [r4, r5]
 8008282:	604b      	str	r3, [r1, #4]
 8008284:	4638      	mov	r0, r7
 8008286:	f104 060b 	add.w	r6, r4, #11
 800828a:	f000 f829 	bl	80082e0 <__malloc_unlock>
 800828e:	f026 0607 	bic.w	r6, r6, #7
 8008292:	1d23      	adds	r3, r4, #4
 8008294:	1af2      	subs	r2, r6, r3
 8008296:	d0ae      	beq.n	80081f6 <_malloc_r+0x22>
 8008298:	1b9b      	subs	r3, r3, r6
 800829a:	50a3      	str	r3, [r4, r2]
 800829c:	e7ab      	b.n	80081f6 <_malloc_r+0x22>
 800829e:	42a3      	cmp	r3, r4
 80082a0:	6862      	ldr	r2, [r4, #4]
 80082a2:	d1dd      	bne.n	8008260 <_malloc_r+0x8c>
 80082a4:	f8c8 2000 	str.w	r2, [r8]
 80082a8:	e7ec      	b.n	8008284 <_malloc_r+0xb0>
 80082aa:	4623      	mov	r3, r4
 80082ac:	6864      	ldr	r4, [r4, #4]
 80082ae:	e7ac      	b.n	800820a <_malloc_r+0x36>
 80082b0:	4634      	mov	r4, r6
 80082b2:	6876      	ldr	r6, [r6, #4]
 80082b4:	e7b4      	b.n	8008220 <_malloc_r+0x4c>
 80082b6:	4613      	mov	r3, r2
 80082b8:	e7cc      	b.n	8008254 <_malloc_r+0x80>
 80082ba:	230c      	movs	r3, #12
 80082bc:	603b      	str	r3, [r7, #0]
 80082be:	4638      	mov	r0, r7
 80082c0:	f000 f80e 	bl	80082e0 <__malloc_unlock>
 80082c4:	e797      	b.n	80081f6 <_malloc_r+0x22>
 80082c6:	6025      	str	r5, [r4, #0]
 80082c8:	e7dc      	b.n	8008284 <_malloc_r+0xb0>
 80082ca:	605b      	str	r3, [r3, #4]
 80082cc:	deff      	udf	#255	; 0xff
 80082ce:	bf00      	nop
 80082d0:	20000594 	.word	0x20000594

080082d4 <__malloc_lock>:
 80082d4:	4801      	ldr	r0, [pc, #4]	; (80082dc <__malloc_lock+0x8>)
 80082d6:	f7ff b88a 	b.w	80073ee <__retarget_lock_acquire_recursive>
 80082da:	bf00      	nop
 80082dc:	20000590 	.word	0x20000590

080082e0 <__malloc_unlock>:
 80082e0:	4801      	ldr	r0, [pc, #4]	; (80082e8 <__malloc_unlock+0x8>)
 80082e2:	f7ff b885 	b.w	80073f0 <__retarget_lock_release_recursive>
 80082e6:	bf00      	nop
 80082e8:	20000590 	.word	0x20000590

080082ec <_Balloc>:
 80082ec:	b570      	push	{r4, r5, r6, lr}
 80082ee:	69c6      	ldr	r6, [r0, #28]
 80082f0:	4604      	mov	r4, r0
 80082f2:	460d      	mov	r5, r1
 80082f4:	b976      	cbnz	r6, 8008314 <_Balloc+0x28>
 80082f6:	2010      	movs	r0, #16
 80082f8:	f7ff ff44 	bl	8008184 <malloc>
 80082fc:	4602      	mov	r2, r0
 80082fe:	61e0      	str	r0, [r4, #28]
 8008300:	b920      	cbnz	r0, 800830c <_Balloc+0x20>
 8008302:	4b18      	ldr	r3, [pc, #96]	; (8008364 <_Balloc+0x78>)
 8008304:	4818      	ldr	r0, [pc, #96]	; (8008368 <_Balloc+0x7c>)
 8008306:	216b      	movs	r1, #107	; 0x6b
 8008308:	f000 fe12 	bl	8008f30 <__assert_func>
 800830c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008310:	6006      	str	r6, [r0, #0]
 8008312:	60c6      	str	r6, [r0, #12]
 8008314:	69e6      	ldr	r6, [r4, #28]
 8008316:	68f3      	ldr	r3, [r6, #12]
 8008318:	b183      	cbz	r3, 800833c <_Balloc+0x50>
 800831a:	69e3      	ldr	r3, [r4, #28]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008322:	b9b8      	cbnz	r0, 8008354 <_Balloc+0x68>
 8008324:	2101      	movs	r1, #1
 8008326:	fa01 f605 	lsl.w	r6, r1, r5
 800832a:	1d72      	adds	r2, r6, #5
 800832c:	0092      	lsls	r2, r2, #2
 800832e:	4620      	mov	r0, r4
 8008330:	f000 fe1c 	bl	8008f6c <_calloc_r>
 8008334:	b160      	cbz	r0, 8008350 <_Balloc+0x64>
 8008336:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800833a:	e00e      	b.n	800835a <_Balloc+0x6e>
 800833c:	2221      	movs	r2, #33	; 0x21
 800833e:	2104      	movs	r1, #4
 8008340:	4620      	mov	r0, r4
 8008342:	f000 fe13 	bl	8008f6c <_calloc_r>
 8008346:	69e3      	ldr	r3, [r4, #28]
 8008348:	60f0      	str	r0, [r6, #12]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1e4      	bne.n	800831a <_Balloc+0x2e>
 8008350:	2000      	movs	r0, #0
 8008352:	bd70      	pop	{r4, r5, r6, pc}
 8008354:	6802      	ldr	r2, [r0, #0]
 8008356:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800835a:	2300      	movs	r3, #0
 800835c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008360:	e7f7      	b.n	8008352 <_Balloc+0x66>
 8008362:	bf00      	nop
 8008364:	08009279 	.word	0x08009279
 8008368:	080092f9 	.word	0x080092f9

0800836c <_Bfree>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	69c6      	ldr	r6, [r0, #28]
 8008370:	4605      	mov	r5, r0
 8008372:	460c      	mov	r4, r1
 8008374:	b976      	cbnz	r6, 8008394 <_Bfree+0x28>
 8008376:	2010      	movs	r0, #16
 8008378:	f7ff ff04 	bl	8008184 <malloc>
 800837c:	4602      	mov	r2, r0
 800837e:	61e8      	str	r0, [r5, #28]
 8008380:	b920      	cbnz	r0, 800838c <_Bfree+0x20>
 8008382:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <_Bfree+0x3c>)
 8008384:	4809      	ldr	r0, [pc, #36]	; (80083ac <_Bfree+0x40>)
 8008386:	218f      	movs	r1, #143	; 0x8f
 8008388:	f000 fdd2 	bl	8008f30 <__assert_func>
 800838c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008390:	6006      	str	r6, [r0, #0]
 8008392:	60c6      	str	r6, [r0, #12]
 8008394:	b13c      	cbz	r4, 80083a6 <_Bfree+0x3a>
 8008396:	69eb      	ldr	r3, [r5, #28]
 8008398:	6862      	ldr	r2, [r4, #4]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083a0:	6021      	str	r1, [r4, #0]
 80083a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
 80083a8:	08009279 	.word	0x08009279
 80083ac:	080092f9 	.word	0x080092f9

080083b0 <__multadd>:
 80083b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b4:	690d      	ldr	r5, [r1, #16]
 80083b6:	4607      	mov	r7, r0
 80083b8:	460c      	mov	r4, r1
 80083ba:	461e      	mov	r6, r3
 80083bc:	f101 0c14 	add.w	ip, r1, #20
 80083c0:	2000      	movs	r0, #0
 80083c2:	f8dc 3000 	ldr.w	r3, [ip]
 80083c6:	b299      	uxth	r1, r3
 80083c8:	fb02 6101 	mla	r1, r2, r1, r6
 80083cc:	0c1e      	lsrs	r6, r3, #16
 80083ce:	0c0b      	lsrs	r3, r1, #16
 80083d0:	fb02 3306 	mla	r3, r2, r6, r3
 80083d4:	b289      	uxth	r1, r1
 80083d6:	3001      	adds	r0, #1
 80083d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083dc:	4285      	cmp	r5, r0
 80083de:	f84c 1b04 	str.w	r1, [ip], #4
 80083e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083e6:	dcec      	bgt.n	80083c2 <__multadd+0x12>
 80083e8:	b30e      	cbz	r6, 800842e <__multadd+0x7e>
 80083ea:	68a3      	ldr	r3, [r4, #8]
 80083ec:	42ab      	cmp	r3, r5
 80083ee:	dc19      	bgt.n	8008424 <__multadd+0x74>
 80083f0:	6861      	ldr	r1, [r4, #4]
 80083f2:	4638      	mov	r0, r7
 80083f4:	3101      	adds	r1, #1
 80083f6:	f7ff ff79 	bl	80082ec <_Balloc>
 80083fa:	4680      	mov	r8, r0
 80083fc:	b928      	cbnz	r0, 800840a <__multadd+0x5a>
 80083fe:	4602      	mov	r2, r0
 8008400:	4b0c      	ldr	r3, [pc, #48]	; (8008434 <__multadd+0x84>)
 8008402:	480d      	ldr	r0, [pc, #52]	; (8008438 <__multadd+0x88>)
 8008404:	21ba      	movs	r1, #186	; 0xba
 8008406:	f000 fd93 	bl	8008f30 <__assert_func>
 800840a:	6922      	ldr	r2, [r4, #16]
 800840c:	3202      	adds	r2, #2
 800840e:	f104 010c 	add.w	r1, r4, #12
 8008412:	0092      	lsls	r2, r2, #2
 8008414:	300c      	adds	r0, #12
 8008416:	f000 fd7d 	bl	8008f14 <memcpy>
 800841a:	4621      	mov	r1, r4
 800841c:	4638      	mov	r0, r7
 800841e:	f7ff ffa5 	bl	800836c <_Bfree>
 8008422:	4644      	mov	r4, r8
 8008424:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008428:	3501      	adds	r5, #1
 800842a:	615e      	str	r6, [r3, #20]
 800842c:	6125      	str	r5, [r4, #16]
 800842e:	4620      	mov	r0, r4
 8008430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008434:	080092e8 	.word	0x080092e8
 8008438:	080092f9 	.word	0x080092f9

0800843c <__hi0bits>:
 800843c:	0c03      	lsrs	r3, r0, #16
 800843e:	041b      	lsls	r3, r3, #16
 8008440:	b9d3      	cbnz	r3, 8008478 <__hi0bits+0x3c>
 8008442:	0400      	lsls	r0, r0, #16
 8008444:	2310      	movs	r3, #16
 8008446:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800844a:	bf04      	itt	eq
 800844c:	0200      	lsleq	r0, r0, #8
 800844e:	3308      	addeq	r3, #8
 8008450:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008454:	bf04      	itt	eq
 8008456:	0100      	lsleq	r0, r0, #4
 8008458:	3304      	addeq	r3, #4
 800845a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800845e:	bf04      	itt	eq
 8008460:	0080      	lsleq	r0, r0, #2
 8008462:	3302      	addeq	r3, #2
 8008464:	2800      	cmp	r0, #0
 8008466:	db05      	blt.n	8008474 <__hi0bits+0x38>
 8008468:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800846c:	f103 0301 	add.w	r3, r3, #1
 8008470:	bf08      	it	eq
 8008472:	2320      	moveq	r3, #32
 8008474:	4618      	mov	r0, r3
 8008476:	4770      	bx	lr
 8008478:	2300      	movs	r3, #0
 800847a:	e7e4      	b.n	8008446 <__hi0bits+0xa>

0800847c <__lo0bits>:
 800847c:	6803      	ldr	r3, [r0, #0]
 800847e:	f013 0207 	ands.w	r2, r3, #7
 8008482:	d00c      	beq.n	800849e <__lo0bits+0x22>
 8008484:	07d9      	lsls	r1, r3, #31
 8008486:	d422      	bmi.n	80084ce <__lo0bits+0x52>
 8008488:	079a      	lsls	r2, r3, #30
 800848a:	bf49      	itett	mi
 800848c:	085b      	lsrmi	r3, r3, #1
 800848e:	089b      	lsrpl	r3, r3, #2
 8008490:	6003      	strmi	r3, [r0, #0]
 8008492:	2201      	movmi	r2, #1
 8008494:	bf5c      	itt	pl
 8008496:	6003      	strpl	r3, [r0, #0]
 8008498:	2202      	movpl	r2, #2
 800849a:	4610      	mov	r0, r2
 800849c:	4770      	bx	lr
 800849e:	b299      	uxth	r1, r3
 80084a0:	b909      	cbnz	r1, 80084a6 <__lo0bits+0x2a>
 80084a2:	0c1b      	lsrs	r3, r3, #16
 80084a4:	2210      	movs	r2, #16
 80084a6:	b2d9      	uxtb	r1, r3
 80084a8:	b909      	cbnz	r1, 80084ae <__lo0bits+0x32>
 80084aa:	3208      	adds	r2, #8
 80084ac:	0a1b      	lsrs	r3, r3, #8
 80084ae:	0719      	lsls	r1, r3, #28
 80084b0:	bf04      	itt	eq
 80084b2:	091b      	lsreq	r3, r3, #4
 80084b4:	3204      	addeq	r2, #4
 80084b6:	0799      	lsls	r1, r3, #30
 80084b8:	bf04      	itt	eq
 80084ba:	089b      	lsreq	r3, r3, #2
 80084bc:	3202      	addeq	r2, #2
 80084be:	07d9      	lsls	r1, r3, #31
 80084c0:	d403      	bmi.n	80084ca <__lo0bits+0x4e>
 80084c2:	085b      	lsrs	r3, r3, #1
 80084c4:	f102 0201 	add.w	r2, r2, #1
 80084c8:	d003      	beq.n	80084d2 <__lo0bits+0x56>
 80084ca:	6003      	str	r3, [r0, #0]
 80084cc:	e7e5      	b.n	800849a <__lo0bits+0x1e>
 80084ce:	2200      	movs	r2, #0
 80084d0:	e7e3      	b.n	800849a <__lo0bits+0x1e>
 80084d2:	2220      	movs	r2, #32
 80084d4:	e7e1      	b.n	800849a <__lo0bits+0x1e>
	...

080084d8 <__i2b>:
 80084d8:	b510      	push	{r4, lr}
 80084da:	460c      	mov	r4, r1
 80084dc:	2101      	movs	r1, #1
 80084de:	f7ff ff05 	bl	80082ec <_Balloc>
 80084e2:	4602      	mov	r2, r0
 80084e4:	b928      	cbnz	r0, 80084f2 <__i2b+0x1a>
 80084e6:	4b05      	ldr	r3, [pc, #20]	; (80084fc <__i2b+0x24>)
 80084e8:	4805      	ldr	r0, [pc, #20]	; (8008500 <__i2b+0x28>)
 80084ea:	f240 1145 	movw	r1, #325	; 0x145
 80084ee:	f000 fd1f 	bl	8008f30 <__assert_func>
 80084f2:	2301      	movs	r3, #1
 80084f4:	6144      	str	r4, [r0, #20]
 80084f6:	6103      	str	r3, [r0, #16]
 80084f8:	bd10      	pop	{r4, pc}
 80084fa:	bf00      	nop
 80084fc:	080092e8 	.word	0x080092e8
 8008500:	080092f9 	.word	0x080092f9

08008504 <__multiply>:
 8008504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008508:	4691      	mov	r9, r2
 800850a:	690a      	ldr	r2, [r1, #16]
 800850c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008510:	429a      	cmp	r2, r3
 8008512:	bfb8      	it	lt
 8008514:	460b      	movlt	r3, r1
 8008516:	460c      	mov	r4, r1
 8008518:	bfbc      	itt	lt
 800851a:	464c      	movlt	r4, r9
 800851c:	4699      	movlt	r9, r3
 800851e:	6927      	ldr	r7, [r4, #16]
 8008520:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008524:	68a3      	ldr	r3, [r4, #8]
 8008526:	6861      	ldr	r1, [r4, #4]
 8008528:	eb07 060a 	add.w	r6, r7, sl
 800852c:	42b3      	cmp	r3, r6
 800852e:	b085      	sub	sp, #20
 8008530:	bfb8      	it	lt
 8008532:	3101      	addlt	r1, #1
 8008534:	f7ff feda 	bl	80082ec <_Balloc>
 8008538:	b930      	cbnz	r0, 8008548 <__multiply+0x44>
 800853a:	4602      	mov	r2, r0
 800853c:	4b44      	ldr	r3, [pc, #272]	; (8008650 <__multiply+0x14c>)
 800853e:	4845      	ldr	r0, [pc, #276]	; (8008654 <__multiply+0x150>)
 8008540:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008544:	f000 fcf4 	bl	8008f30 <__assert_func>
 8008548:	f100 0514 	add.w	r5, r0, #20
 800854c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008550:	462b      	mov	r3, r5
 8008552:	2200      	movs	r2, #0
 8008554:	4543      	cmp	r3, r8
 8008556:	d321      	bcc.n	800859c <__multiply+0x98>
 8008558:	f104 0314 	add.w	r3, r4, #20
 800855c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008560:	f109 0314 	add.w	r3, r9, #20
 8008564:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008568:	9202      	str	r2, [sp, #8]
 800856a:	1b3a      	subs	r2, r7, r4
 800856c:	3a15      	subs	r2, #21
 800856e:	f022 0203 	bic.w	r2, r2, #3
 8008572:	3204      	adds	r2, #4
 8008574:	f104 0115 	add.w	r1, r4, #21
 8008578:	428f      	cmp	r7, r1
 800857a:	bf38      	it	cc
 800857c:	2204      	movcc	r2, #4
 800857e:	9201      	str	r2, [sp, #4]
 8008580:	9a02      	ldr	r2, [sp, #8]
 8008582:	9303      	str	r3, [sp, #12]
 8008584:	429a      	cmp	r2, r3
 8008586:	d80c      	bhi.n	80085a2 <__multiply+0x9e>
 8008588:	2e00      	cmp	r6, #0
 800858a:	dd03      	ble.n	8008594 <__multiply+0x90>
 800858c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008590:	2b00      	cmp	r3, #0
 8008592:	d05b      	beq.n	800864c <__multiply+0x148>
 8008594:	6106      	str	r6, [r0, #16]
 8008596:	b005      	add	sp, #20
 8008598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859c:	f843 2b04 	str.w	r2, [r3], #4
 80085a0:	e7d8      	b.n	8008554 <__multiply+0x50>
 80085a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80085a6:	f1ba 0f00 	cmp.w	sl, #0
 80085aa:	d024      	beq.n	80085f6 <__multiply+0xf2>
 80085ac:	f104 0e14 	add.w	lr, r4, #20
 80085b0:	46a9      	mov	r9, r5
 80085b2:	f04f 0c00 	mov.w	ip, #0
 80085b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80085ba:	f8d9 1000 	ldr.w	r1, [r9]
 80085be:	fa1f fb82 	uxth.w	fp, r2
 80085c2:	b289      	uxth	r1, r1
 80085c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80085c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80085cc:	f8d9 2000 	ldr.w	r2, [r9]
 80085d0:	4461      	add	r1, ip
 80085d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80085da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085de:	b289      	uxth	r1, r1
 80085e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085e4:	4577      	cmp	r7, lr
 80085e6:	f849 1b04 	str.w	r1, [r9], #4
 80085ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085ee:	d8e2      	bhi.n	80085b6 <__multiply+0xb2>
 80085f0:	9a01      	ldr	r2, [sp, #4]
 80085f2:	f845 c002 	str.w	ip, [r5, r2]
 80085f6:	9a03      	ldr	r2, [sp, #12]
 80085f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80085fc:	3304      	adds	r3, #4
 80085fe:	f1b9 0f00 	cmp.w	r9, #0
 8008602:	d021      	beq.n	8008648 <__multiply+0x144>
 8008604:	6829      	ldr	r1, [r5, #0]
 8008606:	f104 0c14 	add.w	ip, r4, #20
 800860a:	46ae      	mov	lr, r5
 800860c:	f04f 0a00 	mov.w	sl, #0
 8008610:	f8bc b000 	ldrh.w	fp, [ip]
 8008614:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008618:	fb09 220b 	mla	r2, r9, fp, r2
 800861c:	4452      	add	r2, sl
 800861e:	b289      	uxth	r1, r1
 8008620:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008624:	f84e 1b04 	str.w	r1, [lr], #4
 8008628:	f85c 1b04 	ldr.w	r1, [ip], #4
 800862c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008630:	f8be 1000 	ldrh.w	r1, [lr]
 8008634:	fb09 110a 	mla	r1, r9, sl, r1
 8008638:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800863c:	4567      	cmp	r7, ip
 800863e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008642:	d8e5      	bhi.n	8008610 <__multiply+0x10c>
 8008644:	9a01      	ldr	r2, [sp, #4]
 8008646:	50a9      	str	r1, [r5, r2]
 8008648:	3504      	adds	r5, #4
 800864a:	e799      	b.n	8008580 <__multiply+0x7c>
 800864c:	3e01      	subs	r6, #1
 800864e:	e79b      	b.n	8008588 <__multiply+0x84>
 8008650:	080092e8 	.word	0x080092e8
 8008654:	080092f9 	.word	0x080092f9

08008658 <__pow5mult>:
 8008658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800865c:	4615      	mov	r5, r2
 800865e:	f012 0203 	ands.w	r2, r2, #3
 8008662:	4606      	mov	r6, r0
 8008664:	460f      	mov	r7, r1
 8008666:	d007      	beq.n	8008678 <__pow5mult+0x20>
 8008668:	4c25      	ldr	r4, [pc, #148]	; (8008700 <__pow5mult+0xa8>)
 800866a:	3a01      	subs	r2, #1
 800866c:	2300      	movs	r3, #0
 800866e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008672:	f7ff fe9d 	bl	80083b0 <__multadd>
 8008676:	4607      	mov	r7, r0
 8008678:	10ad      	asrs	r5, r5, #2
 800867a:	d03d      	beq.n	80086f8 <__pow5mult+0xa0>
 800867c:	69f4      	ldr	r4, [r6, #28]
 800867e:	b97c      	cbnz	r4, 80086a0 <__pow5mult+0x48>
 8008680:	2010      	movs	r0, #16
 8008682:	f7ff fd7f 	bl	8008184 <malloc>
 8008686:	4602      	mov	r2, r0
 8008688:	61f0      	str	r0, [r6, #28]
 800868a:	b928      	cbnz	r0, 8008698 <__pow5mult+0x40>
 800868c:	4b1d      	ldr	r3, [pc, #116]	; (8008704 <__pow5mult+0xac>)
 800868e:	481e      	ldr	r0, [pc, #120]	; (8008708 <__pow5mult+0xb0>)
 8008690:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008694:	f000 fc4c 	bl	8008f30 <__assert_func>
 8008698:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800869c:	6004      	str	r4, [r0, #0]
 800869e:	60c4      	str	r4, [r0, #12]
 80086a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80086a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086a8:	b94c      	cbnz	r4, 80086be <__pow5mult+0x66>
 80086aa:	f240 2171 	movw	r1, #625	; 0x271
 80086ae:	4630      	mov	r0, r6
 80086b0:	f7ff ff12 	bl	80084d8 <__i2b>
 80086b4:	2300      	movs	r3, #0
 80086b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80086ba:	4604      	mov	r4, r0
 80086bc:	6003      	str	r3, [r0, #0]
 80086be:	f04f 0900 	mov.w	r9, #0
 80086c2:	07eb      	lsls	r3, r5, #31
 80086c4:	d50a      	bpl.n	80086dc <__pow5mult+0x84>
 80086c6:	4639      	mov	r1, r7
 80086c8:	4622      	mov	r2, r4
 80086ca:	4630      	mov	r0, r6
 80086cc:	f7ff ff1a 	bl	8008504 <__multiply>
 80086d0:	4639      	mov	r1, r7
 80086d2:	4680      	mov	r8, r0
 80086d4:	4630      	mov	r0, r6
 80086d6:	f7ff fe49 	bl	800836c <_Bfree>
 80086da:	4647      	mov	r7, r8
 80086dc:	106d      	asrs	r5, r5, #1
 80086de:	d00b      	beq.n	80086f8 <__pow5mult+0xa0>
 80086e0:	6820      	ldr	r0, [r4, #0]
 80086e2:	b938      	cbnz	r0, 80086f4 <__pow5mult+0x9c>
 80086e4:	4622      	mov	r2, r4
 80086e6:	4621      	mov	r1, r4
 80086e8:	4630      	mov	r0, r6
 80086ea:	f7ff ff0b 	bl	8008504 <__multiply>
 80086ee:	6020      	str	r0, [r4, #0]
 80086f0:	f8c0 9000 	str.w	r9, [r0]
 80086f4:	4604      	mov	r4, r0
 80086f6:	e7e4      	b.n	80086c2 <__pow5mult+0x6a>
 80086f8:	4638      	mov	r0, r7
 80086fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086fe:	bf00      	nop
 8008700:	08009448 	.word	0x08009448
 8008704:	08009279 	.word	0x08009279
 8008708:	080092f9 	.word	0x080092f9

0800870c <__lshift>:
 800870c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008710:	460c      	mov	r4, r1
 8008712:	6849      	ldr	r1, [r1, #4]
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800871a:	68a3      	ldr	r3, [r4, #8]
 800871c:	4607      	mov	r7, r0
 800871e:	4691      	mov	r9, r2
 8008720:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008724:	f108 0601 	add.w	r6, r8, #1
 8008728:	42b3      	cmp	r3, r6
 800872a:	db0b      	blt.n	8008744 <__lshift+0x38>
 800872c:	4638      	mov	r0, r7
 800872e:	f7ff fddd 	bl	80082ec <_Balloc>
 8008732:	4605      	mov	r5, r0
 8008734:	b948      	cbnz	r0, 800874a <__lshift+0x3e>
 8008736:	4602      	mov	r2, r0
 8008738:	4b28      	ldr	r3, [pc, #160]	; (80087dc <__lshift+0xd0>)
 800873a:	4829      	ldr	r0, [pc, #164]	; (80087e0 <__lshift+0xd4>)
 800873c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008740:	f000 fbf6 	bl	8008f30 <__assert_func>
 8008744:	3101      	adds	r1, #1
 8008746:	005b      	lsls	r3, r3, #1
 8008748:	e7ee      	b.n	8008728 <__lshift+0x1c>
 800874a:	2300      	movs	r3, #0
 800874c:	f100 0114 	add.w	r1, r0, #20
 8008750:	f100 0210 	add.w	r2, r0, #16
 8008754:	4618      	mov	r0, r3
 8008756:	4553      	cmp	r3, sl
 8008758:	db33      	blt.n	80087c2 <__lshift+0xb6>
 800875a:	6920      	ldr	r0, [r4, #16]
 800875c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008760:	f104 0314 	add.w	r3, r4, #20
 8008764:	f019 091f 	ands.w	r9, r9, #31
 8008768:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800876c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008770:	d02b      	beq.n	80087ca <__lshift+0xbe>
 8008772:	f1c9 0e20 	rsb	lr, r9, #32
 8008776:	468a      	mov	sl, r1
 8008778:	2200      	movs	r2, #0
 800877a:	6818      	ldr	r0, [r3, #0]
 800877c:	fa00 f009 	lsl.w	r0, r0, r9
 8008780:	4310      	orrs	r0, r2
 8008782:	f84a 0b04 	str.w	r0, [sl], #4
 8008786:	f853 2b04 	ldr.w	r2, [r3], #4
 800878a:	459c      	cmp	ip, r3
 800878c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008790:	d8f3      	bhi.n	800877a <__lshift+0x6e>
 8008792:	ebac 0304 	sub.w	r3, ip, r4
 8008796:	3b15      	subs	r3, #21
 8008798:	f023 0303 	bic.w	r3, r3, #3
 800879c:	3304      	adds	r3, #4
 800879e:	f104 0015 	add.w	r0, r4, #21
 80087a2:	4584      	cmp	ip, r0
 80087a4:	bf38      	it	cc
 80087a6:	2304      	movcc	r3, #4
 80087a8:	50ca      	str	r2, [r1, r3]
 80087aa:	b10a      	cbz	r2, 80087b0 <__lshift+0xa4>
 80087ac:	f108 0602 	add.w	r6, r8, #2
 80087b0:	3e01      	subs	r6, #1
 80087b2:	4638      	mov	r0, r7
 80087b4:	612e      	str	r6, [r5, #16]
 80087b6:	4621      	mov	r1, r4
 80087b8:	f7ff fdd8 	bl	800836c <_Bfree>
 80087bc:	4628      	mov	r0, r5
 80087be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80087c6:	3301      	adds	r3, #1
 80087c8:	e7c5      	b.n	8008756 <__lshift+0x4a>
 80087ca:	3904      	subs	r1, #4
 80087cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80087d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80087d4:	459c      	cmp	ip, r3
 80087d6:	d8f9      	bhi.n	80087cc <__lshift+0xc0>
 80087d8:	e7ea      	b.n	80087b0 <__lshift+0xa4>
 80087da:	bf00      	nop
 80087dc:	080092e8 	.word	0x080092e8
 80087e0:	080092f9 	.word	0x080092f9

080087e4 <__mcmp>:
 80087e4:	b530      	push	{r4, r5, lr}
 80087e6:	6902      	ldr	r2, [r0, #16]
 80087e8:	690c      	ldr	r4, [r1, #16]
 80087ea:	1b12      	subs	r2, r2, r4
 80087ec:	d10e      	bne.n	800880c <__mcmp+0x28>
 80087ee:	f100 0314 	add.w	r3, r0, #20
 80087f2:	3114      	adds	r1, #20
 80087f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80087f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80087fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008800:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008804:	42a5      	cmp	r5, r4
 8008806:	d003      	beq.n	8008810 <__mcmp+0x2c>
 8008808:	d305      	bcc.n	8008816 <__mcmp+0x32>
 800880a:	2201      	movs	r2, #1
 800880c:	4610      	mov	r0, r2
 800880e:	bd30      	pop	{r4, r5, pc}
 8008810:	4283      	cmp	r3, r0
 8008812:	d3f3      	bcc.n	80087fc <__mcmp+0x18>
 8008814:	e7fa      	b.n	800880c <__mcmp+0x28>
 8008816:	f04f 32ff 	mov.w	r2, #4294967295
 800881a:	e7f7      	b.n	800880c <__mcmp+0x28>

0800881c <__mdiff>:
 800881c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008820:	460c      	mov	r4, r1
 8008822:	4606      	mov	r6, r0
 8008824:	4611      	mov	r1, r2
 8008826:	4620      	mov	r0, r4
 8008828:	4690      	mov	r8, r2
 800882a:	f7ff ffdb 	bl	80087e4 <__mcmp>
 800882e:	1e05      	subs	r5, r0, #0
 8008830:	d110      	bne.n	8008854 <__mdiff+0x38>
 8008832:	4629      	mov	r1, r5
 8008834:	4630      	mov	r0, r6
 8008836:	f7ff fd59 	bl	80082ec <_Balloc>
 800883a:	b930      	cbnz	r0, 800884a <__mdiff+0x2e>
 800883c:	4b3a      	ldr	r3, [pc, #232]	; (8008928 <__mdiff+0x10c>)
 800883e:	4602      	mov	r2, r0
 8008840:	f240 2137 	movw	r1, #567	; 0x237
 8008844:	4839      	ldr	r0, [pc, #228]	; (800892c <__mdiff+0x110>)
 8008846:	f000 fb73 	bl	8008f30 <__assert_func>
 800884a:	2301      	movs	r3, #1
 800884c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008854:	bfa4      	itt	ge
 8008856:	4643      	movge	r3, r8
 8008858:	46a0      	movge	r8, r4
 800885a:	4630      	mov	r0, r6
 800885c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008860:	bfa6      	itte	ge
 8008862:	461c      	movge	r4, r3
 8008864:	2500      	movge	r5, #0
 8008866:	2501      	movlt	r5, #1
 8008868:	f7ff fd40 	bl	80082ec <_Balloc>
 800886c:	b920      	cbnz	r0, 8008878 <__mdiff+0x5c>
 800886e:	4b2e      	ldr	r3, [pc, #184]	; (8008928 <__mdiff+0x10c>)
 8008870:	4602      	mov	r2, r0
 8008872:	f240 2145 	movw	r1, #581	; 0x245
 8008876:	e7e5      	b.n	8008844 <__mdiff+0x28>
 8008878:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800887c:	6926      	ldr	r6, [r4, #16]
 800887e:	60c5      	str	r5, [r0, #12]
 8008880:	f104 0914 	add.w	r9, r4, #20
 8008884:	f108 0514 	add.w	r5, r8, #20
 8008888:	f100 0e14 	add.w	lr, r0, #20
 800888c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008890:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008894:	f108 0210 	add.w	r2, r8, #16
 8008898:	46f2      	mov	sl, lr
 800889a:	2100      	movs	r1, #0
 800889c:	f859 3b04 	ldr.w	r3, [r9], #4
 80088a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80088a4:	fa11 f88b 	uxtah	r8, r1, fp
 80088a8:	b299      	uxth	r1, r3
 80088aa:	0c1b      	lsrs	r3, r3, #16
 80088ac:	eba8 0801 	sub.w	r8, r8, r1
 80088b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80088b8:	fa1f f888 	uxth.w	r8, r8
 80088bc:	1419      	asrs	r1, r3, #16
 80088be:	454e      	cmp	r6, r9
 80088c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80088c4:	f84a 3b04 	str.w	r3, [sl], #4
 80088c8:	d8e8      	bhi.n	800889c <__mdiff+0x80>
 80088ca:	1b33      	subs	r3, r6, r4
 80088cc:	3b15      	subs	r3, #21
 80088ce:	f023 0303 	bic.w	r3, r3, #3
 80088d2:	3304      	adds	r3, #4
 80088d4:	3415      	adds	r4, #21
 80088d6:	42a6      	cmp	r6, r4
 80088d8:	bf38      	it	cc
 80088da:	2304      	movcc	r3, #4
 80088dc:	441d      	add	r5, r3
 80088de:	4473      	add	r3, lr
 80088e0:	469e      	mov	lr, r3
 80088e2:	462e      	mov	r6, r5
 80088e4:	4566      	cmp	r6, ip
 80088e6:	d30e      	bcc.n	8008906 <__mdiff+0xea>
 80088e8:	f10c 0203 	add.w	r2, ip, #3
 80088ec:	1b52      	subs	r2, r2, r5
 80088ee:	f022 0203 	bic.w	r2, r2, #3
 80088f2:	3d03      	subs	r5, #3
 80088f4:	45ac      	cmp	ip, r5
 80088f6:	bf38      	it	cc
 80088f8:	2200      	movcc	r2, #0
 80088fa:	4413      	add	r3, r2
 80088fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008900:	b17a      	cbz	r2, 8008922 <__mdiff+0x106>
 8008902:	6107      	str	r7, [r0, #16]
 8008904:	e7a4      	b.n	8008850 <__mdiff+0x34>
 8008906:	f856 8b04 	ldr.w	r8, [r6], #4
 800890a:	fa11 f288 	uxtah	r2, r1, r8
 800890e:	1414      	asrs	r4, r2, #16
 8008910:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008914:	b292      	uxth	r2, r2
 8008916:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800891a:	f84e 2b04 	str.w	r2, [lr], #4
 800891e:	1421      	asrs	r1, r4, #16
 8008920:	e7e0      	b.n	80088e4 <__mdiff+0xc8>
 8008922:	3f01      	subs	r7, #1
 8008924:	e7ea      	b.n	80088fc <__mdiff+0xe0>
 8008926:	bf00      	nop
 8008928:	080092e8 	.word	0x080092e8
 800892c:	080092f9 	.word	0x080092f9

08008930 <__d2b>:
 8008930:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008934:	460f      	mov	r7, r1
 8008936:	2101      	movs	r1, #1
 8008938:	ec59 8b10 	vmov	r8, r9, d0
 800893c:	4616      	mov	r6, r2
 800893e:	f7ff fcd5 	bl	80082ec <_Balloc>
 8008942:	4604      	mov	r4, r0
 8008944:	b930      	cbnz	r0, 8008954 <__d2b+0x24>
 8008946:	4602      	mov	r2, r0
 8008948:	4b24      	ldr	r3, [pc, #144]	; (80089dc <__d2b+0xac>)
 800894a:	4825      	ldr	r0, [pc, #148]	; (80089e0 <__d2b+0xb0>)
 800894c:	f240 310f 	movw	r1, #783	; 0x30f
 8008950:	f000 faee 	bl	8008f30 <__assert_func>
 8008954:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008958:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800895c:	bb2d      	cbnz	r5, 80089aa <__d2b+0x7a>
 800895e:	9301      	str	r3, [sp, #4]
 8008960:	f1b8 0300 	subs.w	r3, r8, #0
 8008964:	d026      	beq.n	80089b4 <__d2b+0x84>
 8008966:	4668      	mov	r0, sp
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	f7ff fd87 	bl	800847c <__lo0bits>
 800896e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008972:	b1e8      	cbz	r0, 80089b0 <__d2b+0x80>
 8008974:	f1c0 0320 	rsb	r3, r0, #32
 8008978:	fa02 f303 	lsl.w	r3, r2, r3
 800897c:	430b      	orrs	r3, r1
 800897e:	40c2      	lsrs	r2, r0
 8008980:	6163      	str	r3, [r4, #20]
 8008982:	9201      	str	r2, [sp, #4]
 8008984:	9b01      	ldr	r3, [sp, #4]
 8008986:	61a3      	str	r3, [r4, #24]
 8008988:	2b00      	cmp	r3, #0
 800898a:	bf14      	ite	ne
 800898c:	2202      	movne	r2, #2
 800898e:	2201      	moveq	r2, #1
 8008990:	6122      	str	r2, [r4, #16]
 8008992:	b1bd      	cbz	r5, 80089c4 <__d2b+0x94>
 8008994:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008998:	4405      	add	r5, r0
 800899a:	603d      	str	r5, [r7, #0]
 800899c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80089a0:	6030      	str	r0, [r6, #0]
 80089a2:	4620      	mov	r0, r4
 80089a4:	b003      	add	sp, #12
 80089a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089ae:	e7d6      	b.n	800895e <__d2b+0x2e>
 80089b0:	6161      	str	r1, [r4, #20]
 80089b2:	e7e7      	b.n	8008984 <__d2b+0x54>
 80089b4:	a801      	add	r0, sp, #4
 80089b6:	f7ff fd61 	bl	800847c <__lo0bits>
 80089ba:	9b01      	ldr	r3, [sp, #4]
 80089bc:	6163      	str	r3, [r4, #20]
 80089be:	3020      	adds	r0, #32
 80089c0:	2201      	movs	r2, #1
 80089c2:	e7e5      	b.n	8008990 <__d2b+0x60>
 80089c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80089cc:	6038      	str	r0, [r7, #0]
 80089ce:	6918      	ldr	r0, [r3, #16]
 80089d0:	f7ff fd34 	bl	800843c <__hi0bits>
 80089d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089d8:	e7e2      	b.n	80089a0 <__d2b+0x70>
 80089da:	bf00      	nop
 80089dc:	080092e8 	.word	0x080092e8
 80089e0:	080092f9 	.word	0x080092f9

080089e4 <__sfputc_r>:
 80089e4:	6893      	ldr	r3, [r2, #8]
 80089e6:	3b01      	subs	r3, #1
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	b410      	push	{r4}
 80089ec:	6093      	str	r3, [r2, #8]
 80089ee:	da08      	bge.n	8008a02 <__sfputc_r+0x1e>
 80089f0:	6994      	ldr	r4, [r2, #24]
 80089f2:	42a3      	cmp	r3, r4
 80089f4:	db01      	blt.n	80089fa <__sfputc_r+0x16>
 80089f6:	290a      	cmp	r1, #10
 80089f8:	d103      	bne.n	8008a02 <__sfputc_r+0x1e>
 80089fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089fe:	f000 b9e3 	b.w	8008dc8 <__swbuf_r>
 8008a02:	6813      	ldr	r3, [r2, #0]
 8008a04:	1c58      	adds	r0, r3, #1
 8008a06:	6010      	str	r0, [r2, #0]
 8008a08:	7019      	strb	r1, [r3, #0]
 8008a0a:	4608      	mov	r0, r1
 8008a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <__sfputs_r>:
 8008a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a14:	4606      	mov	r6, r0
 8008a16:	460f      	mov	r7, r1
 8008a18:	4614      	mov	r4, r2
 8008a1a:	18d5      	adds	r5, r2, r3
 8008a1c:	42ac      	cmp	r4, r5
 8008a1e:	d101      	bne.n	8008a24 <__sfputs_r+0x12>
 8008a20:	2000      	movs	r0, #0
 8008a22:	e007      	b.n	8008a34 <__sfputs_r+0x22>
 8008a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a28:	463a      	mov	r2, r7
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f7ff ffda 	bl	80089e4 <__sfputc_r>
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	d1f3      	bne.n	8008a1c <__sfputs_r+0xa>
 8008a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a38 <_vfiprintf_r>:
 8008a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3c:	460d      	mov	r5, r1
 8008a3e:	b09d      	sub	sp, #116	; 0x74
 8008a40:	4614      	mov	r4, r2
 8008a42:	4698      	mov	r8, r3
 8008a44:	4606      	mov	r6, r0
 8008a46:	b118      	cbz	r0, 8008a50 <_vfiprintf_r+0x18>
 8008a48:	6a03      	ldr	r3, [r0, #32]
 8008a4a:	b90b      	cbnz	r3, 8008a50 <_vfiprintf_r+0x18>
 8008a4c:	f7fe fbc6 	bl	80071dc <__sinit>
 8008a50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a52:	07d9      	lsls	r1, r3, #31
 8008a54:	d405      	bmi.n	8008a62 <_vfiprintf_r+0x2a>
 8008a56:	89ab      	ldrh	r3, [r5, #12]
 8008a58:	059a      	lsls	r2, r3, #22
 8008a5a:	d402      	bmi.n	8008a62 <_vfiprintf_r+0x2a>
 8008a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a5e:	f7fe fcc6 	bl	80073ee <__retarget_lock_acquire_recursive>
 8008a62:	89ab      	ldrh	r3, [r5, #12]
 8008a64:	071b      	lsls	r3, r3, #28
 8008a66:	d501      	bpl.n	8008a6c <_vfiprintf_r+0x34>
 8008a68:	692b      	ldr	r3, [r5, #16]
 8008a6a:	b99b      	cbnz	r3, 8008a94 <_vfiprintf_r+0x5c>
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f000 f9e8 	bl	8008e44 <__swsetup_r>
 8008a74:	b170      	cbz	r0, 8008a94 <_vfiprintf_r+0x5c>
 8008a76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a78:	07dc      	lsls	r4, r3, #31
 8008a7a:	d504      	bpl.n	8008a86 <_vfiprintf_r+0x4e>
 8008a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a80:	b01d      	add	sp, #116	; 0x74
 8008a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a86:	89ab      	ldrh	r3, [r5, #12]
 8008a88:	0598      	lsls	r0, r3, #22
 8008a8a:	d4f7      	bmi.n	8008a7c <_vfiprintf_r+0x44>
 8008a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a8e:	f7fe fcaf 	bl	80073f0 <__retarget_lock_release_recursive>
 8008a92:	e7f3      	b.n	8008a7c <_vfiprintf_r+0x44>
 8008a94:	2300      	movs	r3, #0
 8008a96:	9309      	str	r3, [sp, #36]	; 0x24
 8008a98:	2320      	movs	r3, #32
 8008a9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aa2:	2330      	movs	r3, #48	; 0x30
 8008aa4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008c58 <_vfiprintf_r+0x220>
 8008aa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008aac:	f04f 0901 	mov.w	r9, #1
 8008ab0:	4623      	mov	r3, r4
 8008ab2:	469a      	mov	sl, r3
 8008ab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ab8:	b10a      	cbz	r2, 8008abe <_vfiprintf_r+0x86>
 8008aba:	2a25      	cmp	r2, #37	; 0x25
 8008abc:	d1f9      	bne.n	8008ab2 <_vfiprintf_r+0x7a>
 8008abe:	ebba 0b04 	subs.w	fp, sl, r4
 8008ac2:	d00b      	beq.n	8008adc <_vfiprintf_r+0xa4>
 8008ac4:	465b      	mov	r3, fp
 8008ac6:	4622      	mov	r2, r4
 8008ac8:	4629      	mov	r1, r5
 8008aca:	4630      	mov	r0, r6
 8008acc:	f7ff ffa1 	bl	8008a12 <__sfputs_r>
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	f000 80a9 	beq.w	8008c28 <_vfiprintf_r+0x1f0>
 8008ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ad8:	445a      	add	r2, fp
 8008ada:	9209      	str	r2, [sp, #36]	; 0x24
 8008adc:	f89a 3000 	ldrb.w	r3, [sl]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 80a1 	beq.w	8008c28 <_vfiprintf_r+0x1f0>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8008aec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008af0:	f10a 0a01 	add.w	sl, sl, #1
 8008af4:	9304      	str	r3, [sp, #16]
 8008af6:	9307      	str	r3, [sp, #28]
 8008af8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008afc:	931a      	str	r3, [sp, #104]	; 0x68
 8008afe:	4654      	mov	r4, sl
 8008b00:	2205      	movs	r2, #5
 8008b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b06:	4854      	ldr	r0, [pc, #336]	; (8008c58 <_vfiprintf_r+0x220>)
 8008b08:	f7f7 fb8a 	bl	8000220 <memchr>
 8008b0c:	9a04      	ldr	r2, [sp, #16]
 8008b0e:	b9d8      	cbnz	r0, 8008b48 <_vfiprintf_r+0x110>
 8008b10:	06d1      	lsls	r1, r2, #27
 8008b12:	bf44      	itt	mi
 8008b14:	2320      	movmi	r3, #32
 8008b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b1a:	0713      	lsls	r3, r2, #28
 8008b1c:	bf44      	itt	mi
 8008b1e:	232b      	movmi	r3, #43	; 0x2b
 8008b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b24:	f89a 3000 	ldrb.w	r3, [sl]
 8008b28:	2b2a      	cmp	r3, #42	; 0x2a
 8008b2a:	d015      	beq.n	8008b58 <_vfiprintf_r+0x120>
 8008b2c:	9a07      	ldr	r2, [sp, #28]
 8008b2e:	4654      	mov	r4, sl
 8008b30:	2000      	movs	r0, #0
 8008b32:	f04f 0c0a 	mov.w	ip, #10
 8008b36:	4621      	mov	r1, r4
 8008b38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b3c:	3b30      	subs	r3, #48	; 0x30
 8008b3e:	2b09      	cmp	r3, #9
 8008b40:	d94d      	bls.n	8008bde <_vfiprintf_r+0x1a6>
 8008b42:	b1b0      	cbz	r0, 8008b72 <_vfiprintf_r+0x13a>
 8008b44:	9207      	str	r2, [sp, #28]
 8008b46:	e014      	b.n	8008b72 <_vfiprintf_r+0x13a>
 8008b48:	eba0 0308 	sub.w	r3, r0, r8
 8008b4c:	fa09 f303 	lsl.w	r3, r9, r3
 8008b50:	4313      	orrs	r3, r2
 8008b52:	9304      	str	r3, [sp, #16]
 8008b54:	46a2      	mov	sl, r4
 8008b56:	e7d2      	b.n	8008afe <_vfiprintf_r+0xc6>
 8008b58:	9b03      	ldr	r3, [sp, #12]
 8008b5a:	1d19      	adds	r1, r3, #4
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	9103      	str	r1, [sp, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	bfbb      	ittet	lt
 8008b64:	425b      	neglt	r3, r3
 8008b66:	f042 0202 	orrlt.w	r2, r2, #2
 8008b6a:	9307      	strge	r3, [sp, #28]
 8008b6c:	9307      	strlt	r3, [sp, #28]
 8008b6e:	bfb8      	it	lt
 8008b70:	9204      	strlt	r2, [sp, #16]
 8008b72:	7823      	ldrb	r3, [r4, #0]
 8008b74:	2b2e      	cmp	r3, #46	; 0x2e
 8008b76:	d10c      	bne.n	8008b92 <_vfiprintf_r+0x15a>
 8008b78:	7863      	ldrb	r3, [r4, #1]
 8008b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b7c:	d134      	bne.n	8008be8 <_vfiprintf_r+0x1b0>
 8008b7e:	9b03      	ldr	r3, [sp, #12]
 8008b80:	1d1a      	adds	r2, r3, #4
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	9203      	str	r2, [sp, #12]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	bfb8      	it	lt
 8008b8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b8e:	3402      	adds	r4, #2
 8008b90:	9305      	str	r3, [sp, #20]
 8008b92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008c68 <_vfiprintf_r+0x230>
 8008b96:	7821      	ldrb	r1, [r4, #0]
 8008b98:	2203      	movs	r2, #3
 8008b9a:	4650      	mov	r0, sl
 8008b9c:	f7f7 fb40 	bl	8000220 <memchr>
 8008ba0:	b138      	cbz	r0, 8008bb2 <_vfiprintf_r+0x17a>
 8008ba2:	9b04      	ldr	r3, [sp, #16]
 8008ba4:	eba0 000a 	sub.w	r0, r0, sl
 8008ba8:	2240      	movs	r2, #64	; 0x40
 8008baa:	4082      	lsls	r2, r0
 8008bac:	4313      	orrs	r3, r2
 8008bae:	3401      	adds	r4, #1
 8008bb0:	9304      	str	r3, [sp, #16]
 8008bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bb6:	4829      	ldr	r0, [pc, #164]	; (8008c5c <_vfiprintf_r+0x224>)
 8008bb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bbc:	2206      	movs	r2, #6
 8008bbe:	f7f7 fb2f 	bl	8000220 <memchr>
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	d03f      	beq.n	8008c46 <_vfiprintf_r+0x20e>
 8008bc6:	4b26      	ldr	r3, [pc, #152]	; (8008c60 <_vfiprintf_r+0x228>)
 8008bc8:	bb1b      	cbnz	r3, 8008c12 <_vfiprintf_r+0x1da>
 8008bca:	9b03      	ldr	r3, [sp, #12]
 8008bcc:	3307      	adds	r3, #7
 8008bce:	f023 0307 	bic.w	r3, r3, #7
 8008bd2:	3308      	adds	r3, #8
 8008bd4:	9303      	str	r3, [sp, #12]
 8008bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd8:	443b      	add	r3, r7
 8008bda:	9309      	str	r3, [sp, #36]	; 0x24
 8008bdc:	e768      	b.n	8008ab0 <_vfiprintf_r+0x78>
 8008bde:	fb0c 3202 	mla	r2, ip, r2, r3
 8008be2:	460c      	mov	r4, r1
 8008be4:	2001      	movs	r0, #1
 8008be6:	e7a6      	b.n	8008b36 <_vfiprintf_r+0xfe>
 8008be8:	2300      	movs	r3, #0
 8008bea:	3401      	adds	r4, #1
 8008bec:	9305      	str	r3, [sp, #20]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	f04f 0c0a 	mov.w	ip, #10
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bfa:	3a30      	subs	r2, #48	; 0x30
 8008bfc:	2a09      	cmp	r2, #9
 8008bfe:	d903      	bls.n	8008c08 <_vfiprintf_r+0x1d0>
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d0c6      	beq.n	8008b92 <_vfiprintf_r+0x15a>
 8008c04:	9105      	str	r1, [sp, #20]
 8008c06:	e7c4      	b.n	8008b92 <_vfiprintf_r+0x15a>
 8008c08:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e7f0      	b.n	8008bf4 <_vfiprintf_r+0x1bc>
 8008c12:	ab03      	add	r3, sp, #12
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	462a      	mov	r2, r5
 8008c18:	4b12      	ldr	r3, [pc, #72]	; (8008c64 <_vfiprintf_r+0x22c>)
 8008c1a:	a904      	add	r1, sp, #16
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	f7fd fe8b 	bl	8006938 <_printf_float>
 8008c22:	4607      	mov	r7, r0
 8008c24:	1c78      	adds	r0, r7, #1
 8008c26:	d1d6      	bne.n	8008bd6 <_vfiprintf_r+0x19e>
 8008c28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c2a:	07d9      	lsls	r1, r3, #31
 8008c2c:	d405      	bmi.n	8008c3a <_vfiprintf_r+0x202>
 8008c2e:	89ab      	ldrh	r3, [r5, #12]
 8008c30:	059a      	lsls	r2, r3, #22
 8008c32:	d402      	bmi.n	8008c3a <_vfiprintf_r+0x202>
 8008c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c36:	f7fe fbdb 	bl	80073f0 <__retarget_lock_release_recursive>
 8008c3a:	89ab      	ldrh	r3, [r5, #12]
 8008c3c:	065b      	lsls	r3, r3, #25
 8008c3e:	f53f af1d 	bmi.w	8008a7c <_vfiprintf_r+0x44>
 8008c42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c44:	e71c      	b.n	8008a80 <_vfiprintf_r+0x48>
 8008c46:	ab03      	add	r3, sp, #12
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	462a      	mov	r2, r5
 8008c4c:	4b05      	ldr	r3, [pc, #20]	; (8008c64 <_vfiprintf_r+0x22c>)
 8008c4e:	a904      	add	r1, sp, #16
 8008c50:	4630      	mov	r0, r6
 8008c52:	f7fe f915 	bl	8006e80 <_printf_i>
 8008c56:	e7e4      	b.n	8008c22 <_vfiprintf_r+0x1ea>
 8008c58:	08009454 	.word	0x08009454
 8008c5c:	0800945e 	.word	0x0800945e
 8008c60:	08006939 	.word	0x08006939
 8008c64:	08008a13 	.word	0x08008a13
 8008c68:	0800945a 	.word	0x0800945a

08008c6c <__sflush_r>:
 8008c6c:	898a      	ldrh	r2, [r1, #12]
 8008c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c72:	4605      	mov	r5, r0
 8008c74:	0710      	lsls	r0, r2, #28
 8008c76:	460c      	mov	r4, r1
 8008c78:	d458      	bmi.n	8008d2c <__sflush_r+0xc0>
 8008c7a:	684b      	ldr	r3, [r1, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	dc05      	bgt.n	8008c8c <__sflush_r+0x20>
 8008c80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	dc02      	bgt.n	8008c8c <__sflush_r+0x20>
 8008c86:	2000      	movs	r0, #0
 8008c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c8e:	2e00      	cmp	r6, #0
 8008c90:	d0f9      	beq.n	8008c86 <__sflush_r+0x1a>
 8008c92:	2300      	movs	r3, #0
 8008c94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c98:	682f      	ldr	r7, [r5, #0]
 8008c9a:	6a21      	ldr	r1, [r4, #32]
 8008c9c:	602b      	str	r3, [r5, #0]
 8008c9e:	d032      	beq.n	8008d06 <__sflush_r+0x9a>
 8008ca0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	075a      	lsls	r2, r3, #29
 8008ca6:	d505      	bpl.n	8008cb4 <__sflush_r+0x48>
 8008ca8:	6863      	ldr	r3, [r4, #4]
 8008caa:	1ac0      	subs	r0, r0, r3
 8008cac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cae:	b10b      	cbz	r3, 8008cb4 <__sflush_r+0x48>
 8008cb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cb2:	1ac0      	subs	r0, r0, r3
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cba:	6a21      	ldr	r1, [r4, #32]
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	47b0      	blx	r6
 8008cc0:	1c43      	adds	r3, r0, #1
 8008cc2:	89a3      	ldrh	r3, [r4, #12]
 8008cc4:	d106      	bne.n	8008cd4 <__sflush_r+0x68>
 8008cc6:	6829      	ldr	r1, [r5, #0]
 8008cc8:	291d      	cmp	r1, #29
 8008cca:	d82b      	bhi.n	8008d24 <__sflush_r+0xb8>
 8008ccc:	4a29      	ldr	r2, [pc, #164]	; (8008d74 <__sflush_r+0x108>)
 8008cce:	410a      	asrs	r2, r1
 8008cd0:	07d6      	lsls	r6, r2, #31
 8008cd2:	d427      	bmi.n	8008d24 <__sflush_r+0xb8>
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	6062      	str	r2, [r4, #4]
 8008cd8:	04d9      	lsls	r1, r3, #19
 8008cda:	6922      	ldr	r2, [r4, #16]
 8008cdc:	6022      	str	r2, [r4, #0]
 8008cde:	d504      	bpl.n	8008cea <__sflush_r+0x7e>
 8008ce0:	1c42      	adds	r2, r0, #1
 8008ce2:	d101      	bne.n	8008ce8 <__sflush_r+0x7c>
 8008ce4:	682b      	ldr	r3, [r5, #0]
 8008ce6:	b903      	cbnz	r3, 8008cea <__sflush_r+0x7e>
 8008ce8:	6560      	str	r0, [r4, #84]	; 0x54
 8008cea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cec:	602f      	str	r7, [r5, #0]
 8008cee:	2900      	cmp	r1, #0
 8008cf0:	d0c9      	beq.n	8008c86 <__sflush_r+0x1a>
 8008cf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cf6:	4299      	cmp	r1, r3
 8008cf8:	d002      	beq.n	8008d00 <__sflush_r+0x94>
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	f7ff f9f6 	bl	80080ec <_free_r>
 8008d00:	2000      	movs	r0, #0
 8008d02:	6360      	str	r0, [r4, #52]	; 0x34
 8008d04:	e7c0      	b.n	8008c88 <__sflush_r+0x1c>
 8008d06:	2301      	movs	r3, #1
 8008d08:	4628      	mov	r0, r5
 8008d0a:	47b0      	blx	r6
 8008d0c:	1c41      	adds	r1, r0, #1
 8008d0e:	d1c8      	bne.n	8008ca2 <__sflush_r+0x36>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d0c5      	beq.n	8008ca2 <__sflush_r+0x36>
 8008d16:	2b1d      	cmp	r3, #29
 8008d18:	d001      	beq.n	8008d1e <__sflush_r+0xb2>
 8008d1a:	2b16      	cmp	r3, #22
 8008d1c:	d101      	bne.n	8008d22 <__sflush_r+0xb6>
 8008d1e:	602f      	str	r7, [r5, #0]
 8008d20:	e7b1      	b.n	8008c86 <__sflush_r+0x1a>
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d28:	81a3      	strh	r3, [r4, #12]
 8008d2a:	e7ad      	b.n	8008c88 <__sflush_r+0x1c>
 8008d2c:	690f      	ldr	r7, [r1, #16]
 8008d2e:	2f00      	cmp	r7, #0
 8008d30:	d0a9      	beq.n	8008c86 <__sflush_r+0x1a>
 8008d32:	0793      	lsls	r3, r2, #30
 8008d34:	680e      	ldr	r6, [r1, #0]
 8008d36:	bf08      	it	eq
 8008d38:	694b      	ldreq	r3, [r1, #20]
 8008d3a:	600f      	str	r7, [r1, #0]
 8008d3c:	bf18      	it	ne
 8008d3e:	2300      	movne	r3, #0
 8008d40:	eba6 0807 	sub.w	r8, r6, r7
 8008d44:	608b      	str	r3, [r1, #8]
 8008d46:	f1b8 0f00 	cmp.w	r8, #0
 8008d4a:	dd9c      	ble.n	8008c86 <__sflush_r+0x1a>
 8008d4c:	6a21      	ldr	r1, [r4, #32]
 8008d4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d50:	4643      	mov	r3, r8
 8008d52:	463a      	mov	r2, r7
 8008d54:	4628      	mov	r0, r5
 8008d56:	47b0      	blx	r6
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	dc06      	bgt.n	8008d6a <__sflush_r+0xfe>
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	f04f 30ff 	mov.w	r0, #4294967295
 8008d68:	e78e      	b.n	8008c88 <__sflush_r+0x1c>
 8008d6a:	4407      	add	r7, r0
 8008d6c:	eba8 0800 	sub.w	r8, r8, r0
 8008d70:	e7e9      	b.n	8008d46 <__sflush_r+0xda>
 8008d72:	bf00      	nop
 8008d74:	dfbffffe 	.word	0xdfbffffe

08008d78 <_fflush_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	690b      	ldr	r3, [r1, #16]
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	460c      	mov	r4, r1
 8008d80:	b913      	cbnz	r3, 8008d88 <_fflush_r+0x10>
 8008d82:	2500      	movs	r5, #0
 8008d84:	4628      	mov	r0, r5
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	b118      	cbz	r0, 8008d92 <_fflush_r+0x1a>
 8008d8a:	6a03      	ldr	r3, [r0, #32]
 8008d8c:	b90b      	cbnz	r3, 8008d92 <_fflush_r+0x1a>
 8008d8e:	f7fe fa25 	bl	80071dc <__sinit>
 8008d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d0f3      	beq.n	8008d82 <_fflush_r+0xa>
 8008d9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d9c:	07d0      	lsls	r0, r2, #31
 8008d9e:	d404      	bmi.n	8008daa <_fflush_r+0x32>
 8008da0:	0599      	lsls	r1, r3, #22
 8008da2:	d402      	bmi.n	8008daa <_fflush_r+0x32>
 8008da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008da6:	f7fe fb22 	bl	80073ee <__retarget_lock_acquire_recursive>
 8008daa:	4628      	mov	r0, r5
 8008dac:	4621      	mov	r1, r4
 8008dae:	f7ff ff5d 	bl	8008c6c <__sflush_r>
 8008db2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008db4:	07da      	lsls	r2, r3, #31
 8008db6:	4605      	mov	r5, r0
 8008db8:	d4e4      	bmi.n	8008d84 <_fflush_r+0xc>
 8008dba:	89a3      	ldrh	r3, [r4, #12]
 8008dbc:	059b      	lsls	r3, r3, #22
 8008dbe:	d4e1      	bmi.n	8008d84 <_fflush_r+0xc>
 8008dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dc2:	f7fe fb15 	bl	80073f0 <__retarget_lock_release_recursive>
 8008dc6:	e7dd      	b.n	8008d84 <_fflush_r+0xc>

08008dc8 <__swbuf_r>:
 8008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dca:	460e      	mov	r6, r1
 8008dcc:	4614      	mov	r4, r2
 8008dce:	4605      	mov	r5, r0
 8008dd0:	b118      	cbz	r0, 8008dda <__swbuf_r+0x12>
 8008dd2:	6a03      	ldr	r3, [r0, #32]
 8008dd4:	b90b      	cbnz	r3, 8008dda <__swbuf_r+0x12>
 8008dd6:	f7fe fa01 	bl	80071dc <__sinit>
 8008dda:	69a3      	ldr	r3, [r4, #24]
 8008ddc:	60a3      	str	r3, [r4, #8]
 8008dde:	89a3      	ldrh	r3, [r4, #12]
 8008de0:	071a      	lsls	r2, r3, #28
 8008de2:	d525      	bpl.n	8008e30 <__swbuf_r+0x68>
 8008de4:	6923      	ldr	r3, [r4, #16]
 8008de6:	b31b      	cbz	r3, 8008e30 <__swbuf_r+0x68>
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	6922      	ldr	r2, [r4, #16]
 8008dec:	1a98      	subs	r0, r3, r2
 8008dee:	6963      	ldr	r3, [r4, #20]
 8008df0:	b2f6      	uxtb	r6, r6
 8008df2:	4283      	cmp	r3, r0
 8008df4:	4637      	mov	r7, r6
 8008df6:	dc04      	bgt.n	8008e02 <__swbuf_r+0x3a>
 8008df8:	4621      	mov	r1, r4
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f7ff ffbc 	bl	8008d78 <_fflush_r>
 8008e00:	b9e0      	cbnz	r0, 8008e3c <__swbuf_r+0x74>
 8008e02:	68a3      	ldr	r3, [r4, #8]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	60a3      	str	r3, [r4, #8]
 8008e08:	6823      	ldr	r3, [r4, #0]
 8008e0a:	1c5a      	adds	r2, r3, #1
 8008e0c:	6022      	str	r2, [r4, #0]
 8008e0e:	701e      	strb	r6, [r3, #0]
 8008e10:	6962      	ldr	r2, [r4, #20]
 8008e12:	1c43      	adds	r3, r0, #1
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d004      	beq.n	8008e22 <__swbuf_r+0x5a>
 8008e18:	89a3      	ldrh	r3, [r4, #12]
 8008e1a:	07db      	lsls	r3, r3, #31
 8008e1c:	d506      	bpl.n	8008e2c <__swbuf_r+0x64>
 8008e1e:	2e0a      	cmp	r6, #10
 8008e20:	d104      	bne.n	8008e2c <__swbuf_r+0x64>
 8008e22:	4621      	mov	r1, r4
 8008e24:	4628      	mov	r0, r5
 8008e26:	f7ff ffa7 	bl	8008d78 <_fflush_r>
 8008e2a:	b938      	cbnz	r0, 8008e3c <__swbuf_r+0x74>
 8008e2c:	4638      	mov	r0, r7
 8008e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e30:	4621      	mov	r1, r4
 8008e32:	4628      	mov	r0, r5
 8008e34:	f000 f806 	bl	8008e44 <__swsetup_r>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d0d5      	beq.n	8008de8 <__swbuf_r+0x20>
 8008e3c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e40:	e7f4      	b.n	8008e2c <__swbuf_r+0x64>
	...

08008e44 <__swsetup_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	4b2a      	ldr	r3, [pc, #168]	; (8008ef0 <__swsetup_r+0xac>)
 8008e48:	4605      	mov	r5, r0
 8008e4a:	6818      	ldr	r0, [r3, #0]
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	b118      	cbz	r0, 8008e58 <__swsetup_r+0x14>
 8008e50:	6a03      	ldr	r3, [r0, #32]
 8008e52:	b90b      	cbnz	r3, 8008e58 <__swsetup_r+0x14>
 8008e54:	f7fe f9c2 	bl	80071dc <__sinit>
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e5e:	0718      	lsls	r0, r3, #28
 8008e60:	d422      	bmi.n	8008ea8 <__swsetup_r+0x64>
 8008e62:	06d9      	lsls	r1, r3, #27
 8008e64:	d407      	bmi.n	8008e76 <__swsetup_r+0x32>
 8008e66:	2309      	movs	r3, #9
 8008e68:	602b      	str	r3, [r5, #0]
 8008e6a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e6e:	81a3      	strh	r3, [r4, #12]
 8008e70:	f04f 30ff 	mov.w	r0, #4294967295
 8008e74:	e034      	b.n	8008ee0 <__swsetup_r+0x9c>
 8008e76:	0758      	lsls	r0, r3, #29
 8008e78:	d512      	bpl.n	8008ea0 <__swsetup_r+0x5c>
 8008e7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e7c:	b141      	cbz	r1, 8008e90 <__swsetup_r+0x4c>
 8008e7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e82:	4299      	cmp	r1, r3
 8008e84:	d002      	beq.n	8008e8c <__swsetup_r+0x48>
 8008e86:	4628      	mov	r0, r5
 8008e88:	f7ff f930 	bl	80080ec <_free_r>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	6363      	str	r3, [r4, #52]	; 0x34
 8008e90:	89a3      	ldrh	r3, [r4, #12]
 8008e92:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e96:	81a3      	strh	r3, [r4, #12]
 8008e98:	2300      	movs	r3, #0
 8008e9a:	6063      	str	r3, [r4, #4]
 8008e9c:	6923      	ldr	r3, [r4, #16]
 8008e9e:	6023      	str	r3, [r4, #0]
 8008ea0:	89a3      	ldrh	r3, [r4, #12]
 8008ea2:	f043 0308 	orr.w	r3, r3, #8
 8008ea6:	81a3      	strh	r3, [r4, #12]
 8008ea8:	6923      	ldr	r3, [r4, #16]
 8008eaa:	b94b      	cbnz	r3, 8008ec0 <__swsetup_r+0x7c>
 8008eac:	89a3      	ldrh	r3, [r4, #12]
 8008eae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eb6:	d003      	beq.n	8008ec0 <__swsetup_r+0x7c>
 8008eb8:	4621      	mov	r1, r4
 8008eba:	4628      	mov	r0, r5
 8008ebc:	f000 f8c4 	bl	8009048 <__smakebuf_r>
 8008ec0:	89a0      	ldrh	r0, [r4, #12]
 8008ec2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ec6:	f010 0301 	ands.w	r3, r0, #1
 8008eca:	d00a      	beq.n	8008ee2 <__swsetup_r+0x9e>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	60a3      	str	r3, [r4, #8]
 8008ed0:	6963      	ldr	r3, [r4, #20]
 8008ed2:	425b      	negs	r3, r3
 8008ed4:	61a3      	str	r3, [r4, #24]
 8008ed6:	6923      	ldr	r3, [r4, #16]
 8008ed8:	b943      	cbnz	r3, 8008eec <__swsetup_r+0xa8>
 8008eda:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ede:	d1c4      	bne.n	8008e6a <__swsetup_r+0x26>
 8008ee0:	bd38      	pop	{r3, r4, r5, pc}
 8008ee2:	0781      	lsls	r1, r0, #30
 8008ee4:	bf58      	it	pl
 8008ee6:	6963      	ldrpl	r3, [r4, #20]
 8008ee8:	60a3      	str	r3, [r4, #8]
 8008eea:	e7f4      	b.n	8008ed6 <__swsetup_r+0x92>
 8008eec:	2000      	movs	r0, #0
 8008eee:	e7f7      	b.n	8008ee0 <__swsetup_r+0x9c>
 8008ef0:	20000064 	.word	0x20000064

08008ef4 <_sbrk_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4d06      	ldr	r5, [pc, #24]	; (8008f10 <_sbrk_r+0x1c>)
 8008ef8:	2300      	movs	r3, #0
 8008efa:	4604      	mov	r4, r0
 8008efc:	4608      	mov	r0, r1
 8008efe:	602b      	str	r3, [r5, #0]
 8008f00:	f7f8 ff46 	bl	8001d90 <_sbrk>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d102      	bne.n	8008f0e <_sbrk_r+0x1a>
 8008f08:	682b      	ldr	r3, [r5, #0]
 8008f0a:	b103      	cbz	r3, 8008f0e <_sbrk_r+0x1a>
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	2000058c 	.word	0x2000058c

08008f14 <memcpy>:
 8008f14:	440a      	add	r2, r1
 8008f16:	4291      	cmp	r1, r2
 8008f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f1c:	d100      	bne.n	8008f20 <memcpy+0xc>
 8008f1e:	4770      	bx	lr
 8008f20:	b510      	push	{r4, lr}
 8008f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f2a:	4291      	cmp	r1, r2
 8008f2c:	d1f9      	bne.n	8008f22 <memcpy+0xe>
 8008f2e:	bd10      	pop	{r4, pc}

08008f30 <__assert_func>:
 8008f30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f32:	4614      	mov	r4, r2
 8008f34:	461a      	mov	r2, r3
 8008f36:	4b09      	ldr	r3, [pc, #36]	; (8008f5c <__assert_func+0x2c>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4605      	mov	r5, r0
 8008f3c:	68d8      	ldr	r0, [r3, #12]
 8008f3e:	b14c      	cbz	r4, 8008f54 <__assert_func+0x24>
 8008f40:	4b07      	ldr	r3, [pc, #28]	; (8008f60 <__assert_func+0x30>)
 8008f42:	9100      	str	r1, [sp, #0]
 8008f44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f48:	4906      	ldr	r1, [pc, #24]	; (8008f64 <__assert_func+0x34>)
 8008f4a:	462b      	mov	r3, r5
 8008f4c:	f000 f844 	bl	8008fd8 <fiprintf>
 8008f50:	f000 f8d8 	bl	8009104 <abort>
 8008f54:	4b04      	ldr	r3, [pc, #16]	; (8008f68 <__assert_func+0x38>)
 8008f56:	461c      	mov	r4, r3
 8008f58:	e7f3      	b.n	8008f42 <__assert_func+0x12>
 8008f5a:	bf00      	nop
 8008f5c:	20000064 	.word	0x20000064
 8008f60:	0800946f 	.word	0x0800946f
 8008f64:	0800947c 	.word	0x0800947c
 8008f68:	080094aa 	.word	0x080094aa

08008f6c <_calloc_r>:
 8008f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f6e:	fba1 2402 	umull	r2, r4, r1, r2
 8008f72:	b94c      	cbnz	r4, 8008f88 <_calloc_r+0x1c>
 8008f74:	4611      	mov	r1, r2
 8008f76:	9201      	str	r2, [sp, #4]
 8008f78:	f7ff f92c 	bl	80081d4 <_malloc_r>
 8008f7c:	9a01      	ldr	r2, [sp, #4]
 8008f7e:	4605      	mov	r5, r0
 8008f80:	b930      	cbnz	r0, 8008f90 <_calloc_r+0x24>
 8008f82:	4628      	mov	r0, r5
 8008f84:	b003      	add	sp, #12
 8008f86:	bd30      	pop	{r4, r5, pc}
 8008f88:	220c      	movs	r2, #12
 8008f8a:	6002      	str	r2, [r0, #0]
 8008f8c:	2500      	movs	r5, #0
 8008f8e:	e7f8      	b.n	8008f82 <_calloc_r+0x16>
 8008f90:	4621      	mov	r1, r4
 8008f92:	f7fe f9ae 	bl	80072f2 <memset>
 8008f96:	e7f4      	b.n	8008f82 <_calloc_r+0x16>

08008f98 <__ascii_mbtowc>:
 8008f98:	b082      	sub	sp, #8
 8008f9a:	b901      	cbnz	r1, 8008f9e <__ascii_mbtowc+0x6>
 8008f9c:	a901      	add	r1, sp, #4
 8008f9e:	b142      	cbz	r2, 8008fb2 <__ascii_mbtowc+0x1a>
 8008fa0:	b14b      	cbz	r3, 8008fb6 <__ascii_mbtowc+0x1e>
 8008fa2:	7813      	ldrb	r3, [r2, #0]
 8008fa4:	600b      	str	r3, [r1, #0]
 8008fa6:	7812      	ldrb	r2, [r2, #0]
 8008fa8:	1e10      	subs	r0, r2, #0
 8008faa:	bf18      	it	ne
 8008fac:	2001      	movne	r0, #1
 8008fae:	b002      	add	sp, #8
 8008fb0:	4770      	bx	lr
 8008fb2:	4610      	mov	r0, r2
 8008fb4:	e7fb      	b.n	8008fae <__ascii_mbtowc+0x16>
 8008fb6:	f06f 0001 	mvn.w	r0, #1
 8008fba:	e7f8      	b.n	8008fae <__ascii_mbtowc+0x16>

08008fbc <__ascii_wctomb>:
 8008fbc:	b149      	cbz	r1, 8008fd2 <__ascii_wctomb+0x16>
 8008fbe:	2aff      	cmp	r2, #255	; 0xff
 8008fc0:	bf85      	ittet	hi
 8008fc2:	238a      	movhi	r3, #138	; 0x8a
 8008fc4:	6003      	strhi	r3, [r0, #0]
 8008fc6:	700a      	strbls	r2, [r1, #0]
 8008fc8:	f04f 30ff 	movhi.w	r0, #4294967295
 8008fcc:	bf98      	it	ls
 8008fce:	2001      	movls	r0, #1
 8008fd0:	4770      	bx	lr
 8008fd2:	4608      	mov	r0, r1
 8008fd4:	4770      	bx	lr
	...

08008fd8 <fiprintf>:
 8008fd8:	b40e      	push	{r1, r2, r3}
 8008fda:	b503      	push	{r0, r1, lr}
 8008fdc:	4601      	mov	r1, r0
 8008fde:	ab03      	add	r3, sp, #12
 8008fe0:	4805      	ldr	r0, [pc, #20]	; (8008ff8 <fiprintf+0x20>)
 8008fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fe6:	6800      	ldr	r0, [r0, #0]
 8008fe8:	9301      	str	r3, [sp, #4]
 8008fea:	f7ff fd25 	bl	8008a38 <_vfiprintf_r>
 8008fee:	b002      	add	sp, #8
 8008ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ff4:	b003      	add	sp, #12
 8008ff6:	4770      	bx	lr
 8008ff8:	20000064 	.word	0x20000064

08008ffc <__swhatbuf_r>:
 8008ffc:	b570      	push	{r4, r5, r6, lr}
 8008ffe:	460c      	mov	r4, r1
 8009000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009004:	2900      	cmp	r1, #0
 8009006:	b096      	sub	sp, #88	; 0x58
 8009008:	4615      	mov	r5, r2
 800900a:	461e      	mov	r6, r3
 800900c:	da0d      	bge.n	800902a <__swhatbuf_r+0x2e>
 800900e:	89a3      	ldrh	r3, [r4, #12]
 8009010:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009014:	f04f 0100 	mov.w	r1, #0
 8009018:	bf0c      	ite	eq
 800901a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800901e:	2340      	movne	r3, #64	; 0x40
 8009020:	2000      	movs	r0, #0
 8009022:	6031      	str	r1, [r6, #0]
 8009024:	602b      	str	r3, [r5, #0]
 8009026:	b016      	add	sp, #88	; 0x58
 8009028:	bd70      	pop	{r4, r5, r6, pc}
 800902a:	466a      	mov	r2, sp
 800902c:	f000 f848 	bl	80090c0 <_fstat_r>
 8009030:	2800      	cmp	r0, #0
 8009032:	dbec      	blt.n	800900e <__swhatbuf_r+0x12>
 8009034:	9901      	ldr	r1, [sp, #4]
 8009036:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800903a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800903e:	4259      	negs	r1, r3
 8009040:	4159      	adcs	r1, r3
 8009042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009046:	e7eb      	b.n	8009020 <__swhatbuf_r+0x24>

08009048 <__smakebuf_r>:
 8009048:	898b      	ldrh	r3, [r1, #12]
 800904a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800904c:	079d      	lsls	r5, r3, #30
 800904e:	4606      	mov	r6, r0
 8009050:	460c      	mov	r4, r1
 8009052:	d507      	bpl.n	8009064 <__smakebuf_r+0x1c>
 8009054:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009058:	6023      	str	r3, [r4, #0]
 800905a:	6123      	str	r3, [r4, #16]
 800905c:	2301      	movs	r3, #1
 800905e:	6163      	str	r3, [r4, #20]
 8009060:	b002      	add	sp, #8
 8009062:	bd70      	pop	{r4, r5, r6, pc}
 8009064:	ab01      	add	r3, sp, #4
 8009066:	466a      	mov	r2, sp
 8009068:	f7ff ffc8 	bl	8008ffc <__swhatbuf_r>
 800906c:	9900      	ldr	r1, [sp, #0]
 800906e:	4605      	mov	r5, r0
 8009070:	4630      	mov	r0, r6
 8009072:	f7ff f8af 	bl	80081d4 <_malloc_r>
 8009076:	b948      	cbnz	r0, 800908c <__smakebuf_r+0x44>
 8009078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800907c:	059a      	lsls	r2, r3, #22
 800907e:	d4ef      	bmi.n	8009060 <__smakebuf_r+0x18>
 8009080:	f023 0303 	bic.w	r3, r3, #3
 8009084:	f043 0302 	orr.w	r3, r3, #2
 8009088:	81a3      	strh	r3, [r4, #12]
 800908a:	e7e3      	b.n	8009054 <__smakebuf_r+0xc>
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	6020      	str	r0, [r4, #0]
 8009090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009094:	81a3      	strh	r3, [r4, #12]
 8009096:	9b00      	ldr	r3, [sp, #0]
 8009098:	6163      	str	r3, [r4, #20]
 800909a:	9b01      	ldr	r3, [sp, #4]
 800909c:	6120      	str	r0, [r4, #16]
 800909e:	b15b      	cbz	r3, 80090b8 <__smakebuf_r+0x70>
 80090a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090a4:	4630      	mov	r0, r6
 80090a6:	f000 f81d 	bl	80090e4 <_isatty_r>
 80090aa:	b128      	cbz	r0, 80090b8 <__smakebuf_r+0x70>
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	f023 0303 	bic.w	r3, r3, #3
 80090b2:	f043 0301 	orr.w	r3, r3, #1
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	89a3      	ldrh	r3, [r4, #12]
 80090ba:	431d      	orrs	r5, r3
 80090bc:	81a5      	strh	r5, [r4, #12]
 80090be:	e7cf      	b.n	8009060 <__smakebuf_r+0x18>

080090c0 <_fstat_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4d07      	ldr	r5, [pc, #28]	; (80090e0 <_fstat_r+0x20>)
 80090c4:	2300      	movs	r3, #0
 80090c6:	4604      	mov	r4, r0
 80090c8:	4608      	mov	r0, r1
 80090ca:	4611      	mov	r1, r2
 80090cc:	602b      	str	r3, [r5, #0]
 80090ce:	f7f8 fe36 	bl	8001d3e <_fstat>
 80090d2:	1c43      	adds	r3, r0, #1
 80090d4:	d102      	bne.n	80090dc <_fstat_r+0x1c>
 80090d6:	682b      	ldr	r3, [r5, #0]
 80090d8:	b103      	cbz	r3, 80090dc <_fstat_r+0x1c>
 80090da:	6023      	str	r3, [r4, #0]
 80090dc:	bd38      	pop	{r3, r4, r5, pc}
 80090de:	bf00      	nop
 80090e0:	2000058c 	.word	0x2000058c

080090e4 <_isatty_r>:
 80090e4:	b538      	push	{r3, r4, r5, lr}
 80090e6:	4d06      	ldr	r5, [pc, #24]	; (8009100 <_isatty_r+0x1c>)
 80090e8:	2300      	movs	r3, #0
 80090ea:	4604      	mov	r4, r0
 80090ec:	4608      	mov	r0, r1
 80090ee:	602b      	str	r3, [r5, #0]
 80090f0:	f7f8 fe35 	bl	8001d5e <_isatty>
 80090f4:	1c43      	adds	r3, r0, #1
 80090f6:	d102      	bne.n	80090fe <_isatty_r+0x1a>
 80090f8:	682b      	ldr	r3, [r5, #0]
 80090fa:	b103      	cbz	r3, 80090fe <_isatty_r+0x1a>
 80090fc:	6023      	str	r3, [r4, #0]
 80090fe:	bd38      	pop	{r3, r4, r5, pc}
 8009100:	2000058c 	.word	0x2000058c

08009104 <abort>:
 8009104:	b508      	push	{r3, lr}
 8009106:	2006      	movs	r0, #6
 8009108:	f000 f82c 	bl	8009164 <raise>
 800910c:	2001      	movs	r0, #1
 800910e:	f7f8 fde3 	bl	8001cd8 <_exit>

08009112 <_raise_r>:
 8009112:	291f      	cmp	r1, #31
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4604      	mov	r4, r0
 8009118:	460d      	mov	r5, r1
 800911a:	d904      	bls.n	8009126 <_raise_r+0x14>
 800911c:	2316      	movs	r3, #22
 800911e:	6003      	str	r3, [r0, #0]
 8009120:	f04f 30ff 	mov.w	r0, #4294967295
 8009124:	bd38      	pop	{r3, r4, r5, pc}
 8009126:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009128:	b112      	cbz	r2, 8009130 <_raise_r+0x1e>
 800912a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800912e:	b94b      	cbnz	r3, 8009144 <_raise_r+0x32>
 8009130:	4620      	mov	r0, r4
 8009132:	f000 f831 	bl	8009198 <_getpid_r>
 8009136:	462a      	mov	r2, r5
 8009138:	4601      	mov	r1, r0
 800913a:	4620      	mov	r0, r4
 800913c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009140:	f000 b818 	b.w	8009174 <_kill_r>
 8009144:	2b01      	cmp	r3, #1
 8009146:	d00a      	beq.n	800915e <_raise_r+0x4c>
 8009148:	1c59      	adds	r1, r3, #1
 800914a:	d103      	bne.n	8009154 <_raise_r+0x42>
 800914c:	2316      	movs	r3, #22
 800914e:	6003      	str	r3, [r0, #0]
 8009150:	2001      	movs	r0, #1
 8009152:	e7e7      	b.n	8009124 <_raise_r+0x12>
 8009154:	2400      	movs	r4, #0
 8009156:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800915a:	4628      	mov	r0, r5
 800915c:	4798      	blx	r3
 800915e:	2000      	movs	r0, #0
 8009160:	e7e0      	b.n	8009124 <_raise_r+0x12>
	...

08009164 <raise>:
 8009164:	4b02      	ldr	r3, [pc, #8]	; (8009170 <raise+0xc>)
 8009166:	4601      	mov	r1, r0
 8009168:	6818      	ldr	r0, [r3, #0]
 800916a:	f7ff bfd2 	b.w	8009112 <_raise_r>
 800916e:	bf00      	nop
 8009170:	20000064 	.word	0x20000064

08009174 <_kill_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	4d07      	ldr	r5, [pc, #28]	; (8009194 <_kill_r+0x20>)
 8009178:	2300      	movs	r3, #0
 800917a:	4604      	mov	r4, r0
 800917c:	4608      	mov	r0, r1
 800917e:	4611      	mov	r1, r2
 8009180:	602b      	str	r3, [r5, #0]
 8009182:	f7f8 fd99 	bl	8001cb8 <_kill>
 8009186:	1c43      	adds	r3, r0, #1
 8009188:	d102      	bne.n	8009190 <_kill_r+0x1c>
 800918a:	682b      	ldr	r3, [r5, #0]
 800918c:	b103      	cbz	r3, 8009190 <_kill_r+0x1c>
 800918e:	6023      	str	r3, [r4, #0]
 8009190:	bd38      	pop	{r3, r4, r5, pc}
 8009192:	bf00      	nop
 8009194:	2000058c 	.word	0x2000058c

08009198 <_getpid_r>:
 8009198:	f7f8 bd86 	b.w	8001ca8 <_getpid>

0800919c <_init>:
 800919c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919e:	bf00      	nop
 80091a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091a2:	bc08      	pop	{r3}
 80091a4:	469e      	mov	lr, r3
 80091a6:	4770      	bx	lr

080091a8 <_fini>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	bf00      	nop
 80091ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ae:	bc08      	pop	{r3}
 80091b0:	469e      	mov	lr, r3
 80091b2:	4770      	bx	lr
